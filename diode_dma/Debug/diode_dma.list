
diode_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004320  08004320  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08004334  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004334  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e646  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f77  00000000  00000000  0002e67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000305f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f18  00000000  00000000  00031ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb72  00000000  00000000  00046db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852ca  00000000  00000000  0005692a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbbf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db0  00000000  00000000  000dbc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004294 	.word	0x08004294

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004294 	.word	0x08004294

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	2101      	movs	r1, #1
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fcbe 	bl	8001e38 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = 999-((value[0]-96)/4);
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	3b60      	subs	r3, #96	; 0x60
 80004c2:	089a      	lsrs	r2, r3, #2
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4906      	ldr	r1, [pc, #24]	; (80004e4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80004ca:	1a8a      	subs	r2, r1, r2
 80004cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	50000400 	.word	0x50000400
 80004dc:	20000194 	.word	0x20000194
 80004e0:	200000cc 	.word	0x200000cc
 80004e4:	000003e7 	.word	0x000003e7

080004e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <HAL_ADC_ConvCpltCallback+0x30>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	2101      	movs	r1, #1
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 fc9e 	bl	8001e38 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = 999-((value[0]-96)/4);
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <HAL_ADC_ConvCpltCallback+0x34>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3b60      	subs	r3, #96	; 0x60
 8000502:	089a      	lsrs	r2, r3, #2
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_ADC_ConvCpltCallback+0x38>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4906      	ldr	r1, [pc, #24]	; (8000524 <HAL_ADC_ConvCpltCallback+0x3c>)
 800050a:	1a8a      	subs	r2, r1, r2
 800050c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b002      	add	sp, #8
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	50000400 	.word	0x50000400
 800051c:	20000194 	.word	0x20000194
 8000520:	200000cc 	.word	0x200000cc
 8000524:	000003e7 	.word	0x000003e7

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fbb6 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f828 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f9ce 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000538:	f000 f9ae 	bl	8000898 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800053c:	f000 f97c 	bl	8000838 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000540:	f000 f88c 	bl	800065c <MX_ADC_Init>
  MX_TIM3_Init();
 8000544:	f000 f8f8 	bl	8000738 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <main+0x4c>)
 800054a:	2108      	movs	r1, #8
 800054c:	0018      	movs	r0, r3
 800054e:	f002 fcaf 	bl	8002eb0 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <main+0x50>)
 8000554:	2100      	movs	r1, #0
 8000556:	0018      	movs	r0, r3
 8000558:	f000 ffba 	bl	80014d0 <HAL_ADCEx_Calibration_Start>
   HAL_ADC_Start_DMA(&hadc, (uint32_t*)value, 1);
 800055c:	4907      	ldr	r1, [pc, #28]	; (800057c <main+0x54>)
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <main+0x50>)
 8000560:	2201      	movs	r2, #1
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fd7e 	bl	8001064 <HAL_ADC_Start_DMA>
//   HAL_TIM_Base_Start(&htim3);
 htim3.Instance->CCR3 = 999;
 8000568:	4b02      	ldr	r3, [pc, #8]	; (8000574 <main+0x4c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <main+0x58>)
 800056e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x48>
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	200000cc 	.word	0x200000cc
 8000578:	20000028 	.word	0x20000028
 800057c:	20000194 	.word	0x20000194
 8000580:	000003e7 	.word	0x000003e7

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b09f      	sub	sp, #124	; 0x7c
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	2440      	movs	r4, #64	; 0x40
 800058c:	193b      	adds	r3, r7, r4
 800058e:	0018      	movs	r0, r3
 8000590:	2338      	movs	r3, #56	; 0x38
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f003 fe75 	bl	8004284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059a:	232c      	movs	r3, #44	; 0x2c
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	0018      	movs	r0, r3
 80005a0:	2314      	movs	r3, #20
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f003 fe6d 	bl	8004284 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	0018      	movs	r0, r3
 80005ae:	2328      	movs	r3, #40	; 0x28
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f003 fe66 	bl	8004284 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	4b26      	ldr	r3, [pc, #152]	; (8000654 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <SystemClock_Config+0xd4>)
 80005be:	401a      	ands	r2, r3
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xd0>)
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	0109      	lsls	r1, r1, #4
 80005c6:	430a      	orrs	r2, r1
 80005c8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ca:	0021      	movs	r1, r4
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2210      	movs	r2, #16
 80005d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2201      	movs	r2, #1
 80005d6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	22a0      	movs	r2, #160	; 0xa0
 80005e2:	0212      	lsls	r2, r2, #8
 80005e4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 fc40 	bl	8001e74 <HAL_RCC_OscConfig>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005f8:	f000 f9dc 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	212c      	movs	r1, #44	; 0x2c
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	220f      	movs	r2, #15
 8000602:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2100      	movs	r1, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fffb 	bl	800261c <HAL_RCC_ClockConfig>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800062a:	f000 f9c3 	bl	80009b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2202      	movs	r2, #2
 8000632:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fa11 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000646:	f000 f9b5 	bl	80009b4 <Error_Handler>
  }
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b01f      	add	sp, #124	; 0x7c
 8000650:	bd90      	pop	{r4, r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	40007000 	.word	0x40007000
 8000658:	ffffe7ff 	.word	0xffffe7ff

0800065c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	2308      	movs	r3, #8
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f003 fe0a 	bl	8004284 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <MX_ADC_Init+0xd0>)
 8000672:	4a2f      	ldr	r2, [pc, #188]	; (8000730 <MX_ADC_Init+0xd4>)
 8000674:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = ENABLE;
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <MX_ADC_Init+0xd0>)
 8000678:	2201      	movs	r2, #1
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <MX_ADC_Init+0xd0>)
 800067e:	220c      	movs	r2, #12
 8000680:	641a      	str	r2, [r3, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000682:	4b2a      	ldr	r3, [pc, #168]	; (800072c <MX_ADC_Init+0xd0>)
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	645a      	str	r2, [r3, #68]	; 0x44
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <MX_ADC_Init+0xd0>)
 800068a:	2200      	movs	r2, #0
 800068c:	649a      	str	r2, [r3, #72]	; 0x48
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_ADC_Init+0xd0>)
 8000690:	22c0      	movs	r2, #192	; 0xc0
 8000692:	0612      	lsls	r2, r2, #24
 8000694:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <MX_ADC_Init+0xd0>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <MX_ADC_Init+0xd0>)
 800069e:	2207      	movs	r2, #7
 80006a0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_ADC_Init+0xd0>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_ADC_Init+0xd0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_ADC_Init+0xd0>)
 80006b0:	2220      	movs	r2, #32
 80006b2:	2101      	movs	r1, #1
 80006b4:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_ADC_Init+0xd0>)
 80006b8:	2221      	movs	r2, #33	; 0x21
 80006ba:	2100      	movs	r1, #0
 80006bc:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_ADC_Init+0xd0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_ADC_Init+0xd0>)
 80006c6:	22c2      	movs	r2, #194	; 0xc2
 80006c8:	32ff      	adds	r2, #255	; 0xff
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_ADC_Init+0xd0>)
 80006ce:	222c      	movs	r2, #44	; 0x2c
 80006d0:	2101      	movs	r1, #1
 80006d2:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_ADC_Init+0xd0>)
 80006d6:	2204      	movs	r2, #4
 80006d8:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_ADC_Init+0xd0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_ADC_Init+0xd0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_ADC_Init+0xd0>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_ADC_Init+0xd0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_ADC_Init+0xd0>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fb41 	bl	8000d7c <HAL_ADC_Init>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80006fe:	f000 f959 	bl	80009b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000702:	003b      	movs	r3, r7
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <MX_ADC_Init+0xd8>)
 8000706:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000708:	003b      	movs	r3, r7
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	0152      	lsls	r2, r2, #5
 800070e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000710:	003a      	movs	r2, r7
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_ADC_Init+0xd0>)
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fd2e 	bl	8001178 <HAL_ADC_ConfigChannel>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 8000720:	f000 f948 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000028 	.word	0x20000028
 8000730:	40012400 	.word	0x40012400
 8000734:	04000002 	.word	0x04000002

08000738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	2318      	movs	r3, #24
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	0018      	movs	r0, r3
 8000744:	2310      	movs	r3, #16
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f003 fd9b 	bl	8004284 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	2310      	movs	r3, #16
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0018      	movs	r0, r3
 8000754:	2308      	movs	r3, #8
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f003 fd93 	bl	8004284 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075e:	003b      	movs	r3, r7
 8000760:	0018      	movs	r0, r3
 8000762:	2310      	movs	r3, #16
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f003 fd8c 	bl	8004284 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800076c:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_TIM3_Init+0xf4>)
 800076e:	4a30      	ldr	r2, [pc, #192]	; (8000830 <MX_TIM3_Init+0xf8>)
 8000770:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <MX_TIM3_Init+0xf4>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_TIM3_Init+0xf4>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <MX_TIM3_Init+0xf4>)
 8000780:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <MX_TIM3_Init+0xfc>)
 8000782:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_TIM3_Init+0xf4>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_TIM3_Init+0xf4>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_TIM3_Init+0xf4>)
 8000792:	0018      	movs	r0, r3
 8000794:	f002 fb04 	bl	8002da0 <HAL_TIM_Base_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800079c:	f000 f90a 	bl	80009b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	2118      	movs	r1, #24
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0152      	lsls	r2, r2, #5
 80007a8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007aa:	187a      	adds	r2, r7, r1
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_TIM3_Init+0xf4>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fcd5 	bl	8003160 <HAL_TIM_ConfigClockSource>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80007ba:	f000 f8fb 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_TIM3_Init+0xf4>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 fb2d 	bl	8002e20 <HAL_TIM_PWM_Init>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80007ca:	f000 f8f3 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2110      	movs	r1, #16
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007dc:	187a      	adds	r2, r7, r1
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_TIM3_Init+0xf4>)
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f002 ffb0 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80007ec:	f000 f8e2 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f0:	003b      	movs	r3, r7
 80007f2:	2260      	movs	r2, #96	; 0x60
 80007f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007f6:	003b      	movs	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fc:	003b      	movs	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000802:	003b      	movs	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000808:	0039      	movs	r1, r7
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_TIM3_Init+0xf4>)
 800080c:	2208      	movs	r2, #8
 800080e:	0018      	movs	r0, r3
 8000810:	f002 fbe0 	bl	8002fd4 <HAL_TIM_PWM_ConfigChannel>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000818:	f000 f8cc 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <MX_TIM3_Init+0xf4>)
 800081e:	0018      	movs	r0, r3
 8000820:	f000 f966 	bl	8000af0 <HAL_TIM_MspPostInit>

}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b00a      	add	sp, #40	; 0x28
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000cc 	.word	0x200000cc
 8000830:	40000400 	.word	0x40000400
 8000834:	000003e7 	.word	0x000003e7

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <MX_USART2_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000844:	22e1      	movs	r2, #225	; 0xe1
 8000846:	0252      	lsls	r2, r2, #9
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800087c:	0018      	movs	r0, r3
 800087e:	f002 ffc1 	bl	8003804 <HAL_UART_Init>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f895 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000010c 	.word	0x2000010c
 8000894:	40004400 	.word	0x40004400

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_DMA_Init+0x38>)
 80008a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_DMA_Init+0x38>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	430a      	orrs	r2, r1
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_DMA_Init+0x38>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	2201      	movs	r2, #1
 80008b0:	4013      	ands	r3, r2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2009      	movs	r0, #9
 80008bc:	f000 ff52 	bl	8001764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008c0:	2009      	movs	r0, #9
 80008c2:	f000 ff64 	bl	800178e <HAL_NVIC_EnableIRQ>

}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	40021000 	.word	0x40021000

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b08b      	sub	sp, #44	; 0x2c
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	2414      	movs	r4, #20
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	0018      	movs	r0, r3
 80008e0:	2314      	movs	r3, #20
 80008e2:	001a      	movs	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	f003 fccd 	bl	8004284 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b30      	ldr	r3, [pc, #192]	; (80009ac <MX_GPIO_Init+0xd8>)
 80008ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <MX_GPIO_Init+0xd8>)
 80008f0:	2104      	movs	r1, #4
 80008f2:	430a      	orrs	r2, r1
 80008f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <MX_GPIO_Init+0xd8>)
 80008f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fa:	2204      	movs	r2, #4
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <MX_GPIO_Init+0xd8>)
 8000904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <MX_GPIO_Init+0xd8>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	430a      	orrs	r2, r1
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <MX_GPIO_Init+0xd8>)
 8000910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b24      	ldr	r3, [pc, #144]	; (80009ac <MX_GPIO_Init+0xd8>)
 800091c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <MX_GPIO_Init+0xd8>)
 8000920:	2101      	movs	r1, #1
 8000922:	430a      	orrs	r2, r1
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_GPIO_Init+0xd8>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	2201      	movs	r2, #1
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_GPIO_Init+0xd8>)
 8000934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_GPIO_Init+0xd8>)
 8000938:	2102      	movs	r1, #2
 800093a:	430a      	orrs	r2, r1
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_GPIO_Init+0xd8>)
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	2202      	movs	r2, #2
 8000944:	4013      	ands	r3, r2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fa70 	bl	8001e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	0192      	lsls	r2, r2, #6
 800095e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2284      	movs	r2, #132	; 0x84
 8000964:	0392      	lsls	r2, r2, #14
 8000966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096e:	193b      	adds	r3, r7, r4
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <MX_GPIO_Init+0xdc>)
 8000972:	0019      	movs	r1, r3
 8000974:	0010      	movs	r0, r2
 8000976:	f001 f8e1 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800097a:	0021      	movs	r1, r4
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2220      	movs	r2, #32
 8000980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2201      	movs	r2, #1
 8000986:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000994:	187a      	adds	r2, r7, r1
 8000996:	23a0      	movs	r3, #160	; 0xa0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f001 f8cd 	bl	8001b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b00b      	add	sp, #44	; 0x2c
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000
 80009b0:	50000800 	.word	0x50000800

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <HAL_MspInit+0x24>)
 80009c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x24>)
 80009ca:	2101      	movs	r1, #1
 80009cc:	430a      	orrs	r2, r1
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <HAL_MspInit+0x24>)
 80009d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_MspInit+0x24>)
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	0549      	lsls	r1, r1, #21
 80009da:	430a      	orrs	r2, r1
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	240c      	movs	r4, #12
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	0018      	movs	r0, r3
 80009f6:	2314      	movs	r3, #20
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f003 fc42 	bl	8004284 <memset>
  if(hadc->Instance==ADC1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a2a      	ldr	r2, [pc, #168]	; (8000ab0 <HAL_ADC_MspInit+0xc8>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d14d      	bne.n	8000aa6 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	0089      	lsls	r1, r1, #2
 8000a14:	430a      	orrs	r2, r1
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a1e:	2101      	movs	r1, #1
 8000a20:	430a      	orrs	r2, r1
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2202      	movs	r2, #2
 8000a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2203      	movs	r2, #3
 8000a3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	193a      	adds	r2, r7, r4
 8000a44:	23a0      	movs	r3, #160	; 0xa0
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 f876 	bl	8001b3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a52:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a54:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	0052      	lsls	r2, r2, #1
 8000a74:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	00d2      	lsls	r2, r2, #3
 8000a7c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a80:	2220      	movs	r2, #32
 8000a82:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f000 fe9b 	bl	80017c8 <HAL_DMA_Init>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000a96:	f7ff ff8d 	bl	80009b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b009      	add	sp, #36	; 0x24
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	40012400 	.word	0x40012400
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	20000084 	.word	0x20000084
 8000abc:	40020008 	.word	0x40020008

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_TIM_Base_MspInit+0x28>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d105      	bne.n	8000ade <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_TIM_Base_MspInit+0x2c>)
 8000ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_TIM_Base_MspInit+0x2c>)
 8000ad8:	2102      	movs	r1, #2
 8000ada:	430a      	orrs	r2, r1
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	240c      	movs	r4, #12
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	0018      	movs	r0, r3
 8000afe:	2314      	movs	r3, #20
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f003 fbbe 	bl	8004284 <memset>
  if(htim->Instance==TIM3)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <HAL_TIM_MspPostInit+0x70>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d121      	bne.n	8000b56 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_TIM_MspPostInit+0x74>)
 8000b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <HAL_TIM_MspPostInit+0x74>)
 8000b18:	2102      	movs	r1, #2
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_TIM_MspPostInit+0x74>)
 8000b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b22:	2202      	movs	r2, #2
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b2a:	0021      	movs	r1, r4
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2201      	movs	r2, #1
 8000b30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2202      	movs	r2, #2
 8000b36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2202      	movs	r2, #2
 8000b48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_TIM_MspPostInit+0x78>)
 8000b4e:	0019      	movs	r1, r3
 8000b50:	0010      	movs	r0, r2
 8000b52:	f000 fff3 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b009      	add	sp, #36	; 0x24
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	40000400 	.word	0x40000400
 8000b64:	40021000 	.word	0x40021000
 8000b68:	50000400 	.word	0x50000400

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	240c      	movs	r4, #12
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f003 fb80 	bl	8004284 <memset>
  if(huart->Instance==USART2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a18      	ldr	r2, [pc, #96]	; (8000bec <HAL_UART_MspInit+0x80>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d129      	bne.n	8000be2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_UART_MspInit+0x84>)
 8000b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_UART_MspInit+0x84>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	0289      	lsls	r1, r1, #10
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_UART_MspInit+0x84>)
 8000b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <HAL_UART_MspInit+0x84>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_UART_MspInit+0x84>)
 8000baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bac:	2201      	movs	r2, #1
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bb4:	0021      	movs	r1, r4
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	220c      	movs	r2, #12
 8000bba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	187a      	adds	r2, r7, r1
 8000bd6:	23a0      	movs	r3, #160	; 0xa0
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 ffad 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b009      	add	sp, #36	; 0x24
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f894 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <DMA1_Channel1_IRQHandler+0x14>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 feaa 	bl	8001984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000084 	.word	0x20000084

08000c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c4c:	f7ff fff6 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000c76:	f003 fae1 	bl	800423c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fc55 	bl	8000528 <main>

08000c7e <LoopForever>:

LoopForever:
    b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
   ldr   r0, =_estack
 8000c80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c8c:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 8000c90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c94:	2000019c 	.word	0x2000019c

08000c98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_COMP_IRQHandler>
	...

08000c9c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x3c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Init+0x3c>)
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 f811 	bl	8000cdc <HAL_InitTick>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e001      	b.n	8000cca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc6:	f7ff fe7b 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_InitTick+0x5c>)
 8000ce6:	681c      	ldr	r4, [r3, #0]
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_InitTick+0x60>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	0019      	movs	r1, r3
 8000cee:	23fa      	movs	r3, #250	; 0xfa
 8000cf0:	0098      	lsls	r0, r3, #2
 8000cf2:	f7ff fa09 	bl	8000108 <__udivsi3>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f7ff fa04 	bl	8000108 <__udivsi3>
 8000d00:	0003      	movs	r3, r0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 fd53 	bl	80017ae <HAL_SYSTICK_Config>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e00f      	b.n	8000d30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d80b      	bhi.n	8000d2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fd20 	bl	8001764 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_InitTick+0x64>)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b003      	add	sp, #12
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	18d2      	adds	r2, r2, r3
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_IncTick+0x20>)
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000198 	.word	0x20000198

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	20000198 	.word	0x20000198

08000d7c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e159      	b.n	8001042 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10a      	bne.n	8000dac <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2250      	movs	r2, #80	; 0x50
 8000da0:	2100      	movs	r1, #0
 8000da2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff fe1e 	bl	80009e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db0:	2210      	movs	r2, #16
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b10      	cmp	r3, #16
 8000db6:	d005      	beq.n	8000dc4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000dc2:	d00b      	beq.n	8000ddc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc8:	2210      	movs	r2, #16
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2250      	movs	r2, #80	; 0x50
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e132      	b.n	8001042 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de0:	4a9a      	ldr	r2, [pc, #616]	; (800104c <HAL_ADC_Init+0x2d0>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	2202      	movs	r2, #2
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2203      	movs	r2, #3
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d108      	bne.n	8000e0c <HAL_ADC_Init+0x90>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2201      	movs	r2, #1
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d101      	bne.n	8000e0c <HAL_ADC_Init+0x90>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <HAL_ADC_Init+0x92>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d149      	bne.n	8000ea6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	23c0      	movs	r3, #192	; 0xc0
 8000e18:	061b      	lsls	r3, r3, #24
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d00b      	beq.n	8000e36 <HAL_ADC_Init+0xba>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d005      	beq.n	8000e36 <HAL_ADC_Init+0xba>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	061b      	lsls	r3, r3, #24
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d111      	bne.n	8000e5a <HAL_ADC_Init+0xde>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	0892      	lsrs	r2, r2, #2
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6919      	ldr	r1, [r3, #16]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	611a      	str	r2, [r3, #16]
 8000e58:	e014      	b.n	8000e84 <HAL_ADC_Init+0x108>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	0892      	lsrs	r2, r2, #2
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	4b79      	ldr	r3, [pc, #484]	; (8001050 <HAL_ADC_Init+0x2d4>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b78      	ldr	r3, [pc, #480]	; (8001050 <HAL_ADC_Init+0x2d4>)
 8000e70:	4978      	ldr	r1, [pc, #480]	; (8001054 <HAL_ADC_Init+0x2d8>)
 8000e72:	400a      	ands	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	4b76      	ldr	r3, [pc, #472]	; (8001050 <HAL_ADC_Init+0x2d4>)
 8000e78:	6819      	ldr	r1, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4b74      	ldr	r3, [pc, #464]	; (8001050 <HAL_ADC_Init+0x2d4>)
 8000e80:	430a      	orrs	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2118      	movs	r1, #24
 8000e90:	438a      	bics	r2, r1
 8000e92:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68d9      	ldr	r1, [r3, #12]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000ea6:	4b6a      	ldr	r3, [pc, #424]	; (8001050 <HAL_ADC_Init+0x2d4>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b69      	ldr	r3, [pc, #420]	; (8001050 <HAL_ADC_Init+0x2d4>)
 8000eac:	496a      	ldr	r1, [pc, #424]	; (8001058 <HAL_ADC_Init+0x2dc>)
 8000eae:	400a      	ands	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000eb2:	4b67      	ldr	r3, [pc, #412]	; (8001050 <HAL_ADC_Init+0x2d4>)
 8000eb4:	6819      	ldr	r1, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eba:	065a      	lsls	r2, r3, #25
 8000ebc:	4b64      	ldr	r3, [pc, #400]	; (8001050 <HAL_ADC_Init+0x2d4>)
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	055b      	lsls	r3, r3, #21
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d108      	bne.n	8000ee2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	0549      	lsls	r1, r1, #21
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	495b      	ldr	r1, [pc, #364]	; (800105c <HAL_ADC_Init+0x2e0>)
 8000eee:	400a      	ands	r2, r1
 8000ef0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68d9      	ldr	r1, [r3, #12]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d101      	bne.n	8000f08 <HAL_ADC_Init+0x18c>
 8000f04:	2304      	movs	r3, #4
 8000f06:	e000      	b.n	8000f0a <HAL_ADC_Init+0x18e>
 8000f08:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f0a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2020      	movs	r0, #32
 8000f10:	5c1b      	ldrb	r3, [r3, r0]
 8000f12:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f14:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	202c      	movs	r0, #44	; 0x2c
 8000f1a:	5c1b      	ldrb	r3, [r3, r0]
 8000f1c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f1e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f24:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000f2c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f34:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f42:	23c2      	movs	r3, #194	; 0xc2
 8000f44:	33ff      	adds	r3, #255	; 0xff
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d00b      	beq.n	8000f62 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68d9      	ldr	r1, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2221      	movs	r2, #33	; 0x21
 8000f66:	5c9b      	ldrb	r3, [r3, r2]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d11a      	bne.n	8000fa2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2220      	movs	r2, #32
 8000f70:	5c9b      	ldrb	r3, [r3, r2]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d109      	bne.n	8000f8a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	0249      	lsls	r1, r1, #9
 8000f84:	430a      	orrs	r2, r1
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	e00b      	b.n	8000fa2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8e:	2220      	movs	r2, #32
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d11f      	bne.n	8000fea <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	492a      	ldr	r1, [pc, #168]	; (8001060 <HAL_ADC_Init+0x2e4>)
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6919      	ldr	r1, [r3, #16]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000fc8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000fce:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	e00e      	b.n	8001008 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d107      	bne.n	8001008 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2101      	movs	r1, #1
 8001004:	438a      	bics	r2, r1
 8001006:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2107      	movs	r1, #7
 8001014:	438a      	bics	r2, r1
 8001016:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6959      	ldr	r1, [r3, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	430a      	orrs	r2, r1
 8001028:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001034:	2203      	movs	r2, #3
 8001036:	4393      	bics	r3, r2
 8001038:	2201      	movs	r2, #1
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	fffffefd 	.word	0xfffffefd
 8001050:	40012708 	.word	0x40012708
 8001054:	ffc3ffff 	.word	0xffc3ffff
 8001058:	fdffffff 	.word	0xfdffffff
 800105c:	fffe0219 	.word	0xfffe0219
 8001060:	fffffc03 	.word	0xfffffc03

08001064 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001070:	2317      	movs	r3, #23
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2204      	movs	r2, #4
 8001080:	4013      	ands	r3, r2
 8001082:	d15e      	bne.n	8001142 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2250      	movs	r2, #80	; 0x50
 8001088:	5c9b      	ldrb	r3, [r3, r2]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_ADC_Start_DMA+0x2e>
 800108e:	2302      	movs	r3, #2
 8001090:	e05e      	b.n	8001150 <HAL_ADC_Start_DMA+0xec>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2250      	movs	r2, #80	; 0x50
 8001096:	2101      	movs	r1, #1
 8001098:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	430a      	orrs	r2, r1
 80010a8:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d007      	beq.n	80010c2 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80010b2:	2317      	movs	r3, #23
 80010b4:	18fc      	adds	r4, r7, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 f8fd 	bl	80012b8 <ADC_Enable>
 80010be:	0003      	movs	r3, r0
 80010c0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010c2:	2317      	movs	r3, #23
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d13e      	bne.n	800114a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <HAL_ADC_Start_DMA+0xf4>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	0052      	lsls	r2, r2, #1
 80010d8:	431a      	orrs	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2250      	movs	r2, #80	; 0x50
 80010e8:	2100      	movs	r1, #0
 80010ea:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <HAL_ADC_Start_DMA+0xf8>)
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	4a19      	ldr	r2, [pc, #100]	; (8001160 <HAL_ADC_Start_DMA+0xfc>)
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_ADC_Start_DMA+0x100>)
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	221c      	movs	r2, #28
 800110a:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2110      	movs	r1, #16
 8001118:	430a      	orrs	r2, r1
 800111a:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3340      	adds	r3, #64	; 0x40
 8001126:	0019      	movs	r1, r3
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f000 fbc4 	bl	80018b8 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2104      	movs	r1, #4
 800113c:	430a      	orrs	r2, r1
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	e003      	b.n	800114a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001142:	2317      	movs	r3, #23
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	2202      	movs	r2, #2
 8001148:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800114a:	2317      	movs	r3, #23
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	781b      	ldrb	r3, [r3, #0]
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	b007      	add	sp, #28
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	fffff0fe 	.word	0xfffff0fe
 800115c:	08001389 	.word	0x08001389
 8001160:	0800143d 	.word	0x0800143d
 8001164:	0800145b 	.word	0x0800145b

08001168 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2250      	movs	r2, #80	; 0x50
 8001186:	5c9b      	ldrb	r3, [r3, r2]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x18>
 800118c:	2302      	movs	r3, #2
 800118e:	e085      	b.n	800129c <HAL_ADC_ConfigChannel+0x124>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2250      	movs	r2, #80	; 0x50
 8001194:	2101      	movs	r1, #1
 8001196:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2204      	movs	r2, #4
 80011a0:	4013      	ands	r3, r2
 80011a2:	d00b      	beq.n	80011bc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a8:	2220      	movs	r2, #32
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2250      	movs	r2, #80	; 0x50
 80011b4:	2100      	movs	r1, #0
 80011b6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e06f      	b.n	800129c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a38      	ldr	r2, [pc, #224]	; (80012a4 <HAL_ADC_ConfigChannel+0x12c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d035      	beq.n	8001232 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	035b      	lsls	r3, r3, #13
 80011d2:	0b5a      	lsrs	r2, r3, #13
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	430a      	orrs	r2, r1
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	02db      	lsls	r3, r3, #11
 80011e4:	4013      	ands	r3, r2
 80011e6:	d009      	beq.n	80011fc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80011e8:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	0409      	lsls	r1, r1, #16
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80011f6:	200a      	movs	r0, #10
 80011f8:	f000 f94a 	bl	8001490 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4013      	ands	r3, r2
 8001206:	d006      	beq.n	8001216 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	03c9      	lsls	r1, r1, #15
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	025b      	lsls	r3, r3, #9
 800121e:	4013      	ands	r3, r2
 8001220:	d037      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0449      	lsls	r1, r1, #17
 800122c:	430a      	orrs	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e02f      	b.n	8001292 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	035b      	lsls	r3, r3, #13
 800123e:	0b5b      	lsrs	r3, r3, #13
 8001240:	43d9      	mvns	r1, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	400a      	ands	r2, r1
 8001248:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	02db      	lsls	r3, r3, #11
 8001252:	4013      	ands	r3, r2
 8001254:	d005      	beq.n	8001262 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 800125c:	4913      	ldr	r1, [pc, #76]	; (80012ac <HAL_ADC_ConfigChannel+0x134>)
 800125e:	400a      	ands	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	029b      	lsls	r3, r3, #10
 800126a:	4013      	ands	r3, r2
 800126c:	d005      	beq.n	800127a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 8001274:	490e      	ldr	r1, [pc, #56]	; (80012b0 <HAL_ADC_ConfigChannel+0x138>)
 8001276:	400a      	ands	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	025b      	lsls	r3, r3, #9
 8001282:	4013      	ands	r3, r2
 8001284:	d005      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_ADC_ConfigChannel+0x130>)
 800128c:	4909      	ldr	r1, [pc, #36]	; (80012b4 <HAL_ADC_ConfigChannel+0x13c>)
 800128e:	400a      	ands	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2250      	movs	r2, #80	; 0x50
 8001296:	2100      	movs	r1, #0
 8001298:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	00001001 	.word	0x00001001
 80012a8:	40012708 	.word	0x40012708
 80012ac:	ff7fffff 	.word	0xff7fffff
 80012b0:	ffbfffff 	.word	0xffbfffff
 80012b4:	feffffff 	.word	0xfeffffff

080012b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2203      	movs	r2, #3
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d108      	bne.n	80012e4 <ADC_Enable+0x2c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2201      	movs	r2, #1
 80012da:	4013      	ands	r3, r2
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <ADC_Enable+0x2c>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <ADC_Enable+0x2e>
 80012e4:	2300      	movs	r3, #0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d146      	bne.n	8001378 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4a24      	ldr	r2, [pc, #144]	; (8001384 <ADC_Enable+0xcc>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	d00d      	beq.n	8001312 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fa:	2210      	movs	r2, #16
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	2201      	movs	r2, #1
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e033      	b.n	800137a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001322:	2001      	movs	r0, #1
 8001324:	f000 f8b4 	bl	8001490 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001328:	f7ff fd1e 	bl	8000d68 <HAL_GetTick>
 800132c:	0003      	movs	r3, r0
 800132e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001330:	e01b      	b.n	800136a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001332:	f7ff fd19 	bl	8000d68 <HAL_GetTick>
 8001336:	0002      	movs	r2, r0
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b0a      	cmp	r3, #10
 800133e:	d914      	bls.n	800136a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2201      	movs	r2, #1
 8001348:	4013      	ands	r3, r2
 800134a:	2b01      	cmp	r3, #1
 800134c:	d00d      	beq.n	800136a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001352:	2210      	movs	r2, #16
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	2201      	movs	r2, #1
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e007      	b.n	800137a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2201      	movs	r2, #1
 8001372:	4013      	ands	r3, r2
 8001374:	2b01      	cmp	r3, #1
 8001376:	d1dc      	bne.n	8001332 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	80000017 	.word	0x80000017

08001388 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	2250      	movs	r2, #80	; 0x50
 800139c:	4013      	ands	r3, r2
 800139e:	d141      	bne.n	8001424 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	431a      	orrs	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	23c0      	movs	r3, #192	; 0xc0
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4013      	ands	r3, r2
 80013ba:	d12e      	bne.n	800141a <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2220      	movs	r2, #32
 80013c0:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d129      	bne.n	800141a <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2208      	movs	r2, #8
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d122      	bne.n	800141a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2204      	movs	r2, #4
 80013dc:	4013      	ands	r3, r2
 80013de:	d110      	bne.n	8001402 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	210c      	movs	r1, #12
 80013ec:	438a      	bics	r2, r1
 80013ee:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	4a10      	ldr	r2, [pc, #64]	; (8001438 <ADC_DMAConvCplt+0xb0>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	2201      	movs	r2, #1
 80013fa:	431a      	orrs	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
 8001400:	e00b      	b.n	800141a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001406:	2220      	movs	r2, #32
 8001408:	431a      	orrs	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	2201      	movs	r2, #1
 8001414:	431a      	orrs	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff f863 	bl	80004e8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001422:	e005      	b.n	8001430 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	0010      	movs	r0, r2
 800142e:	4798      	blx	r3
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bd80      	pop	{r7, pc}
 8001438:	fffffefe 	.word	0xfffffefe

0800143c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff f82b 	bl	80004a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b004      	add	sp, #16
 8001458:	bd80      	pop	{r7, pc}

0800145a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	431a      	orrs	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	2204      	movs	r2, #4
 800147a:	431a      	orrs	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff fe70 	bl	8001168 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b004      	add	sp, #16
 800148e:	bd80      	pop	{r7, pc}

08001490 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <ADC_DelayMicroSecond+0x38>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	490b      	ldr	r1, [pc, #44]	; (80014cc <ADC_DelayMicroSecond+0x3c>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f7fe fe32 	bl	8000108 <__udivsi3>
 80014a4:	0003      	movs	r3, r0
 80014a6:	001a      	movs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4353      	muls	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80014ae:	e002      	b.n	80014b6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f9      	bne.n	80014b0 <ADC_DelayMicroSecond+0x20>
  }
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b004      	add	sp, #16
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	20000000 	.word	0x20000000
 80014cc:	000f4240 	.word	0x000f4240

080014d0 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014da:	2317      	movs	r3, #23
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2250      	movs	r2, #80	; 0x50
 80014ee:	5c9b      	ldrb	r3, [r3, r2]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_ADCEx_Calibration_Start+0x28>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e083      	b.n	8001600 <HAL_ADCEx_Calibration_Start+0x130>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2250      	movs	r2, #80	; 0x50
 80014fc:	2101      	movs	r1, #1
 80014fe:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2203      	movs	r2, #3
 8001508:	4013      	ands	r3, r2
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_ADCEx_Calibration_Start+0x50>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	4013      	ands	r3, r2
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_ADCEx_Calibration_Start+0x50>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_ADCEx_Calibration_Start+0x52>
 8001520:	2300      	movs	r3, #0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d15b      	bne.n	80015de <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152a:	4a37      	ldr	r2, [pc, #220]	; (8001608 <HAL_ADCEx_Calibration_Start+0x138>)
 800152c:	4013      	ands	r3, r2
 800152e:	2202      	movs	r2, #2
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2203      	movs	r2, #3
 800153e:	4013      	ands	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2103      	movs	r1, #3
 800154e:	438a      	bics	r2, r1
 8001550:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	0609      	lsls	r1, r1, #24
 8001560:	430a      	orrs	r2, r1
 8001562:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8001564:	f7ff fc00 	bl	8000d68 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800156c:	e01d      	b.n	80015aa <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800156e:	f7ff fbfb 	bl	8000d68 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b0a      	cmp	r3, #10
 800157a:	d916      	bls.n	80015aa <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	0fdb      	lsrs	r3, r3, #31
 8001584:	07da      	lsls	r2, r3, #31
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	429a      	cmp	r2, r3
 800158c:	d10d      	bne.n	80015aa <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001592:	2212      	movs	r2, #18
 8001594:	4393      	bics	r3, r2
 8001596:	2210      	movs	r2, #16
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2250      	movs	r2, #80	; 0x50
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e02a      	b.n	8001600 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	0fdb      	lsrs	r3, r3, #31
 80015b2:	07da      	lsls	r2, r3, #31
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	061b      	lsls	r3, r3, #24
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d0d8      	beq.n	800156e <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68d9      	ldr	r1, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d0:	2203      	movs	r2, #3
 80015d2:	4393      	bics	r3, r2
 80015d4:	2201      	movs	r2, #1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
 80015dc:	e009      	b.n	80015f2 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e2:	2220      	movs	r2, #32
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015ea:	2317      	movs	r3, #23
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2250      	movs	r2, #80	; 0x50
 80015f6:	2100      	movs	r1, #0
 80015f8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80015fa:	2317      	movs	r3, #23
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	781b      	ldrb	r3, [r3, #0]
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b006      	add	sp, #24
 8001606:	bd80      	pop	{r7, pc}
 8001608:	fffffefd 	.word	0xfffffefd

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	0002      	movs	r2, r0
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001618:	1dfb      	adds	r3, r7, #7
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b7f      	cmp	r3, #127	; 0x7f
 800161e:	d809      	bhi.n	8001634 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	001a      	movs	r2, r3
 8001626:	231f      	movs	r3, #31
 8001628:	401a      	ands	r2, r3
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_EnableIRQ+0x30>)
 800162c:	2101      	movs	r1, #1
 800162e:	4091      	lsls	r1, r2
 8001630:	000a      	movs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
  }
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	0002      	movs	r2, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b7f      	cmp	r3, #127	; 0x7f
 8001654:	d828      	bhi.n	80016a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001656:	4a2f      	ldr	r2, [pc, #188]	; (8001714 <__NVIC_SetPriority+0xd4>)
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b25b      	sxtb	r3, r3
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	33c0      	adds	r3, #192	; 0xc0
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	589b      	ldr	r3, [r3, r2]
 8001666:	1dfa      	adds	r2, r7, #7
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	0011      	movs	r1, r2
 800166c:	2203      	movs	r2, #3
 800166e:	400a      	ands	r2, r1
 8001670:	00d2      	lsls	r2, r2, #3
 8001672:	21ff      	movs	r1, #255	; 0xff
 8001674:	4091      	lsls	r1, r2
 8001676:	000a      	movs	r2, r1
 8001678:	43d2      	mvns	r2, r2
 800167a:	401a      	ands	r2, r3
 800167c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	22ff      	movs	r2, #255	; 0xff
 8001684:	401a      	ands	r2, r3
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	0018      	movs	r0, r3
 800168c:	2303      	movs	r3, #3
 800168e:	4003      	ands	r3, r0
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001694:	481f      	ldr	r0, [pc, #124]	; (8001714 <__NVIC_SetPriority+0xd4>)
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b25b      	sxtb	r3, r3
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	430a      	orrs	r2, r1
 80016a0:	33c0      	adds	r3, #192	; 0xc0
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016a6:	e031      	b.n	800170c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <__NVIC_SetPriority+0xd8>)
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	0019      	movs	r1, r3
 80016b0:	230f      	movs	r3, #15
 80016b2:	400b      	ands	r3, r1
 80016b4:	3b08      	subs	r3, #8
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3306      	adds	r3, #6
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	18d3      	adds	r3, r2, r3
 80016be:	3304      	adds	r3, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	1dfa      	adds	r2, r7, #7
 80016c4:	7812      	ldrb	r2, [r2, #0]
 80016c6:	0011      	movs	r1, r2
 80016c8:	2203      	movs	r2, #3
 80016ca:	400a      	ands	r2, r1
 80016cc:	00d2      	lsls	r2, r2, #3
 80016ce:	21ff      	movs	r1, #255	; 0xff
 80016d0:	4091      	lsls	r1, r2
 80016d2:	000a      	movs	r2, r1
 80016d4:	43d2      	mvns	r2, r2
 80016d6:	401a      	ands	r2, r3
 80016d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	019b      	lsls	r3, r3, #6
 80016de:	22ff      	movs	r2, #255	; 0xff
 80016e0:	401a      	ands	r2, r3
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	0018      	movs	r0, r3
 80016e8:	2303      	movs	r3, #3
 80016ea:	4003      	ands	r3, r0
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <__NVIC_SetPriority+0xd8>)
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	001c      	movs	r4, r3
 80016f8:	230f      	movs	r3, #15
 80016fa:	4023      	ands	r3, r4
 80016fc:	3b08      	subs	r3, #8
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	430a      	orrs	r2, r1
 8001702:	3306      	adds	r3, #6
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	18c3      	adds	r3, r0, r3
 8001708:	3304      	adds	r3, #4
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b003      	add	sp, #12
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	1e5a      	subs	r2, r3, #1
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	045b      	lsls	r3, r3, #17
 800172c:	429a      	cmp	r2, r3
 800172e:	d301      	bcc.n	8001734 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001730:	2301      	movs	r3, #1
 8001732:	e010      	b.n	8001756 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <SysTick_Config+0x44>)
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	3a01      	subs	r2, #1
 800173a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173c:	2301      	movs	r3, #1
 800173e:	425b      	negs	r3, r3
 8001740:	2103      	movs	r1, #3
 8001742:	0018      	movs	r0, r3
 8001744:	f7ff ff7c 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x44>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x44>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	210f      	movs	r1, #15
 8001770:	187b      	adds	r3, r7, r1
 8001772:	1c02      	adds	r2, r0, #0
 8001774:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	187b      	adds	r3, r7, r1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	0011      	movs	r1, r2
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <__NVIC_SetPriority>
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	0002      	movs	r2, r0
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff ff33 	bl	800160c <__NVIC_EnableIRQ>
}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff ffaf 	bl	800171c <SysTick_Config>
 80017be:	0003      	movs	r3, r0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e061      	b.n	800189e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_DMA_Init+0xe0>)
 80017e0:	4694      	mov	ip, r2
 80017e2:	4463      	add	r3, ip
 80017e4:	2114      	movs	r1, #20
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7fe fc8e 	bl	8000108 <__udivsi3>
 80017ec:	0003      	movs	r3, r0
 80017ee:	009a      	lsls	r2, r3, #2
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a2d      	ldr	r2, [pc, #180]	; (80018ac <HAL_DMA_Init+0xe4>)
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2225      	movs	r2, #37	; 0x25
 80017fe:	2102      	movs	r1, #2
 8001800:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <HAL_DMA_Init+0xe8>)
 800180e:	4013      	ands	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800181a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	01db      	lsls	r3, r3, #7
 8001850:	429a      	cmp	r2, r3
 8001852:	d018      	beq.n	8001886 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_DMA_Init+0xec>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	211c      	movs	r1, #28
 800185e:	400b      	ands	r3, r1
 8001860:	210f      	movs	r1, #15
 8001862:	4099      	lsls	r1, r3
 8001864:	000b      	movs	r3, r1
 8001866:	43d9      	mvns	r1, r3
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_DMA_Init+0xec>)
 800186a:	400a      	ands	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_DMA_Init+0xec>)
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	201c      	movs	r0, #28
 800187c:	4003      	ands	r3, r0
 800187e:	409a      	lsls	r2, r3
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_DMA_Init+0xec>)
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2225      	movs	r2, #37	; 0x25
 8001890:	2101      	movs	r1, #1
 8001892:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2224      	movs	r2, #36	; 0x24
 8001898:	2100      	movs	r1, #0
 800189a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b004      	add	sp, #16
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	bffdfff8 	.word	0xbffdfff8
 80018ac:	40020000 	.word	0x40020000
 80018b0:	ffff800f 	.word	0xffff800f
 80018b4:	400200a8 	.word	0x400200a8

080018b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018c6:	2317      	movs	r3, #23
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2224      	movs	r2, #36	; 0x24
 80018d2:	5c9b      	ldrb	r3, [r3, r2]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_DMA_Start_IT+0x24>
 80018d8:	2302      	movs	r3, #2
 80018da:	e04f      	b.n	800197c <HAL_DMA_Start_IT+0xc4>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2224      	movs	r2, #36	; 0x24
 80018e0:	2101      	movs	r1, #1
 80018e2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2225      	movs	r2, #37	; 0x25
 80018e8:	5c9b      	ldrb	r3, [r3, r2]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d13a      	bne.n	8001966 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2225      	movs	r2, #37	; 0x25
 80018f4:	2102      	movs	r1, #2
 80018f6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2101      	movs	r1, #1
 800190a:	438a      	bics	r2, r1
 800190c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f8e3 	bl	8001ae0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	210e      	movs	r1, #14
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e00f      	b.n	8001954 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2104      	movs	r1, #4
 8001940:	438a      	bics	r2, r1
 8001942:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	210a      	movs	r1, #10
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2101      	movs	r1, #1
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e007      	b.n	8001976 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2224      	movs	r2, #36	; 0x24
 800196a:	2100      	movs	r1, #0
 800196c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800196e:	2317      	movs	r3, #23
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001976:	2317      	movs	r3, #23
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	781b      	ldrb	r3, [r3, #0]
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b006      	add	sp, #24
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	221c      	movs	r2, #28
 80019a2:	4013      	ands	r3, r2
 80019a4:	2204      	movs	r2, #4
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	d026      	beq.n	80019fe <HAL_DMA_IRQHandler+0x7a>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2204      	movs	r2, #4
 80019b4:	4013      	ands	r3, r2
 80019b6:	d022      	beq.n	80019fe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2220      	movs	r2, #32
 80019c0:	4013      	ands	r3, r2
 80019c2:	d107      	bne.n	80019d4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2104      	movs	r1, #4
 80019d0:	438a      	bics	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	221c      	movs	r2, #28
 80019da:	401a      	ands	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	2104      	movs	r1, #4
 80019e2:	4091      	lsls	r1, r2
 80019e4:	000a      	movs	r2, r1
 80019e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d100      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x6e>
 80019f0:	e071      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	0010      	movs	r0, r2
 80019fa:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80019fc:	e06b      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	221c      	movs	r2, #28
 8001a04:	4013      	ands	r3, r2
 8001a06:	2202      	movs	r2, #2
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	0013      	movs	r3, r2
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d02d      	beq.n	8001a6e <HAL_DMA_IRQHandler+0xea>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d029      	beq.n	8001a6e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2220      	movs	r2, #32
 8001a22:	4013      	ands	r3, r2
 8001a24:	d10b      	bne.n	8001a3e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	210a      	movs	r1, #10
 8001a32:	438a      	bics	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2225      	movs	r2, #37	; 0x25
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	221c      	movs	r2, #28
 8001a44:	401a      	ands	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4091      	lsls	r1, r2
 8001a4e:	000a      	movs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2224      	movs	r2, #36	; 0x24
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d039      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	0010      	movs	r0, r2
 8001a6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a6c:	e033      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	221c      	movs	r2, #28
 8001a74:	4013      	ands	r3, r2
 8001a76:	2208      	movs	r2, #8
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d02a      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x154>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2208      	movs	r2, #8
 8001a86:	4013      	ands	r3, r2
 8001a88:	d026      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	210e      	movs	r1, #14
 8001a96:	438a      	bics	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	221c      	movs	r2, #28
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4091      	lsls	r1, r2
 8001aaa:	000a      	movs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2225      	movs	r2, #37	; 0x25
 8001ab8:	2101      	movs	r1, #1
 8001aba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	0010      	movs	r0, r2
 8001ad4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46c0      	nop			; (mov r8, r8)
}
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b004      	add	sp, #16
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	221c      	movs	r2, #28
 8001af4:	401a      	ands	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2101      	movs	r1, #1
 8001afc:	4091      	lsls	r1, r2
 8001afe:	000a      	movs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d108      	bne.n	8001b24 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b22:	e007      	b.n	8001b34 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	60da      	str	r2, [r3, #12]
}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b004      	add	sp, #16
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b52:	e155      	b.n	8001e00 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4091      	lsls	r1, r2
 8001b5e:	000a      	movs	r2, r1
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d100      	bne.n	8001b6c <HAL_GPIO_Init+0x30>
 8001b6a:	e146      	b.n	8001dfa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2203      	movs	r2, #3
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d005      	beq.n	8001b84 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d130      	bne.n	8001be6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	409a      	lsls	r2, r3
 8001b92:	0013      	movs	r3, r2
 8001b94:	43da      	mvns	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	0013      	movs	r3, r2
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	0013      	movs	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2203      	movs	r2, #3
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d017      	beq.n	8001c22 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	0013      	movs	r3, r2
 8001c02:	43da      	mvns	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	409a      	lsls	r2, r3
 8001c14:	0013      	movs	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2203      	movs	r2, #3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d123      	bne.n	8001c76 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	0092      	lsls	r2, r2, #2
 8001c38:	58d3      	ldr	r3, [r2, r3]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2207      	movs	r2, #7
 8001c40:	4013      	ands	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	409a      	lsls	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2107      	movs	r1, #7
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	6939      	ldr	r1, [r7, #16]
 8001c74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	409a      	lsls	r2, r3
 8001c84:	0013      	movs	r3, r2
 8001c86:	43da      	mvns	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2203      	movs	r2, #3
 8001c94:	401a      	ands	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	0013      	movs	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	23c0      	movs	r3, #192	; 0xc0
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d100      	bne.n	8001cb8 <HAL_GPIO_Init+0x17c>
 8001cb6:	e0a0      	b.n	8001dfa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb8:	4b57      	ldr	r3, [pc, #348]	; (8001e18 <HAL_GPIO_Init+0x2dc>)
 8001cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cbc:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <HAL_GPIO_Init+0x2dc>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc4:	4a55      	ldr	r2, [pc, #340]	; (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	589b      	ldr	r3, [r3, r2]
 8001cd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	23a0      	movs	r3, #160	; 0xa0
 8001cec:	05db      	lsls	r3, r3, #23
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d01f      	beq.n	8001d32 <HAL_GPIO_Init+0x1f6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4a      	ldr	r2, [pc, #296]	; (8001e20 <HAL_GPIO_Init+0x2e4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d019      	beq.n	8001d2e <HAL_GPIO_Init+0x1f2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x1ea>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x1e6>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a46      	ldr	r2, [pc, #280]	; (8001e30 <HAL_GPIO_Init+0x2f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x1e2>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e00a      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d1e:	2306      	movs	r3, #6
 8001d20:	e008      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d26:	2303      	movs	r3, #3
 8001d28:	e004      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d32:	2300      	movs	r3, #0
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	2103      	movs	r1, #3
 8001d38:	400a      	ands	r2, r1
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	4093      	lsls	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d44:	4935      	ldr	r1, [pc, #212]	; (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	035b      	lsls	r3, r3, #13
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43da      	mvns	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	039b      	lsls	r3, r3, #14
 8001d94:	4013      	ands	r3, r2
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43da      	mvns	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	025b      	lsls	r3, r3, #9
 8001de8:	4013      	ands	r3, r2
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	40da      	lsrs	r2, r3
 8001e08:	1e13      	subs	r3, r2, #0
 8001e0a:	d000      	beq.n	8001e0e <HAL_GPIO_Init+0x2d2>
 8001e0c:	e6a2      	b.n	8001b54 <HAL_GPIO_Init+0x18>
  }
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b006      	add	sp, #24
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	50000400 	.word	0x50000400
 8001e24:	50000800 	.word	0x50000800
 8001e28:	50000c00 	.word	0x50000c00
 8001e2c:	50001000 	.word	0x50001000
 8001e30:	50001c00 	.word	0x50001c00
 8001e34:	40010400 	.word	0x40010400

08001e38 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	0008      	movs	r0, r1
 8001e42:	0011      	movs	r1, r2
 8001e44:	1cbb      	adds	r3, r7, #2
 8001e46:	1c02      	adds	r2, r0, #0
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	1c7b      	adds	r3, r7, #1
 8001e4c:	1c0a      	adds	r2, r1, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e50:	1c7b      	adds	r3, r7, #1
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e58:	1cbb      	adds	r3, r7, #2
 8001e5a:	881a      	ldrh	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e62:	1cbb      	adds	r3, r7, #2
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b5b0      	push	{r4, r5, r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f000 fbbf 	bl	8002606 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e88:	4bc9      	ldr	r3, [pc, #804]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	220c      	movs	r2, #12
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e92:	4bc7      	ldr	r3, [pc, #796]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	025b      	lsls	r3, r3, #9
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d100      	bne.n	8001eaa <HAL_RCC_OscConfig+0x36>
 8001ea8:	e07e      	b.n	8001fa8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d007      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x68>
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	025b      	lsls	r3, r3, #9
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d10d      	bne.n	8001edc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec0:	4bbb      	ldr	r3, [pc, #748]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	029b      	lsls	r3, r3, #10
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d100      	bne.n	8001ece <HAL_RCC_OscConfig+0x5a>
 8001ecc:	e06b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x132>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d167      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f000 fb95 	bl	8002606 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	025b      	lsls	r3, r3, #9
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x84>
 8001ee8:	4bb1      	ldr	r3, [pc, #708]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4bb0      	ldr	r3, [pc, #704]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	0249      	lsls	r1, r1, #9
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e027      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	23a0      	movs	r3, #160	; 0xa0
 8001efe:	02db      	lsls	r3, r3, #11
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d10e      	bne.n	8001f22 <HAL_RCC_OscConfig+0xae>
 8001f04:	4baa      	ldr	r3, [pc, #680]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4ba9      	ldr	r3, [pc, #676]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	02c9      	lsls	r1, r1, #11
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	4ba7      	ldr	r3, [pc, #668]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4ba6      	ldr	r3, [pc, #664]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	0249      	lsls	r1, r1, #9
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e012      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001f22:	4ba3      	ldr	r3, [pc, #652]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4ba2      	ldr	r3, [pc, #648]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f28:	49a2      	ldr	r1, [pc, #648]	; (80021b4 <HAL_RCC_OscConfig+0x340>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	4ba0      	ldr	r3, [pc, #640]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	025b      	lsls	r3, r3, #9
 8001f36:	4013      	ands	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4b9c      	ldr	r3, [pc, #624]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b9b      	ldr	r3, [pc, #620]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f42:	499d      	ldr	r1, [pc, #628]	; (80021b8 <HAL_RCC_OscConfig+0x344>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d015      	beq.n	8001f7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7fe ff0a 	bl	8000d68 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f58:	e009      	b.n	8001f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5a:	f7fe ff05 	bl	8000d68 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d902      	bls.n	8001f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f000 fb4c 	bl	8002606 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f6e:	4b90      	ldr	r3, [pc, #576]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	029b      	lsls	r3, r3, #10
 8001f76:	4013      	ands	r3, r2
 8001f78:	d0ef      	beq.n	8001f5a <HAL_RCC_OscConfig+0xe6>
 8001f7a:	e015      	b.n	8001fa8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fef4 	bl	8000d68 <HAL_GetTick>
 8001f80:	0003      	movs	r3, r0
 8001f82:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f86:	f7fe feef 	bl	8000d68 <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b64      	cmp	r3, #100	; 0x64
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e336      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f98:	4b85      	ldr	r3, [pc, #532]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x112>
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2202      	movs	r2, #2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d100      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x140>
 8001fb2:	e099      	b.n	80020e8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001fc2:	4b7b      	ldr	r3, [pc, #492]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b7a      	ldr	r3, [pc, #488]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001fc8:	2120      	movs	r1, #32
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d13e      	bne.n	8002060 <HAL_RCC_OscConfig+0x1ec>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d13b      	bne.n	8002060 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001fe8:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2204      	movs	r2, #4
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d004      	beq.n	8001ffc <HAL_RCC_OscConfig+0x188>
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e304      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x348>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	021a      	lsls	r2, r3, #8
 800200c:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002012:	4b67      	ldr	r3, [pc, #412]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2209      	movs	r2, #9
 8002018:	4393      	bics	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	4b64      	ldr	r3, [pc, #400]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 800201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002024:	f000 fc42 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8002028:	0001      	movs	r1, r0
 800202a:	4b61      	ldr	r3, [pc, #388]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	220f      	movs	r2, #15
 8002032:	4013      	ands	r3, r2
 8002034:	4a62      	ldr	r2, [pc, #392]	; (80021c0 <HAL_RCC_OscConfig+0x34c>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	000a      	movs	r2, r1
 800203a:	40da      	lsrs	r2, r3
 800203c:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <HAL_RCC_OscConfig+0x350>)
 800203e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002040:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <HAL_RCC_OscConfig+0x354>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2513      	movs	r5, #19
 8002046:	197c      	adds	r4, r7, r5
 8002048:	0018      	movs	r0, r3
 800204a:	f7fe fe47 	bl	8000cdc <HAL_InitTick>
 800204e:	0003      	movs	r3, r0
 8002050:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002052:	197b      	adds	r3, r7, r5
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d046      	beq.n	80020e8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800205a:	197b      	adds	r3, r7, r5
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	e2d2      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d027      	beq.n	80020b6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002066:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2209      	movs	r2, #9
 800206c:	4393      	bics	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7fe fe76 	bl	8000d68 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002082:	f7fe fe71 	bl	8000d68 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e2b8      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002094:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2204      	movs	r2, #4
 800209a:	4013      	ands	r3, r2
 800209c:	d0f1      	beq.n	8002082 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a46      	ldr	r2, [pc, #280]	; (80021bc <HAL_RCC_OscConfig+0x348>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	021a      	lsls	r2, r3, #8
 80020ae:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	e018      	b.n	80020e8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b6:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 80020bc:	2101      	movs	r1, #1
 80020be:	438a      	bics	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7fe fe51 	bl	8000d68 <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020cc:	f7fe fe4c 	bl	8000d68 <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e293      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2204      	movs	r2, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	d1f1      	bne.n	80020cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2210      	movs	r2, #16
 80020ee:	4013      	ands	r3, r2
 80020f0:	d100      	bne.n	80020f4 <HAL_RCC_OscConfig+0x280>
 80020f2:	e0a2      	b.n	800223a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d140      	bne.n	800217c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4013      	ands	r3, r2
 8002104:	d005      	beq.n	8002112 <HAL_RCC_OscConfig+0x29e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e279      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002112:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a2d      	ldr	r2, [pc, #180]	; (80021cc <HAL_RCC_OscConfig+0x358>)
 8002118:	4013      	ands	r3, r2
 800211a:	0019      	movs	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	0a19      	lsrs	r1, r3, #8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	061a      	lsls	r2, r3, #24
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	0b5b      	lsrs	r3, r3, #13
 8002140:	3301      	adds	r3, #1
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	0212      	lsls	r2, r2, #8
 8002146:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	210f      	movs	r1, #15
 8002150:	400b      	ands	r3, r1
 8002152:	491b      	ldr	r1, [pc, #108]	; (80021c0 <HAL_RCC_OscConfig+0x34c>)
 8002154:	5ccb      	ldrb	r3, [r1, r3]
 8002156:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCC_OscConfig+0x350>)
 800215a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <HAL_RCC_OscConfig+0x354>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2513      	movs	r5, #19
 8002162:	197c      	adds	r4, r7, r5
 8002164:	0018      	movs	r0, r3
 8002166:	f7fe fdb9 	bl	8000cdc <HAL_InitTick>
 800216a:	0003      	movs	r3, r0
 800216c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800216e:	197b      	adds	r3, r7, r5
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d061      	beq.n	800223a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002176:	197b      	adds	r3, r7, r5
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	e244      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d040      	beq.n	8002206 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	0049      	lsls	r1, r1, #1
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7fe fde9 	bl	8000d68 <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800219a:	e019      	b.n	80021d0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800219c:	f7fe fde4 	bl	8000d68 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d912      	bls.n	80021d0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e22b      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	40021000 	.word	0x40021000
 80021b4:	fffeffff 	.word	0xfffeffff
 80021b8:	fffbffff 	.word	0xfffbffff
 80021bc:	ffffe0ff 	.word	0xffffe0ff
 80021c0:	080042ac 	.word	0x080042ac
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000004 	.word	0x20000004
 80021cc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021d0:	4bca      	ldr	r3, [pc, #808]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d0df      	beq.n	800219c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021dc:	4bc7      	ldr	r3, [pc, #796]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4ac7      	ldr	r2, [pc, #796]	; (8002500 <HAL_RCC_OscConfig+0x68c>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ea:	4bc4      	ldr	r3, [pc, #784]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80021ec:	430a      	orrs	r2, r1
 80021ee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f0:	4bc2      	ldr	r3, [pc, #776]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	0a19      	lsrs	r1, r3, #8
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	061a      	lsls	r2, r3, #24
 80021fe:	4bbf      	ldr	r3, [pc, #764]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002200:	430a      	orrs	r2, r1
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	e019      	b.n	800223a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002206:	4bbd      	ldr	r3, [pc, #756]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4bbc      	ldr	r3, [pc, #752]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 800220c:	49bd      	ldr	r1, [pc, #756]	; (8002504 <HAL_RCC_OscConfig+0x690>)
 800220e:	400a      	ands	r2, r1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fda9 	bl	8000d68 <HAL_GetTick>
 8002216:	0003      	movs	r3, r0
 8002218:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221c:	f7fe fda4 	bl	8000d68 <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1eb      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800222e:	4bb3      	ldr	r3, [pc, #716]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4013      	ands	r3, r2
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2208      	movs	r2, #8
 8002240:	4013      	ands	r3, r2
 8002242:	d036      	beq.n	80022b2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d019      	beq.n	8002280 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224c:	4bab      	ldr	r3, [pc, #684]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 800224e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002250:	4baa      	ldr	r3, [pc, #680]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002252:	2101      	movs	r1, #1
 8002254:	430a      	orrs	r2, r1
 8002256:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7fe fd86 	bl	8000d68 <HAL_GetTick>
 800225c:	0003      	movs	r3, r0
 800225e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002262:	f7fe fd81 	bl	8000d68 <HAL_GetTick>
 8002266:	0002      	movs	r2, r0
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e1c8      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002274:	4ba1      	ldr	r3, [pc, #644]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002278:	2202      	movs	r2, #2
 800227a:	4013      	ands	r3, r2
 800227c:	d0f1      	beq.n	8002262 <HAL_RCC_OscConfig+0x3ee>
 800227e:	e018      	b.n	80022b2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	4b9e      	ldr	r3, [pc, #632]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002284:	4b9d      	ldr	r3, [pc, #628]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002286:	2101      	movs	r1, #1
 8002288:	438a      	bics	r2, r1
 800228a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7fe fd6c 	bl	8000d68 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002296:	f7fe fd67 	bl	8000d68 <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1ae      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022a8:	4b94      	ldr	r3, [pc, #592]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80022aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d1f1      	bne.n	8002296 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2204      	movs	r2, #4
 80022b8:	4013      	ands	r3, r2
 80022ba:	d100      	bne.n	80022be <HAL_RCC_OscConfig+0x44a>
 80022bc:	e0ae      	b.n	800241c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2023      	movs	r0, #35	; 0x23
 80022c0:	183b      	adds	r3, r7, r0
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c6:	4b8d      	ldr	r3, [pc, #564]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80022c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	055b      	lsls	r3, r3, #21
 80022ce:	4013      	ands	r3, r2
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b8a      	ldr	r3, [pc, #552]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80022d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d6:	4b89      	ldr	r3, [pc, #548]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0549      	lsls	r1, r1, #21
 80022dc:	430a      	orrs	r2, r1
 80022de:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022e0:	183b      	adds	r3, r7, r0
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b88      	ldr	r3, [pc, #544]	; (8002508 <HAL_RCC_OscConfig+0x694>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4013      	ands	r3, r2
 80022f0:	d11a      	bne.n	8002328 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b85      	ldr	r3, [pc, #532]	; (8002508 <HAL_RCC_OscConfig+0x694>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b84      	ldr	r3, [pc, #528]	; (8002508 <HAL_RCC_OscConfig+0x694>)
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	0049      	lsls	r1, r1, #1
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002300:	f7fe fd32 	bl	8000d68 <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe fd2d 	bl	8000d68 <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	; 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e174      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b7a      	ldr	r3, [pc, #488]	; (8002508 <HAL_RCC_OscConfig+0x694>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4013      	ands	r3, r2
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_RCC_OscConfig+0x4d0>
 8002334:	4b71      	ldr	r3, [pc, #452]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002338:	4b70      	ldr	r3, [pc, #448]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 800233a:	2180      	movs	r1, #128	; 0x80
 800233c:	0049      	lsls	r1, r1, #1
 800233e:	430a      	orrs	r2, r1
 8002340:	651a      	str	r2, [r3, #80]	; 0x50
 8002342:	e031      	b.n	80023a8 <HAL_RCC_OscConfig+0x534>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10c      	bne.n	8002366 <HAL_RCC_OscConfig+0x4f2>
 800234c:	4b6b      	ldr	r3, [pc, #428]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 800234e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002352:	496c      	ldr	r1, [pc, #432]	; (8002504 <HAL_RCC_OscConfig+0x690>)
 8002354:	400a      	ands	r2, r1
 8002356:	651a      	str	r2, [r3, #80]	; 0x50
 8002358:	4b68      	ldr	r3, [pc, #416]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 800235a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235c:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 800235e:	496b      	ldr	r1, [pc, #428]	; (800250c <HAL_RCC_OscConfig+0x698>)
 8002360:	400a      	ands	r2, r1
 8002362:	651a      	str	r2, [r3, #80]	; 0x50
 8002364:	e020      	b.n	80023a8 <HAL_RCC_OscConfig+0x534>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	23a0      	movs	r3, #160	; 0xa0
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	429a      	cmp	r2, r3
 8002370:	d10e      	bne.n	8002390 <HAL_RCC_OscConfig+0x51c>
 8002372:	4b62      	ldr	r3, [pc, #392]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002376:	4b61      	ldr	r3, [pc, #388]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	00c9      	lsls	r1, r1, #3
 800237c:	430a      	orrs	r2, r1
 800237e:	651a      	str	r2, [r3, #80]	; 0x50
 8002380:	4b5e      	ldr	r3, [pc, #376]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002384:	4b5d      	ldr	r3, [pc, #372]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	0049      	lsls	r1, r1, #1
 800238a:	430a      	orrs	r2, r1
 800238c:	651a      	str	r2, [r3, #80]	; 0x50
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0x534>
 8002390:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002396:	495b      	ldr	r1, [pc, #364]	; (8002504 <HAL_RCC_OscConfig+0x690>)
 8002398:	400a      	ands	r2, r1
 800239a:	651a      	str	r2, [r3, #80]	; 0x50
 800239c:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 800239e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023a0:	4b56      	ldr	r3, [pc, #344]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80023a2:	495a      	ldr	r1, [pc, #360]	; (800250c <HAL_RCC_OscConfig+0x698>)
 80023a4:	400a      	ands	r2, r1
 80023a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d015      	beq.n	80023dc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7fe fcda 	bl	8000d68 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023b8:	e009      	b.n	80023ce <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fcd5 	bl	8000d68 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_RCC_OscConfig+0x69c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e11b      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ce:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80023d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4013      	ands	r3, r2
 80023d8:	d0ef      	beq.n	80023ba <HAL_RCC_OscConfig+0x546>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023dc:	f7fe fcc4 	bl	8000d68 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023e4:	e009      	b.n	80023fa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe fcbf 	bl	8000d68 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	4a47      	ldr	r2, [pc, #284]	; (8002510 <HAL_RCC_OscConfig+0x69c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e105      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023fa:	4b40      	ldr	r3, [pc, #256]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80023fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4013      	ands	r3, r2
 8002404:	d1ef      	bne.n	80023e6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002406:	2323      	movs	r3, #35	; 0x23
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002416:	493f      	ldr	r1, [pc, #252]	; (8002514 <HAL_RCC_OscConfig+0x6a0>)
 8002418:	400a      	ands	r2, r1
 800241a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2220      	movs	r2, #32
 8002422:	4013      	ands	r3, r2
 8002424:	d049      	beq.n	80024ba <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d026      	beq.n	800247c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800242e:	4b33      	ldr	r3, [pc, #204]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	4b32      	ldr	r3, [pc, #200]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002434:	2101      	movs	r1, #1
 8002436:	430a      	orrs	r2, r1
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 800243c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243e:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002440:	2101      	movs	r1, #1
 8002442:	430a      	orrs	r2, r1
 8002444:	635a      	str	r2, [r3, #52]	; 0x34
 8002446:	4b34      	ldr	r3, [pc, #208]	; (8002518 <HAL_RCC_OscConfig+0x6a4>)
 8002448:	6a1a      	ldr	r2, [r3, #32]
 800244a:	4b33      	ldr	r3, [pc, #204]	; (8002518 <HAL_RCC_OscConfig+0x6a4>)
 800244c:	2180      	movs	r1, #128	; 0x80
 800244e:	0189      	lsls	r1, r1, #6
 8002450:	430a      	orrs	r2, r1
 8002452:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fc88 	bl	8000d68 <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800245e:	f7fe fc83 	bl	8000d68 <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0ca      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2202      	movs	r2, #2
 8002476:	4013      	ands	r3, r2
 8002478:	d0f1      	beq.n	800245e <HAL_RCC_OscConfig+0x5ea>
 800247a:	e01e      	b.n	80024ba <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002482:	2101      	movs	r1, #1
 8002484:	438a      	bics	r2, r1
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <HAL_RCC_OscConfig+0x6a4>)
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_RCC_OscConfig+0x6a4>)
 800248e:	4923      	ldr	r1, [pc, #140]	; (800251c <HAL_RCC_OscConfig+0x6a8>)
 8002490:	400a      	ands	r2, r1
 8002492:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe fc68 	bl	8000d68 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800249e:	f7fe fc63 	bl	8000d68 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0aa      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2202      	movs	r2, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d1f1      	bne.n	800249e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d100      	bne.n	80024c4 <HAL_RCC_OscConfig+0x650>
 80024c2:	e09f      	b.n	8002604 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d100      	bne.n	80024cc <HAL_RCC_OscConfig+0x658>
 80024ca:	e078      	b.n	80025be <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d159      	bne.n	8002588 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 80024da:	4911      	ldr	r1, [pc, #68]	; (8002520 <HAL_RCC_OscConfig+0x6ac>)
 80024dc:	400a      	ands	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fc42 	bl	8000d68 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024e8:	e01c      	b.n	8002524 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe fc3d 	bl	8000d68 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d915      	bls.n	8002524 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e084      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
 80024fc:	40021000 	.word	0x40021000
 8002500:	ffff1fff 	.word	0xffff1fff
 8002504:	fffffeff 	.word	0xfffffeff
 8002508:	40007000 	.word	0x40007000
 800250c:	fffffbff 	.word	0xfffffbff
 8002510:	00001388 	.word	0x00001388
 8002514:	efffffff 	.word	0xefffffff
 8002518:	40010000 	.word	0x40010000
 800251c:	ffffdfff 	.word	0xffffdfff
 8002520:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002524:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <HAL_RCC_OscConfig+0x79c>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	049b      	lsls	r3, r3, #18
 800252c:	4013      	ands	r3, r2
 800252e:	d1dc      	bne.n	80024ea <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002530:	4b37      	ldr	r3, [pc, #220]	; (8002610 <HAL_RCC_OscConfig+0x79c>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a37      	ldr	r2, [pc, #220]	; (8002614 <HAL_RCC_OscConfig+0x7a0>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	431a      	orrs	r2, r3
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <HAL_RCC_OscConfig+0x79c>)
 800254c:	430a      	orrs	r2, r1
 800254e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_RCC_OscConfig+0x79c>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <HAL_RCC_OscConfig+0x79c>)
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	0449      	lsls	r1, r1, #17
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe fc03 	bl	8000d68 <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fbfe 	bl	8000d68 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e045      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <HAL_RCC_OscConfig+0x79c>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	049b      	lsls	r3, r3, #18
 8002582:	4013      	ands	r3, r2
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x6f4>
 8002586:	e03d      	b.n	8002604 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <HAL_RCC_OscConfig+0x79c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_RCC_OscConfig+0x79c>)
 800258e:	4922      	ldr	r1, [pc, #136]	; (8002618 <HAL_RCC_OscConfig+0x7a4>)
 8002590:	400a      	ands	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fbe8 	bl	8000d68 <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259e:	f7fe fbe3 	bl	8000d68 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e02a      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_RCC_OscConfig+0x79c>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	049b      	lsls	r3, r3, #18
 80025b8:	4013      	ands	r3, r2
 80025ba:	d1f0      	bne.n	800259e <HAL_RCC_OscConfig+0x72a>
 80025bc:	e022      	b.n	8002604 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e01d      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_RCC_OscConfig+0x79c>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	401a      	ands	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	429a      	cmp	r2, r3
 80025de:	d10f      	bne.n	8002600 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	23f0      	movs	r3, #240	; 0xf0
 80025e4:	039b      	lsls	r3, r3, #14
 80025e6:	401a      	ands	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	23c0      	movs	r3, #192	; 0xc0
 80025f4:	041b      	lsls	r3, r3, #16
 80025f6:	401a      	ands	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b00a      	add	sp, #40	; 0x28
 800260c:	bdb0      	pop	{r4, r5, r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	40021000 	.word	0x40021000
 8002614:	ff02ffff 	.word	0xff02ffff
 8002618:	feffffff 	.word	0xfeffffff

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b5b0      	push	{r4, r5, r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e128      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b96      	ldr	r3, [pc, #600]	; (800288c <HAL_RCC_ClockConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2201      	movs	r2, #1
 8002636:	4013      	ands	r3, r2
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d91e      	bls.n	800267c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b93      	ldr	r3, [pc, #588]	; (800288c <HAL_RCC_ClockConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2201      	movs	r2, #1
 8002644:	4393      	bics	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	4b90      	ldr	r3, [pc, #576]	; (800288c <HAL_RCC_ClockConfig+0x270>)
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002650:	f7fe fb8a 	bl	8000d68 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002658:	e009      	b.n	800266e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265a:	f7fe fb85 	bl	8000d68 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4a8a      	ldr	r2, [pc, #552]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e109      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b87      	ldr	r3, [pc, #540]	; (800288c <HAL_RCC_ClockConfig+0x270>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	4013      	ands	r3, r2
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d1ee      	bne.n	800265a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002686:	4b83      	ldr	r3, [pc, #524]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	22f0      	movs	r2, #240	; 0xf0
 800268c:	4393      	bics	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b7f      	ldr	r3, [pc, #508]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002696:	430a      	orrs	r2, r1
 8002698:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2201      	movs	r2, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	d100      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x8a>
 80026a4:	e089      	b.n	80027ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ae:	4b79      	ldr	r3, [pc, #484]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	4013      	ands	r3, r2
 80026b8:	d120      	bne.n	80026fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0e1      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026c6:	4b73      	ldr	r3, [pc, #460]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	049b      	lsls	r3, r3, #18
 80026ce:	4013      	ands	r3, r2
 80026d0:	d114      	bne.n	80026fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0d5      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d106      	bne.n	80026ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026de:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2204      	movs	r2, #4
 80026e4:	4013      	ands	r3, r2
 80026e6:	d109      	bne.n	80026fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0ca      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026ec:	4b69      	ldr	r3, [pc, #420]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4013      	ands	r3, r2
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0c2      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fc:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2203      	movs	r2, #3
 8002702:	4393      	bics	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002710:	f7fe fb2a 	bl	8000d68 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d111      	bne.n	8002744 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002720:	e009      	b.n	8002736 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002722:	f7fe fb21 	bl	8000d68 <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	4a58      	ldr	r2, [pc, #352]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0a5      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002736:	4b57      	ldr	r3, [pc, #348]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	220c      	movs	r2, #12
 800273c:	4013      	ands	r3, r2
 800273e:	2b08      	cmp	r3, #8
 8002740:	d1ef      	bne.n	8002722 <HAL_RCC_ClockConfig+0x106>
 8002742:	e03a      	b.n	80027ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d111      	bne.n	8002770 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274c:	e009      	b.n	8002762 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274e:	f7fe fb0b 	bl	8000d68 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	4a4d      	ldr	r2, [pc, #308]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e08f      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002762:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	220c      	movs	r2, #12
 8002768:	4013      	ands	r3, r2
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d1ef      	bne.n	800274e <HAL_RCC_ClockConfig+0x132>
 800276e:	e024      	b.n	80027ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d11b      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002778:	e009      	b.n	800278e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277a:	f7fe faf5 	bl	8000d68 <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	4a42      	ldr	r2, [pc, #264]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e079      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	220c      	movs	r2, #12
 8002794:	4013      	ands	r3, r2
 8002796:	2b04      	cmp	r3, #4
 8002798:	d1ef      	bne.n	800277a <HAL_RCC_ClockConfig+0x15e>
 800279a:	e00e      	b.n	80027ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fe fae4 	bl	8000d68 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	4a3a      	ldr	r2, [pc, #232]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e068      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027b0:	4b38      	ldr	r3, [pc, #224]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	220c      	movs	r2, #12
 80027b6:	4013      	ands	r3, r2
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_ClockConfig+0x270>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d21e      	bcs.n	8002806 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c8:	4b30      	ldr	r3, [pc, #192]	; (800288c <HAL_RCC_ClockConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4393      	bics	r3, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_RCC_ClockConfig+0x270>)
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027da:	f7fe fac5 	bl	8000d68 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	e009      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e4:	f7fe fac0 	bl	8000d68 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	4a28      	ldr	r2, [pc, #160]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e044      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_ClockConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2201      	movs	r2, #1
 80027fe:	4013      	ands	r3, r2
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d1ee      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2204      	movs	r2, #4
 800280c:	4013      	ands	r3, r2
 800280e:	d009      	beq.n	8002824 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a20      	ldr	r2, [pc, #128]	; (8002898 <HAL_RCC_ClockConfig+0x27c>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002820:	430a      	orrs	r2, r1
 8002822:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2208      	movs	r2, #8
 800282a:	4013      	ands	r3, r2
 800282c:	d00a      	beq.n	8002844 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4a1a      	ldr	r2, [pc, #104]	; (800289c <HAL_RCC_ClockConfig+0x280>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	00da      	lsls	r2, r3, #3
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002844:	f000 f832 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8002848:	0001      	movs	r1, r0
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_RCC_ClockConfig+0x278>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	220f      	movs	r2, #15
 8002852:	4013      	ands	r3, r2
 8002854:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <HAL_RCC_ClockConfig+0x284>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	000a      	movs	r2, r1
 800285a:	40da      	lsrs	r2, r3
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_RCC_ClockConfig+0x288>)
 800285e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_RCC_ClockConfig+0x28c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	250b      	movs	r5, #11
 8002866:	197c      	adds	r4, r7, r5
 8002868:	0018      	movs	r0, r3
 800286a:	f7fe fa37 	bl	8000cdc <HAL_InitTick>
 800286e:	0003      	movs	r3, r0
 8002870:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002872:	197b      	adds	r3, r7, r5
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800287a:	197b      	adds	r3, r7, r5
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	e000      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b004      	add	sp, #16
 8002888:	bdb0      	pop	{r4, r5, r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	40022000 	.word	0x40022000
 8002890:	00001388 	.word	0x00001388
 8002894:	40021000 	.word	0x40021000
 8002898:	fffff8ff 	.word	0xfffff8ff
 800289c:	ffffc7ff 	.word	0xffffc7ff
 80028a0:	080042ac 	.word	0x080042ac
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000004 	.word	0x20000004

080028ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	b5b0      	push	{r4, r5, r7, lr}
 80028ae:	b08e      	sub	sp, #56	; 0x38
 80028b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80028b2:	4b4c      	ldr	r3, [pc, #304]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ba:	230c      	movs	r3, #12
 80028bc:	4013      	ands	r3, r2
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d014      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x40>
 80028c2:	d900      	bls.n	80028c6 <HAL_RCC_GetSysClockFreq+0x1a>
 80028c4:	e07b      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x112>
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x24>
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d00b      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ce:	e076      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028d0:	4b44      	ldr	r3, [pc, #272]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	4013      	ands	r3, r2
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80028da:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80028de:	e07c      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <HAL_RCC_GetSysClockFreq+0x140>)
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028e4:	e079      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e6:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x144>)
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028ea:	e076      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	0c9a      	lsrs	r2, r3, #18
 80028f0:	230f      	movs	r3, #15
 80028f2:	401a      	ands	r2, r3
 80028f4:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x148>)
 80028f6:	5c9b      	ldrb	r3, [r3, r2]
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	0d9a      	lsrs	r2, r3, #22
 80028fe:	2303      	movs	r3, #3
 8002900:	4013      	ands	r3, r2
 8002902:	3301      	adds	r3, #1
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002906:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	025b      	lsls	r3, r3, #9
 800290e:	4013      	ands	r3, r2
 8002910:	d01a      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	4a35      	ldr	r2, [pc, #212]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800291c:	2300      	movs	r3, #0
 800291e:	69b8      	ldr	r0, [r7, #24]
 8002920:	69f9      	ldr	r1, [r7, #28]
 8002922:	f7fd fc9d 	bl	8000260 <__aeabi_lmul>
 8002926:	0002      	movs	r2, r0
 8002928:	000b      	movs	r3, r1
 800292a:	0010      	movs	r0, r2
 800292c:	0019      	movs	r1, r3
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f7fd fc71 	bl	8000220 <__aeabi_uldivmod>
 800293e:	0002      	movs	r2, r0
 8002940:	000b      	movs	r3, r1
 8002942:	0013      	movs	r3, r2
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
 8002946:	e037      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002948:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2210      	movs	r2, #16
 800294e:	4013      	ands	r3, r2
 8002950:	d01a      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800295c:	2300      	movs	r3, #0
 800295e:	68b8      	ldr	r0, [r7, #8]
 8002960:	68f9      	ldr	r1, [r7, #12]
 8002962:	f7fd fc7d 	bl	8000260 <__aeabi_lmul>
 8002966:	0002      	movs	r2, r0
 8002968:	000b      	movs	r3, r1
 800296a:	0010      	movs	r0, r2
 800296c:	0019      	movs	r1, r3
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f7fd fc51 	bl	8000220 <__aeabi_uldivmod>
 800297e:	0002      	movs	r2, r0
 8002980:	000b      	movs	r3, r1
 8002982:	0013      	movs	r3, r2
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
 8002986:	e017      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	0018      	movs	r0, r3
 800298c:	2300      	movs	r3, #0
 800298e:	0019      	movs	r1, r3
 8002990:	4a16      	ldr	r2, [pc, #88]	; (80029ec <HAL_RCC_GetSysClockFreq+0x140>)
 8002992:	2300      	movs	r3, #0
 8002994:	f7fd fc64 	bl	8000260 <__aeabi_lmul>
 8002998:	0002      	movs	r2, r0
 800299a:	000b      	movs	r3, r1
 800299c:	0010      	movs	r0, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	001c      	movs	r4, r3
 80029a4:	2300      	movs	r3, #0
 80029a6:	001d      	movs	r5, r3
 80029a8:	0022      	movs	r2, r4
 80029aa:	002b      	movs	r3, r5
 80029ac:	f7fd fc38 	bl	8000220 <__aeabi_uldivmod>
 80029b0:	0002      	movs	r2, r0
 80029b2:	000b      	movs	r3, r1
 80029b4:	0013      	movs	r3, r2
 80029b6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029bc:	e00d      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	0b5b      	lsrs	r3, r3, #13
 80029c4:	2207      	movs	r2, #7
 80029c6:	4013      	ands	r3, r2
 80029c8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	3301      	adds	r3, #1
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	0212      	lsls	r2, r2, #8
 80029d2:	409a      	lsls	r2, r3
 80029d4:	0013      	movs	r3, r2
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029d8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b00e      	add	sp, #56	; 0x38
 80029e2:	bdb0      	pop	{r4, r5, r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	003d0900 	.word	0x003d0900
 80029ec:	00f42400 	.word	0x00f42400
 80029f0:	007a1200 	.word	0x007a1200
 80029f4:	080042c4 	.word	0x080042c4

080029f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029fc:	4b02      	ldr	r3, [pc, #8]	; (8002a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	0018      	movs	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	20000000 	.word	0x20000000

08002a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a10:	f7ff fff2 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a14:	0001      	movs	r1, r0
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	4013      	ands	r3, r2
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a22:	5cd3      	ldrb	r3, [r2, r3]
 8002a24:	40d9      	lsrs	r1, r3
 8002a26:	000b      	movs	r3, r1
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	40021000 	.word	0x40021000
 8002a34:	080042bc 	.word	0x080042bc

08002a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a3c:	f7ff ffdc 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a40:	0001      	movs	r1, r0
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	0adb      	lsrs	r3, r3, #11
 8002a48:	2207      	movs	r2, #7
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	40d9      	lsrs	r1, r3
 8002a52:	000b      	movs	r3, r1
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	080042bc 	.word	0x080042bc

08002a64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a6c:	2317      	movs	r3, #23
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	4013      	ands	r3, r2
 8002a88:	d100      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002a8a:	e104      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8c:	4bb9      	ldr	r3, [pc, #740]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	055b      	lsls	r3, r3, #21
 8002a94:	4013      	ands	r3, r2
 8002a96:	d10a      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4bb6      	ldr	r3, [pc, #728]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9c:	4bb5      	ldr	r3, [pc, #724]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	0549      	lsls	r1, r1, #21
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002aa6:	2317      	movs	r3, #23
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	4bb2      	ldr	r3, [pc, #712]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d11a      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aba:	4baf      	ldr	r3, [pc, #700]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4bae      	ldr	r3, [pc, #696]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0049      	lsls	r1, r1, #1
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe f94e 	bl	8000d68 <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad2:	f7fe f949 	bl	8000d68 <HAL_GetTick>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b64      	cmp	r3, #100	; 0x64
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e143      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	4ba4      	ldr	r3, [pc, #656]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002af0:	4ba0      	ldr	r3, [pc, #640]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	23c0      	movs	r3, #192	; 0xc0
 8002af6:	039b      	lsls	r3, r3, #14
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	23c0      	movs	r3, #192	; 0xc0
 8002b02:	039b      	lsls	r3, r3, #14
 8002b04:	4013      	ands	r3, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	23c0      	movs	r3, #192	; 0xc0
 8002b12:	039b      	lsls	r3, r3, #14
 8002b14:	4013      	ands	r3, r2
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d013      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	23c0      	movs	r3, #192	; 0xc0
 8002b22:	029b      	lsls	r3, r3, #10
 8002b24:	401a      	ands	r2, r3
 8002b26:	23c0      	movs	r3, #192	; 0xc0
 8002b28:	029b      	lsls	r3, r3, #10
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d10a      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b2e:	4b91      	ldr	r3, [pc, #580]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	401a      	ands	r2, r3
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	029b      	lsls	r3, r3, #10
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e113      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b44:	4b8b      	ldr	r3, [pc, #556]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b48:	23c0      	movs	r3, #192	; 0xc0
 8002b4a:	029b      	lsls	r3, r3, #10
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d049      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	23c0      	movs	r3, #192	; 0xc0
 8002b5c:	029b      	lsls	r3, r3, #10
 8002b5e:	4013      	ands	r3, r2
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d004      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d10d      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	23c0      	movs	r3, #192	; 0xc0
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	4013      	ands	r3, r2
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d034      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d02e      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b8c:	4b79      	ldr	r3, [pc, #484]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b90:	4a7a      	ldr	r2, [pc, #488]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b96:	4b77      	ldr	r3, [pc, #476]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b9a:	4b76      	ldr	r3, [pc, #472]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	0309      	lsls	r1, r1, #12
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba4:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba8:	4b72      	ldr	r3, [pc, #456]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002baa:	4975      	ldr	r1, [pc, #468]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002bb0:	4b70      	ldr	r3, [pc, #448]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d014      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fe f8d2 	bl	8000d68 <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bc8:	e009      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7fe f8cd 	bl	8000d68 <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	4a6b      	ldr	r2, [pc, #428]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0c6      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4013      	ands	r3, r2
 8002be8:	d0ef      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d01f      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	23c0      	movs	r3, #192	; 0xc0
 8002bfc:	029b      	lsls	r3, r3, #10
 8002bfe:	401a      	ands	r2, r3
 8002c00:	23c0      	movs	r3, #192	; 0xc0
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d10c      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002c08:	4b5a      	ldr	r3, [pc, #360]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5e      	ldr	r2, [pc, #376]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	0019      	movs	r1, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	23c0      	movs	r3, #192	; 0xc0
 8002c18:	039b      	lsls	r3, r3, #14
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	4b55      	ldr	r3, [pc, #340]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	4b54      	ldr	r3, [pc, #336]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	23c0      	movs	r3, #192	; 0xc0
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	401a      	ands	r2, r3
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d01f      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	23c0      	movs	r3, #192	; 0xc0
 8002c46:	029b      	lsls	r3, r3, #10
 8002c48:	401a      	ands	r2, r3
 8002c4a:	23c0      	movs	r3, #192	; 0xc0
 8002c4c:	029b      	lsls	r3, r3, #10
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002c52:	4b48      	ldr	r3, [pc, #288]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a4c      	ldr	r2, [pc, #304]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	23c0      	movs	r3, #192	; 0xc0
 8002c62:	039b      	lsls	r3, r3, #14
 8002c64:	401a      	ands	r2, r3
 8002c66:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c6e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	23c0      	movs	r3, #192	; 0xc0
 8002c76:	029b      	lsls	r3, r3, #10
 8002c78:	401a      	ands	r2, r3
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c80:	2317      	movs	r3, #23
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d105      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8a:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c90:	493e      	ldr	r1, [pc, #248]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002c92:	400a      	ands	r2, r1
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca0:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	4393      	bics	r3, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cec:	430a      	orrs	r2, r1
 8002cee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfe:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699a      	ldr	r2, [r3, #24]
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d1a:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	4013      	ands	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	4013      	ands	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1a      	ldr	r2, [r3, #32]
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d66:	430a      	orrs	r2, r1
 8002d68:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b006      	add	sp, #24
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	fffcffff 	.word	0xfffcffff
 8002d80:	fff7ffff 	.word	0xfff7ffff
 8002d84:	00001388 	.word	0x00001388
 8002d88:	ffcfffff 	.word	0xffcfffff
 8002d8c:	efffffff 	.word	0xefffffff
 8002d90:	fffff3ff 	.word	0xfffff3ff
 8002d94:	ffffcfff 	.word	0xffffcfff
 8002d98:	fbffffff 	.word	0xfbffffff
 8002d9c:	fff3ffff 	.word	0xfff3ffff

08002da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e032      	b.n	8002e18 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2239      	movs	r2, #57	; 0x39
 8002db6:	5c9b      	ldrb	r3, [r3, r2]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d107      	bne.n	8002dce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2238      	movs	r2, #56	; 0x38
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7fd fe79 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2239      	movs	r2, #57	; 0x39
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	0019      	movs	r1, r3
 8002de0:	0010      	movs	r0, r2
 8002de2:	f000 fa91 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	223e      	movs	r2, #62	; 0x3e
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	223a      	movs	r2, #58	; 0x3a
 8002df2:	2101      	movs	r1, #1
 8002df4:	5499      	strb	r1, [r3, r2]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	223b      	movs	r2, #59	; 0x3b
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	5499      	strb	r1, [r3, r2]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	223c      	movs	r2, #60	; 0x3c
 8002e02:	2101      	movs	r1, #1
 8002e04:	5499      	strb	r1, [r3, r2]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	223d      	movs	r2, #61	; 0x3d
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2239      	movs	r2, #57	; 0x39
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	0018      	movs	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b002      	add	sp, #8
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e032      	b.n	8002e98 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2239      	movs	r2, #57	; 0x39
 8002e36:	5c9b      	ldrb	r3, [r3, r2]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d107      	bne.n	8002e4e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2238      	movs	r2, #56	; 0x38
 8002e42:	2100      	movs	r1, #0
 8002e44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 f829 	bl	8002ea0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2239      	movs	r2, #57	; 0x39
 8002e52:	2102      	movs	r1, #2
 8002e54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	0019      	movs	r1, r3
 8002e60:	0010      	movs	r0, r2
 8002e62:	f000 fa51 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	223e      	movs	r2, #62	; 0x3e
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	223a      	movs	r2, #58	; 0x3a
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	223b      	movs	r2, #59	; 0x3b
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	5499      	strb	r1, [r3, r2]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	223c      	movs	r2, #60	; 0x3c
 8002e82:	2101      	movs	r1, #1
 8002e84:	5499      	strb	r1, [r3, r2]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	223d      	movs	r2, #61	; 0x3d
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2239      	movs	r2, #57	; 0x39
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d108      	bne.n	8002ed2 <HAL_TIM_PWM_Start+0x22>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	223a      	movs	r2, #58	; 0x3a
 8002ec4:	5c9b      	ldrb	r3, [r3, r2]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	1e5a      	subs	r2, r3, #1
 8002ecc:	4193      	sbcs	r3, r2
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	e01f      	b.n	8002f12 <HAL_TIM_PWM_Start+0x62>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d108      	bne.n	8002eea <HAL_TIM_PWM_Start+0x3a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	223b      	movs	r2, #59	; 0x3b
 8002edc:	5c9b      	ldrb	r3, [r3, r2]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	1e5a      	subs	r2, r3, #1
 8002ee4:	4193      	sbcs	r3, r2
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	e013      	b.n	8002f12 <HAL_TIM_PWM_Start+0x62>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d108      	bne.n	8002f02 <HAL_TIM_PWM_Start+0x52>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	223c      	movs	r2, #60	; 0x3c
 8002ef4:	5c9b      	ldrb	r3, [r3, r2]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	1e5a      	subs	r2, r3, #1
 8002efc:	4193      	sbcs	r3, r2
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	e007      	b.n	8002f12 <HAL_TIM_PWM_Start+0x62>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	223d      	movs	r2, #61	; 0x3d
 8002f06:	5c9b      	ldrb	r3, [r3, r2]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	1e5a      	subs	r2, r3, #1
 8002f0e:	4193      	sbcs	r3, r2
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e052      	b.n	8002fc0 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d104      	bne.n	8002f2a <HAL_TIM_PWM_Start+0x7a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	223a      	movs	r2, #58	; 0x3a
 8002f24:	2102      	movs	r1, #2
 8002f26:	5499      	strb	r1, [r3, r2]
 8002f28:	e013      	b.n	8002f52 <HAL_TIM_PWM_Start+0xa2>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIM_PWM_Start+0x8a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	223b      	movs	r2, #59	; 0x3b
 8002f34:	2102      	movs	r1, #2
 8002f36:	5499      	strb	r1, [r3, r2]
 8002f38:	e00b      	b.n	8002f52 <HAL_TIM_PWM_Start+0xa2>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_PWM_Start+0x9a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	223c      	movs	r2, #60	; 0x3c
 8002f44:	2102      	movs	r1, #2
 8002f46:	5499      	strb	r1, [r3, r2]
 8002f48:	e003      	b.n	8002f52 <HAL_TIM_PWM_Start+0xa2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	223d      	movs	r2, #61	; 0x3d
 8002f4e:	2102      	movs	r1, #2
 8002f50:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6839      	ldr	r1, [r7, #0]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 fbd0 	bl	8003700 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	05db      	lsls	r3, r3, #23
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d00e      	beq.n	8002f8a <HAL_TIM_PWM_Start+0xda>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <HAL_TIM_PWM_Start+0x118>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d009      	beq.n	8002f8a <HAL_TIM_PWM_Start+0xda>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <HAL_TIM_PWM_Start+0x11c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_TIM_PWM_Start+0xda>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <HAL_TIM_PWM_Start+0x120>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d111      	bne.n	8002fae <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2207      	movs	r2, #7
 8002f92:	4013      	ands	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b06      	cmp	r3, #6
 8002f9a:	d010      	beq.n	8002fbe <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fac:	e007      	b.n	8002fbe <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b004      	add	sp, #16
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40010800 	.word	0x40010800
 8002fd0:	40011400 	.word	0x40011400

08002fd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe0:	2317      	movs	r3, #23
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2238      	movs	r2, #56	; 0x38
 8002fec:	5c9b      	ldrb	r3, [r3, r2]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e0ad      	b.n	8003152 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2238      	movs	r2, #56	; 0x38
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d100      	bne.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003004:	e076      	b.n	80030f4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b0c      	cmp	r3, #12
 800300a:	d900      	bls.n	800300e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800300c:	e095      	b.n	800313a <HAL_TIM_PWM_ConfigChannel+0x166>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d04e      	beq.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b08      	cmp	r3, #8
 8003018:	d900      	bls.n	800301c <HAL_TIM_PWM_ConfigChannel+0x48>
 800301a:	e08e      	b.n	800313a <HAL_TIM_PWM_ConfigChannel+0x166>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d021      	beq.n	800306c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003028:	e087      	b.n	800313a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	0011      	movs	r1, r2
 8003032:	0018      	movs	r0, r3
 8003034:	f000 f9c6 	bl	80033c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2108      	movs	r1, #8
 8003044:	430a      	orrs	r2, r1
 8003046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2104      	movs	r1, #4
 8003054:	438a      	bics	r2, r1
 8003056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6999      	ldr	r1, [r3, #24]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	619a      	str	r2, [r3, #24]
      break;
 800306a:	e06b      	b.n	8003144 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	0011      	movs	r1, r2
 8003074:	0018      	movs	r0, r3
 8003076:	f000 f9e1 	bl	800343c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	0109      	lsls	r1, r1, #4
 8003088:	430a      	orrs	r2, r1
 800308a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4931      	ldr	r1, [pc, #196]	; (800315c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003098:	400a      	ands	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6999      	ldr	r1, [r3, #24]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	021a      	lsls	r2, r3, #8
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	619a      	str	r2, [r3, #24]
      break;
 80030b0:	e048      	b.n	8003144 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	0011      	movs	r1, r2
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 fa00 	bl	80034c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2108      	movs	r1, #8
 80030cc:	430a      	orrs	r2, r1
 80030ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2104      	movs	r1, #4
 80030dc:	438a      	bics	r2, r1
 80030de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69d9      	ldr	r1, [r3, #28]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	61da      	str	r2, [r3, #28]
      break;
 80030f2:	e027      	b.n	8003144 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	0011      	movs	r1, r2
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 fa1f 	bl	8003540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	0109      	lsls	r1, r1, #4
 8003110:	430a      	orrs	r2, r1
 8003112:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	490f      	ldr	r1, [pc, #60]	; (800315c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003120:	400a      	ands	r2, r1
 8003122:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69d9      	ldr	r1, [r3, #28]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	021a      	lsls	r2, r3, #8
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	61da      	str	r2, [r3, #28]
      break;
 8003138:	e004      	b.n	8003144 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800313a:	2317      	movs	r3, #23
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
      break;
 8003142:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2238      	movs	r2, #56	; 0x38
 8003148:	2100      	movs	r1, #0
 800314a:	5499      	strb	r1, [r3, r2]

  return status;
 800314c:	2317      	movs	r3, #23
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	781b      	ldrb	r3, [r3, #0]
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b006      	add	sp, #24
 8003158:	bd80      	pop	{r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	fffffbff 	.word	0xfffffbff

08003160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	230f      	movs	r3, #15
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2238      	movs	r2, #56	; 0x38
 8003176:	5c9b      	ldrb	r3, [r3, r2]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_TIM_ConfigClockSource+0x20>
 800317c:	2302      	movs	r3, #2
 800317e:	e0bc      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x19a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2238      	movs	r2, #56	; 0x38
 8003184:	2101      	movs	r1, #1
 8003186:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2239      	movs	r2, #57	; 0x39
 800318c:	2102      	movs	r1, #2
 800318e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2277      	movs	r2, #119	; 0x77
 800319c:	4393      	bics	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_TIM_ConfigClockSource+0x1a4>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	0192      	lsls	r2, r2, #6
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_TIM_ConfigClockSource+0xde>
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	0192      	lsls	r2, r2, #6
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d900      	bls.n	80031c6 <HAL_TIM_ConfigClockSource+0x66>
 80031c4:	e088      	b.n	80032d8 <HAL_TIM_ConfigClockSource+0x178>
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	0152      	lsls	r2, r2, #5
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d100      	bne.n	80031d0 <HAL_TIM_ConfigClockSource+0x70>
 80031ce:	e088      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0x182>
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	0152      	lsls	r2, r2, #5
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d900      	bls.n	80031da <HAL_TIM_ConfigClockSource+0x7a>
 80031d8:	e07e      	b.n	80032d8 <HAL_TIM_ConfigClockSource+0x178>
 80031da:	2b70      	cmp	r3, #112	; 0x70
 80031dc:	d018      	beq.n	8003210 <HAL_TIM_ConfigClockSource+0xb0>
 80031de:	d900      	bls.n	80031e2 <HAL_TIM_ConfigClockSource+0x82>
 80031e0:	e07a      	b.n	80032d8 <HAL_TIM_ConfigClockSource+0x178>
 80031e2:	2b60      	cmp	r3, #96	; 0x60
 80031e4:	d04f      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x126>
 80031e6:	d900      	bls.n	80031ea <HAL_TIM_ConfigClockSource+0x8a>
 80031e8:	e076      	b.n	80032d8 <HAL_TIM_ConfigClockSource+0x178>
 80031ea:	2b50      	cmp	r3, #80	; 0x50
 80031ec:	d03b      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x106>
 80031ee:	d900      	bls.n	80031f2 <HAL_TIM_ConfigClockSource+0x92>
 80031f0:	e072      	b.n	80032d8 <HAL_TIM_ConfigClockSource+0x178>
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d057      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x146>
 80031f6:	d900      	bls.n	80031fa <HAL_TIM_ConfigClockSource+0x9a>
 80031f8:	e06e      	b.n	80032d8 <HAL_TIM_ConfigClockSource+0x178>
 80031fa:	2b30      	cmp	r3, #48	; 0x30
 80031fc:	d063      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x166>
 80031fe:	d86b      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x178>
 8003200:	2b20      	cmp	r3, #32
 8003202:	d060      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x166>
 8003204:	d868      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x178>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d05d      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x166>
 800320a:	2b10      	cmp	r3, #16
 800320c:	d05b      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x166>
 800320e:	e063      	b.n	80032d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f000 fa4e 	bl	80036c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2277      	movs	r2, #119	; 0x77
 8003230:	4313      	orrs	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]
      break;
 800323c:	e052      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f000 fa37 	bl	80036c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	01c9      	lsls	r1, r1, #7
 8003260:	430a      	orrs	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
      break;
 8003264:	e03e      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	001a      	movs	r2, r3
 8003274:	f000 f9aa 	bl	80035cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2150      	movs	r1, #80	; 0x50
 800327e:	0018      	movs	r0, r3
 8003280:	f000 fa04 	bl	800368c <TIM_ITRx_SetConfig>
      break;
 8003284:	e02e      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	001a      	movs	r2, r3
 8003294:	f000 f9c8 	bl	8003628 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2160      	movs	r1, #96	; 0x60
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 f9f4 	bl	800368c <TIM_ITRx_SetConfig>
      break;
 80032a4:	e01e      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6859      	ldr	r1, [r3, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	001a      	movs	r2, r3
 80032b4:	f000 f98a 	bl	80035cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2140      	movs	r1, #64	; 0x40
 80032be:	0018      	movs	r0, r3
 80032c0:	f000 f9e4 	bl	800368c <TIM_ITRx_SetConfig>
      break;
 80032c4:	e00e      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0019      	movs	r1, r3
 80032d0:	0010      	movs	r0, r2
 80032d2:	f000 f9db 	bl	800368c <TIM_ITRx_SetConfig>
      break;
 80032d6:	e005      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80032d8:	230f      	movs	r3, #15
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
      break;
 80032e0:	e000      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80032e2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2239      	movs	r2, #57	; 0x39
 80032e8:	2101      	movs	r1, #1
 80032ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2238      	movs	r2, #56	; 0x38
 80032f0:	2100      	movs	r1, #0
 80032f2:	5499      	strb	r1, [r3, r2]

  return status;
 80032f4:	230f      	movs	r3, #15
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	781b      	ldrb	r3, [r3, #0]
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b004      	add	sp, #16
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	ffff00ff 	.word	0xffff00ff

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	05db      	lsls	r3, r3, #23
 800331e:	429a      	cmp	r2, r3
 8003320:	d00b      	beq.n	800333a <TIM_Base_SetConfig+0x32>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <TIM_Base_SetConfig+0xac>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <TIM_Base_SetConfig+0x32>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <TIM_Base_SetConfig+0xb0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d003      	beq.n	800333a <TIM_Base_SetConfig+0x32>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a21      	ldr	r2, [pc, #132]	; (80033bc <TIM_Base_SetConfig+0xb4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d108      	bne.n	800334c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2270      	movs	r2, #112	; 0x70
 800333e:	4393      	bics	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	05db      	lsls	r3, r3, #23
 8003352:	429a      	cmp	r2, r3
 8003354:	d00b      	beq.n	800336e <TIM_Base_SetConfig+0x66>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <TIM_Base_SetConfig+0xac>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <TIM_Base_SetConfig+0x66>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <TIM_Base_SetConfig+0xb0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d003      	beq.n	800336e <TIM_Base_SetConfig+0x66>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a14      	ldr	r2, [pc, #80]	; (80033bc <TIM_Base_SetConfig+0xb4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d108      	bne.n	8003380 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <TIM_Base_SetConfig+0xb8>)
 8003372:	4013      	ands	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	4393      	bics	r3, r2
 8003386:	001a      	movs	r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	615a      	str	r2, [r3, #20]
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b004      	add	sp, #16
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40010800 	.word	0x40010800
 80033bc:	40011400 	.word	0x40011400
 80033c0:	fffffcff 	.word	0xfffffcff

080033c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	2201      	movs	r2, #1
 80033d4:	4393      	bics	r3, r2
 80033d6:	001a      	movs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2270      	movs	r2, #112	; 0x70
 80033f2:	4393      	bics	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2203      	movs	r2, #3
 80033fa:	4393      	bics	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2202      	movs	r2, #2
 800340c:	4393      	bics	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	621a      	str	r2, [r3, #32]
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b006      	add	sp, #24
 800343a:	bd80      	pop	{r7, pc}

0800343c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	2210      	movs	r2, #16
 800344c:	4393      	bics	r3, r2
 800344e:	001a      	movs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <TIM_OC2_SetConfig+0x7c>)
 800346a:	4013      	ands	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a12      	ldr	r2, [pc, #72]	; (80034bc <TIM_OC2_SetConfig+0x80>)
 8003472:	4013      	ands	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2220      	movs	r2, #32
 8003486:	4393      	bics	r3, r2
 8003488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	621a      	str	r2, [r3, #32]
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b006      	add	sp, #24
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	ffff8fff 	.word	0xffff8fff
 80034bc:	fffffcff 	.word	0xfffffcff

080034c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <TIM_OC3_SetConfig+0x78>)
 80034d0:	401a      	ands	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2270      	movs	r2, #112	; 0x70
 80034ec:	4393      	bics	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2203      	movs	r2, #3
 80034f4:	4393      	bics	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	4a0d      	ldr	r2, [pc, #52]	; (800353c <TIM_OC3_SetConfig+0x7c>)
 8003506:	4013      	ands	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b006      	add	sp, #24
 8003536:	bd80      	pop	{r7, pc}
 8003538:	fffffeff 	.word	0xfffffeff
 800353c:	fffffdff 	.word	0xfffffdff

08003540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <TIM_OC4_SetConfig+0x7c>)
 8003550:	401a      	ands	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <TIM_OC4_SetConfig+0x80>)
 800356c:	4013      	ands	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <TIM_OC4_SetConfig+0x84>)
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <TIM_OC4_SetConfig+0x88>)
 8003588:	4013      	ands	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	031b      	lsls	r3, r3, #12
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b006      	add	sp, #24
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	ffffefff 	.word	0xffffefff
 80035c0:	ffff8fff 	.word	0xffff8fff
 80035c4:	fffffcff 	.word	0xfffffcff
 80035c8:	ffffdfff 	.word	0xffffdfff

080035cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	2201      	movs	r2, #1
 80035e4:	4393      	bics	r3, r2
 80035e6:	001a      	movs	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	22f0      	movs	r2, #240	; 0xf0
 80035f6:	4393      	bics	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	220a      	movs	r2, #10
 8003608:	4393      	bics	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	621a      	str	r2, [r3, #32]
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b006      	add	sp, #24
 8003626:	bd80      	pop	{r7, pc}

08003628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	2210      	movs	r2, #16
 800363a:	4393      	bics	r3, r2
 800363c:	001a      	movs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <TIM_TI2_ConfigInputStage+0x60>)
 8003652:	4013      	ands	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	031b      	lsls	r3, r3, #12
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	22a0      	movs	r2, #160	; 0xa0
 8003664:	4393      	bics	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b006      	add	sp, #24
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	ffff0fff 	.word	0xffff0fff

0800368c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2270      	movs	r2, #112	; 0x70
 80036a0:	4393      	bics	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	2207      	movs	r2, #7
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	609a      	str	r2, [r3, #8]
}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b004      	add	sp, #16
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <TIM_ETR_SetConfig+0x3c>)
 80036d8:	4013      	ands	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b006      	add	sp, #24
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	ffff00ff 	.word	0xffff00ff

08003700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	221f      	movs	r2, #31
 8003710:	4013      	ands	r3, r2
 8003712:	2201      	movs	r2, #1
 8003714:	409a      	lsls	r2, r3
 8003716:	0013      	movs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	43d2      	mvns	r2, r2
 8003722:	401a      	ands	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	211f      	movs	r1, #31
 8003730:	400b      	ands	r3, r1
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4099      	lsls	r1, r3
 8003736:	000b      	movs	r3, r1
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b006      	add	sp, #24
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2238      	movs	r2, #56	; 0x38
 8003756:	5c9b      	ldrb	r3, [r3, r2]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e047      	b.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2238      	movs	r2, #56	; 0x38
 8003764:	2101      	movs	r1, #1
 8003766:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2239      	movs	r2, #57	; 0x39
 800376c:	2102      	movs	r1, #2
 800376e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2270      	movs	r2, #112	; 0x70
 8003784:	4393      	bics	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	05db      	lsls	r3, r3, #23
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d00e      	beq.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a11      	ldr	r2, [pc, #68]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a10      	ldr	r2, [pc, #64]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d10c      	bne.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	4393      	bics	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2239      	movs	r2, #57	; 0x39
 80037e2:	2101      	movs	r1, #1
 80037e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2238      	movs	r2, #56	; 0x38
 80037ea:	2100      	movs	r1, #0
 80037ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b004      	add	sp, #16
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40010800 	.word	0x40010800
 8003800:	40011400 	.word	0x40011400

08003804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e044      	b.n	80038a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d107      	bne.n	800382e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2278      	movs	r2, #120	; 0x78
 8003822:	2100      	movs	r1, #0
 8003824:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0018      	movs	r0, r3
 800382a:	f7fd f99f 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2224      	movs	r2, #36	; 0x24
 8003832:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2101      	movs	r1, #1
 8003840:	438a      	bics	r2, r1
 8003842:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 f830 	bl	80038ac <UART_SetConfig>
 800384c:	0003      	movs	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e024      	b.n	80038a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 fac1 	bl	8003de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	490d      	ldr	r1, [pc, #52]	; (80038a8 <HAL_UART_Init+0xa4>)
 8003872:	400a      	ands	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	212a      	movs	r1, #42	; 0x2a
 8003882:	438a      	bics	r2, r1
 8003884:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2101      	movs	r1, #1
 8003892:	430a      	orrs	r2, r1
 8003894:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 fb59 	bl	8003f50 <UART_CheckIdleState>
 800389e:	0003      	movs	r3, r0
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	ffffb7ff 	.word	0xffffb7ff

080038ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ac:	b5b0      	push	{r4, r5, r7, lr}
 80038ae:	b08e      	sub	sp, #56	; 0x38
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038b4:	231a      	movs	r3, #26
 80038b6:	2218      	movs	r2, #24
 80038b8:	189b      	adds	r3, r3, r2
 80038ba:	19db      	adds	r3, r3, r7
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4ac3      	ldr	r2, [pc, #780]	; (8003bec <UART_SetConfig+0x340>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ea:	430a      	orrs	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4abe      	ldr	r2, [pc, #760]	; (8003bf0 <UART_SetConfig+0x344>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4ab8      	ldr	r2, [pc, #736]	; (8003bf4 <UART_SetConfig+0x348>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391c:	4313      	orrs	r3, r2
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4ab4      	ldr	r2, [pc, #720]	; (8003bf8 <UART_SetConfig+0x34c>)
 8003928:	4013      	ands	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003932:	430a      	orrs	r2, r1
 8003934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4ab0      	ldr	r2, [pc, #704]	; (8003bfc <UART_SetConfig+0x350>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d131      	bne.n	80039a4 <UART_SetConfig+0xf8>
 8003940:	4baf      	ldr	r3, [pc, #700]	; (8003c00 <UART_SetConfig+0x354>)
 8003942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003944:	2203      	movs	r2, #3
 8003946:	4013      	ands	r3, r2
 8003948:	2b03      	cmp	r3, #3
 800394a:	d01d      	beq.n	8003988 <UART_SetConfig+0xdc>
 800394c:	d823      	bhi.n	8003996 <UART_SetConfig+0xea>
 800394e:	2b02      	cmp	r3, #2
 8003950:	d00c      	beq.n	800396c <UART_SetConfig+0xc0>
 8003952:	d820      	bhi.n	8003996 <UART_SetConfig+0xea>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <UART_SetConfig+0xb2>
 8003958:	2b01      	cmp	r3, #1
 800395a:	d00e      	beq.n	800397a <UART_SetConfig+0xce>
 800395c:	e01b      	b.n	8003996 <UART_SetConfig+0xea>
 800395e:	231b      	movs	r3, #27
 8003960:	2218      	movs	r2, #24
 8003962:	189b      	adds	r3, r3, r2
 8003964:	19db      	adds	r3, r3, r7
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	e0b4      	b.n	8003ad6 <UART_SetConfig+0x22a>
 800396c:	231b      	movs	r3, #27
 800396e:	2218      	movs	r2, #24
 8003970:	189b      	adds	r3, r3, r2
 8003972:	19db      	adds	r3, r3, r7
 8003974:	2202      	movs	r2, #2
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e0ad      	b.n	8003ad6 <UART_SetConfig+0x22a>
 800397a:	231b      	movs	r3, #27
 800397c:	2218      	movs	r2, #24
 800397e:	189b      	adds	r3, r3, r2
 8003980:	19db      	adds	r3, r3, r7
 8003982:	2204      	movs	r2, #4
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e0a6      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003988:	231b      	movs	r3, #27
 800398a:	2218      	movs	r2, #24
 800398c:	189b      	adds	r3, r3, r2
 800398e:	19db      	adds	r3, r3, r7
 8003990:	2208      	movs	r2, #8
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e09f      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003996:	231b      	movs	r3, #27
 8003998:	2218      	movs	r2, #24
 800399a:	189b      	adds	r3, r3, r2
 800399c:	19db      	adds	r3, r3, r7
 800399e:	2210      	movs	r2, #16
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e098      	b.n	8003ad6 <UART_SetConfig+0x22a>
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a96      	ldr	r2, [pc, #600]	; (8003c04 <UART_SetConfig+0x358>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d131      	bne.n	8003a12 <UART_SetConfig+0x166>
 80039ae:	4b94      	ldr	r3, [pc, #592]	; (8003c00 <UART_SetConfig+0x354>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	220c      	movs	r2, #12
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d01d      	beq.n	80039f6 <UART_SetConfig+0x14a>
 80039ba:	d823      	bhi.n	8003a04 <UART_SetConfig+0x158>
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d00c      	beq.n	80039da <UART_SetConfig+0x12e>
 80039c0:	d820      	bhi.n	8003a04 <UART_SetConfig+0x158>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <UART_SetConfig+0x120>
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00e      	beq.n	80039e8 <UART_SetConfig+0x13c>
 80039ca:	e01b      	b.n	8003a04 <UART_SetConfig+0x158>
 80039cc:	231b      	movs	r3, #27
 80039ce:	2218      	movs	r2, #24
 80039d0:	189b      	adds	r3, r3, r2
 80039d2:	19db      	adds	r3, r3, r7
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e07d      	b.n	8003ad6 <UART_SetConfig+0x22a>
 80039da:	231b      	movs	r3, #27
 80039dc:	2218      	movs	r2, #24
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	19db      	adds	r3, r3, r7
 80039e2:	2202      	movs	r2, #2
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e076      	b.n	8003ad6 <UART_SetConfig+0x22a>
 80039e8:	231b      	movs	r3, #27
 80039ea:	2218      	movs	r2, #24
 80039ec:	189b      	adds	r3, r3, r2
 80039ee:	19db      	adds	r3, r3, r7
 80039f0:	2204      	movs	r2, #4
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e06f      	b.n	8003ad6 <UART_SetConfig+0x22a>
 80039f6:	231b      	movs	r3, #27
 80039f8:	2218      	movs	r2, #24
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	19db      	adds	r3, r3, r7
 80039fe:	2208      	movs	r2, #8
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	e068      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003a04:	231b      	movs	r3, #27
 8003a06:	2218      	movs	r2, #24
 8003a08:	189b      	adds	r3, r3, r2
 8003a0a:	19db      	adds	r3, r3, r7
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	e061      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a7c      	ldr	r2, [pc, #496]	; (8003c08 <UART_SetConfig+0x35c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d106      	bne.n	8003a2a <UART_SetConfig+0x17e>
 8003a1c:	231b      	movs	r3, #27
 8003a1e:	2218      	movs	r2, #24
 8003a20:	189b      	adds	r3, r3, r2
 8003a22:	19db      	adds	r3, r3, r7
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e055      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a77      	ldr	r2, [pc, #476]	; (8003c0c <UART_SetConfig+0x360>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d106      	bne.n	8003a42 <UART_SetConfig+0x196>
 8003a34:	231b      	movs	r3, #27
 8003a36:	2218      	movs	r2, #24
 8003a38:	189b      	adds	r3, r3, r2
 8003a3a:	19db      	adds	r3, r3, r7
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	e049      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6b      	ldr	r2, [pc, #428]	; (8003bf4 <UART_SetConfig+0x348>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d13e      	bne.n	8003aca <UART_SetConfig+0x21e>
 8003a4c:	4b6c      	ldr	r3, [pc, #432]	; (8003c00 <UART_SetConfig+0x354>)
 8003a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a50:	23c0      	movs	r3, #192	; 0xc0
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	4013      	ands	r3, r2
 8003a56:	22c0      	movs	r2, #192	; 0xc0
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d027      	beq.n	8003aae <UART_SetConfig+0x202>
 8003a5e:	22c0      	movs	r2, #192	; 0xc0
 8003a60:	0112      	lsls	r2, r2, #4
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d82a      	bhi.n	8003abc <UART_SetConfig+0x210>
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d011      	beq.n	8003a92 <UART_SetConfig+0x1e6>
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	0112      	lsls	r2, r2, #4
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d822      	bhi.n	8003abc <UART_SetConfig+0x210>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <UART_SetConfig+0x1d8>
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	00d2      	lsls	r2, r2, #3
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <UART_SetConfig+0x1f4>
 8003a82:	e01b      	b.n	8003abc <UART_SetConfig+0x210>
 8003a84:	231b      	movs	r3, #27
 8003a86:	2218      	movs	r2, #24
 8003a88:	189b      	adds	r3, r3, r2
 8003a8a:	19db      	adds	r3, r3, r7
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	e021      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003a92:	231b      	movs	r3, #27
 8003a94:	2218      	movs	r2, #24
 8003a96:	189b      	adds	r3, r3, r2
 8003a98:	19db      	adds	r3, r3, r7
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e01a      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003aa0:	231b      	movs	r3, #27
 8003aa2:	2218      	movs	r2, #24
 8003aa4:	189b      	adds	r3, r3, r2
 8003aa6:	19db      	adds	r3, r3, r7
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	e013      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003aae:	231b      	movs	r3, #27
 8003ab0:	2218      	movs	r2, #24
 8003ab2:	189b      	adds	r3, r3, r2
 8003ab4:	19db      	adds	r3, r3, r7
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	e00c      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003abc:	231b      	movs	r3, #27
 8003abe:	2218      	movs	r2, #24
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	19db      	adds	r3, r3, r7
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	e005      	b.n	8003ad6 <UART_SetConfig+0x22a>
 8003aca:	231b      	movs	r3, #27
 8003acc:	2218      	movs	r2, #24
 8003ace:	189b      	adds	r3, r3, r2
 8003ad0:	19db      	adds	r3, r3, r7
 8003ad2:	2210      	movs	r2, #16
 8003ad4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a46      	ldr	r2, [pc, #280]	; (8003bf4 <UART_SetConfig+0x348>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d000      	beq.n	8003ae2 <UART_SetConfig+0x236>
 8003ae0:	e09a      	b.n	8003c18 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ae2:	231b      	movs	r3, #27
 8003ae4:	2218      	movs	r2, #24
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	19db      	adds	r3, r3, r7
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d01d      	beq.n	8003b2c <UART_SetConfig+0x280>
 8003af0:	dc20      	bgt.n	8003b34 <UART_SetConfig+0x288>
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d015      	beq.n	8003b22 <UART_SetConfig+0x276>
 8003af6:	dc1d      	bgt.n	8003b34 <UART_SetConfig+0x288>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <UART_SetConfig+0x256>
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d005      	beq.n	8003b0c <UART_SetConfig+0x260>
 8003b00:	e018      	b.n	8003b34 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b02:	f7fe ff83 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 8003b06:	0003      	movs	r3, r0
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b0a:	e01c      	b.n	8003b46 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b0c:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <UART_SetConfig+0x354>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2210      	movs	r2, #16
 8003b12:	4013      	ands	r3, r2
 8003b14:	d002      	beq.n	8003b1c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b16:	4b3e      	ldr	r3, [pc, #248]	; (8003c10 <UART_SetConfig+0x364>)
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b1a:	e014      	b.n	8003b46 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003b1c:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <UART_SetConfig+0x368>)
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b20:	e011      	b.n	8003b46 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b22:	f7fe fec3 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8003b26:	0003      	movs	r3, r0
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b2a:	e00c      	b.n	8003b46 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b32:	e008      	b.n	8003b46 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b38:	231a      	movs	r3, #26
 8003b3a:	2218      	movs	r2, #24
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
        break;
 8003b44:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d100      	bne.n	8003b4e <UART_SetConfig+0x2a2>
 8003b4c:	e133      	b.n	8003db6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	0013      	movs	r3, r2
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d305      	bcc.n	8003b6a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d906      	bls.n	8003b78 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003b6a:	231a      	movs	r3, #26
 8003b6c:	2218      	movs	r2, #24
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	19db      	adds	r3, r3, r7
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	e11e      	b.n	8003db6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	6939      	ldr	r1, [r7, #16]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	000b      	movs	r3, r1
 8003b86:	0e1b      	lsrs	r3, r3, #24
 8003b88:	0010      	movs	r0, r2
 8003b8a:	0205      	lsls	r5, r0, #8
 8003b8c:	431d      	orrs	r5, r3
 8003b8e:	000b      	movs	r3, r1
 8003b90:	021c      	lsls	r4, r3, #8
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68b8      	ldr	r0, [r7, #8]
 8003ba0:	68f9      	ldr	r1, [r7, #12]
 8003ba2:	1900      	adds	r0, r0, r4
 8003ba4:	4169      	adcs	r1, r5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	2300      	movs	r3, #0
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f7fc fb34 	bl	8000220 <__aeabi_uldivmod>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	000b      	movs	r3, r1
 8003bbc:	0013      	movs	r3, r2
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc2:	23c0      	movs	r3, #192	; 0xc0
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d309      	bcc.n	8003bde <UART_SetConfig+0x332>
 8003bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	035b      	lsls	r3, r3, #13
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d204      	bcs.n	8003bde <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bda:	60da      	str	r2, [r3, #12]
 8003bdc:	e0eb      	b.n	8003db6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003bde:	231a      	movs	r3, #26
 8003be0:	2218      	movs	r2, #24
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	19db      	adds	r3, r3, r7
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e0e4      	b.n	8003db6 <UART_SetConfig+0x50a>
 8003bec:	efff69f3 	.word	0xefff69f3
 8003bf0:	ffffcfff 	.word	0xffffcfff
 8003bf4:	40004800 	.word	0x40004800
 8003bf8:	fffff4ff 	.word	0xfffff4ff
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40004400 	.word	0x40004400
 8003c08:	40004c00 	.word	0x40004c00
 8003c0c:	40005000 	.word	0x40005000
 8003c10:	003d0900 	.word	0x003d0900
 8003c14:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d000      	beq.n	8003c26 <UART_SetConfig+0x37a>
 8003c24:	e070      	b.n	8003d08 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003c26:	231b      	movs	r3, #27
 8003c28:	2218      	movs	r2, #24
 8003c2a:	189b      	adds	r3, r3, r2
 8003c2c:	19db      	adds	r3, r3, r7
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d822      	bhi.n	8003c7a <UART_SetConfig+0x3ce>
 8003c34:	009a      	lsls	r2, r3, #2
 8003c36:	4b67      	ldr	r3, [pc, #412]	; (8003dd4 <UART_SetConfig+0x528>)
 8003c38:	18d3      	adds	r3, r2, r3
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3e:	f7fe fee5 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 8003c42:	0003      	movs	r3, r0
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c46:	e021      	b.n	8003c8c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c48:	f7fe fef6 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c50:	e01c      	b.n	8003c8c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c52:	4b61      	ldr	r3, [pc, #388]	; (8003dd8 <UART_SetConfig+0x52c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2210      	movs	r2, #16
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d002      	beq.n	8003c62 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c5c:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <UART_SetConfig+0x530>)
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c60:	e014      	b.n	8003c8c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003c62:	4b5f      	ldr	r3, [pc, #380]	; (8003de0 <UART_SetConfig+0x534>)
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c66:	e011      	b.n	8003c8c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c68:	f7fe fe20 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c70:	e00c      	b.n	8003c8c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c78:	e008      	b.n	8003c8c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c7e:	231a      	movs	r3, #26
 8003c80:	2218      	movs	r2, #24
 8003c82:	189b      	adds	r3, r3, r2
 8003c84:	19db      	adds	r3, r3, r7
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
        break;
 8003c8a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d100      	bne.n	8003c94 <UART_SetConfig+0x3e8>
 8003c92:	e090      	b.n	8003db6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	005a      	lsls	r2, r3, #1
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	18d2      	adds	r2, r2, r3
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	0010      	movs	r0, r2
 8003ca8:	f7fc fa2e 	bl	8000108 <__udivsi3>
 8003cac:	0003      	movs	r3, r0
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	2b0f      	cmp	r3, #15
 8003cb4:	d921      	bls.n	8003cfa <UART_SetConfig+0x44e>
 8003cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	025b      	lsls	r3, r3, #9
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d21c      	bcs.n	8003cfa <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	200e      	movs	r0, #14
 8003cc6:	2418      	movs	r4, #24
 8003cc8:	1903      	adds	r3, r0, r4
 8003cca:	19db      	adds	r3, r3, r7
 8003ccc:	210f      	movs	r1, #15
 8003cce:	438a      	bics	r2, r1
 8003cd0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2207      	movs	r2, #7
 8003cda:	4013      	ands	r3, r2
 8003cdc:	b299      	uxth	r1, r3
 8003cde:	1903      	adds	r3, r0, r4
 8003ce0:	19db      	adds	r3, r3, r7
 8003ce2:	1902      	adds	r2, r0, r4
 8003ce4:	19d2      	adds	r2, r2, r7
 8003ce6:	8812      	ldrh	r2, [r2, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	1902      	adds	r2, r0, r4
 8003cf2:	19d2      	adds	r2, r2, r7
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	60da      	str	r2, [r3, #12]
 8003cf8:	e05d      	b.n	8003db6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003cfa:	231a      	movs	r3, #26
 8003cfc:	2218      	movs	r2, #24
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	19db      	adds	r3, r3, r7
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	e056      	b.n	8003db6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d08:	231b      	movs	r3, #27
 8003d0a:	2218      	movs	r2, #24
 8003d0c:	189b      	adds	r3, r3, r2
 8003d0e:	19db      	adds	r3, r3, r7
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d822      	bhi.n	8003d5c <UART_SetConfig+0x4b0>
 8003d16:	009a      	lsls	r2, r3, #2
 8003d18:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <UART_SetConfig+0x538>)
 8003d1a:	18d3      	adds	r3, r2, r3
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d20:	f7fe fe74 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 8003d24:	0003      	movs	r3, r0
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d28:	e021      	b.n	8003d6e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d2a:	f7fe fe85 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d32:	e01c      	b.n	8003d6e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d34:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <UART_SetConfig+0x52c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d002      	beq.n	8003d44 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <UART_SetConfig+0x530>)
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d42:	e014      	b.n	8003d6e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003d44:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <UART_SetConfig+0x534>)
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d48:	e011      	b.n	8003d6e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4a:	f7fe fdaf 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d52:	e00c      	b.n	8003d6e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d5a:	e008      	b.n	8003d6e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d60:	231a      	movs	r3, #26
 8003d62:	2218      	movs	r2, #24
 8003d64:	189b      	adds	r3, r3, r2
 8003d66:	19db      	adds	r3, r3, r7
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
        break;
 8003d6c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	085a      	lsrs	r2, r3, #1
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	18d2      	adds	r2, r2, r3
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	0019      	movs	r1, r3
 8003d84:	0010      	movs	r0, r2
 8003d86:	f7fc f9bf 	bl	8000108 <__udivsi3>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2b0f      	cmp	r3, #15
 8003d92:	d90a      	bls.n	8003daa <UART_SetConfig+0x4fe>
 8003d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	025b      	lsls	r3, r3, #9
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d205      	bcs.n	8003daa <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	e005      	b.n	8003db6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003daa:	231a      	movs	r3, #26
 8003dac:	2218      	movs	r2, #24
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	19db      	adds	r3, r3, r7
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	2200      	movs	r2, #0
 8003dba:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003dc2:	231a      	movs	r3, #26
 8003dc4:	2218      	movs	r2, #24
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	19db      	adds	r3, r3, r7
 8003dca:	781b      	ldrb	r3, [r3, #0]
}
 8003dcc:	0018      	movs	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b00e      	add	sp, #56	; 0x38
 8003dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8003dd4:	080042d0 	.word	0x080042d0
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	003d0900 	.word	0x003d0900
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	080042f4 	.word	0x080042f4

08003de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	2201      	movs	r2, #1
 8003df6:	4013      	ands	r3, r2
 8003df8:	d00b      	beq.n	8003e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <UART_AdvFeatureConfig+0x144>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	0019      	movs	r1, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2202      	movs	r2, #2
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4a43      	ldr	r2, [pc, #268]	; (8003f30 <UART_AdvFeatureConfig+0x148>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	0019      	movs	r1, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2204      	movs	r2, #4
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d00b      	beq.n	8003e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4a3b      	ldr	r2, [pc, #236]	; (8003f34 <UART_AdvFeatureConfig+0x14c>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	0019      	movs	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d00b      	beq.n	8003e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4a34      	ldr	r2, [pc, #208]	; (8003f38 <UART_AdvFeatureConfig+0x150>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d00b      	beq.n	8003e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4a2c      	ldr	r2, [pc, #176]	; (8003f3c <UART_AdvFeatureConfig+0x154>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	0019      	movs	r1, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <UART_AdvFeatureConfig+0x158>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	2240      	movs	r2, #64	; 0x40
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d01d      	beq.n	8003f02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <UART_AdvFeatureConfig+0x15c>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	035b      	lsls	r3, r3, #13
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d10b      	bne.n	8003f02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <UART_AdvFeatureConfig+0x160>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	2280      	movs	r2, #128	; 0x80
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <UART_AdvFeatureConfig+0x164>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	0019      	movs	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]
  }
}
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b002      	add	sp, #8
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	fffdffff 	.word	0xfffdffff
 8003f30:	fffeffff 	.word	0xfffeffff
 8003f34:	fffbffff 	.word	0xfffbffff
 8003f38:	ffff7fff 	.word	0xffff7fff
 8003f3c:	ffffefff 	.word	0xffffefff
 8003f40:	ffffdfff 	.word	0xffffdfff
 8003f44:	ffefffff 	.word	0xffefffff
 8003f48:	ff9fffff 	.word	0xff9fffff
 8003f4c:	fff7ffff 	.word	0xfff7ffff

08003f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b092      	sub	sp, #72	; 0x48
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2284      	movs	r2, #132	; 0x84
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f60:	f7fc ff02 	bl	8000d68 <HAL_GetTick>
 8003f64:	0003      	movs	r3, r0
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2208      	movs	r2, #8
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d12c      	bne.n	8003fd0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f78:	2280      	movs	r2, #128	; 0x80
 8003f7a:	0391      	lsls	r1, r2, #14
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4a46      	ldr	r2, [pc, #280]	; (8004098 <UART_CheckIdleState+0x148>)
 8003f80:	9200      	str	r2, [sp, #0]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f000 f88c 	bl	80040a0 <UART_WaitOnFlagUntilTimeout>
 8003f88:	1e03      	subs	r3, r0, #0
 8003f8a:	d021      	beq.n	8003fd0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f96:	2301      	movs	r3, #1
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	f383 8810 	msr	PRIMASK, r3
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2180      	movs	r1, #128	; 0x80
 8003fae:	438a      	bics	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	f383 8810 	msr	PRIMASK, r3
}
 8003fbc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2278      	movs	r2, #120	; 0x78
 8003fc8:	2100      	movs	r1, #0
 8003fca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e05f      	b.n	8004090 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d146      	bne.n	800406c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	2280      	movs	r2, #128	; 0x80
 8003fe2:	03d1      	lsls	r1, r2, #15
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4a2c      	ldr	r2, [pc, #176]	; (8004098 <UART_CheckIdleState+0x148>)
 8003fe8:	9200      	str	r2, [sp, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f000 f858 	bl	80040a0 <UART_WaitOnFlagUntilTimeout>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d03b      	beq.n	800406c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffe:	2301      	movs	r3, #1
 8004000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f383 8810 	msr	PRIMASK, r3
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4921      	ldr	r1, [pc, #132]	; (800409c <UART_CheckIdleState+0x14c>)
 8004016:	400a      	ands	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f383 8810 	msr	PRIMASK, r3
}
 8004024:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004026:	f3ef 8310 	mrs	r3, PRIMASK
 800402a:	61bb      	str	r3, [r7, #24]
  return(result);
 800402c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402e:	633b      	str	r3, [r7, #48]	; 0x30
 8004030:	2301      	movs	r3, #1
 8004032:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2101      	movs	r1, #1
 8004048:	438a      	bics	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f383 8810 	msr	PRIMASK, r3
}
 8004056:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2280      	movs	r2, #128	; 0x80
 800405c:	2120      	movs	r1, #32
 800405e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2278      	movs	r2, #120	; 0x78
 8004064:	2100      	movs	r1, #0
 8004066:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e011      	b.n	8004090 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2280      	movs	r2, #128	; 0x80
 8004076:	2120      	movs	r1, #32
 8004078:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2278      	movs	r2, #120	; 0x78
 800408a:	2100      	movs	r1, #0
 800408c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b010      	add	sp, #64	; 0x40
 8004096:	bd80      	pop	{r7, pc}
 8004098:	01ffffff 	.word	0x01ffffff
 800409c:	fffffedf 	.word	0xfffffedf

080040a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b0:	e04b      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	3301      	adds	r3, #1
 80040b6:	d048      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b8:	f7fc fe56 	bl	8000d68 <HAL_GetTick>
 80040bc:	0002      	movs	r2, r0
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d302      	bcc.n	80040ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e04b      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2204      	movs	r2, #4
 80040da:	4013      	ands	r3, r2
 80040dc:	d035      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	2208      	movs	r2, #8
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d111      	bne.n	8004110 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2208      	movs	r2, #8
 80040f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 f83c 	bl	8004174 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2284      	movs	r2, #132	; 0x84
 8004100:	2108      	movs	r1, #8
 8004102:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2278      	movs	r2, #120	; 0x78
 8004108:	2100      	movs	r1, #0
 800410a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e02c      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69da      	ldr	r2, [r3, #28]
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	401a      	ands	r2, r3
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	429a      	cmp	r2, r3
 8004122:	d112      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	0112      	lsls	r2, r2, #4
 800412c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	0018      	movs	r0, r3
 8004132:	f000 f81f 	bl	8004174 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2284      	movs	r2, #132	; 0x84
 800413a:	2120      	movs	r1, #32
 800413c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2278      	movs	r2, #120	; 0x78
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e00f      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	425a      	negs	r2, r3
 800415a:	4153      	adcs	r3, r2
 800415c:	b2db      	uxtb	r3, r3
 800415e:	001a      	movs	r2, r3
 8004160:	1dfb      	adds	r3, r7, #7
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d0a4      	beq.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b004      	add	sp, #16
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08e      	sub	sp, #56	; 0x38
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417c:	f3ef 8310 	mrs	r3, PRIMASK
 8004180:	617b      	str	r3, [r7, #20]
  return(result);
 8004182:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
 8004186:	2301      	movs	r3, #1
 8004188:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f383 8810 	msr	PRIMASK, r3
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4926      	ldr	r1, [pc, #152]	; (8004238 <UART_EndRxTransfer+0xc4>)
 800419e:	400a      	ands	r2, r1
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f383 8810 	msr	PRIMASK, r3
}
 80041ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ae:	f3ef 8310 	mrs	r3, PRIMASK
 80041b2:	623b      	str	r3, [r7, #32]
  return(result);
 80041b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30
 80041b8:	2301      	movs	r3, #1
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	f383 8810 	msr	PRIMASK, r3
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2101      	movs	r1, #1
 80041d0:	438a      	bics	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	f383 8810 	msr	PRIMASK, r3
}
 80041de:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d118      	bne.n	800421a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80041ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f2:	2301      	movs	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f383 8810 	msr	PRIMASK, r3
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2110      	movs	r1, #16
 800420a:	438a      	bics	r2, r1
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f383 8810 	msr	PRIMASK, r3
}
 8004218:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2280      	movs	r2, #128	; 0x80
 800421e:	2120      	movs	r1, #32
 8004220:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	b00e      	add	sp, #56	; 0x38
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	fffffedf 	.word	0xfffffedf

0800423c <__libc_init_array>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	2600      	movs	r6, #0
 8004240:	4d0c      	ldr	r5, [pc, #48]	; (8004274 <__libc_init_array+0x38>)
 8004242:	4c0d      	ldr	r4, [pc, #52]	; (8004278 <__libc_init_array+0x3c>)
 8004244:	1b64      	subs	r4, r4, r5
 8004246:	10a4      	asrs	r4, r4, #2
 8004248:	42a6      	cmp	r6, r4
 800424a:	d109      	bne.n	8004260 <__libc_init_array+0x24>
 800424c:	2600      	movs	r6, #0
 800424e:	f000 f821 	bl	8004294 <_init>
 8004252:	4d0a      	ldr	r5, [pc, #40]	; (800427c <__libc_init_array+0x40>)
 8004254:	4c0a      	ldr	r4, [pc, #40]	; (8004280 <__libc_init_array+0x44>)
 8004256:	1b64      	subs	r4, r4, r5
 8004258:	10a4      	asrs	r4, r4, #2
 800425a:	42a6      	cmp	r6, r4
 800425c:	d105      	bne.n	800426a <__libc_init_array+0x2e>
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	00b3      	lsls	r3, r6, #2
 8004262:	58eb      	ldr	r3, [r5, r3]
 8004264:	4798      	blx	r3
 8004266:	3601      	adds	r6, #1
 8004268:	e7ee      	b.n	8004248 <__libc_init_array+0xc>
 800426a:	00b3      	lsls	r3, r6, #2
 800426c:	58eb      	ldr	r3, [r5, r3]
 800426e:	4798      	blx	r3
 8004270:	3601      	adds	r6, #1
 8004272:	e7f2      	b.n	800425a <__libc_init_array+0x1e>
 8004274:	08004320 	.word	0x08004320
 8004278:	08004320 	.word	0x08004320
 800427c:	08004320 	.word	0x08004320
 8004280:	08004324 	.word	0x08004324

08004284 <memset>:
 8004284:	0003      	movs	r3, r0
 8004286:	1882      	adds	r2, r0, r2
 8004288:	4293      	cmp	r3, r2
 800428a:	d100      	bne.n	800428e <memset+0xa>
 800428c:	4770      	bx	lr
 800428e:	7019      	strb	r1, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	e7f9      	b.n	8004288 <memset+0x4>

08004294 <_init>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr

080042a0 <_fini>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr
