
W10_Passthrough.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030dc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080032b4  080032b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032cc  080032cc  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  080032cc  080032cc  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032cc  080032cc  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032d0  080032d0  000132d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080032d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200000ac  08003380  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08003380  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008305  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001987  00000000  00000000  000283e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00029d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba0c  00000000  00000000  0002ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008984  00000000  00000000  000466ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adf09  00000000  00000000  0004f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fcf79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f1c  00000000  00000000  000fcfcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000ac 	.word	0x200000ac
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800329c 	.word	0x0800329c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000b0 	.word	0x200000b0
 8000214:	0800329c 	.word	0x0800329c

08000218 <HAL_I2S_RxHalfCpltCallback>:
static void MX_DMA_Init(void);
static void MX_I2S2_Init(void);
static void MX_I2S3_Init(void);
/* USER CODE BEGIN PFP */
void process(int16_t *bufferInStereo, int16_t *bufferOutStereo, uint16_t size);
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	//check = 18;
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr

0800022c <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr

08000240 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
    process(dataIn, dataOut, BUFFER_SIZE);
 8000248:	2240      	movs	r2, #64	; 0x40
 800024a:	4904      	ldr	r1, [pc, #16]	; (800025c <HAL_I2S_TxHalfCpltCallback+0x1c>)
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800024e:	f000 f93b 	bl	80004c8 <process>
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000300 	.word	0x20000300
 8000260:	20000200 	.word	0x20000200

08000264 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    process(&dataIn[BUFFER_SIZE], &dataOut[BUFFER_SIZE], BUFFER_SIZE);
 800026c:	2240      	movs	r2, #64	; 0x40
 800026e:	4904      	ldr	r1, [pc, #16]	; (8000280 <HAL_I2S_TxCpltCallback+0x1c>)
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <HAL_I2S_TxCpltCallback+0x20>)
 8000272:	f000 f929 	bl	80004c8 <process>
}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000380 	.word	0x20000380
 8000284:	20000280 	.word	0x20000280

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028c:	f000 fb79 	bl	8000982 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000290:	f000 f81c 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000294:	f000 f8e8 	bl	8000468 <MX_GPIO_Init>
  MX_DMA_Init();
 8000298:	f000 f8b4 	bl	8000404 <MX_DMA_Init>
  MX_I2S2_Init();
 800029c:	f000 f862 	bl	8000364 <MX_I2S2_Init>
  MX_I2S3_Init();
 80002a0:	f000 f888 	bl	80003b4 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *) dataOut, DOUBLE_BUFFER_I2S);
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	4905      	ldr	r1, [pc, #20]	; (80002bc <main+0x34>)
 80002a8:	4805      	ldr	r0, [pc, #20]	; (80002c0 <main+0x38>)
 80002aa:	f001 f9bf 	bl	800162c <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *) dataIn, DOUBLE_BUFFER_I2S);
 80002ae:	2280      	movs	r2, #128	; 0x80
 80002b0:	4904      	ldr	r1, [pc, #16]	; (80002c4 <main+0x3c>)
 80002b2:	4805      	ldr	r0, [pc, #20]	; (80002c8 <main+0x40>)
 80002b4:	f001 fa62 	bl	800177c <HAL_I2S_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <main+0x30>
 80002ba:	bf00      	nop
 80002bc:	20000300 	.word	0x20000300
 80002c0:	200000c8 	.word	0x200000c8
 80002c4:	20000200 	.word	0x20000200
 80002c8:	20000104 	.word	0x20000104

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b094      	sub	sp, #80	; 0x50
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2238      	movs	r2, #56	; 0x38
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 ffd6 	bl	800328c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002f2:	f001 fb8d 	bl	8001a10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f6:	2302      	movs	r3, #2
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000300:	2340      	movs	r3, #64	; 0x40
 8000302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000308:	2302      	movs	r3, #2
 800030a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800030c:	2304      	movs	r3, #4
 800030e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000310:	234b      	movs	r3, #75	; 0x4b
 8000312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000318:	2302      	movs	r3, #2
 800031a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800031c:	2302      	movs	r3, #2
 800031e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f001 fc17 	bl	8001b58 <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000330:	f000 f950 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2303      	movs	r3, #3
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2104      	movs	r1, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f001 ff1b 	bl	8002188 <HAL_RCC_ClockConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000358:	f000 f93c 	bl	80005d4 <Error_Handler>
  }
}
 800035c:	bf00      	nop
 800035e:	3750      	adds	r7, #80	; 0x50
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000368:	4b10      	ldr	r3, [pc, #64]	; (80003ac <MX_I2S2_Init+0x48>)
 800036a:	4a11      	ldr	r2, [pc, #68]	; (80003b0 <MX_I2S2_Init+0x4c>)
 800036c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_I2S2_Init+0x48>)
 8000370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000374:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <MX_I2S2_Init+0x48>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_I2S2_Init+0x48>)
 800037e:	2201      	movs	r2, #1
 8000380:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <MX_I2S2_Init+0x48>)
 8000384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000388:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_I2S2_Init+0x48>)
 800038c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000390:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_I2S2_Init+0x48>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000398:	4804      	ldr	r0, [pc, #16]	; (80003ac <MX_I2S2_Init+0x48>)
 800039a:	f001 f867 	bl	800146c <HAL_I2S_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 80003a4:	f000 f916 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	200000c8 	.word	0x200000c8
 80003b0:	40003800 	.word	0x40003800

080003b4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_I2S3_Init+0x48>)
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <MX_I2S3_Init+0x4c>)
 80003bc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_I2S3_Init+0x48>)
 80003c0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003c4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <MX_I2S3_Init+0x48>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_I2S3_Init+0x48>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <MX_I2S3_Init+0x48>)
 80003d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003d8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_I2S3_Init+0x48>)
 80003dc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80003e0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_I2S3_Init+0x48>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80003e8:	4804      	ldr	r0, [pc, #16]	; (80003fc <MX_I2S3_Init+0x48>)
 80003ea:	f001 f83f 	bl	800146c <HAL_I2S_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_I2S3_Init+0x44>
  {
    Error_Handler();
 80003f4:	f000 f8ee 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000104 	.word	0x20000104
 8000400:	40003c00 	.word	0x40003c00

08000404 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800040a:	4b16      	ldr	r3, [pc, #88]	; (8000464 <MX_DMA_Init+0x60>)
 800040c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800040e:	4a15      	ldr	r2, [pc, #84]	; (8000464 <MX_DMA_Init+0x60>)
 8000410:	f043 0304 	orr.w	r3, r3, #4
 8000414:	6493      	str	r3, [r2, #72]	; 0x48
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <MX_DMA_Init+0x60>)
 8000418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800041a:	f003 0304 	and.w	r3, r3, #4
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <MX_DMA_Init+0x60>)
 8000424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000426:	4a0f      	ldr	r2, [pc, #60]	; (8000464 <MX_DMA_Init+0x60>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6493      	str	r3, [r2, #72]	; 0x48
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <MX_DMA_Init+0x60>)
 8000430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2100      	movs	r1, #0
 800043e:	200d      	movs	r0, #13
 8000440:	f000 fbeb 	bl	8000c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000444:	200d      	movs	r0, #13
 8000446:	f000 fc02 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	200e      	movs	r0, #14
 8000450:	f000 fbe3 	bl	8000c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000454:	200e      	movs	r0, #14
 8000456:	f000 fbfa 	bl	8000c4e <HAL_NVIC_EnableIRQ>

}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_GPIO_Init+0x5c>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <MX_GPIO_Init+0x5c>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_GPIO_Init+0x5c>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_GPIO_Init+0x5c>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <MX_GPIO_Init+0x5c>)
 800048c:	f043 0302 	orr.w	r3, r3, #2
 8000490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_GPIO_Init+0x5c>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	f003 0302 	and.w	r3, r3, #2
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_GPIO_Init+0x5c>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	4a08      	ldr	r2, [pc, #32]	; (80004c4 <MX_GPIO_Init+0x5c>)
 80004a4:	f043 0304 	orr.w	r3, r3, #4
 80004a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_GPIO_Init+0x5c>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	f003 0304 	and.w	r3, r3, #4
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <process>:

/* USER CODE BEGIN 4 */
void inline process(int16_t *pIn, int16_t *pOut, uint16_t size) {
 80004c8:	b480      	push	{r7}
 80004ca:	b089      	sub	sp, #36	; 0x24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4613      	mov	r3, r2
 80004d4:	80fb      	strh	r3, [r7, #6]

	  static int16_t x_prev_l = 0;
	  static int16_t x_prev_r = 0;
	  static uint8_t ix = 0;

	  for (uint16_t i = 0; i < size/2; i++) {
 80004d6:	2300      	movs	r3, #0
 80004d8:	83fb      	strh	r3, [r7, #30]
 80004da:	e064      	b.n	80005a6 <process+0xde>
	    // simple DC notch
	    int32_t y_l = (int32_t)(*pIn - x_prev_l);
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b36      	ldr	r3, [pc, #216]	; (80005c0 <process+0xf8>)
 80004e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	61bb      	str	r3, [r7, #24]
	    x_prev_l = *pIn;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80004f4:	4b32      	ldr	r3, [pc, #200]	; (80005c0 <process+0xf8>)
 80004f6:	801a      	strh	r2, [r3, #0]
	    pIn++;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3302      	adds	r3, #2
 80004fc:	60fb      	str	r3, [r7, #12]
	    int32_t y_r = (int32_t)(*pIn - x_prev_r);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000504:	461a      	mov	r2, r3
 8000506:	4b2f      	ldr	r3, [pc, #188]	; (80005c4 <process+0xfc>)
 8000508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	617b      	str	r3, [r7, #20]
	    x_prev_r = *pIn;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <process+0xfc>)
 8000518:	801a      	strh	r2, [r3, #0]

	    // modulation
	    y_l = y_l*COS_TABLE[ix];
 800051a:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <process+0x100>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	461a      	mov	r2, r3
 8000520:	4b2a      	ldr	r3, [pc, #168]	; (80005cc <process+0x104>)
 8000522:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000526:	461a      	mov	r2, r3
 8000528:	69bb      	ldr	r3, [r7, #24]
 800052a:	fb02 f303 	mul.w	r3, r2, r3
 800052e:	61bb      	str	r3, [r7, #24]
	    y_r = y_r*COS_TABLE[ix++];
 8000530:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <process+0x100>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	b2d1      	uxtb	r1, r2
 8000538:	4a23      	ldr	r2, [pc, #140]	; (80005c8 <process+0x100>)
 800053a:	7011      	strb	r1, [r2, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b23      	ldr	r3, [pc, #140]	; (80005cc <process+0x104>)
 8000540:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000544:	461a      	mov	r2, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	fb02 f303 	mul.w	r3, r2, r3
 800054c:	617b      	str	r3, [r7, #20]
	    ix++;
 800054e:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <process+0x100>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <process+0x100>)
 8000558:	701a      	strb	r2, [r3, #0]
	    ix %= COS_TABLE_LEN;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <process+0x100>)
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <process+0x108>)
 8000560:	fba3 1302 	umull	r1, r3, r3, r2
 8000564:	0999      	lsrs	r1, r3, #6
 8000566:	460b      	mov	r3, r1
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	440b      	add	r3, r1
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <process+0x100>)
 8000574:	701a      	strb	r2, [r3, #0]

	    // rescaling to 16 bits
	    y_l >>= (15 - GAIN);
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	131b      	asrs	r3, r3, #12
 800057a:	61bb      	str	r3, [r7, #24]
	    y_r >>= (15 - GAIN);
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	131b      	asrs	r3, r3, #12
 8000580:	617b      	str	r3, [r7, #20]

	    // duplicate output to LEFT and RIGHT channels
	    *pOut++ = (int16_t)y_l;
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	1c9a      	adds	r2, r3, #2
 8000586:	60ba      	str	r2, [r7, #8]
 8000588:	69ba      	ldr	r2, [r7, #24]
 800058a:	b212      	sxth	r2, r2
 800058c:	801a      	strh	r2, [r3, #0]
	    *pOut++ = (int16_t)y_r;
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	1c9a      	adds	r2, r3, #2
 8000592:	60ba      	str	r2, [r7, #8]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	b212      	sxth	r2, r2
 8000598:	801a      	strh	r2, [r3, #0]
	    pIn += 1;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3302      	adds	r3, #2
 800059e:	60fb      	str	r3, [r7, #12]
	  for (uint16_t i = 0; i < size/2; i++) {
 80005a0:	8bfb      	ldrh	r3, [r7, #30]
 80005a2:	3301      	adds	r3, #1
 80005a4:	83fb      	strh	r3, [r7, #30]
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	085b      	lsrs	r3, r3, #1
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	8bfa      	ldrh	r2, [r7, #30]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d394      	bcc.n	80004dc <process+0x14>
        // Here copy input buffer to output buffer
    	//printf("buffer in stereo: %d \r\n", bufferInStereo[i]);
    	//bufferOutStereo[2*i]=bufferInStereo[2*i];
    	//bufferOutStereo[2*i+1]=bufferInStereo[2*i+1]>>2;
    	//printf("buffer in stereo: %d \r\n", bufferOutStereo[i]);
}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	3724      	adds	r7, #36	; 0x24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000400 	.word	0x20000400
 80005c4:	20000402 	.word	0x20000402
 80005c8:	20000404 	.word	0x20000404
 80005cc:	20000000 	.word	0x20000000
 80005d0:	cccccccd 	.word	0xcccccccd

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005dc:	e7fe      	b.n	80005dc <Error_Handler+0x8>
	...

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_MspInit+0x44>)
 80005e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <HAL_MspInit+0x44>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6613      	str	r3, [r2, #96]	; 0x60
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_MspInit+0x44>)
 80005f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_MspInit+0x44>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <HAL_MspInit+0x44>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6593      	str	r3, [r2, #88]	; 0x58
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_MspInit+0x44>)
 800060c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09e      	sub	sp, #120	; 0x78
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	2244      	movs	r2, #68	; 0x44
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fe1f 	bl	800328c <memset>
  if(hi2s->Instance==SPI2)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a86      	ldr	r2, [pc, #536]	; (800086c <HAL_I2S_MspInit+0x244>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d17f      	bne.n	8000758 <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000658:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800065c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 800065e:	2300      	movs	r3, #0
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	4618      	mov	r0, r3
 8000668:	f001 ffaa 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 8000672:	f7ff ffaf 	bl	80005d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000676:	4b7e      	ldr	r3, [pc, #504]	; (8000870 <HAL_I2S_MspInit+0x248>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067a:	4a7d      	ldr	r2, [pc, #500]	; (8000870 <HAL_I2S_MspInit+0x248>)
 800067c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000680:	6593      	str	r3, [r2, #88]	; 0x58
 8000682:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <HAL_I2S_MspInit+0x248>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068a:	61fb      	str	r3, [r7, #28]
 800068c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b78      	ldr	r3, [pc, #480]	; (8000870 <HAL_I2S_MspInit+0x248>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a77      	ldr	r2, [pc, #476]	; (8000870 <HAL_I2S_MspInit+0x248>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b75      	ldr	r3, [pc, #468]	; (8000870 <HAL_I2S_MspInit+0x248>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
 80006a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b72      	ldr	r3, [pc, #456]	; (8000870 <HAL_I2S_MspInit+0x248>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a71      	ldr	r2, [pc, #452]	; (8000870 <HAL_I2S_MspInit+0x248>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b6f      	ldr	r3, [pc, #444]	; (8000870 <HAL_I2S_MspInit+0x248>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80006be:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80006c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006d0:	2305      	movs	r3, #5
 80006d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006d8:	4619      	mov	r1, r3
 80006da:	4866      	ldr	r0, [pc, #408]	; (8000874 <HAL_I2S_MspInit+0x24c>)
 80006dc:	f000 fd44 	bl	8001168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80006f0:	2306      	movs	r3, #6
 80006f2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006f8:	4619      	mov	r1, r3
 80006fa:	485f      	ldr	r0, [pc, #380]	; (8000878 <HAL_I2S_MspInit+0x250>)
 80006fc:	f000 fd34 	bl	8001168 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8000700:	4b5e      	ldr	r3, [pc, #376]	; (800087c <HAL_I2S_MspInit+0x254>)
 8000702:	4a5f      	ldr	r2, [pc, #380]	; (8000880 <HAL_I2S_MspInit+0x258>)
 8000704:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000706:	4b5d      	ldr	r3, [pc, #372]	; (800087c <HAL_I2S_MspInit+0x254>)
 8000708:	220d      	movs	r2, #13
 800070a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800070c:	4b5b      	ldr	r3, [pc, #364]	; (800087c <HAL_I2S_MspInit+0x254>)
 800070e:	2210      	movs	r2, #16
 8000710:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000712:	4b5a      	ldr	r3, [pc, #360]	; (800087c <HAL_I2S_MspInit+0x254>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000718:	4b58      	ldr	r3, [pc, #352]	; (800087c <HAL_I2S_MspInit+0x254>)
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800071e:	4b57      	ldr	r3, [pc, #348]	; (800087c <HAL_I2S_MspInit+0x254>)
 8000720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000724:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000726:	4b55      	ldr	r3, [pc, #340]	; (800087c <HAL_I2S_MspInit+0x254>)
 8000728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800072c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800072e:	4b53      	ldr	r3, [pc, #332]	; (800087c <HAL_I2S_MspInit+0x254>)
 8000730:	2220      	movs	r2, #32
 8000732:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000734:	4b51      	ldr	r3, [pc, #324]	; (800087c <HAL_I2S_MspInit+0x254>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800073a:	4850      	ldr	r0, [pc, #320]	; (800087c <HAL_I2S_MspInit+0x254>)
 800073c:	f000 faa2 	bl	8000c84 <HAL_DMA_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_I2S_MspInit+0x122>
    {
      Error_Handler();
 8000746:	f7ff ff45 	bl	80005d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a4b      	ldr	r2, [pc, #300]	; (800087c <HAL_I2S_MspInit+0x254>)
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000750:	4a4a      	ldr	r2, [pc, #296]	; (800087c <HAL_I2S_MspInit+0x254>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000756:	e084      	b.n	8000862 <HAL_I2S_MspInit+0x23a>
  else if(hi2s->Instance==SPI3)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a49      	ldr	r2, [pc, #292]	; (8000884 <HAL_I2S_MspInit+0x25c>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d17f      	bne.n	8000862 <HAL_I2S_MspInit+0x23a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000766:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8000768:	2300      	movs	r3, #0
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f001 ff25 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <HAL_I2S_MspInit+0x158>
      Error_Handler();
 800077c:	f7ff ff2a 	bl	80005d4 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000780:	4b3b      	ldr	r3, [pc, #236]	; (8000870 <HAL_I2S_MspInit+0x248>)
 8000782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000784:	4a3a      	ldr	r2, [pc, #232]	; (8000870 <HAL_I2S_MspInit+0x248>)
 8000786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800078a:	6593      	str	r3, [r2, #88]	; 0x58
 800078c:	4b38      	ldr	r3, [pc, #224]	; (8000870 <HAL_I2S_MspInit+0x248>)
 800078e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b35      	ldr	r3, [pc, #212]	; (8000870 <HAL_I2S_MspInit+0x248>)
 800079a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079c:	4a34      	ldr	r2, [pc, #208]	; (8000870 <HAL_I2S_MspInit+0x248>)
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a4:	4b32      	ldr	r3, [pc, #200]	; (8000870 <HAL_I2S_MspInit+0x248>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <HAL_I2S_MspInit+0x248>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	4a2e      	ldr	r2, [pc, #184]	; (8000870 <HAL_I2S_MspInit+0x248>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007bc:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <HAL_I2S_MspInit+0x248>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007c8:	2310      	movs	r3, #16
 80007ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007d8:	2306      	movs	r3, #6
 80007da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 fcbf 	bl	8001168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80007ea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80007ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007fc:	2306      	movs	r3, #6
 80007fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000800:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000804:	4619      	mov	r1, r3
 8000806:	481c      	ldr	r0, [pc, #112]	; (8000878 <HAL_I2S_MspInit+0x250>)
 8000808:	f000 fcae 	bl	8001168 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Channel4;
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <HAL_I2S_MspInit+0x260>)
 800080e:	4a1f      	ldr	r2, [pc, #124]	; (800088c <HAL_I2S_MspInit+0x264>)
 8000810:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <HAL_I2S_MspInit+0x260>)
 8000814:	220e      	movs	r2, #14
 8000816:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <HAL_I2S_MspInit+0x260>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <HAL_I2S_MspInit+0x260>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_I2S_MspInit+0x260>)
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <HAL_I2S_MspInit+0x260>)
 800082c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000830:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_I2S_MspInit+0x260>)
 8000834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000838:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_I2S_MspInit+0x260>)
 800083c:	2220      	movs	r2, #32
 800083e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_I2S_MspInit+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000846:	4810      	ldr	r0, [pc, #64]	; (8000888 <HAL_I2S_MspInit+0x260>)
 8000848:	f000 fa1c 	bl	8000c84 <HAL_DMA_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_I2S_MspInit+0x22e>
      Error_Handler();
 8000852:	f7ff febf 	bl	80005d4 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <HAL_I2S_MspInit+0x260>)
 800085a:	631a      	str	r2, [r3, #48]	; 0x30
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_I2S_MspInit+0x260>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000862:	bf00      	nop
 8000864:	3778      	adds	r7, #120	; 0x78
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40003800 	.word	0x40003800
 8000870:	40021000 	.word	0x40021000
 8000874:	48000400 	.word	0x48000400
 8000878:	48000800 	.word	0x48000800
 800087c:	20000140 	.word	0x20000140
 8000880:	40020030 	.word	0x40020030
 8000884:	40003c00 	.word	0x40003c00
 8000888:	200001a0 	.word	0x200001a0
 800088c:	40020044 	.word	0x40020044

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f8a4 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <DMA1_Channel3_IRQHandler+0x10>)
 80008ea:	f000 faee 	bl	8000eca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000140 	.word	0x20000140

080008f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA1_Channel4_IRQHandler+0x10>)
 80008fe:	f000 fae4 	bl	8000eca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001a0 	.word	0x200001a0

0800090c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000932:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 8000936:	490e      	ldr	r1, [pc, #56]	; (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 800094c:	4c0b      	ldr	r4, [pc, #44]	; (800097c <LoopForever+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800095a:	f7ff ffd7 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095e:	f002 fc71 	bl	8003244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000962:	f7ff fc91 	bl	8000288 <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   r0, =_estack
 8000968:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000974:	080032d4 	.word	0x080032d4
  ldr r2, =_sbss
 8000978:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800097c:	2000040c 	.word	0x2000040c

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>

08000982 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f939 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f80e 	bl	80009b4 <HAL_InitTick>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e001      	b.n	80009a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a4:	f7ff fe1c 	bl	80005e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a8:	79fb      	ldrb	r3, [r7, #7]

}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_InitTick+0x68>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d022      	beq.n	8000a0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_InitTick+0x6c>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_InitTick+0x68>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f944 	bl	8000c6a <HAL_SYSTICK_Config>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10f      	bne.n	8000a08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d809      	bhi.n	8000a02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	2200      	movs	r2, #0
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	f04f 30ff 	mov.w	r0, #4294967295
 80009f6:	f000 f910 	bl	8000c1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_InitTick+0x70>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e007      	b.n	8000a12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e004      	b.n	8000a12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e001      	b.n	8000a12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000a8 	.word	0x200000a8
 8000a20:	200000a0 	.word	0x200000a0
 8000a24:	200000a4 	.word	0x200000a4

08000a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x1c>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_IncTick+0x20>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <HAL_IncTick+0x1c>)
 8000a38:	6013      	str	r3, [r2, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	20000408 	.word	0x20000408
 8000a48:	200000a8 	.word	0x200000a8

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000408 	.word	0x20000408

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	; (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f7ff ff8e 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff29 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff40 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff90 	bl	8000b58 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5f 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff33 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffa4 	bl	8000bc0 <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e08d      	b.n	8000db2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <HAL_DMA_Init+0x138>)
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d80f      	bhi.n	8000cc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b45      	ldr	r3, [pc, #276]	; (8000dc0 <HAL_DMA_Init+0x13c>)
 8000caa:	4413      	add	r3, r2
 8000cac:	4a45      	ldr	r2, [pc, #276]	; (8000dc4 <HAL_DMA_Init+0x140>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	009a      	lsls	r2, r3, #2
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a42      	ldr	r2, [pc, #264]	; (8000dc8 <HAL_DMA_Init+0x144>)
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000cc0:	e00e      	b.n	8000ce0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <HAL_DMA_Init+0x148>)
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a3d      	ldr	r2, [pc, #244]	; (8000dc4 <HAL_DMA_Init+0x140>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	009a      	lsls	r2, r3, #2
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a3c      	ldr	r2, [pc, #240]	; (8000dd0 <HAL_DMA_Init+0x14c>)
 8000cde:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 f9b6 	bl	80010a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d40:	d102      	bne.n	8000d48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d5c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d010      	beq.n	8000d88 <HAL_DMA_Init+0x104>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d80c      	bhi.n	8000d88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f9d6 	bl	8001120 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	e008      	b.n	8000d9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40020407 	.word	0x40020407
 8000dc0:	bffdfff8 	.word	0xbffdfff8
 8000dc4:	cccccccd 	.word	0xcccccccd
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	bffdfbf8 	.word	0xbffdfbf8
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d101      	bne.n	8000df4 <HAL_DMA_Start_IT+0x20>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e066      	b.n	8000ec2 <HAL_DMA_Start_IT+0xee>
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2201      	movs	r2, #1
 8000df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d155      	bne.n	8000eb4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2200      	movs	r2, #0
 8000e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0201 	bic.w	r2, r2, #1
 8000e24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f000 f8fb 	bl	8001028 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d008      	beq.n	8000e4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 020e 	orr.w	r2, r2, #14
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e00f      	b.n	8000e6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0204 	bic.w	r2, r2, #4
 8000e5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 020a 	orr.w	r2, r2, #10
 8000e6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d007      	beq.n	8000e8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d007      	beq.n	8000ea2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ea0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f042 0201 	orr.w	r2, r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e005      	b.n	8000ec0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	2204      	movs	r2, #4
 8000eec:	409a      	lsls	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d026      	beq.n	8000f44 <HAL_DMA_IRQHandler+0x7a>
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d021      	beq.n	8000f44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d107      	bne.n	8000f1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0204 	bic.w	r2, r2, #4
 8000f1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f003 021f 	and.w	r2, r3, #31
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d071      	beq.n	800101e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f42:	e06c      	b.n	800101e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f48:	f003 031f 	and.w	r3, r3, #31
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d02e      	beq.n	8000fb6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d029      	beq.n	8000fb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0320 	and.w	r3, r3, #32
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10b      	bne.n	8000f88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 020a 	bic.w	r2, r2, #10
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	2102      	movs	r1, #2
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d038      	beq.n	800101e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000fb4:	e033      	b.n	800101e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	2208      	movs	r2, #8
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d02a      	beq.n	8001020 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d025      	beq.n	8001020 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 020e 	bic.w	r2, r2, #14
 8000fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001012:	2b00      	cmp	r3, #0
 8001014:	d004      	beq.n	8001020 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800101e:	bf00      	nop
 8001020:	bf00      	nop
}
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800103e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001050:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f003 021f 	and.w	r2, r3, #31
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	2101      	movs	r1, #1
 8001060:	fa01 f202 	lsl.w	r2, r1, r2
 8001064:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2b10      	cmp	r3, #16
 8001074:	d108      	bne.n	8001088 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001086:	e007      	b.n	8001098 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	60da      	str	r2, [r3, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d802      	bhi.n	80010be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e001      	b.n	80010c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80010c0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3b08      	subs	r3, #8
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80010d0:	fba2 2303 	umull	r2, r3, r2, r3
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	009a      	lsls	r2, r3, #2
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4413      	add	r3, r2
 80010e4:	461a      	mov	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80010ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	2201      	movs	r2, #1
 80010f8:	409a      	lsls	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80010fe:	bf00      	nop
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40020407 	.word	0x40020407
 8001110:	40020800 	.word	0x40020800
 8001114:	40020820 	.word	0x40020820
 8001118:	cccccccd 	.word	0xcccccccd
 800111c:	40020880 	.word	0x40020880

08001120 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001142:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3b01      	subs	r3, #1
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	2201      	movs	r2, #1
 800114e:	409a      	lsls	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	1000823f 	.word	0x1000823f
 8001164:	40020940 	.word	0x40020940

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001176:	e15a      	b.n	800142e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 814c 	beq.w	8001428 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d005      	beq.n	80011a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d130      	bne.n	800120a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011de:	2201      	movs	r2, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	f003 0201 	and.w	r2, r3, #1
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b03      	cmp	r3, #3
 8001214:	d017      	beq.n	8001246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d123      	bne.n	800129a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	6939      	ldr	r1, [r7, #16]
 8001296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0203 	and.w	r2, r3, #3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80a6 	beq.w	8001428 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <HAL_GPIO_Init+0x2e4>)
 80012de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e0:	4a5a      	ldr	r2, [pc, #360]	; (800144c <HAL_GPIO_Init+0x2e4>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6613      	str	r3, [r2, #96]	; 0x60
 80012e8:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_GPIO_Init+0x2e4>)
 80012ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f4:	4a56      	ldr	r2, [pc, #344]	; (8001450 <HAL_GPIO_Init+0x2e8>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131e:	d01f      	beq.n	8001360 <HAL_GPIO_Init+0x1f8>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_GPIO_Init+0x2ec>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d019      	beq.n	800135c <HAL_GPIO_Init+0x1f4>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a4b      	ldr	r2, [pc, #300]	; (8001458 <HAL_GPIO_Init+0x2f0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <HAL_GPIO_Init+0x1f0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a4a      	ldr	r2, [pc, #296]	; (800145c <HAL_GPIO_Init+0x2f4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1ec>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a49      	ldr	r2, [pc, #292]	; (8001460 <HAL_GPIO_Init+0x2f8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1e8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a48      	ldr	r2, [pc, #288]	; (8001464 <HAL_GPIO_Init+0x2fc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1e4>
 8001348:	2305      	movs	r3, #5
 800134a:	e00a      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 800134c:	2306      	movs	r3, #6
 800134e:	e008      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 8001350:	2304      	movs	r3, #4
 8001352:	e006      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 8001354:	2303      	movs	r3, #3
 8001356:	e004      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 8001358:	2302      	movs	r3, #2
 800135a:	e002      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 8001360:	2300      	movs	r3, #0
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	f002 0203 	and.w	r2, r2, #3
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	4093      	lsls	r3, r2
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001372:	4937      	ldr	r1, [pc, #220]	; (8001450 <HAL_GPIO_Init+0x2e8>)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001380:	4b39      	ldr	r3, [pc, #228]	; (8001468 <HAL_GPIO_Init+0x300>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a4:	4a30      	ldr	r2, [pc, #192]	; (8001468 <HAL_GPIO_Init+0x300>)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <HAL_GPIO_Init+0x300>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ce:	4a26      	ldr	r2, [pc, #152]	; (8001468 <HAL_GPIO_Init+0x300>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_GPIO_Init+0x300>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_GPIO_Init+0x300>)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_GPIO_Init+0x300>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_GPIO_Init+0x300>)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	f47f ae9d 	bne.w	8001178 <HAL_GPIO_Init+0x10>
  }
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000
 8001454:	48000400 	.word	0x48000400
 8001458:	48000800 	.word	0x48000800
 800145c:	48000c00 	.word	0x48000c00
 8001460:	48001000 	.word	0x48001000
 8001464:	48001400 	.word	0x48001400
 8001468:	40010400 	.word	0x40010400

0800146c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0d0      	b.n	8001620 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff f8c8 	bl	8000628 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80014ae:	f023 030f 	bic.w	r3, r3, #15
 80014b2:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2202      	movs	r2, #2
 80014ba:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d061      	beq.n	8001588 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80014cc:	2310      	movs	r3, #16
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e001      	b.n	80014d6 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80014d2:	2320      	movs	r3, #32
 80014d4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b20      	cmp	r3, #32
 80014dc:	d802      	bhi.n	80014e4 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80014e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014e8:	f001 fa5a 	bl	80029a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80014ec:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f6:	d125      	bne.n	8001544 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d010      	beq.n	8001522 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	fbb2 f2f3 	udiv	r2, r2, r3
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	fbb2 f3f3 	udiv	r3, r2, r3
 800151c:	3305      	adds	r3, #5
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	e01f      	b.n	8001562 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	fbb2 f2f3 	udiv	r2, r2, r3
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	3305      	adds	r3, #5
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	e00e      	b.n	8001562 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fbb2 f2f3 	udiv	r2, r2, r3
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	461a      	mov	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	3305      	adds	r3, #5
 8001560:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4a30      	ldr	r2, [pc, #192]	; (8001628 <HAL_I2S_Init+0x1bc>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	08db      	lsrs	r3, r3, #3
 800156c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	e003      	b.n	8001590 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001588:	2302      	movs	r3, #2
 800158a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d902      	bls.n	800159c <HAL_I2S_Init+0x130>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	2bff      	cmp	r3, #255	; 0xff
 800159a:	d907      	bls.n	80015ac <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a0:	f043 0210 	orr.w	r2, r3, #16
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e039      	b.n	8001620 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	ea42 0103 	orr.w	r1, r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	430a      	orrs	r2, r1
 80015be:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80015ca:	f023 030f 	bic.w	r3, r3, #15
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6851      	ldr	r1, [r2, #4]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6892      	ldr	r2, [r2, #8]
 80015d6:	4311      	orrs	r1, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68d2      	ldr	r2, [r2, #12]
 80015dc:	4311      	orrs	r1, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6992      	ldr	r2, [r2, #24]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ee:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b30      	cmp	r3, #48	; 0x30
 80015f6:	d003      	beq.n	8001600 <HAL_I2S_Init+0x194>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2bb0      	cmp	r3, #176	; 0xb0
 80015fe:	d107      	bne.n	8001610 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800160e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	cccccccd 	.word	0xcccccccd

0800162c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_I2S_Transmit_DMA+0x1a>
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e08e      	b.n	8001768 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_I2S_Transmit_DMA+0x2e>
 8001656:	2302      	movs	r3, #2
 8001658:	e086      	b.n	8001768 <HAL_I2S_Transmit_DMA+0x13c>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d005      	beq.n	800167a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8001676:	2302      	movs	r3, #2
 8001678:	e076      	b.n	8001768 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2203      	movs	r2, #3
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d002      	beq.n	80016a6 <HAL_I2S_Transmit_DMA+0x7a>
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d10a      	bne.n	80016bc <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	845a      	strh	r2, [r3, #34]	; 0x22
 80016ba:	e005      	b.n	80016c8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	88fa      	ldrh	r2, [r7, #6]
 80016c6:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	4a28      	ldr	r2, [pc, #160]	; (8001770 <HAL_I2S_Transmit_DMA+0x144>)
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	4a27      	ldr	r2, [pc, #156]	; (8001774 <HAL_I2S_Transmit_DMA+0x148>)
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	4a26      	ldr	r2, [pc, #152]	; (8001778 <HAL_I2S_Transmit_DMA+0x14c>)
 80016de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80016e8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80016f0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8c1b      	ldrh	r3, [r3, #32]
 80016f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80016f8:	f7ff fb6c 	bl	8000dd4 <HAL_DMA_Start_IT>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00f      	beq.n	8001722 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	f043 0208 	orr.w	r2, r3, #8
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    __HAL_UNLOCK(hi2s);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e022      	b.n	8001768 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172c:	2b00      	cmp	r3, #0
 800172e:	d107      	bne.n	8001740 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	69da      	ldr	r2, [r3, #28]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800173e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d107      	bne.n	800175e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0202 	orr.w	r2, r2, #2
 800175c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800194b 	.word	0x0800194b
 8001774:	08001909 	.word	0x08001909
 8001778:	080019c5 	.word	0x080019c5

0800177c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	4613      	mov	r3, r2
 8001788:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_I2S_Receive_DMA+0x1a>
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0a1      	b.n	80018de <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_I2S_Receive_DMA+0x2e>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e099      	b.n	80018de <HAL_I2S_Receive_DMA+0x162>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d005      	beq.n	80017ca <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
 80017c8:	e089      	b.n	80018de <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2204      	movs	r2, #4
 80017ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pRxBuffPtr = pData;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d002      	beq.n	80017f6 <HAL_I2S_Receive_DMA+0x7a>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d10a      	bne.n	800180c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount = (Size << 1U);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	855a      	strh	r2, [r3, #42]	; 0x2a
 800180a:	e005      	b.n	8001818 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	88fa      	ldrh	r2, [r7, #6]
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount = Size;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	88fa      	ldrh	r2, [r7, #6]
 8001816:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <HAL_I2S_Receive_DMA+0x16c>)
 800181e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	4a31      	ldr	r2, [pc, #196]	; (80018ec <HAL_I2S_Receive_DMA+0x170>)
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	4a30      	ldr	r2, [pc, #192]	; (80018f0 <HAL_I2S_Receive_DMA+0x174>)
 800182e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800183a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800183e:	d10a      	bne.n	8001856 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	330c      	adds	r3, #12
 8001860:	4619      	mov	r1, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800186e:	f7ff fab1 	bl	8000dd4 <HAL_DMA_Start_IT>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00f      	beq.n	8001898 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187c:	f043 0208 	orr.w	r2, r3, #8
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    __HAL_UNLOCK(hi2s);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e022      	b.n	80018de <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d107      	bne.n	80018b6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	69da      	ldr	r2, [r3, #28]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018b4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	080019a9 	.word	0x080019a9
 80018ec:	08001967 	.word	0x08001967
 80018f0:	080019c5 	.word	0x080019c5

080018f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10e      	bne.n	800193c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0202 	bic.w	r2, r2, #2
 800192c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7fe fc91 	bl	8000264 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7fe fc71 	bl	8000240 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10e      	bne.n	800199a <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7fe fc46 	bl	800022c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f7fe fc2e 	bl	8000218 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0203 	bic.w	r2, r2, #3
 80019e0:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fa:	f043 0208 	orr.w	r2, r3, #8
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7ff ff76 	bl	80018f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d141      	bne.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2a:	d131      	bne.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a2c:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a32:	4a46      	ldr	r2, [pc, #280]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3c:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a44:	4a41      	ldr	r2, [pc, #260]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2232      	movs	r2, #50	; 0x32
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	4a3f      	ldr	r2, [pc, #252]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9b      	lsrs	r3, r3, #18
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a62:	e002      	b.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a76:	d102      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f2      	bne.n	8001a64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a7e:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d158      	bne.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e057      	b.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a90:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a96:	4a2d      	ldr	r2, [pc, #180]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001aa0:	e04d      	b.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa8:	d141      	bne.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aaa:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab6:	d131      	bne.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab8:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001abe:	4a23      	ldr	r2, [pc, #140]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad0:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2232      	movs	r2, #50	; 0x32
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	0c9b      	lsrs	r3, r3, #18
 8001aea:	3301      	adds	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aee:	e002      	b.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b02:	d102      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f2      	bne.n	8001af0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b16:	d112      	bne.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e011      	b.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b2c:	e007      	b.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	200000a0 	.word	0x200000a0
 8001b54:	431bde83 	.word	0x431bde83

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e306      	b.n	8002178 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d075      	beq.n	8001c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b76:	4b97      	ldr	r3, [pc, #604]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b80:	4b94      	ldr	r3, [pc, #592]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b0c      	cmp	r3, #12
 8001b8e:	d102      	bne.n	8001b96 <HAL_RCC_OscConfig+0x3e>
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d002      	beq.n	8001b9c <HAL_RCC_OscConfig+0x44>
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	4b8d      	ldr	r3, [pc, #564]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d05b      	beq.n	8001c60 <HAL_RCC_OscConfig+0x108>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d157      	bne.n	8001c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e2e1      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbc:	d106      	bne.n	8001bcc <HAL_RCC_OscConfig+0x74>
 8001bbe:	4b85      	ldr	r3, [pc, #532]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a84      	ldr	r2, [pc, #528]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0xb0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x98>
 8001bd6:	4b7f      	ldr	r3, [pc, #508]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7e      	ldr	r2, [pc, #504]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7b      	ldr	r2, [pc, #492]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0xb0>
 8001bf0:	4b78      	ldr	r3, [pc, #480]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a77      	ldr	r2, [pc, #476]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b75      	ldr	r3, [pc, #468]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a74      	ldr	r2, [pc, #464]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7fe ff1c 	bl	8000a4c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7fe ff18 	bl	8000a4c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e2a6      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2a:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0xc0>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7fe ff08 	bl	8000a4c <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7fe ff04 	bl	8000a4c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e292      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c52:	4b60      	ldr	r3, [pc, #384]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0xe8>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d075      	beq.n	8001d5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6e:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c78:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d102      	bne.n	8001c8e <HAL_RCC_OscConfig+0x136>
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_OscConfig+0x13c>
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d11f      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c94:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x154>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e265      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	4946      	ldr	r1, [pc, #280]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cc0:	4b45      	ldr	r3, [pc, #276]	; (8001dd8 <HAL_RCC_OscConfig+0x280>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fe75 	bl	80009b4 <HAL_InitTick>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d043      	beq.n	8001d58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e251      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a3c      	ldr	r2, [pc, #240]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7fe feb0 	bl	8000a4c <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf0:	f7fe feac 	bl	8000a4c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e23a      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d02:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	061b      	lsls	r3, r3, #24
 8001d1c:	492d      	ldr	r1, [pc, #180]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
 8001d22:	e01a      	b.n	8001d5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2a      	ldr	r2, [pc, #168]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7fe fe8c 	bl	8000a4c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d38:	f7fe fe88 	bl	8000a4c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e216      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x1e0>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d041      	beq.n	8001dea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d01c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d74:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7e:	f7fe fe65 	bl	8000a4c <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d86:	f7fe fe61 	bl	8000a4c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1ef      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ef      	beq.n	8001d86 <HAL_RCC_OscConfig+0x22e>
 8001da6:	e020      	b.n	8001dea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7fe fe48 	bl	8000a4c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dbe:	e00d      	b.n	8001ddc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7fe fe44 	bl	8000a4c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d906      	bls.n	8001ddc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1d2      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	200000a4 	.word	0x200000a4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ea      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80a6 	beq.w	8001f44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dfc:	4b84      	ldr	r3, [pc, #528]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2b4>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x2b6>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00d      	beq.n	8001e2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4b7f      	ldr	r3, [pc, #508]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	4a7e      	ldr	r2, [pc, #504]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e1e:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2e:	4b79      	ldr	r3, [pc, #484]	; (8002014 <HAL_RCC_OscConfig+0x4bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d118      	bne.n	8001e6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e3a:	4b76      	ldr	r3, [pc, #472]	; (8002014 <HAL_RCC_OscConfig+0x4bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a75      	ldr	r2, [pc, #468]	; (8002014 <HAL_RCC_OscConfig+0x4bc>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e46:	f7fe fe01 	bl	8000a4c <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4e:	f7fe fdfd 	bl	8000a4c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e18b      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e60:	4b6c      	ldr	r3, [pc, #432]	; (8002014 <HAL_RCC_OscConfig+0x4bc>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d108      	bne.n	8001e86 <HAL_RCC_OscConfig+0x32e>
 8001e74:	4b66      	ldr	r3, [pc, #408]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	4a65      	ldr	r2, [pc, #404]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e84:	e024      	b.n	8001ed0 <HAL_RCC_OscConfig+0x378>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d110      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x358>
 8001e8e:	4b60      	ldr	r3, [pc, #384]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	4a5e      	ldr	r2, [pc, #376]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	4a5a      	ldr	r2, [pc, #360]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eae:	e00f      	b.n	8001ed0 <HAL_RCC_OscConfig+0x378>
 8001eb0:	4b57      	ldr	r3, [pc, #348]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	4a56      	ldr	r2, [pc, #344]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d016      	beq.n	8001f06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7fe fdb8 	bl	8000a4c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7fe fdb4 	bl	8000a4c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e140      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef6:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ed      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x388>
 8001f04:	e015      	b.n	8001f32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7fe fda1 	bl	8000a4c <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7fe fd9d 	bl	8000a4c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e129      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f24:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ed      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f32:	7ffb      	ldrb	r3, [r7, #31]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d105      	bne.n	8001f44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f38:	4b35      	ldr	r3, [pc, #212]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	4a34      	ldr	r2, [pc, #208]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d03c      	beq.n	8001fca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01c      	beq.n	8001f92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f58:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f5e:	4a2c      	ldr	r2, [pc, #176]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7fe fd70 	bl	8000a4c <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f70:	f7fe fd6c 	bl	8000a4c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e0fa      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f82:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ef      	beq.n	8001f70 <HAL_RCC_OscConfig+0x418>
 8001f90:	e01b      	b.n	8001fca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f98:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fd53 	bl	8000a4c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001faa:	f7fe fd4f 	bl	8000a4c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0dd      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ef      	bne.n	8001faa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80d1 	beq.w	8002176 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	f000 808b 	beq.w	80020f8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d15e      	bne.n	80020a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_RCC_OscConfig+0x4b8>)
 8001ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fd29 	bl	8000a4c <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffc:	e00c      	b.n	8002018 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7fe fd25 	bl	8000a4c <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d905      	bls.n	8002018 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e0b3      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ec      	bne.n	8001ffe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002024:	4b56      	ldr	r3, [pc, #344]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	4b56      	ldr	r3, [pc, #344]	; (8002184 <HAL_RCC_OscConfig+0x62c>)
 800202a:	4013      	ands	r3, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6a11      	ldr	r1, [r2, #32]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002034:	3a01      	subs	r2, #1
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	4311      	orrs	r1, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800203e:	0212      	lsls	r2, r2, #8
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002046:	0852      	lsrs	r2, r2, #1
 8002048:	3a01      	subs	r2, #1
 800204a:	0552      	lsls	r2, r2, #21
 800204c:	4311      	orrs	r1, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002052:	0852      	lsrs	r2, r2, #1
 8002054:	3a01      	subs	r2, #1
 8002056:	0652      	lsls	r2, r2, #25
 8002058:	4311      	orrs	r1, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800205e:	06d2      	lsls	r2, r2, #27
 8002060:	430a      	orrs	r2, r1
 8002062:	4947      	ldr	r1, [pc, #284]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 8002064:	4313      	orrs	r3, r2
 8002066:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002068:	4b45      	ldr	r3, [pc, #276]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a44      	ldr	r2, [pc, #272]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 800206e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002072:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002074:	4b42      	ldr	r3, [pc, #264]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a41      	ldr	r2, [pc, #260]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 800207a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7fe fce4 	bl	8000a4c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7fe fce0 	bl	8000a4c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e06e      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x530>
 80020a6:	e066      	b.n	8002176 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a34      	ldr	r2, [pc, #208]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 80020ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020b4:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a31      	ldr	r2, [pc, #196]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 80020ba:	f023 0303 	bic.w	r3, r3, #3
 80020be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020c0:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a2e      	ldr	r2, [pc, #184]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 80020c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7fe fcbc 	bl	8000a4c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7fe fcb8 	bl	8000a4c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e046      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x580>
 80020f6:	e03e      	b.n	8002176 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e039      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_RCC_OscConfig+0x628>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	429a      	cmp	r2, r3
 8002116:	d12c      	bne.n	8002172 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	3b01      	subs	r3, #1
 8002124:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d123      	bne.n	8002172 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002136:	429a      	cmp	r2, r3
 8002138:	d11b      	bne.n	8002172 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d113      	bne.n	8002172 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	3b01      	subs	r3, #1
 8002158:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d109      	bne.n	8002172 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	3b01      	subs	r3, #1
 800216c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000
 8002184:	019f800c 	.word	0x019f800c

08002188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e11e      	b.n	80023de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b91      	ldr	r3, [pc, #580]	; (80023e8 <HAL_RCC_ClockConfig+0x260>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d910      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b8e      	ldr	r3, [pc, #568]	; (80023e8 <HAL_RCC_ClockConfig+0x260>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 020f 	bic.w	r2, r3, #15
 80021b6:	498c      	ldr	r1, [pc, #560]	; (80023e8 <HAL_RCC_ClockConfig+0x260>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b8a      	ldr	r3, [pc, #552]	; (80023e8 <HAL_RCC_ClockConfig+0x260>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e106      	b.n	80023de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d073      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d129      	bne.n	8002238 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e4:	4b81      	ldr	r3, [pc, #516]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0f4      	b.n	80023de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021f4:	f000 f99e 	bl	8002534 <RCC_GetSysClockFreqFromPLLSource>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4a7c      	ldr	r2, [pc, #496]	; (80023f0 <HAL_RCC_ClockConfig+0x268>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d93f      	bls.n	8002282 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002202:	4b7a      	ldr	r3, [pc, #488]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002216:	2b00      	cmp	r3, #0
 8002218:	d033      	beq.n	8002282 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800221e:	2b00      	cmp	r3, #0
 8002220:	d12f      	bne.n	8002282 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002222:	4b72      	ldr	r3, [pc, #456]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800222a:	4a70      	ldr	r2, [pc, #448]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 800222c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002230:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e024      	b.n	8002282 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d107      	bne.n	8002250 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0c6      	b.n	80023de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002250:	4b66      	ldr	r3, [pc, #408]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0be      	b.n	80023de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002260:	f000 f8ce 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002264:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a61      	ldr	r2, [pc, #388]	; (80023f0 <HAL_RCC_ClockConfig+0x268>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d909      	bls.n	8002282 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800226e:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002276:	4a5d      	ldr	r2, [pc, #372]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4957      	ldr	r1, [pc, #348]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002294:	f7fe fbda 	bl	8000a4c <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7fe fbd6 	bl	8000a4c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e095      	b.n	80023de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b4e      	ldr	r3, [pc, #312]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d023      	beq.n	8002318 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a42      	ldr	r2, [pc, #264]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 80022e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022f4:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022fc:	4a3b      	ldr	r2, [pc, #236]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 80022fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002302:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002304:	4b39      	ldr	r3, [pc, #228]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4936      	ldr	r1, [pc, #216]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
 8002316:	e008      	b.n	800232a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b80      	cmp	r3, #128	; 0x80
 800231c:	d105      	bne.n	800232a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800231e:	4b33      	ldr	r3, [pc, #204]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4a32      	ldr	r2, [pc, #200]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002328:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800232a:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_RCC_ClockConfig+0x260>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d21d      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_ClockConfig+0x260>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 020f 	bic.w	r2, r3, #15
 8002340:	4929      	ldr	r1, [pc, #164]	; (80023e8 <HAL_RCC_ClockConfig+0x260>)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002348:	f7fe fb80 	bl	8000a4c <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7fe fb7c 	bl	8000a4c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e03b      	b.n	80023de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_ClockConfig+0x260>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d1ed      	bne.n	8002350 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4917      	ldr	r1, [pc, #92]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	490f      	ldr	r1, [pc, #60]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023b2:	f000 f825 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_RCC_ClockConfig+0x264>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	490c      	ldr	r1, [pc, #48]	; (80023f4 <HAL_RCC_ClockConfig+0x26c>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x270>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_RCC_ClockConfig+0x274>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe faec 	bl	80009b4 <HAL_InitTick>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	04c4b400 	.word	0x04c4b400
 80023f4:	080032b4 	.word	0x080032b4
 80023f8:	200000a0 	.word	0x200000a0
 80023fc:	200000a4 	.word	0x200000a4

08002400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b04      	cmp	r3, #4
 8002410:	d102      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002412:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	e047      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d102      	bne.n	800242a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002424:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	e03e      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d136      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	3301      	adds	r3, #1
 800244c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d10c      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002454:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245e:	68d2      	ldr	r2, [r2, #12]
 8002460:	0a12      	lsrs	r2, r2, #8
 8002462:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002466:	fb02 f303 	mul.w	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
      break;
 800246c:	e00c      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800246e:	4a13      	ldr	r2, [pc, #76]	; (80024bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002478:	68d2      	ldr	r2, [r2, #12]
 800247a:	0a12      	lsrs	r2, r2, #8
 800247c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	617b      	str	r3, [r7, #20]
      break;
 8002486:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0e5b      	lsrs	r3, r3, #25
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	3301      	adds	r3, #1
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e001      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024a8:	693b      	ldr	r3, [r7, #16]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	00f42400 	.word	0x00f42400
 80024c0:	007a1200 	.word	0x007a1200

080024c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	200000a0 	.word	0x200000a0

080024dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024e0:	f7ff fff0 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	4904      	ldr	r1, [pc, #16]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	080032c4 	.word	0x080032c4

08002508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800250c:	f7ff ffda 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	0adb      	lsrs	r3, r3, #11
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4904      	ldr	r1, [pc, #16]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x28>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	080032c4 	.word	0x080032c4

08002534 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3301      	adds	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d10c      	bne.n	8002572 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002558:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002562:	68d2      	ldr	r2, [r2, #12]
 8002564:	0a12      	lsrs	r2, r2, #8
 8002566:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	617b      	str	r3, [r7, #20]
    break;
 8002570:	e00c      	b.n	800258c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800257c:	68d2      	ldr	r2, [r2, #12]
 800257e:	0a12      	lsrs	r2, r2, #8
 8002580:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
    break;
 800258a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0e5b      	lsrs	r3, r3, #25
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	3301      	adds	r3, #1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025a6:	687b      	ldr	r3, [r7, #4]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40021000 	.word	0x40021000
 80025b8:	007a1200 	.word	0x007a1200
 80025bc:	00f42400 	.word	0x00f42400

080025c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c8:	2300      	movs	r3, #0
 80025ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025cc:	2300      	movs	r3, #0
 80025ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8098 	beq.w	800270e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	4a3f      	ldr	r2, [pc, #252]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6593      	str	r3, [r2, #88]	; 0x58
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002606:	2301      	movs	r3, #1
 8002608:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800260a:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a39      	ldr	r2, [pc, #228]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002616:	f7fe fa19 	bl	8000a4c <HAL_GetTick>
 800261a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800261c:	e009      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe fa15 	bl	8000a4c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d902      	bls.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	74fb      	strb	r3, [r7, #19]
        break;
 8002630:	e005      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0ef      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d159      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01e      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	429a      	cmp	r2, r3
 800265e:	d019      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800266c:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800267c:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800268c:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe f9d5 	bl	8000a4c <HAL_GetTick>
 80026a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a4:	e00b      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe f9d1 	bl	8000a4c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d902      	bls.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	74fb      	strb	r3, [r7, #19]
            break;
 80026bc:	e006      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ec      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4903      	ldr	r1, [pc, #12]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026e8:	e008      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	74bb      	strb	r3, [r7, #18]
 80026ee:	e005      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026fc:	7c7b      	ldrb	r3, [r7, #17]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4ba6      	ldr	r3, [pc, #664]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	4aa5      	ldr	r2, [pc, #660]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800271a:	4ba0      	ldr	r3, [pc, #640]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f023 0203 	bic.w	r2, r3, #3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	499c      	ldr	r1, [pc, #624]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800273c:	4b97      	ldr	r3, [pc, #604]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f023 020c 	bic.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4994      	ldr	r1, [pc, #592]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800275e:	4b8f      	ldr	r3, [pc, #572]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	498b      	ldr	r1, [pc, #556]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002780:	4b86      	ldr	r3, [pc, #536]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	4983      	ldr	r1, [pc, #524]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027a2:	4b7e      	ldr	r3, [pc, #504]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	497a      	ldr	r1, [pc, #488]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	4972      	ldr	r1, [pc, #456]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e6:	4b6d      	ldr	r3, [pc, #436]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4969      	ldr	r1, [pc, #420]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002808:	4b64      	ldr	r3, [pc, #400]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4961      	ldr	r1, [pc, #388]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800282a:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	4958      	ldr	r1, [pc, #352]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d015      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	4950      	ldr	r1, [pc, #320]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800286a:	d105      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800286c:	4b4b      	ldr	r3, [pc, #300]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4a4a      	ldr	r2, [pc, #296]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002876:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002880:	2b00      	cmp	r3, #0
 8002882:	d015      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002884:	4b45      	ldr	r3, [pc, #276]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	4942      	ldr	r1, [pc, #264]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a2:	d105      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a4:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a3c      	ldr	r2, [pc, #240]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028bc:	4b37      	ldr	r3, [pc, #220]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4934      	ldr	r1, [pc, #208]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028da:	d105      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028dc:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a2e      	ldr	r2, [pc, #184]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f4:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	4926      	ldr	r1, [pc, #152]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002912:	d105      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800291e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	4918      	ldr	r1, [pc, #96]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800294a:	d105      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a12      	ldr	r2, [pc, #72]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002956:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d015      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	490a      	ldr	r1, [pc, #40]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002982:	d105      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002990:	7cbb      	ldrb	r3, [r7, #18]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029b2:	d136      	bne.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80029b4:	4bac      	ldr	r3, [pc, #688]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029be:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80029c0:	4ba9      	ldr	r3, [pc, #676]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d108      	bne.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d4:	d104      	bne.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80029d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	f000 bc2a 	b.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80029e0:	4ba1      	ldr	r3, [pc, #644]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80029e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d108      	bne.n	8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f4:	d104      	bne.n	8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 80029f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	f000 bc1a 	b.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8002a00:	4b99      	ldr	r3, [pc, #612]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a0c:	f040 8412 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a16:	f040 840d 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    {
      frequency = HSE_VALUE / 32U;
 8002a1a:	4b94      	ldr	r3, [pc, #592]	; (8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	f000 bc09 	b.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8002a22:	4b91      	ldr	r3, [pc, #580]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a2e:	4b8e      	ldr	r3, [pc, #568]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3a:	d102      	bne.n	8002a42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8002a3c:	4b8c      	ldr	r3, [pc, #560]	; (8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	e017      	b.n	8002a72 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	e014      	b.n	8002a72 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8002a48:	4b87      	ldr	r3, [pc, #540]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d10c      	bne.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a54:	4b84      	ldr	r3, [pc, #528]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a60:	d102      	bne.n	8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8002a62:	4b84      	ldr	r3, [pc, #528]	; (8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	e004      	b.n	8002a72 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	e001      	b.n	8002a72 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002a72:	4b7d      	ldr	r3, [pc, #500]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8c:	f000 8378 	beq.w	8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a96:	f200 83ae 	bhi.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aa0:	f000 8337 	beq.w	8003112 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aaa:	f200 83a4 	bhi.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab4:	f000 82ff 	beq.w	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002abe:	f200 839a 	bhi.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac8:	f000 82c0 	beq.w	800304c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad2:	f200 8390 	bhi.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002adc:	f000 8272 	beq.w	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae6:	f200 8386 	bhi.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af0:	f000 8224 	beq.w	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afa:	f200 837c 	bhi.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b04:	f000 81da 	beq.w	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0e:	f200 8372 	bhi.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b18:	f000 81ab 	beq.w	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b22:	f200 8368 	bhi.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	f000 817d 	beq.w	8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	f200 8360 	bhi.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d84b      	bhi.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8359 	beq.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	2b1f      	cmp	r3, #31
 8002b4a:	f200 8354 	bhi.w	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002bdf 	.word	0x08002bdf
 8002b58:	08002c41 	.word	0x08002c41
 8002b5c:	080031f7 	.word	0x080031f7
 8002b60:	08002cb3 	.word	0x08002cb3
 8002b64:	080031f7 	.word	0x080031f7
 8002b68:	080031f7 	.word	0x080031f7
 8002b6c:	080031f7 	.word	0x080031f7
 8002b70:	08002d15 	.word	0x08002d15
 8002b74:	080031f7 	.word	0x080031f7
 8002b78:	080031f7 	.word	0x080031f7
 8002b7c:	080031f7 	.word	0x080031f7
 8002b80:	080031f7 	.word	0x080031f7
 8002b84:	080031f7 	.word	0x080031f7
 8002b88:	080031f7 	.word	0x080031f7
 8002b8c:	080031f7 	.word	0x080031f7
 8002b90:	080031f7 	.word	0x080031f7
 8002b94:	080031f7 	.word	0x080031f7
 8002b98:	080031f7 	.word	0x080031f7
 8002b9c:	080031f7 	.word	0x080031f7
 8002ba0:	080031f7 	.word	0x080031f7
 8002ba4:	080031f7 	.word	0x080031f7
 8002ba8:	080031f7 	.word	0x080031f7
 8002bac:	080031f7 	.word	0x080031f7
 8002bb0:	080031f7 	.word	0x080031f7
 8002bb4:	080031f7 	.word	0x080031f7
 8002bb8:	080031f7 	.word	0x080031f7
 8002bbc:	080031f7 	.word	0x080031f7
 8002bc0:	080031f7 	.word	0x080031f7
 8002bc4:	080031f7 	.word	0x080031f7
 8002bc8:	080031f7 	.word	0x080031f7
 8002bcc:	080031f7 	.word	0x080031f7
 8002bd0:	08002d77 	.word	0x08002d77
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	f000 8101 	beq.w	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
      break;

#endif /* QUADSPI */

    default:
      break;
 8002bdc:	e30b      	b.n	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002bde:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d103      	bne.n	8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        frequency = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7ff fc8a 	bl	8002508 <HAL_RCC_GetPCLK2Freq>
 8002bf4:	61f8      	str	r0, [r7, #28]
      break;
 8002bf6:	e300      	b.n	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d103      	bne.n	8002c06 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        frequency = HAL_RCC_GetSysClockFreq();
 8002bfe:	f7ff fbff 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002c02:	61f8      	str	r0, [r7, #28]
      break;
 8002c04:	e2f9      	b.n	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c12:	d105      	bne.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d102      	bne.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HSI_VALUE;
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002c1c:	61fb      	str	r3, [r7, #28]
      break;
 8002c1e:	e2ec      	b.n	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	f040 82e5 	bne.w	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	f040 82e1 	bne.w	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        frequency = LSE_VALUE;
 8002c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c3c:	61fb      	str	r3, [r7, #28]
      break;
 8002c3e:	e2dc      	b.n	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002c52:	f7ff fc43 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002c56:	61f8      	str	r0, [r7, #28]
      break;
 8002c58:	e2d1      	b.n	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d10b      	bne.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8002c60:	f7ff fbce 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002c64:	61f8      	str	r0, [r7, #28]
      break;
 8002c66:	e2ca      	b.n	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	0003d090 	.word	0x0003d090
 8002c70:	00f42400 	.word	0x00f42400
 8002c74:	007a1200 	.word	0x007a1200
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8002c78:	4b9e      	ldr	r3, [pc, #632]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c84:	d105      	bne.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
        frequency = HSI_VALUE;
 8002c8c:	4b9a      	ldr	r3, [pc, #616]	; (8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002c8e:	61fb      	str	r3, [r7, #28]
      break;
 8002c90:	e2b5      	b.n	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8002c92:	4b98      	ldr	r3, [pc, #608]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	f040 82ae 	bne.w	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	f040 82aa 	bne.w	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        frequency = LSE_VALUE;
 8002caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cae:	61fb      	str	r3, [r7, #28]
      break;
 8002cb0:	e2a5      	b.n	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002cb2:	4b90      	ldr	r3, [pc, #576]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002cbc:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d103      	bne.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f7ff fc0a 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002cc8:	61f8      	str	r0, [r7, #28]
      break;
 8002cca:	e29a      	b.n	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d103      	bne.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
        frequency = HAL_RCC_GetSysClockFreq();
 8002cd2:	f7ff fb95 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002cd6:	61f8      	str	r0, [r7, #28]
      break;
 8002cd8:	e293      	b.n	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8002cda:	4b86      	ldr	r3, [pc, #536]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d102      	bne.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
        frequency = HSI_VALUE;
 8002cee:	4b82      	ldr	r3, [pc, #520]	; (8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002cf0:	61fb      	str	r3, [r7, #28]
      break;
 8002cf2:	e286      	b.n	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8002cf4:	4b7f      	ldr	r3, [pc, #508]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	f040 827f 	bne.w	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b30      	cmp	r3, #48	; 0x30
 8002d08:	f040 827b 	bne.w	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
        frequency = LSE_VALUE;
 8002d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d10:	61fb      	str	r3, [r7, #28]
      break;
 8002d12:	e276      	b.n	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002d14:	4b77      	ldr	r3, [pc, #476]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d1e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002d26:	f7ff fbd9 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002d2a:	61f8      	str	r0, [r7, #28]
      break;
 8002d2c:	e26b      	b.n	8003206 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d103      	bne.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
        frequency = HAL_RCC_GetSysClockFreq();
 8002d34:	f7ff fb64 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002d38:	61f8      	str	r0, [r7, #28]
      break;
 8002d3a:	e264      	b.n	8003206 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8002d3c:	4b6d      	ldr	r3, [pc, #436]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d48:	d105      	bne.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b80      	cmp	r3, #128	; 0x80
 8002d4e:	d102      	bne.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
        frequency = HSI_VALUE;
 8002d50:	4b69      	ldr	r3, [pc, #420]	; (8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002d52:	61fb      	str	r3, [r7, #28]
      break;
 8002d54:	e257      	b.n	8003206 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8002d56:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	f040 8250 	bne.w	8003206 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2bc0      	cmp	r3, #192	; 0xc0
 8002d6a:	f040 824c 	bne.w	8003206 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        frequency = LSE_VALUE;
 8002d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d72:	61fb      	str	r3, [r7, #28]
      break;
 8002d74:	e247      	b.n	8003206 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002d76:	4b5f      	ldr	r3, [pc, #380]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d80:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002d88:	f7ff fba8 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002d8c:	61f8      	str	r0, [r7, #28]
      break;
 8002d8e:	e23c      	b.n	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d96:	d103      	bne.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
        frequency = HAL_RCC_GetSysClockFreq();
 8002d98:	f7ff fb32 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002d9c:	61f8      	str	r0, [r7, #28]
      break;
 8002d9e:	e234      	b.n	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8002da0:	4b54      	ldr	r3, [pc, #336]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dac:	d106      	bne.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db4:	d102      	bne.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        frequency = HSI_VALUE;
 8002db6:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002db8:	61fb      	str	r3, [r7, #28]
      break;
 8002dba:	e226      	b.n	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	f040 821f 	bne.w	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dd2:	f040 821a 	bne.w	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        frequency = LSE_VALUE;
 8002dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dda:	61fb      	str	r3, [r7, #28]
      break;
 8002ddc:	e215      	b.n	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002dde:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002de8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d103      	bne.n	8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002df0:	f7ff fb74 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002df4:	61f8      	str	r0, [r7, #28]
      break;
 8002df6:	e20a      	b.n	800320e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	d103      	bne.n	8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        frequency = HAL_RCC_GetSysClockFreq();
 8002e00:	f7ff fafe 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002e04:	61f8      	str	r0, [r7, #28]
      break;
 8002e06:	e202      	b.n	800320e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8002e08:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e14:	f040 81fb 	bne.w	800320e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1e:	f040 81f6 	bne.w	800320e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
        frequency = HSI_VALUE;
 8002e22:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002e24:	61fb      	str	r3, [r7, #28]
      break;
 8002e26:	e1f2      	b.n	800320e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e32:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d103      	bne.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002e3a:	f7ff fb4f 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002e3e:	61f8      	str	r0, [r7, #28]
      break;
 8002e40:	e1e7      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e48:	d103      	bne.n	8002e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
        frequency = HAL_RCC_GetSysClockFreq();
 8002e4a:	f7ff fad9 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002e4e:	61f8      	str	r0, [r7, #28]
      break;
 8002e50:	e1df      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8002e52:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5e:	f040 81d8 	bne.w	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e68:	f040 81d3 	bne.w	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
        frequency = HSI_VALUE;
 8002e6c:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002e6e:	61fb      	str	r3, [r7, #28]
      break;
 8002e70:	e1cf      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e7c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d103      	bne.n	8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002e84:	f7ff fb2a 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002e88:	61f8      	str	r0, [r7, #28]
      break;
 8002e8a:	e1c4      	b.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e92:	d103      	bne.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetSysClockFreq();
 8002e94:	f7ff fab4 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002e98:	61f8      	str	r0, [r7, #28]
      break;
 8002e9a:	e1bc      	b.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea8:	f040 81b5 	bne.w	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eb2:	f040 81b0 	bne.w	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
        frequency = HSI_VALUE;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002eb8:	61fb      	str	r3, [r7, #28]
      break;
 8002eba:	e1ac      	b.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002ec6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002ece:	f7ff fb05 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002ed2:	61f8      	str	r0, [r7, #28]
      break;
 8002ed4:	e1a1      	b.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eea:	d107      	bne.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
        frequency = LSI_VALUE;
 8002eec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e022      	b.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8002efc:	4b9b      	ldr	r3, [pc, #620]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f08:	d106      	bne.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f10:	d102      	bne.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
        frequency = HSI_VALUE;
 8002f12:	4b97      	ldr	r3, [pc, #604]	; (8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e010      	b.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8002f18:	4b94      	ldr	r3, [pc, #592]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	f040 8179 	bne.w	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f2e:	f040 8174 	bne.w	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        frequency = LSE_VALUE;
 8002f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f36:	61fb      	str	r3, [r7, #28]
      break;
 8002f38:	e16f      	b.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8002f3a:	e16e      	b.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8002f3c:	4b8b      	ldr	r3, [pc, #556]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f46:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
        frequency = HAL_RCC_GetSysClockFreq();
 8002f4e:	f7ff fa57 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002f52:	61f8      	str	r0, [r7, #28]
      break;
 8002f54:	e163      	b.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f5c:	d11b      	bne.n	8002f96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8002f5e:	4b83      	ldr	r3, [pc, #524]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8159 	beq.w	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002f6c:	4b7f      	ldr	r3, [pc, #508]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f76:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	fb03 f202 	mul.w	r2, r3, r2
 8002f80:	4b7a      	ldr	r3, [pc, #488]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	0d5b      	lsrs	r3, r3, #21
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	61fb      	str	r3, [r7, #28]
      break;
 8002f94:	e143      	b.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
        frequency = EXTERNAL_CLOCK_VALUE;
 8002f9e:	4b75      	ldr	r3, [pc, #468]	; (8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8002fa0:	61fb      	str	r3, [r7, #28]
      break;
 8002fa2:	e13c      	b.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8002fa4:	4b71      	ldr	r3, [pc, #452]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb0:	f040 8135 	bne.w	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fba:	f040 8130 	bne.w	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        frequency = HSI_VALUE;
 8002fbe:	4b6c      	ldr	r3, [pc, #432]	; (8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8002fc0:	61fb      	str	r3, [r7, #28]
      break;
 8002fc2:	e12c      	b.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002fc4:	4b69      	ldr	r3, [pc, #420]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002fce:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
        frequency = HAL_RCC_GetSysClockFreq();
 8002fd6:	f7ff fa13 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002fda:	61f8      	str	r0, [r7, #28]
      break;
 8002fdc:	e121      	b.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe4:	d11b      	bne.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8002fe6:	4b61      	ldr	r3, [pc, #388]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8117 	beq.w	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002ff4:	4b5d      	ldr	r3, [pc, #372]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ffe:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	fb03 f202 	mul.w	r2, r3, r2
 8003008:	4b58      	ldr	r3, [pc, #352]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0d5b      	lsrs	r3, r3, #21
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	61fb      	str	r3, [r7, #28]
      break;
 800301c:	e101      	b.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003024:	d102      	bne.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003026:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8003028:	61fb      	str	r3, [r7, #28]
      break;
 800302a:	e0fa      	b.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 800302c:	4b4f      	ldr	r3, [pc, #316]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003038:	f040 80f3 	bne.w	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003042:	f040 80ee 	bne.w	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        frequency = HSI_VALUE;
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8003048:	61fb      	str	r3, [r7, #28]
      break;
 800304a:	e0ea      	b.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800304c:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003056:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800305e:	d103      	bne.n	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003060:	f7ff fa3c 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8003064:	61f8      	str	r0, [r7, #28]
      break;
 8003066:	e0de      	b.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
        frequency = HSE_VALUE;
 800306e:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>)
 8003070:	61fb      	str	r3, [r7, #28]
      break;
 8003072:	e0d8      	b.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800307a:	f040 80d4 	bne.w	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80cd 	beq.w	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800308c:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003096:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	fb03 f202 	mul.w	r2, r3, r2
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	0d5b      	lsrs	r3, r3, #21
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	3301      	adds	r3, #1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	61fb      	str	r3, [r7, #28]
      break;
 80030b4:	e0b7      	b.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80030c0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c8:	d114      	bne.n	80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80030ca:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030d4:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	fb03 f202 	mul.w	r2, r3, r2
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	0d5b      	lsrs	r3, r3, #21
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	3301      	adds	r3, #1
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	61fb      	str	r3, [r7, #28]
      break;
 80030f2:	e09a      	b.n	800322a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 80030f4:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80030f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	f040 8093 	bne.w	800322a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 808f 	bne.w	800322a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
        frequency = HSI48_VALUE;
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 800310e:	61fb      	str	r3, [r7, #28]
      break;
 8003110:	e08b      	b.n	800322a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800311c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003124:	d114      	bne.n	8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003130:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	fb03 f202 	mul.w	r2, r3, r2
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	0d5b      	lsrs	r3, r3, #21
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	3301      	adds	r3, #1
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	61fb      	str	r3, [r7, #28]
      break;
 800314e:	e06e      	b.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8003152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b02      	cmp	r3, #2
 800315c:	d167      	bne.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d164      	bne.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
        frequency = HSI48_VALUE;
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 8003166:	61fb      	str	r3, [r7, #28]
      break;
 8003168:	e061      	b.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	00f42400 	.word	0x00f42400
 8003174:	00bb8000 	.word	0x00bb8000
 8003178:	007a1200 	.word	0x007a1200
 800317c:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8003180:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800318a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003192:	d128      	bne.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8003194:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d048      	beq.n	8003232 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80031a0:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031aa:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80031ac:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	0edb      	lsrs	r3, r3, #27
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
              pllp = 17U;
 80031ca:	2311      	movs	r3, #17
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e001      	b.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
              pllp = 7U;
 80031d0:	2307      	movs	r3, #7
 80031d2:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	fb03 f202 	mul.w	r2, r3, r2
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e2:	61fb      	str	r3, [r7, #28]
      break;
 80031e4:	e025      	b.n	8003232 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ec:	d121      	bne.n	8003232 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
        frequency = HAL_RCC_GetSysClockFreq();
 80031ee:	f7ff f907 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 80031f2:	61f8      	str	r0, [r7, #28]
      break;
 80031f4:	e01d      	b.n	8003232 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      break;
 80031f6:	bf00      	nop
 80031f8:	e01c      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80031fa:	bf00      	nop
 80031fc:	e01a      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80031fe:	bf00      	nop
 8003200:	e018      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8003202:	bf00      	nop
 8003204:	e016      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8003206:	bf00      	nop
 8003208:	e014      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800320a:	bf00      	nop
 800320c:	e012      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800320e:	bf00      	nop
 8003210:	e010      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8003212:	bf00      	nop
 8003214:	e00e      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8003216:	bf00      	nop
 8003218:	e00c      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800321a:	bf00      	nop
 800321c:	e00a      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800321e:	bf00      	nop
 8003220:	e008      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8003222:	bf00      	nop
 8003224:	e006      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8003226:	bf00      	nop
 8003228:	e004      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800322a:	bf00      	nop
 800322c:	e002      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800322e:	bf00      	nop
 8003230:	e000      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8003232:	bf00      	nop
    }
  }

  return(frequency);
 8003234:	69fb      	ldr	r3, [r7, #28]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000

08003244 <__libc_init_array>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	4d0d      	ldr	r5, [pc, #52]	; (800327c <__libc_init_array+0x38>)
 8003248:	4c0d      	ldr	r4, [pc, #52]	; (8003280 <__libc_init_array+0x3c>)
 800324a:	1b64      	subs	r4, r4, r5
 800324c:	10a4      	asrs	r4, r4, #2
 800324e:	2600      	movs	r6, #0
 8003250:	42a6      	cmp	r6, r4
 8003252:	d109      	bne.n	8003268 <__libc_init_array+0x24>
 8003254:	4d0b      	ldr	r5, [pc, #44]	; (8003284 <__libc_init_array+0x40>)
 8003256:	4c0c      	ldr	r4, [pc, #48]	; (8003288 <__libc_init_array+0x44>)
 8003258:	f000 f820 	bl	800329c <_init>
 800325c:	1b64      	subs	r4, r4, r5
 800325e:	10a4      	asrs	r4, r4, #2
 8003260:	2600      	movs	r6, #0
 8003262:	42a6      	cmp	r6, r4
 8003264:	d105      	bne.n	8003272 <__libc_init_array+0x2e>
 8003266:	bd70      	pop	{r4, r5, r6, pc}
 8003268:	f855 3b04 	ldr.w	r3, [r5], #4
 800326c:	4798      	blx	r3
 800326e:	3601      	adds	r6, #1
 8003270:	e7ee      	b.n	8003250 <__libc_init_array+0xc>
 8003272:	f855 3b04 	ldr.w	r3, [r5], #4
 8003276:	4798      	blx	r3
 8003278:	3601      	adds	r6, #1
 800327a:	e7f2      	b.n	8003262 <__libc_init_array+0x1e>
 800327c:	080032cc 	.word	0x080032cc
 8003280:	080032cc 	.word	0x080032cc
 8003284:	080032cc 	.word	0x080032cc
 8003288:	080032d0 	.word	0x080032d0

0800328c <memset>:
 800328c:	4402      	add	r2, r0
 800328e:	4603      	mov	r3, r0
 8003290:	4293      	cmp	r3, r2
 8003292:	d100      	bne.n	8003296 <memset+0xa>
 8003294:	4770      	bx	lr
 8003296:	f803 1b01 	strb.w	r1, [r3], #1
 800329a:	e7f9      	b.n	8003290 <memset+0x4>

0800329c <_init>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	bf00      	nop
 80032a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a2:	bc08      	pop	{r3}
 80032a4:	469e      	mov	lr, r3
 80032a6:	4770      	bx	lr

080032a8 <_fini>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	bf00      	nop
 80032ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ae:	bc08      	pop	{r3}
 80032b0:	469e      	mov	lr, r3
 80032b2:	4770      	bx	lr
