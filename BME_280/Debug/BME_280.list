
BME_280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002910  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080029d0  080029d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ec  080029ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029f4  080029f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f8  080029f8  000129f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002a08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002a08  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a686  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001921  00000000  00000000  0002a6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f4e  00000000  00000000  0002d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aec4  00000000  00000000  00041426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e986  00000000  00000000  0004c2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cac70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b0  00000000  00000000  000cacc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029b8 	.word	0x080029b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080029b8 	.word	0x080029b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	; (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 80004b0:	230e      	movs	r3, #14
 80004b2:	18fb      	adds	r3, r7, r3
 80004b4:	2205      	movs	r2, #5
 80004b6:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 80004b8:	230d      	movs	r3, #13
 80004ba:	18fb      	adds	r3, r7, r3
 80004bc:	2200      	movs	r2, #0
 80004be:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80004c0:	250f      	movs	r5, #15
 80004c2:	197c      	adds	r4, r7, r5
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fb37 	bl	8000b3a <null_ptr_check>
 80004cc:	0003      	movs	r3, r0
 80004ce:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80004d0:	197b      	adds	r3, r7, r5
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b25b      	sxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d14c      	bne.n	8000574 <bme280_init+0xcc>
    {
        while (try_count)
 80004da:	e03b      	b.n	8000554 <bme280_init+0xac>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80004dc:	250f      	movs	r5, #15
 80004de:	197c      	adds	r4, r7, r5
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	260d      	movs	r6, #13
 80004e4:	19b9      	adds	r1, r7, r6
 80004e6:	2201      	movs	r2, #1
 80004e8:	20d0      	movs	r0, #208	; 0xd0
 80004ea:	f000 f84b 	bl	8000584 <bme280_get_regs>
 80004ee:	0003      	movs	r3, r0
 80004f0:	7023      	strb	r3, [r4, #0]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 80004f2:	0029      	movs	r1, r5
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d11c      	bne.n	8000538 <bme280_init+0x90>
 80004fe:	19bb      	adds	r3, r7, r6
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b60      	cmp	r3, #96	; 0x60
 8000504:	d118      	bne.n	8000538 <bme280_init+0x90>
            {
                dev->chip_id = chip_id;
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 800050e:	000d      	movs	r5, r1
 8000510:	187c      	adds	r4, r7, r1
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	0018      	movs	r0, r3
 8000516:	f000 f91e 	bl	8000756 <bme280_soft_reset>
 800051a:	0003      	movs	r3, r0
 800051c:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 800051e:	197b      	adds	r3, r7, r5
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b25b      	sxtb	r3, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	d11b      	bne.n	8000560 <bme280_init+0xb8>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000528:	197c      	adds	r4, r7, r5
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	0018      	movs	r0, r3
 800052e:	f000 f97b 	bl	8000828 <get_calib_data>
 8000532:	0003      	movs	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]
                }

                break;
 8000536:	e013      	b.n	8000560 <bme280_init+0xb8>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6859      	ldr	r1, [r3, #4]
 8000540:	23fa      	movs	r3, #250	; 0xfa
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	0018      	movs	r0, r3
 8000546:	4790      	blx	r2
            --try_count;
 8000548:	220e      	movs	r2, #14
 800054a:	18bb      	adds	r3, r7, r2
 800054c:	18ba      	adds	r2, r7, r2
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	3a01      	subs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8000554:	230e      	movs	r3, #14
 8000556:	18fb      	adds	r3, r7, r3
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d1be      	bne.n	80004dc <bme280_init+0x34>
 800055e:	e000      	b.n	8000562 <bme280_init+0xba>
                break;
 8000560:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8000562:	230e      	movs	r3, #14
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d103      	bne.n	8000574 <bme280_init+0xcc>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 800056c:	230f      	movs	r3, #15
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	22fe      	movs	r2, #254	; 0xfe
 8000572:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8000574:	230f      	movs	r3, #15
 8000576:	18fb      	adds	r3, r7, r3
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b25b      	sxtb	r3, r3
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	b005      	add	sp, #20
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000584 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	b087      	sub	sp, #28
 8000588:	af00      	add	r7, sp, #0
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	0011      	movs	r1, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	250f      	movs	r5, #15
 8000592:	197b      	adds	r3, r7, r5
 8000594:	1c02      	adds	r2, r0, #0
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	230c      	movs	r3, #12
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	1c0a      	adds	r2, r1, #0
 800059e:	801a      	strh	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80005a0:	2617      	movs	r6, #23
 80005a2:	19bc      	adds	r4, r7, r6
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fac7 	bl	8000b3a <null_ptr_check>
 80005ac:	0003      	movs	r3, r0
 80005ae:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 80005b0:	19bb      	adds	r3, r7, r6
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b25b      	sxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d129      	bne.n	800060e <bme280_get_regs+0x8a>
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d026      	beq.n	800060e <bme280_get_regs+0x8a>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7a1b      	ldrb	r3, [r3, #8]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d006      	beq.n	80005d6 <bme280_get_regs+0x52>
        {
            reg_addr = reg_addr | 0x80;
 80005c8:	197b      	adds	r3, r7, r5
 80005ca:	197a      	adds	r2, r7, r5
 80005cc:	7812      	ldrb	r2, [r2, #0]
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	4249      	negs	r1, r1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	230c      	movs	r3, #12
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	881a      	ldrh	r2, [r3, #0]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	685d      	ldr	r5, [r3, #4]
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	230f      	movs	r3, #15
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	7818      	ldrb	r0, [r3, #0]
 80005ec:	002b      	movs	r3, r5
 80005ee:	47a0      	blx	r4
 80005f0:	0003      	movs	r3, r0
 80005f2:	0019      	movs	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2245      	movs	r2, #69	; 0x45
 80005f8:	5499      	strb	r1, [r3, r2]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2245      	movs	r2, #69	; 0x45
 80005fe:	569b      	ldrsb	r3, [r3, r2]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d008      	beq.n	8000616 <bme280_get_regs+0x92>
        {
            rslt = BME280_E_COMM_FAIL;
 8000604:	2317      	movs	r3, #23
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	22fc      	movs	r2, #252	; 0xfc
 800060a:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800060c:	e003      	b.n	8000616 <bme280_get_regs+0x92>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800060e:	2317      	movs	r3, #23
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	22ff      	movs	r2, #255	; 0xff
 8000614:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8000616:	2317      	movs	r3, #23
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b25b      	sxtb	r3, r3
}
 800061e:	0018      	movs	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	b007      	add	sp, #28
 8000624:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000626 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8000626:	b5b0      	push	{r4, r5, r7, lr}
 8000628:	b08c      	sub	sp, #48	; 0x30
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b0a      	cmp	r3, #10
 800063c:	d902      	bls.n	8000644 <bme280_set_regs+0x1e>
    {
        len = 10;
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	220a      	movs	r2, #10
 8000642:	701a      	strb	r2, [r3, #0]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000644:	252f      	movs	r5, #47	; 0x2f
 8000646:	197c      	adds	r4, r7, r5
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fa75 	bl	8000b3a <null_ptr_check>
 8000650:	0003      	movs	r3, r0
 8000652:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000654:	197b      	adds	r3, r7, r5
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b25b      	sxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d000      	beq.n	8000660 <bme280_set_regs+0x3a>
 800065e:	e06c      	b.n	800073a <bme280_set_regs+0x114>
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d069      	beq.n	800073a <bme280_set_regs+0x114>
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d066      	beq.n	800073a <bme280_set_regs+0x114>
    {
        if (len != 0)
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d05d      	beq.n	8000730 <bme280_set_regs+0x10a>
        {
            temp_buff[0] = reg_data[0];
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	2314      	movs	r3, #20
 800067a:	18fb      	adds	r3, r7, r3
 800067c:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	7a1b      	ldrb	r3, [r3, #8]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d01e      	beq.n	80006c4 <bme280_set_regs+0x9e>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000686:	232b      	movs	r3, #43	; 0x2b
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	e012      	b.n	80006b6 <bme280_set_regs+0x90>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000690:	202b      	movs	r0, #43	; 0x2b
 8000692:	183b      	adds	r3, r7, r0
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	18d3      	adds	r3, r2, r3
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	183b      	adds	r3, r7, r0
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	18cb      	adds	r3, r1, r3
 80006a4:	217f      	movs	r1, #127	; 0x7f
 80006a6:	400a      	ands	r2, r1
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006ac:	183b      	adds	r3, r7, r0
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	183b      	adds	r3, r7, r0
 80006b2:	3201      	adds	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	232b      	movs	r3, #43	; 0x2b
 80006b8:	18fa      	adds	r2, r7, r3
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	7812      	ldrb	r2, [r2, #0]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d3e5      	bcc.n	8000690 <bme280_set_regs+0x6a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d911      	bls.n	80006f0 <bme280_set_regs+0xca>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	2114      	movs	r1, #20
 80006d4:	1879      	adds	r1, r7, r1
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f000 f8f2 	bl	80008c0 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	18db      	adds	r3, r3, r3
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	232c      	movs	r3, #44	; 0x2c
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	3a01      	subs	r2, #1
 80006ec:	801a      	strh	r2, [r3, #0]
 80006ee:	e004      	b.n	80006fa <bme280_set_regs+0xd4>
            }
            else
            {
                temp_len = len;
 80006f0:	232c      	movs	r3, #44	; 0x2c
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	1dfa      	adds	r2, r7, #7
 80006f6:	7812      	ldrb	r2, [r2, #0]
 80006f8:	801a      	strh	r2, [r3, #0]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	691c      	ldr	r4, [r3, #16]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	7818      	ldrb	r0, [r3, #0]
 8000702:	232c      	movs	r3, #44	; 0x2c
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	881a      	ldrh	r2, [r3, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	2114      	movs	r1, #20
 800070e:	1879      	adds	r1, r7, r1
 8000710:	47a0      	blx	r4
 8000712:	0003      	movs	r3, r0
 8000714:	0019      	movs	r1, r3
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	2245      	movs	r2, #69	; 0x45
 800071a:	5499      	strb	r1, [r3, r2]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2245      	movs	r2, #69	; 0x45
 8000720:	569b      	ldrsb	r3, [r3, r2]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00e      	beq.n	8000744 <bme280_set_regs+0x11e>
            {
                rslt = BME280_E_COMM_FAIL;
 8000726:	232f      	movs	r3, #47	; 0x2f
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	22fc      	movs	r2, #252	; 0xfc
 800072c:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 800072e:	e009      	b.n	8000744 <bme280_set_regs+0x11e>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8000730:	232f      	movs	r3, #47	; 0x2f
 8000732:	18fb      	adds	r3, r7, r3
 8000734:	22fd      	movs	r2, #253	; 0xfd
 8000736:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8000738:	e004      	b.n	8000744 <bme280_set_regs+0x11e>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800073a:	232f      	movs	r3, #47	; 0x2f
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	22ff      	movs	r2, #255	; 0xff
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	e000      	b.n	8000746 <bme280_set_regs+0x120>
        if (len != 0)
 8000744:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 8000746:	232f      	movs	r3, #47	; 0x2f
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b25b      	sxtb	r3, r3
}
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b00c      	add	sp, #48	; 0x30
 8000754:	bdb0      	pop	{r4, r5, r7, pc}

08000756 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8000756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000758:	b085      	sub	sp, #20
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 800075e:	260d      	movs	r6, #13
 8000760:	19bb      	adds	r3, r7, r6
 8000762:	22e0      	movs	r2, #224	; 0xe0
 8000764:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8000766:	230c      	movs	r3, #12
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 800076e:	230e      	movs	r3, #14
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	2205      	movs	r2, #5
 8000774:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8000776:	230b      	movs	r3, #11
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	22b6      	movs	r2, #182	; 0xb6
 800077c:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800077e:	250f      	movs	r5, #15
 8000780:	197c      	adds	r4, r7, r5
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	0018      	movs	r0, r3
 8000786:	f000 f9d8 	bl	8000b3a <null_ptr_check>
 800078a:	0003      	movs	r3, r0
 800078c:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800078e:	197b      	adds	r3, r7, r5
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d13f      	bne.n	8000818 <bme280_soft_reset+0xc2>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000798:	197c      	adds	r4, r7, r5
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	220b      	movs	r2, #11
 800079e:	18b9      	adds	r1, r7, r2
 80007a0:	19b8      	adds	r0, r7, r6
 80007a2:	2201      	movs	r2, #1
 80007a4:	f7ff ff3f 	bl	8000626 <bme280_set_regs>
 80007a8:	0003      	movs	r3, r0
 80007aa:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 80007ac:	197b      	adds	r3, r7, r5
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d130      	bne.n	8000818 <bme280_soft_reset+0xc2>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6859      	ldr	r1, [r3, #4]
 80007be:	23fa      	movs	r3, #250	; 0xfa
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	0018      	movs	r0, r3
 80007c4:	4790      	blx	r2
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80007c6:	250f      	movs	r5, #15
 80007c8:	197c      	adds	r4, r7, r5
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	260c      	movs	r6, #12
 80007ce:	19b9      	adds	r1, r7, r6
 80007d0:	2201      	movs	r2, #1
 80007d2:	20f3      	movs	r0, #243	; 0xf3
 80007d4:	f7ff fed6 	bl	8000584 <bme280_get_regs>
 80007d8:	0003      	movs	r3, r0
 80007da:	7023      	strb	r3, [r4, #0]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80007dc:	197b      	adds	r3, r7, r5
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10d      	bne.n	8000802 <bme280_soft_reset+0xac>
 80007e6:	220e      	movs	r2, #14
 80007e8:	18bb      	adds	r3, r7, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	18ba      	adds	r2, r7, r2
 80007ee:	1e59      	subs	r1, r3, #1
 80007f0:	7011      	strb	r1, [r2, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d005      	beq.n	8000802 <bme280_soft_reset+0xac>
 80007f6:	19bb      	adds	r3, r7, r6
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	001a      	movs	r2, r3
 80007fc:	2301      	movs	r3, #1
 80007fe:	4013      	ands	r3, r2
 8000800:	d1d9      	bne.n	80007b6 <bme280_soft_reset+0x60>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8000802:	230c      	movs	r3, #12
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	001a      	movs	r2, r3
 800080a:	2301      	movs	r3, #1
 800080c:	4013      	ands	r3, r2
 800080e:	d003      	beq.n	8000818 <bme280_soft_reset+0xc2>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8000810:	230f      	movs	r3, #15
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	22fa      	movs	r2, #250	; 0xfa
 8000816:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 8000818:	230f      	movs	r3, #15
 800081a:	18fb      	adds	r3, r7, r3
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b25b      	sxtb	r3, r3
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b005      	add	sp, #20
 8000826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000828 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	b08b      	sub	sp, #44	; 0x2c
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8000830:	2626      	movs	r6, #38	; 0x26
 8000832:	19bb      	adds	r3, r7, r6
 8000834:	2288      	movs	r2, #136	; 0x88
 8000836:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8000838:	250c      	movs	r5, #12
 800083a:	197b      	adds	r3, r7, r5
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	3304      	adds	r3, #4
 8000842:	2216      	movs	r2, #22
 8000844:	2100      	movs	r1, #0
 8000846:	0018      	movs	r0, r3
 8000848:	f002 f8ae 	bl	80029a8 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800084c:	2427      	movs	r4, #39	; 0x27
 800084e:	193c      	adds	r4, r7, r4
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	1979      	adds	r1, r7, r5
 8000854:	19bb      	adds	r3, r7, r6
 8000856:	7818      	ldrb	r0, [r3, #0]
 8000858:	0013      	movs	r3, r2
 800085a:	221a      	movs	r2, #26
 800085c:	f7ff fe92 	bl	8000584 <bme280_get_regs>
 8000860:	0003      	movs	r3, r0
 8000862:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8000864:	2427      	movs	r4, #39	; 0x27
 8000866:	193b      	adds	r3, r7, r4
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b25b      	sxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d11f      	bne.n	80008b0 <get_calib_data+0x88>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	197b      	adds	r3, r7, r5
 8000874:	0011      	movs	r1, r2
 8000876:	0018      	movs	r0, r3
 8000878:	f000 f85a 	bl	8000930 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800087c:	19bb      	adds	r3, r7, r6
 800087e:	22e1      	movs	r2, #225	; 0xe1
 8000880:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8000882:	193c      	adds	r4, r7, r4
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	1979      	adds	r1, r7, r5
 8000888:	19bb      	adds	r3, r7, r6
 800088a:	7818      	ldrb	r0, [r3, #0]
 800088c:	0013      	movs	r3, r2
 800088e:	2207      	movs	r2, #7
 8000890:	f7ff fe78 	bl	8000584 <bme280_get_regs>
 8000894:	0003      	movs	r3, r0
 8000896:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8000898:	2427      	movs	r4, #39	; 0x27
 800089a:	193b      	adds	r3, r7, r4
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d105      	bne.n	80008b0 <get_calib_data+0x88>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	197b      	adds	r3, r7, r5
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 f8ed 	bl	8000a8a <parse_humidity_calib_data>
        }
    }

    return rslt;
 80008b0:	2327      	movs	r3, #39	; 0x27
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b25b      	sxtb	r3, r3
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b00b      	add	sp, #44	; 0x2c
 80008be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008c0 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	001a      	movs	r2, r3
 80008ce:	1cfb      	adds	r3, r7, #3
 80008d0:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 80008d2:	2317      	movs	r3, #23
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e01d      	b.n	8000918 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80008dc:	2017      	movs	r0, #23
 80008de:	183b      	adds	r3, r7, r0
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	18d2      	adds	r2, r2, r3
 80008e6:	183b      	adds	r3, r7, r0
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	3b01      	subs	r3, #1
 80008ee:	68b9      	ldr	r1, [r7, #8]
 80008f0:	18cb      	adds	r3, r1, r3
 80008f2:	7812      	ldrb	r2, [r2, #0]
 80008f4:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80008f6:	183b      	adds	r3, r7, r0
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	18d2      	adds	r2, r2, r3
 80008fe:	183b      	adds	r3, r7, r0
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	0019      	movs	r1, r3
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	185b      	adds	r3, r3, r1
 800090a:	7812      	ldrb	r2, [r2, #0]
 800090c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800090e:	183b      	adds	r3, r7, r0
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	183b      	adds	r3, r7, r0
 8000914:	3201      	adds	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	2317      	movs	r3, #23
 800091a:	18fa      	adds	r2, r7, r3
 800091c:	1cfb      	adds	r3, r7, #3
 800091e:	7812      	ldrb	r2, [r2, #0]
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d3da      	bcc.n	80008dc <interleave_reg_addr+0x1c>
    }
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b006      	add	sp, #24
 800092e:	bd80      	pop	{r7, pc}

08000930 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	3318      	adds	r3, #24
 800093e:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3301      	adds	r3, #1
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b21b      	sxth	r3, r3
 8000954:	b29a      	uxth	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3303      	adds	r3, #3
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b21a      	sxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3302      	adds	r3, #2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b21b      	sxth	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b21a      	sxth	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3305      	adds	r3, #5
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	021b      	lsls	r3, r3, #8
 800097c:	b21a      	sxth	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3304      	adds	r3, #4
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b21b      	sxth	r3, r3
 8000986:	4313      	orrs	r3, r2
 8000988:	b21a      	sxth	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3307      	adds	r3, #7
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21a      	sxth	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3306      	adds	r3, #6
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b21b      	sxth	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3309      	adds	r3, #9
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3308      	adds	r3, #8
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	4313      	orrs	r3, r2
 80009be:	b21a      	sxth	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	330b      	adds	r3, #11
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	021b      	lsls	r3, r3, #8
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	330a      	adds	r3, #10
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b21a      	sxth	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	330d      	adds	r3, #13
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	021b      	lsls	r3, r3, #8
 80009e6:	b21a      	sxth	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	330c      	adds	r3, #12
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	330f      	adds	r3, #15
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	021b      	lsls	r3, r3, #8
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	330e      	adds	r3, #14
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3311      	adds	r3, #17
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3310      	adds	r3, #16
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3313      	adds	r3, #19
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	b21a      	sxth	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3312      	adds	r3, #18
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3315      	adds	r3, #21
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3314      	adds	r3, #20
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3317      	adds	r3, #23
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3316      	adds	r3, #22
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	4313      	orrs	r3, r2
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7e5a      	ldrb	r2, [r3, #25]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	761a      	strb	r2, [r3, #24]
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b004      	add	sp, #16
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8000a8a:	b590      	push	{r4, r7, lr}
 8000a8c:	b087      	sub	sp, #28
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	3318      	adds	r3, #24
 8000a98:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	789a      	ldrb	r2, [r3, #2]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3303      	adds	r3, #3
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	011b      	lsls	r3, r3, #4
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	2012      	movs	r0, #18
 8000aca:	183b      	adds	r3, r7, r0
 8000acc:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	2410      	movs	r4, #16
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	210f      	movs	r1, #15
 8000adc:	400a      	ands	r2, r1
 8000ade:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8000ae0:	183a      	adds	r2, r7, r0
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	8812      	ldrh	r2, [r2, #0]
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b21a      	sxth	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3305      	adds	r3, #5
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	011b      	lsls	r3, r3, #4
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	210e      	movs	r1, #14
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3304      	adds	r3, #4
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	091b      	lsrs	r3, r3, #4
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	200c      	movs	r0, #12
 8000b10:	183b      	adds	r3, r7, r0
 8000b12:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8000b14:	187a      	adds	r2, r7, r1
 8000b16:	183b      	adds	r3, r7, r0
 8000b18:	8812      	ldrh	r2, [r2, #0]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3306      	adds	r3, #6
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b259      	sxtb	r1, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	2222      	movs	r2, #34	; 0x22
 8000b30:	5499      	strb	r1, [r3, r2]
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b007      	add	sp, #28
 8000b38:	bd90      	pop	{r4, r7, pc}

08000b3a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00b      	beq.n	8000b60 <null_ptr_check+0x26>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d007      	beq.n	8000b60 <null_ptr_check+0x26>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <null_ptr_check+0x26>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d104      	bne.n	8000b6a <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8000b60:	230f      	movs	r3, #15
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	22ff      	movs	r2, #255	; 0xff
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e003      	b.n	8000b72 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8000b72:	230f      	movs	r3, #15
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b25b      	sxtb	r3, r3
}
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b095      	sub	sp, #84	; 0x54
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f000 fa29 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f82b 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f000 f909 	bl	8000da8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b96:	f000 f8b3 	bl	8000d00 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000b9a:	f000 f879 	bl	8000c90 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  struct bme280_dev dev;
  int8_t rslt = BME280_OK;
 8000b9e:	214f      	movs	r1, #79	; 0x4f
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
  uint8_t dev_addr = 0;
 8000ba6:	1cfb      	adds	r3, r7, #3
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]

  dev.intf_ptr = &dev_addr;
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	1cfa      	adds	r2, r7, #3
 8000bb0:	605a      	str	r2, [r3, #4]
  dev.intf = BME280_SPI_INTF;
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	721a      	strb	r2, [r3, #8]
  dev.read = user_spi_read;
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <main+0x58>)
 8000bbc:	60da      	str	r2, [r3, #12]
  dev.write = user_spi_write;
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <main+0x5c>)
 8000bc2:	611a      	str	r2, [r3, #16]
  dev.delay_us = user_delay_us;
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <main+0x60>)
 8000bc8:	615a      	str	r2, [r3, #20]

  rslt = bme280_init(&dev);
 8000bca:	187c      	adds	r4, r7, r1
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fc6a 	bl	80004a8 <bme280_init>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <main+0x54>
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	08000def 	.word	0x08000def
 8000be0:	08000e19 	.word	0x08000e19
 8000be4:	08000dd5 	.word	0x08000dd5

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b095      	sub	sp, #84	; 0x54
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	2418      	movs	r4, #24
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	2338      	movs	r3, #56	; 0x38
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f001 fed5 	bl	80029a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	0018      	movs	r0, r3
 8000c02:	2314      	movs	r3, #20
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f001 fece 	bl	80029a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <SystemClock_Config+0xa0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <SystemClock_Config+0xa4>)
 8000c12:	401a      	ands	r2, r3
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <SystemClock_Config+0xa0>)
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	0109      	lsls	r1, r1, #4
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c1e:	0021      	movs	r1, r4
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2210      	movs	r2, #16
 8000c24:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2201      	movs	r2, #1
 8000c2a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	22a0      	movs	r2, #160	; 0xa0
 8000c36:	0212      	lsls	r2, r2, #8
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fcbc 	bl	80015c0 <HAL_RCC_OscConfig>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c4c:	f000 f8f9 	bl	8000e42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	220f      	movs	r2, #15
 8000c54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2100      	movs	r1, #0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f001 f878 	bl	8001d68 <HAL_RCC_ClockConfig>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c7c:	f000 f8e1 	bl	8000e42 <Error_Handler>
  }
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b015      	add	sp, #84	; 0x54
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	ffffe7ff 	.word	0xffffe7ff

08000c90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000c96:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <MX_SPI1_Init+0x6c>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000c9c:	2282      	movs	r2, #130	; 0x82
 8000c9e:	0052      	lsls	r2, r2, #1
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 fa2e 	bl	8002144 <HAL_SPI_Init>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cec:	f000 f8a9 	bl	8000e42 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	40013000 	.word	0x40013000

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	2308      	movs	r3, #8
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	001a      	movs	r2, r3
 8000d10:	2100      	movs	r1, #0
 8000d12:	f001 fe49 	bl	80029a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d16:	003b      	movs	r3, r7
 8000d18:	0018      	movs	r0, r3
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f001 fe42 	bl	80029a8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_TIM2_Init+0xa0>)
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	05d2      	lsls	r2, r2, #23
 8000d2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_TIM2_Init+0xa0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_TIM2_Init+0xa0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_TIM2_Init+0xa0>)
 8000d3a:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <MX_TIM2_Init+0xa4>)
 8000d3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_TIM2_Init+0xa0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_TIM2_Init+0xa0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_TIM2_Init+0xa0>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 fa8d 	bl	800226c <HAL_TIM_Base_Init>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d56:	f000 f874 	bl	8000e42 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5a:	2108      	movs	r1, #8
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	0152      	lsls	r2, r2, #5
 8000d62:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d64:	187a      	adds	r2, r7, r1
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_TIM2_Init+0xa0>)
 8000d68:	0011      	movs	r1, r2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f001 fba6 	bl	80024bc <HAL_TIM_ConfigClockSource>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d74:	f000 f865 	bl	8000e42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d78:	003b      	movs	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	003b      	movs	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d84:	003a      	movs	r2, r7
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_TIM2_Init+0xa0>)
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f001 fd8a 	bl	80028a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d94:	f000 f855 	bl	8000e42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b006      	add	sp, #24
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000080 	.word	0x20000080
 8000da4:	0000ffff 	.word	0x0000ffff

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_GPIO_Init+0x28>)
 8000db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_GPIO_Init+0x28>)
 8000db4:	2101      	movs	r1, #1
 8000db6:	430a      	orrs	r2, r1
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <MX_GPIO_Init+0x28>)
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <user_delay_us>:

/* USER CODE BEGIN 4 */
void user_delay_us(uint32_t period, void *intf_ptr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	HAL_Delay(period);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 f96d 	bl	80010c0 <HAL_Delay>
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}

08000dee <user_spi_read>:

int8_t user_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	1c02      	adds	r2, r0, #0
 8000e00:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8000e02:	2117      	movs	r1, #23
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]

    return rslt;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
}
 8000e10:	0018      	movs	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b006      	add	sp, #24
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <user_spi_write>:

int8_t user_spi_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	1c02      	adds	r2, r0, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8000e2c:	2117      	movs	r1, #23
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]

    return rslt;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b25b      	sxtb	r3, r3
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b006      	add	sp, #24
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e46:	b672      	cpsid	i
}
 8000e48:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <Error_Handler+0x8>

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_MspInit+0x24>)
 8000e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_MspInit+0x24>)
 8000e56:	2101      	movs	r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <HAL_MspInit+0x24>)
 8000e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_MspInit+0x24>)
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	0549      	lsls	r1, r1, #21
 8000e66:	430a      	orrs	r2, r1
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	240c      	movs	r4, #12
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	0018      	movs	r0, r3
 8000e82:	2314      	movs	r3, #20
 8000e84:	001a      	movs	r2, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	f001 fd8e 	bl	80029a8 <memset>
  if(hspi->Instance==SPI1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a18      	ldr	r2, [pc, #96]	; (8000ef4 <HAL_SPI_MspInit+0x80>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d129      	bne.n	8000eea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_SPI_MspInit+0x84>)
 8000e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <HAL_SPI_MspInit+0x84>)
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	0149      	lsls	r1, r1, #5
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_SPI_MspInit+0x84>)
 8000ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_SPI_MspInit+0x84>)
 8000eaa:	2101      	movs	r1, #1
 8000eac:	430a      	orrs	r2, r1
 8000eae:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_SPI_MspInit+0x84>)
 8000eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ebc:	0021      	movs	r1, r4
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	22f0      	movs	r2, #240	; 0xf0
 8000ec2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	187a      	adds	r2, r7, r1
 8000ede:	23a0      	movs	r3, #160	; 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f000 f9ed 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b009      	add	sp, #36	; 0x24
 8000ef0:	bd90      	pop	{r4, r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40013000 	.word	0x40013000
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	05db      	lsls	r3, r3, #23
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d10d      	bne.n	8000f2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_TIM_Base_MspInit+0x38>)
 8000f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <HAL_TIM_Base_MspInit+0x38>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	200f      	movs	r0, #15
 8000f22:	f000 f99d 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f26:	200f      	movs	r0, #15
 8000f28:	f000 f9af 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 f894 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <TIM2_IRQHandler+0x14>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f001 f9bc 	bl	80022ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	20000080 	.word	0x20000080

08000f80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f90:	f7ff fff6 	bl	8000f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000fba:	f001 fcd1 	bl	8002960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff fde1 	bl	8000b84 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
   ldr   r0, =_estack
 8000fc4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd0:	080029fc 	.word	0x080029fc
  ldr r2, =_sbss
 8000fd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fd8:	200000c4 	.word	0x200000c4

08000fdc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_COMP_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_Init+0x3c>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Init+0x3c>)
 8000ff2:	2140      	movs	r1, #64	; 0x40
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f811 	bl	8001020 <HAL_InitTick>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d003      	beq.n	800100a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e001      	b.n	800100e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800100a:	f7ff ff1f 	bl	8000e4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b002      	add	sp, #8
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40022000 	.word	0x40022000

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_InitTick+0x5c>)
 800102a:	681c      	ldr	r4, [r3, #0]
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_InitTick+0x60>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	0019      	movs	r1, r3
 8001032:	23fa      	movs	r3, #250	; 0xfa
 8001034:	0098      	lsls	r0, r3, #2
 8001036:	f7ff f867 	bl	8000108 <__udivsi3>
 800103a:	0003      	movs	r3, r0
 800103c:	0019      	movs	r1, r3
 800103e:	0020      	movs	r0, r4
 8001040:	f7ff f862 	bl	8000108 <__udivsi3>
 8001044:	0003      	movs	r3, r0
 8001046:	0018      	movs	r0, r3
 8001048:	f000 f92f 	bl	80012aa <HAL_SYSTICK_Config>
 800104c:	1e03      	subs	r3, r0, #0
 800104e:	d001      	beq.n	8001054 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e00f      	b.n	8001074 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d80b      	bhi.n	8001072 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	2301      	movs	r3, #1
 800105e:	425b      	negs	r3, r3
 8001060:	2200      	movs	r2, #0
 8001062:	0018      	movs	r0, r3
 8001064:	f000 f8fc 	bl	8001260 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_InitTick+0x64>)
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b003      	add	sp, #12
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	001a      	movs	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	18d2      	adds	r2, r2, r3
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_IncTick+0x20>)
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	20000008 	.word	0x20000008
 80010a8:	200000c0 	.word	0x200000c0

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	200000c0 	.word	0x200000c0

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff fff0 	bl	80010ac <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	001a      	movs	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	f7ff ffe0 	bl	80010ac <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b004      	add	sp, #16
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	20000008 	.word	0x20000008

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	0002      	movs	r2, r0
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b7f      	cmp	r3, #127	; 0x7f
 800111a:	d809      	bhi.n	8001130 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	001a      	movs	r2, r3
 8001122:	231f      	movs	r3, #31
 8001124:	401a      	ands	r2, r3
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_EnableIRQ+0x30>)
 8001128:	2101      	movs	r1, #1
 800112a:	4091      	lsls	r1, r2
 800112c:	000a      	movs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
  }
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	0002      	movs	r2, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b7f      	cmp	r3, #127	; 0x7f
 8001150:	d828      	bhi.n	80011a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001152:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <__NVIC_SetPriority+0xd4>)
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b25b      	sxtb	r3, r3
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	33c0      	adds	r3, #192	; 0xc0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	589b      	ldr	r3, [r3, r2]
 8001162:	1dfa      	adds	r2, r7, #7
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	0011      	movs	r1, r2
 8001168:	2203      	movs	r2, #3
 800116a:	400a      	ands	r2, r1
 800116c:	00d2      	lsls	r2, r2, #3
 800116e:	21ff      	movs	r1, #255	; 0xff
 8001170:	4091      	lsls	r1, r2
 8001172:	000a      	movs	r2, r1
 8001174:	43d2      	mvns	r2, r2
 8001176:	401a      	ands	r2, r3
 8001178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	019b      	lsls	r3, r3, #6
 800117e:	22ff      	movs	r2, #255	; 0xff
 8001180:	401a      	ands	r2, r3
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	0018      	movs	r0, r3
 8001188:	2303      	movs	r3, #3
 800118a:	4003      	ands	r3, r0
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001190:	481f      	ldr	r0, [pc, #124]	; (8001210 <__NVIC_SetPriority+0xd4>)
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b25b      	sxtb	r3, r3
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	430a      	orrs	r2, r1
 800119c:	33c0      	adds	r3, #192	; 0xc0
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011a2:	e031      	b.n	8001208 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <__NVIC_SetPriority+0xd8>)
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	0019      	movs	r1, r3
 80011ac:	230f      	movs	r3, #15
 80011ae:	400b      	ands	r3, r1
 80011b0:	3b08      	subs	r3, #8
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3306      	adds	r3, #6
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	18d3      	adds	r3, r2, r3
 80011ba:	3304      	adds	r3, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1dfa      	adds	r2, r7, #7
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	0011      	movs	r1, r2
 80011c4:	2203      	movs	r2, #3
 80011c6:	400a      	ands	r2, r1
 80011c8:	00d2      	lsls	r2, r2, #3
 80011ca:	21ff      	movs	r1, #255	; 0xff
 80011cc:	4091      	lsls	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	43d2      	mvns	r2, r2
 80011d2:	401a      	ands	r2, r3
 80011d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	019b      	lsls	r3, r3, #6
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	401a      	ands	r2, r3
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	0018      	movs	r0, r3
 80011e4:	2303      	movs	r3, #3
 80011e6:	4003      	ands	r3, r0
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <__NVIC_SetPriority+0xd8>)
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	001c      	movs	r4, r3
 80011f4:	230f      	movs	r3, #15
 80011f6:	4023      	ands	r3, r4
 80011f8:	3b08      	subs	r3, #8
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	430a      	orrs	r2, r1
 80011fe:	3306      	adds	r3, #6
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	18c3      	adds	r3, r0, r3
 8001204:	3304      	adds	r3, #4
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b003      	add	sp, #12
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	045b      	lsls	r3, r3, #17
 8001228:	429a      	cmp	r2, r3
 800122a:	d301      	bcc.n	8001230 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122c:	2301      	movs	r3, #1
 800122e:	e010      	b.n	8001252 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <SysTick_Config+0x44>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	3a01      	subs	r2, #1
 8001236:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001238:	2301      	movs	r3, #1
 800123a:	425b      	negs	r3, r3
 800123c:	2103      	movs	r1, #3
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff ff7c 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x44>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x44>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	210f      	movs	r1, #15
 800126c:	187b      	adds	r3, r7, r1
 800126e:	1c02      	adds	r2, r0, #0
 8001270:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	187b      	adds	r3, r7, r1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b25b      	sxtb	r3, r3
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b004      	add	sp, #16
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	0002      	movs	r2, r0
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff ff33 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff ffaf 	bl	8001218 <SysTick_Config>
 80012ba:	0003      	movs	r3, r0
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012da:	e155      	b.n	8001588 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d100      	bne.n	80012f4 <HAL_GPIO_Init+0x30>
 80012f2:	e146      	b.n	8001582 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d005      	beq.n	800130c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2203      	movs	r2, #3
 8001306:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001308:	2b02      	cmp	r3, #2
 800130a:	d130      	bne.n	800136e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	409a      	lsls	r2, r3
 800131a:	0013      	movs	r3, r2
 800131c:	43da      	mvns	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	409a      	lsls	r2, r3
 800132e:	0013      	movs	r3, r2
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001342:	2201      	movs	r2, #1
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	43da      	mvns	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	2201      	movs	r2, #1
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2203      	movs	r2, #3
 8001374:	4013      	ands	r3, r2
 8001376:	2b03      	cmp	r3, #3
 8001378:	d017      	beq.n	80013aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2203      	movs	r2, #3
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d123      	bne.n	80013fe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	58d3      	ldr	r3, [r2, r3]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2207      	movs	r2, #7
 80013c8:	4013      	ands	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	43da      	mvns	r2, r3
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2107      	movs	r1, #7
 80013e2:	400b      	ands	r3, r1
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	6939      	ldr	r1, [r7, #16]
 80013fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	43da      	mvns	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2203      	movs	r2, #3
 800141c:	401a      	ands	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	23c0      	movs	r3, #192	; 0xc0
 8001438:	029b      	lsls	r3, r3, #10
 800143a:	4013      	ands	r3, r2
 800143c:	d100      	bne.n	8001440 <HAL_GPIO_Init+0x17c>
 800143e:	e0a0      	b.n	8001582 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001440:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <HAL_GPIO_Init+0x2dc>)
 8001442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001444:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <HAL_GPIO_Init+0x2dc>)
 8001446:	2101      	movs	r1, #1
 8001448:	430a      	orrs	r2, r1
 800144a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800144c:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_GPIO_Init+0x2e0>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	589b      	ldr	r3, [r3, r2]
 8001458:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2203      	movs	r2, #3
 800145e:	4013      	ands	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	409a      	lsls	r2, r3
 8001466:	0013      	movs	r3, r2
 8001468:	43da      	mvns	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	23a0      	movs	r3, #160	; 0xa0
 8001474:	05db      	lsls	r3, r3, #23
 8001476:	429a      	cmp	r2, r3
 8001478:	d01f      	beq.n	80014ba <HAL_GPIO_Init+0x1f6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4a      	ldr	r2, [pc, #296]	; (80015a8 <HAL_GPIO_Init+0x2e4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d019      	beq.n	80014b6 <HAL_GPIO_Init+0x1f2>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a49      	ldr	r2, [pc, #292]	; (80015ac <HAL_GPIO_Init+0x2e8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0x1ee>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a48      	ldr	r2, [pc, #288]	; (80015b0 <HAL_GPIO_Init+0x2ec>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00d      	beq.n	80014ae <HAL_GPIO_Init+0x1ea>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a47      	ldr	r2, [pc, #284]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_GPIO_Init+0x1e6>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a46      	ldr	r2, [pc, #280]	; (80015b8 <HAL_GPIO_Init+0x2f4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_GPIO_Init+0x1e2>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e00a      	b.n	80014bc <HAL_GPIO_Init+0x1f8>
 80014a6:	2306      	movs	r3, #6
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x1f8>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x1f8>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x1f8>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x1f8>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x1f8>
 80014ba:	2300      	movs	r3, #0
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	2103      	movs	r1, #3
 80014c0:	400a      	ands	r2, r1
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014cc:	4935      	ldr	r1, [pc, #212]	; (80015a4 <HAL_GPIO_Init+0x2e0>)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014da:	4b38      	ldr	r3, [pc, #224]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43da      	mvns	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	035b      	lsls	r3, r3, #13
 80014f2:	4013      	ands	r3, r2
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43da      	mvns	r2, r3
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	039b      	lsls	r3, r3, #14
 800151c:	4013      	ands	r3, r2
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	029b      	lsls	r3, r3, #10
 8001546:	4013      	ands	r3, r2
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43da      	mvns	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	025b      	lsls	r3, r3, #9
 8001570:	4013      	ands	r3, r2
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	40da      	lsrs	r2, r3
 8001590:	1e13      	subs	r3, r2, #0
 8001592:	d000      	beq.n	8001596 <HAL_GPIO_Init+0x2d2>
 8001594:	e6a2      	b.n	80012dc <HAL_GPIO_Init+0x18>
  }
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b006      	add	sp, #24
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010000 	.word	0x40010000
 80015a8:	50000400 	.word	0x50000400
 80015ac:	50000800 	.word	0x50000800
 80015b0:	50000c00 	.word	0x50000c00
 80015b4:	50001000 	.word	0x50001000
 80015b8:	50001c00 	.word	0x50001c00
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f000 fbbf 	bl	8001d52 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d4:	4bc9      	ldr	r3, [pc, #804]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	220c      	movs	r2, #12
 80015da:	4013      	ands	r3, r2
 80015dc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015de:	4bc7      	ldr	r3, [pc, #796]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	025b      	lsls	r3, r3, #9
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d100      	bne.n	80015f6 <HAL_RCC_OscConfig+0x36>
 80015f4:	e07e      	b.n	80016f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d007      	beq.n	800160c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d112      	bne.n	8001628 <HAL_RCC_OscConfig+0x68>
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	025b      	lsls	r3, r3, #9
 8001608:	429a      	cmp	r2, r3
 800160a:	d10d      	bne.n	8001628 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	4bbb      	ldr	r3, [pc, #748]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	029b      	lsls	r3, r3, #10
 8001614:	4013      	ands	r3, r2
 8001616:	d100      	bne.n	800161a <HAL_RCC_OscConfig+0x5a>
 8001618:	e06b      	b.n	80016f2 <HAL_RCC_OscConfig+0x132>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d167      	bne.n	80016f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f000 fb95 	bl	8001d52 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_RCC_OscConfig+0x84>
 8001634:	4bb1      	ldr	r3, [pc, #708]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4bb0      	ldr	r3, [pc, #704]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	0249      	lsls	r1, r1, #9
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e027      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	02db      	lsls	r3, r3, #11
 800164c:	429a      	cmp	r2, r3
 800164e:	d10e      	bne.n	800166e <HAL_RCC_OscConfig+0xae>
 8001650:	4baa      	ldr	r3, [pc, #680]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4ba9      	ldr	r3, [pc, #676]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	02c9      	lsls	r1, r1, #11
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	4ba7      	ldr	r3, [pc, #668]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4ba6      	ldr	r3, [pc, #664]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	0249      	lsls	r1, r1, #9
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e012      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 800166e:	4ba3      	ldr	r3, [pc, #652]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4ba2      	ldr	r3, [pc, #648]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001674:	49a2      	ldr	r1, [pc, #648]	; (8001900 <HAL_RCC_OscConfig+0x340>)
 8001676:	400a      	ands	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	4ba0      	ldr	r3, [pc, #640]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	025b      	lsls	r3, r3, #9
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4b9c      	ldr	r3, [pc, #624]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b9b      	ldr	r3, [pc, #620]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 800168e:	499d      	ldr	r1, [pc, #628]	; (8001904 <HAL_RCC_OscConfig+0x344>)
 8001690:	400a      	ands	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d015      	beq.n	80016c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fd06 	bl	80010ac <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016a4:	e009      	b.n	80016ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a6:	f7ff fd01 	bl	80010ac <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b64      	cmp	r3, #100	; 0x64
 80016b2:	d902      	bls.n	80016ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f000 fb4c 	bl	8001d52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ba:	4b90      	ldr	r3, [pc, #576]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	029b      	lsls	r3, r3, #10
 80016c2:	4013      	ands	r3, r2
 80016c4:	d0ef      	beq.n	80016a6 <HAL_RCC_OscConfig+0xe6>
 80016c6:	e015      	b.n	80016f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fcf0 	bl	80010ac <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d2:	f7ff fceb 	bl	80010ac <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	; 0x64
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e336      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016e4:	4b85      	ldr	r3, [pc, #532]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	029b      	lsls	r3, r3, #10
 80016ec:	4013      	ands	r3, r2
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x112>
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2202      	movs	r2, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	d100      	bne.n	8001700 <HAL_RCC_OscConfig+0x140>
 80016fe:	e099      	b.n	8001834 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	2220      	movs	r2, #32
 800170a:	4013      	ands	r3, r2
 800170c:	d009      	beq.n	8001722 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800170e:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b7a      	ldr	r3, [pc, #488]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001714:	2120      	movs	r1, #32
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	2220      	movs	r2, #32
 800171e:	4393      	bics	r3, r2
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	2b04      	cmp	r3, #4
 8001726:	d005      	beq.n	8001734 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2b0c      	cmp	r3, #12
 800172c:	d13e      	bne.n	80017ac <HAL_RCC_OscConfig+0x1ec>
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d13b      	bne.n	80017ac <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001734:	4b71      	ldr	r3, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2204      	movs	r2, #4
 800173a:	4013      	ands	r3, r2
 800173c:	d004      	beq.n	8001748 <HAL_RCC_OscConfig+0x188>
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e304      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b6c      	ldr	r3, [pc, #432]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a6e      	ldr	r2, [pc, #440]	; (8001908 <HAL_RCC_OscConfig+0x348>)
 800174e:	4013      	ands	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	021a      	lsls	r2, r3, #8
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800175e:	4b67      	ldr	r3, [pc, #412]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2209      	movs	r2, #9
 8001764:	4393      	bics	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	4b64      	ldr	r3, [pc, #400]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 800176a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001770:	f000 fc42 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001774:	0001      	movs	r1, r0
 8001776:	4b61      	ldr	r3, [pc, #388]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	220f      	movs	r2, #15
 800177e:	4013      	ands	r3, r2
 8001780:	4a62      	ldr	r2, [pc, #392]	; (800190c <HAL_RCC_OscConfig+0x34c>)
 8001782:	5cd3      	ldrb	r3, [r2, r3]
 8001784:	000a      	movs	r2, r1
 8001786:	40da      	lsrs	r2, r3
 8001788:	4b61      	ldr	r3, [pc, #388]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800178a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800178c:	4b61      	ldr	r3, [pc, #388]	; (8001914 <HAL_RCC_OscConfig+0x354>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2513      	movs	r5, #19
 8001792:	197c      	adds	r4, r7, r5
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff fc43 	bl	8001020 <HAL_InitTick>
 800179a:	0003      	movs	r3, r0
 800179c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800179e:	197b      	adds	r3, r7, r5
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d046      	beq.n	8001834 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80017a6:	197b      	adds	r3, r7, r5
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	e2d2      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d027      	beq.n	8001802 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017b2:	4b52      	ldr	r3, [pc, #328]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2209      	movs	r2, #9
 80017b8:	4393      	bics	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80017be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fc72 	bl	80010ac <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fc6d 	bl	80010ac <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e2b8      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e0:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2204      	movs	r2, #4
 80017e6:	4013      	ands	r3, r2
 80017e8:	d0f1      	beq.n	80017ce <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a46      	ldr	r2, [pc, #280]	; (8001908 <HAL_RCC_OscConfig+0x348>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	021a      	lsls	r2, r3, #8
 80017fa:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	e018      	b.n	8001834 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001808:	2101      	movs	r1, #1
 800180a:	438a      	bics	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fc4d 	bl	80010ac <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fc48 	bl	80010ac <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e293      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2204      	movs	r2, #4
 8001830:	4013      	ands	r3, r2
 8001832:	d1f1      	bne.n	8001818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2210      	movs	r2, #16
 800183a:	4013      	ands	r3, r2
 800183c:	d100      	bne.n	8001840 <HAL_RCC_OscConfig+0x280>
 800183e:	e0a2      	b.n	8001986 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d140      	bne.n	80018c8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x29e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e279      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <HAL_RCC_OscConfig+0x358>)
 8001864:	4013      	ands	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	0a19      	lsrs	r1, r3, #8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	061a      	lsls	r2, r3, #24
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	0b5b      	lsrs	r3, r3, #13
 800188c:	3301      	adds	r3, #1
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	0212      	lsls	r2, r2, #8
 8001892:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	210f      	movs	r1, #15
 800189c:	400b      	ands	r3, r1
 800189e:	491b      	ldr	r1, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x34c>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80018a6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_RCC_OscConfig+0x354>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2513      	movs	r5, #19
 80018ae:	197c      	adds	r4, r7, r5
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7ff fbb5 	bl	8001020 <HAL_InitTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018ba:	197b      	adds	r3, r7, r5
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d061      	beq.n	8001986 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80018c2:	197b      	adds	r3, r7, r5
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	e244      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d040      	beq.n	8001952 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	0049      	lsls	r1, r1, #1
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fbe5 	bl	80010ac <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018e6:	e019      	b.n	800191c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e8:	f7ff fbe0 	bl	80010ac <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d912      	bls.n	800191c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e22b      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	40021000 	.word	0x40021000
 8001900:	fffeffff 	.word	0xfffeffff
 8001904:	fffbffff 	.word	0xfffbffff
 8001908:	ffffe0ff 	.word	0xffffe0ff
 800190c:	080029d0 	.word	0x080029d0
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004
 8001918:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800191c:	4bca      	ldr	r3, [pc, #808]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d0df      	beq.n	80018e8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001928:	4bc7      	ldr	r3, [pc, #796]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4ac7      	ldr	r2, [pc, #796]	; (8001c4c <HAL_RCC_OscConfig+0x68c>)
 800192e:	4013      	ands	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001936:	4bc4      	ldr	r3, [pc, #784]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193c:	4bc2      	ldr	r3, [pc, #776]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	0a19      	lsrs	r1, r3, #8
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	061a      	lsls	r2, r3, #24
 800194a:	4bbf      	ldr	r3, [pc, #764]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 800194c:	430a      	orrs	r2, r1
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	e019      	b.n	8001986 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001952:	4bbd      	ldr	r3, [pc, #756]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4bbc      	ldr	r3, [pc, #752]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001958:	49bd      	ldr	r1, [pc, #756]	; (8001c50 <HAL_RCC_OscConfig+0x690>)
 800195a:	400a      	ands	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7ff fba5 	bl	80010ac <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001968:	f7ff fba0 	bl	80010ac <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1eb      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800197a:	4bb3      	ldr	r3, [pc, #716]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2208      	movs	r2, #8
 800198c:	4013      	ands	r3, r2
 800198e:	d036      	beq.n	80019fe <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d019      	beq.n	80019cc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001998:	4bab      	ldr	r3, [pc, #684]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 800199a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800199c:	4baa      	ldr	r3, [pc, #680]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 800199e:	2101      	movs	r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a4:	f7ff fb82 	bl	80010ac <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ae:	f7ff fb7d 	bl	80010ac <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1c8      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019c0:	4ba1      	ldr	r3, [pc, #644]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 80019c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c4:	2202      	movs	r2, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d0f1      	beq.n	80019ae <HAL_RCC_OscConfig+0x3ee>
 80019ca:	e018      	b.n	80019fe <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019cc:	4b9e      	ldr	r3, [pc, #632]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 80019ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d0:	4b9d      	ldr	r3, [pc, #628]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 80019d2:	2101      	movs	r1, #1
 80019d4:	438a      	bics	r2, r1
 80019d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fb68 	bl	80010ac <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e2:	f7ff fb63 	bl	80010ac <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1ae      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019f4:	4b94      	ldr	r3, [pc, #592]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 80019f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f8:	2202      	movs	r2, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	d1f1      	bne.n	80019e2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2204      	movs	r2, #4
 8001a04:	4013      	ands	r3, r2
 8001a06:	d100      	bne.n	8001a0a <HAL_RCC_OscConfig+0x44a>
 8001a08:	e0ae      	b.n	8001b68 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2023      	movs	r0, #35	; 0x23
 8001a0c:	183b      	adds	r3, r7, r0
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a12:	4b8d      	ldr	r3, [pc, #564]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	055b      	lsls	r3, r3, #21
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b8a      	ldr	r3, [pc, #552]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a22:	4b89      	ldr	r3, [pc, #548]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0549      	lsls	r1, r1, #21
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a2c:	183b      	adds	r3, r7, r0
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b88      	ldr	r3, [pc, #544]	; (8001c54 <HAL_RCC_OscConfig+0x694>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d11a      	bne.n	8001a74 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4b85      	ldr	r3, [pc, #532]	; (8001c54 <HAL_RCC_OscConfig+0x694>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b84      	ldr	r3, [pc, #528]	; (8001c54 <HAL_RCC_OscConfig+0x694>)
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	0049      	lsls	r1, r1, #1
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fb2e 	bl	80010ac <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7ff fb29 	bl	80010ac <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b64      	cmp	r3, #100	; 0x64
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e174      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	4b7a      	ldr	r3, [pc, #488]	; (8001c54 <HAL_RCC_OscConfig+0x694>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4d0>
 8001a80:	4b71      	ldr	r3, [pc, #452]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001a82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a84:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	0049      	lsls	r1, r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a8e:	e031      	b.n	8001af4 <HAL_RCC_OscConfig+0x534>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x4f2>
 8001a98:	4b6b      	ldr	r3, [pc, #428]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001a9e:	496c      	ldr	r1, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x690>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	651a      	str	r2, [r3, #80]	; 0x50
 8001aa4:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aa8:	4b67      	ldr	r3, [pc, #412]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001aaa:	496b      	ldr	r1, [pc, #428]	; (8001c58 <HAL_RCC_OscConfig+0x698>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	651a      	str	r2, [r3, #80]	; 0x50
 8001ab0:	e020      	b.n	8001af4 <HAL_RCC_OscConfig+0x534>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	23a0      	movs	r3, #160	; 0xa0
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d10e      	bne.n	8001adc <HAL_RCC_OscConfig+0x51c>
 8001abe:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001ac0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac2:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	00c9      	lsls	r1, r1, #3
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	651a      	str	r2, [r3, #80]	; 0x50
 8001acc:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001ace:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ad0:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	0049      	lsls	r1, r1, #1
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	651a      	str	r2, [r3, #80]	; 0x50
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0x534>
 8001adc:	4b5a      	ldr	r3, [pc, #360]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001ae2:	495b      	ldr	r1, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x690>)
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ae8:	4b57      	ldr	r3, [pc, #348]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001aea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aec:	4b56      	ldr	r3, [pc, #344]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001aee:	495a      	ldr	r1, [pc, #360]	; (8001c58 <HAL_RCC_OscConfig+0x698>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d015      	beq.n	8001b28 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afc:	f7ff fad6 	bl	80010ac <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff fad1 	bl	80010ac <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_RCC_OscConfig+0x69c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e11b      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b1a:	4b4b      	ldr	r3, [pc, #300]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001b1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4013      	ands	r3, r2
 8001b24:	d0ef      	beq.n	8001b06 <HAL_RCC_OscConfig+0x546>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7ff fac0 	bl	80010ac <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7ff fabb 	bl	80010ac <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4a47      	ldr	r2, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x69c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e105      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b46:	4b40      	ldr	r3, [pc, #256]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001b48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d1ef      	bne.n	8001b32 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b52:	2323      	movs	r3, #35	; 0x23
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001b62:	493f      	ldr	r1, [pc, #252]	; (8001c60 <HAL_RCC_OscConfig+0x6a0>)
 8001b64:	400a      	ands	r2, r1
 8001b66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d049      	beq.n	8001c06 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d026      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b7a:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001b80:	2101      	movs	r1, #1
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	635a      	str	r2, [r3, #52]	; 0x34
 8001b92:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_RCC_OscConfig+0x6a4>)
 8001b94:	6a1a      	ldr	r2, [r3, #32]
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_RCC_OscConfig+0x6a4>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0189      	lsls	r1, r1, #6
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fa84 	bl	80010ac <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001baa:	f7ff fa7f 	bl	80010ac <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0ca      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d0f1      	beq.n	8001baa <HAL_RCC_OscConfig+0x5ea>
 8001bc6:	e01e      	b.n	8001c06 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	438a      	bics	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <HAL_RCC_OscConfig+0x6a4>)
 8001bd6:	6a1a      	ldr	r2, [r3, #32]
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_RCC_OscConfig+0x6a4>)
 8001bda:	4923      	ldr	r1, [pc, #140]	; (8001c68 <HAL_RCC_OscConfig+0x6a8>)
 8001bdc:	400a      	ands	r2, r1
 8001bde:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fa64 	bl	80010ac <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bea:	f7ff fa5f 	bl	80010ac <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0aa      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2202      	movs	r2, #2
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1f1      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d100      	bne.n	8001c10 <HAL_RCC_OscConfig+0x650>
 8001c0e:	e09f      	b.n	8001d50 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d100      	bne.n	8001c18 <HAL_RCC_OscConfig+0x658>
 8001c16:	e078      	b.n	8001d0a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d159      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001c26:	4911      	ldr	r1, [pc, #68]	; (8001c6c <HAL_RCC_OscConfig+0x6ac>)
 8001c28:	400a      	ands	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fa3e 	bl	80010ac <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c34:	e01c      	b.n	8001c70 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff fa39 	bl	80010ac <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d915      	bls.n	8001c70 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e084      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	ffff1fff 	.word	0xffff1fff
 8001c50:	fffffeff 	.word	0xfffffeff
 8001c54:	40007000 	.word	0x40007000
 8001c58:	fffffbff 	.word	0xfffffbff
 8001c5c:	00001388 	.word	0x00001388
 8001c60:	efffffff 	.word	0xefffffff
 8001c64:	40010000 	.word	0x40010000
 8001c68:	ffffdfff 	.word	0xffffdfff
 8001c6c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c70:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <HAL_RCC_OscConfig+0x79c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	049b      	lsls	r3, r3, #18
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d1dc      	bne.n	8001c36 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7c:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <HAL_RCC_OscConfig+0x79c>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4a37      	ldr	r2, [pc, #220]	; (8001d60 <HAL_RCC_OscConfig+0x7a0>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	431a      	orrs	r2, r3
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <HAL_RCC_OscConfig+0x79c>)
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <HAL_RCC_OscConfig+0x79c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_RCC_OscConfig+0x79c>)
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	0449      	lsls	r1, r1, #17
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f9ff 	bl	80010ac <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff f9fa 	bl	80010ac <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e045      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_RCC_OscConfig+0x79c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	049b      	lsls	r3, r3, #18
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x6f4>
 8001cd2:	e03d      	b.n	8001d50 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_RCC_OscConfig+0x79c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_RCC_OscConfig+0x79c>)
 8001cda:	4922      	ldr	r1, [pc, #136]	; (8001d64 <HAL_RCC_OscConfig+0x7a4>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f9e4 	bl	80010ac <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff f9df 	bl	80010ac <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e02a      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_RCC_OscConfig+0x79c>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	049b      	lsls	r3, r3, #18
 8001d04:	4013      	ands	r3, r2
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x72a>
 8001d08:	e022      	b.n	8001d50 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e01d      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_RCC_OscConfig+0x79c>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	025b      	lsls	r3, r3, #9
 8001d22:	401a      	ands	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d10f      	bne.n	8001d4c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	23f0      	movs	r3, #240	; 0xf0
 8001d30:	039b      	lsls	r3, r3, #14
 8001d32:	401a      	ands	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	23c0      	movs	r3, #192	; 0xc0
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	401a      	ands	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b00a      	add	sp, #40	; 0x28
 8001d58:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	ff02ffff 	.word	0xff02ffff
 8001d64:	feffffff 	.word	0xfeffffff

08001d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e128      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b96      	ldr	r3, [pc, #600]	; (8001fd8 <HAL_RCC_ClockConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2201      	movs	r2, #1
 8001d82:	4013      	ands	r3, r2
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d91e      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b93      	ldr	r3, [pc, #588]	; (8001fd8 <HAL_RCC_ClockConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4393      	bics	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <HAL_RCC_ClockConfig+0x270>)
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d9c:	f7ff f986 	bl	80010ac <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da4:	e009      	b.n	8001dba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da6:	f7ff f981 	bl	80010ac <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	4a8a      	ldr	r2, [pc, #552]	; (8001fdc <HAL_RCC_ClockConfig+0x274>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e109      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b87      	ldr	r3, [pc, #540]	; (8001fd8 <HAL_RCC_ClockConfig+0x270>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1ee      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd2:	4b83      	ldr	r3, [pc, #524]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	22f0      	movs	r2, #240	; 0xf0
 8001dd8:	4393      	bics	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_ClockConfig+0x8a>
 8001df0:	e089      	b.n	8001f06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dfa:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	029b      	lsls	r3, r3, #10
 8001e02:	4013      	ands	r3, r2
 8001e04:	d120      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0e1      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e12:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	049b      	lsls	r3, r3, #18
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d114      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0d5      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e2a:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	4013      	ands	r3, r2
 8001e32:	d109      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0ca      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e38:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0c2      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e48:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	4393      	bics	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7ff f926 	bl	80010ac <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d111      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e6c:	e009      	b.n	8001e82 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6e:	f7ff f91d 	bl	80010ac <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <HAL_RCC_ClockConfig+0x274>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e0a5      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e82:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	220c      	movs	r2, #12
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d1ef      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x106>
 8001e8e:	e03a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d111      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e98:	e009      	b.n	8001eae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9a:	f7ff f907 	bl	80010ac <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_RCC_ClockConfig+0x274>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e08f      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eae:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	d1ef      	bne.n	8001e9a <HAL_RCC_ClockConfig+0x132>
 8001eba:	e024      	b.n	8001f06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d11b      	bne.n	8001efc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec4:	e009      	b.n	8001eda <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec6:	f7ff f8f1 	bl	80010ac <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	4a42      	ldr	r2, [pc, #264]	; (8001fdc <HAL_RCC_ClockConfig+0x274>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e079      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	220c      	movs	r2, #12
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d1ef      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x15e>
 8001ee6:	e00e      	b.n	8001f06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7ff f8e0 	bl	80010ac <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4a3a      	ldr	r2, [pc, #232]	; (8001fdc <HAL_RCC_ClockConfig+0x274>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e068      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001efc:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	220c      	movs	r2, #12
 8001f02:	4013      	ands	r3, r2
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_RCC_ClockConfig+0x270>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d21e      	bcs.n	8001f52 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_RCC_ClockConfig+0x270>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4393      	bics	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_RCC_ClockConfig+0x270>)
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f26:	f7ff f8c1 	bl	80010ac <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	e009      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7ff f8bc 	bl	80010ac <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <HAL_RCC_ClockConfig+0x274>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e044      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_ClockConfig+0x270>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d1ee      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2204      	movs	r2, #4
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a20      	ldr	r2, [pc, #128]	; (8001fe4 <HAL_RCC_ClockConfig+0x27c>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2208      	movs	r2, #8
 8001f76:	4013      	ands	r3, r2
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <HAL_RCC_ClockConfig+0x280>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	0019      	movs	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	00da      	lsls	r2, r3, #3
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f90:	f000 f832 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001f94:	0001      	movs	r1, r0
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCC_ClockConfig+0x278>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	4a12      	ldr	r2, [pc, #72]	; (8001fec <HAL_RCC_ClockConfig+0x284>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	000a      	movs	r2, r1
 8001fa6:	40da      	lsrs	r2, r3
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_RCC_ClockConfig+0x288>)
 8001faa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_RCC_ClockConfig+0x28c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	250b      	movs	r5, #11
 8001fb2:	197c      	adds	r4, r7, r5
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff f833 	bl	8001020 <HAL_InitTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001fbe:	197b      	adds	r3, r7, r5
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001fc6:	197b      	adds	r3, r7, r5
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	e000      	b.n	8001fce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b004      	add	sp, #16
 8001fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	00001388 	.word	0x00001388
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	fffff8ff 	.word	0xfffff8ff
 8001fe8:	ffffc7ff 	.word	0xffffc7ff
 8001fec:	080029d0 	.word	0x080029d0
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b08e      	sub	sp, #56	; 0x38
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <HAL_RCC_GetSysClockFreq+0x138>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002006:	230c      	movs	r3, #12
 8002008:	4013      	ands	r3, r2
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d014      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x40>
 800200e:	d900      	bls.n	8002012 <HAL_RCC_GetSysClockFreq+0x1a>
 8002010:	e07b      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x112>
 8002012:	2b04      	cmp	r3, #4
 8002014:	d002      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x24>
 8002016:	2b08      	cmp	r3, #8
 8002018:	d00b      	beq.n	8002032 <HAL_RCC_GetSysClockFreq+0x3a>
 800201a:	e076      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800201c:	4b44      	ldr	r3, [pc, #272]	; (8002130 <HAL_RCC_GetSysClockFreq+0x138>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2210      	movs	r2, #16
 8002022:	4013      	ands	r3, r2
 8002024:	d002      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800202a:	e07c      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <HAL_RCC_GetSysClockFreq+0x140>)
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002030:	e079      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002032:	4b42      	ldr	r3, [pc, #264]	; (800213c <HAL_RCC_GetSysClockFreq+0x144>)
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002036:	e076      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	0c9a      	lsrs	r2, r3, #18
 800203c:	230f      	movs	r3, #15
 800203e:	401a      	ands	r2, r3
 8002040:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <HAL_RCC_GetSysClockFreq+0x148>)
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002048:	0d9a      	lsrs	r2, r3, #22
 800204a:	2303      	movs	r3, #3
 800204c:	4013      	ands	r3, r2
 800204e:	3301      	adds	r3, #1
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <HAL_RCC_GetSysClockFreq+0x138>)
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	025b      	lsls	r3, r3, #9
 800205a:	4013      	ands	r3, r2
 800205c:	d01a      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	4a35      	ldr	r2, [pc, #212]	; (800213c <HAL_RCC_GetSysClockFreq+0x144>)
 8002068:	2300      	movs	r3, #0
 800206a:	69b8      	ldr	r0, [r7, #24]
 800206c:	69f9      	ldr	r1, [r7, #28]
 800206e:	f7fe f8f7 	bl	8000260 <__aeabi_lmul>
 8002072:	0002      	movs	r2, r0
 8002074:	000b      	movs	r3, r1
 8002076:	0010      	movs	r0, r2
 8002078:	0019      	movs	r1, r3
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f7fe f8cb 	bl	8000220 <__aeabi_uldivmod>
 800208a:	0002      	movs	r2, r0
 800208c:	000b      	movs	r3, r1
 800208e:	0013      	movs	r3, r2
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
 8002092:	e037      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002094:	4b26      	ldr	r3, [pc, #152]	; (8002130 <HAL_RCC_GetSysClockFreq+0x138>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2210      	movs	r2, #16
 800209a:	4013      	ands	r3, r2
 800209c:	d01a      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020a8:	2300      	movs	r3, #0
 80020aa:	68b8      	ldr	r0, [r7, #8]
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	f7fe f8d7 	bl	8000260 <__aeabi_lmul>
 80020b2:	0002      	movs	r2, r0
 80020b4:	000b      	movs	r3, r1
 80020b6:	0010      	movs	r0, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f7fe f8ab 	bl	8000220 <__aeabi_uldivmod>
 80020ca:	0002      	movs	r2, r0
 80020cc:	000b      	movs	r3, r1
 80020ce:	0013      	movs	r3, r2
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
 80020d2:	e017      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	0018      	movs	r0, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	0019      	movs	r1, r3
 80020dc:	4a16      	ldr	r2, [pc, #88]	; (8002138 <HAL_RCC_GetSysClockFreq+0x140>)
 80020de:	2300      	movs	r3, #0
 80020e0:	f7fe f8be 	bl	8000260 <__aeabi_lmul>
 80020e4:	0002      	movs	r2, r0
 80020e6:	000b      	movs	r3, r1
 80020e8:	0010      	movs	r0, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	001c      	movs	r4, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	001d      	movs	r5, r3
 80020f4:	0022      	movs	r2, r4
 80020f6:	002b      	movs	r3, r5
 80020f8:	f7fe f892 	bl	8000220 <__aeabi_uldivmod>
 80020fc:	0002      	movs	r2, r0
 80020fe:	000b      	movs	r3, r1
 8002100:	0013      	movs	r3, r2
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002108:	e00d      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_GetSysClockFreq+0x138>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	0b5b      	lsrs	r3, r3, #13
 8002110:	2207      	movs	r2, #7
 8002112:	4013      	ands	r3, r2
 8002114:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	3301      	adds	r3, #1
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	0212      	lsls	r2, r2, #8
 800211e:	409a      	lsls	r2, r3
 8002120:	0013      	movs	r3, r2
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002124:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b00e      	add	sp, #56	; 0x38
 800212e:	bdb0      	pop	{r4, r5, r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	003d0900 	.word	0x003d0900
 8002138:	00f42400 	.word	0x00f42400
 800213c:	007a1200 	.word	0x007a1200
 8002140:	080029e0 	.word	0x080029e0

08002144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e083      	b.n	800225e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	2382      	movs	r3, #130	; 0x82
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	429a      	cmp	r2, r3
 8002168:	d009      	beq.n	800217e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	61da      	str	r2, [r3, #28]
 8002170:	e005      	b.n	800217e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2251      	movs	r2, #81	; 0x51
 8002188:	5c9b      	ldrb	r3, [r3, r2]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d107      	bne.n	80021a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2250      	movs	r2, #80	; 0x50
 8002194:	2100      	movs	r1, #0
 8002196:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	0018      	movs	r0, r3
 800219c:	f7fe fe6a 	bl	8000e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2251      	movs	r2, #81	; 0x51
 80021a4:	2102      	movs	r1, #2
 80021a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2140      	movs	r1, #64	; 0x40
 80021b4:	438a      	bics	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	2382      	movs	r3, #130	; 0x82
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	2384      	movs	r3, #132	; 0x84
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	400b      	ands	r3, r1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68d9      	ldr	r1, [r3, #12]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	400b      	ands	r3, r1
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2102      	movs	r1, #2
 80021e0:	400b      	ands	r3, r1
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	2101      	movs	r1, #1
 80021ea:	400b      	ands	r3, r1
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6999      	ldr	r1, [r3, #24]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	400b      	ands	r3, r1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2138      	movs	r1, #56	; 0x38
 8002200:	400b      	ands	r3, r1
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	400b      	ands	r3, r1
 800220c:	431a      	orrs	r2, r3
 800220e:	0011      	movs	r1, r2
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	019b      	lsls	r3, r3, #6
 8002218:	401a      	ands	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	0c1b      	lsrs	r3, r3, #16
 8002228:	2204      	movs	r2, #4
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	2210      	movs	r2, #16
 8002234:	401a      	ands	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69da      	ldr	r2, [r3, #28]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <HAL_SPI_Init+0x124>)
 800224a:	400a      	ands	r2, r1
 800224c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2251      	movs	r2, #81	; 0x51
 8002258:	2101      	movs	r1, #1
 800225a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b002      	add	sp, #8
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	fffff7ff 	.word	0xfffff7ff

0800226c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e032      	b.n	80022e4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2239      	movs	r2, #57	; 0x39
 8002282:	5c9b      	ldrb	r3, [r3, r2]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d107      	bne.n	800229a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2238      	movs	r2, #56	; 0x38
 800228e:	2100      	movs	r1, #0
 8002290:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f7fe fe31 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2239      	movs	r2, #57	; 0x39
 800229e:	2102      	movs	r1, #2
 80022a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	0019      	movs	r1, r3
 80022ac:	0010      	movs	r0, r2
 80022ae:	f000 fa01 	bl	80026b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	223e      	movs	r2, #62	; 0x3e
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	223a      	movs	r2, #58	; 0x3a
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	223b      	movs	r2, #59	; 0x3b
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	223c      	movs	r2, #60	; 0x3c
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	223d      	movs	r2, #61	; 0x3d
 80022d6:	2101      	movs	r1, #1
 80022d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2239      	movs	r2, #57	; 0x39
 80022de:	2101      	movs	r1, #1
 80022e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d124      	bne.n	800234c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2202      	movs	r2, #2
 800230a:	4013      	ands	r3, r2
 800230c:	2b02      	cmp	r3, #2
 800230e:	d11d      	bne.n	800234c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2203      	movs	r2, #3
 8002316:	4252      	negs	r2, r2
 8002318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2203      	movs	r2, #3
 8002328:	4013      	ands	r3, r2
 800232a:	d004      	beq.n	8002336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f000 f9a8 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 8002334:	e007      	b.n	8002346 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 f99b 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0018      	movs	r0, r3
 8002342:	f000 f9a7 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2204      	movs	r2, #4
 8002354:	4013      	ands	r3, r2
 8002356:	2b04      	cmp	r3, #4
 8002358:	d125      	bne.n	80023a6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2204      	movs	r2, #4
 8002362:	4013      	ands	r3, r2
 8002364:	2b04      	cmp	r3, #4
 8002366:	d11e      	bne.n	80023a6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2205      	movs	r2, #5
 800236e:	4252      	negs	r2, r2
 8002370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	23c0      	movs	r3, #192	; 0xc0
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4013      	ands	r3, r2
 8002384:	d004      	beq.n	8002390 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0018      	movs	r0, r3
 800238a:	f000 f97b 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 800238e:	e007      	b.n	80023a0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f96e 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f97a 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2208      	movs	r2, #8
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d124      	bne.n	80023fe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2208      	movs	r2, #8
 80023bc:	4013      	ands	r3, r2
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d11d      	bne.n	80023fe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2209      	movs	r2, #9
 80023c8:	4252      	negs	r2, r2
 80023ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2204      	movs	r2, #4
 80023d0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	2203      	movs	r2, #3
 80023da:	4013      	ands	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 f94f 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 80023e6:	e007      	b.n	80023f8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0018      	movs	r0, r3
 80023ec:	f000 f942 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 f94e 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2210      	movs	r2, #16
 8002406:	4013      	ands	r3, r2
 8002408:	2b10      	cmp	r3, #16
 800240a:	d125      	bne.n	8002458 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2210      	movs	r2, #16
 8002414:	4013      	ands	r3, r2
 8002416:	2b10      	cmp	r3, #16
 8002418:	d11e      	bne.n	8002458 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2211      	movs	r2, #17
 8002420:	4252      	negs	r2, r2
 8002422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2208      	movs	r2, #8
 8002428:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	23c0      	movs	r3, #192	; 0xc0
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4013      	ands	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	0018      	movs	r0, r3
 800243c:	f000 f922 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 8002440:	e007      	b.n	8002452 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f915 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f000 f921 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2201      	movs	r2, #1
 8002460:	4013      	ands	r3, r2
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10f      	bne.n	8002486 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	4013      	ands	r3, r2
 8002470:	2b01      	cmp	r3, #1
 8002472:	d108      	bne.n	8002486 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2202      	movs	r2, #2
 800247a:	4252      	negs	r2, r2
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f8ef 	bl	8002664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2240      	movs	r2, #64	; 0x40
 800248e:	4013      	ands	r3, r2
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d10f      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	4013      	ands	r3, r2
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d108      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2241      	movs	r2, #65	; 0x41
 80024a8:	4252      	negs	r2, r2
 80024aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 f8f8 	bl	80026a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	230f      	movs	r3, #15
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2238      	movs	r2, #56	; 0x38
 80024d2:	5c9b      	ldrb	r3, [r3, r2]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_TIM_ConfigClockSource+0x20>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0bc      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x19a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2238      	movs	r2, #56	; 0x38
 80024e0:	2101      	movs	r1, #1
 80024e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2239      	movs	r2, #57	; 0x39
 80024e8:	2102      	movs	r1, #2
 80024ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2277      	movs	r2, #119	; 0x77
 80024f8:	4393      	bics	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	0192      	lsls	r2, r2, #6
 8002514:	4293      	cmp	r3, r2
 8002516:	d040      	beq.n	800259a <HAL_TIM_ConfigClockSource+0xde>
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	0192      	lsls	r2, r2, #6
 800251c:	4293      	cmp	r3, r2
 800251e:	d900      	bls.n	8002522 <HAL_TIM_ConfigClockSource+0x66>
 8002520:	e088      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x178>
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	0152      	lsls	r2, r2, #5
 8002526:	4293      	cmp	r3, r2
 8002528:	d100      	bne.n	800252c <HAL_TIM_ConfigClockSource+0x70>
 800252a:	e088      	b.n	800263e <HAL_TIM_ConfigClockSource+0x182>
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	0152      	lsls	r2, r2, #5
 8002530:	4293      	cmp	r3, r2
 8002532:	d900      	bls.n	8002536 <HAL_TIM_ConfigClockSource+0x7a>
 8002534:	e07e      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x178>
 8002536:	2b70      	cmp	r3, #112	; 0x70
 8002538:	d018      	beq.n	800256c <HAL_TIM_ConfigClockSource+0xb0>
 800253a:	d900      	bls.n	800253e <HAL_TIM_ConfigClockSource+0x82>
 800253c:	e07a      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x178>
 800253e:	2b60      	cmp	r3, #96	; 0x60
 8002540:	d04f      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x126>
 8002542:	d900      	bls.n	8002546 <HAL_TIM_ConfigClockSource+0x8a>
 8002544:	e076      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x178>
 8002546:	2b50      	cmp	r3, #80	; 0x50
 8002548:	d03b      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x106>
 800254a:	d900      	bls.n	800254e <HAL_TIM_ConfigClockSource+0x92>
 800254c:	e072      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x178>
 800254e:	2b40      	cmp	r3, #64	; 0x40
 8002550:	d057      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x146>
 8002552:	d900      	bls.n	8002556 <HAL_TIM_ConfigClockSource+0x9a>
 8002554:	e06e      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x178>
 8002556:	2b30      	cmp	r3, #48	; 0x30
 8002558:	d063      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x166>
 800255a:	d86b      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x178>
 800255c:	2b20      	cmp	r3, #32
 800255e:	d060      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x166>
 8002560:	d868      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x178>
 8002562:	2b00      	cmp	r3, #0
 8002564:	d05d      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x166>
 8002566:	2b10      	cmp	r3, #16
 8002568:	d05b      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x166>
 800256a:	e063      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6899      	ldr	r1, [r3, #8]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f000 f972 	bl	8002864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2277      	movs	r2, #119	; 0x77
 800258c:	4313      	orrs	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	609a      	str	r2, [r3, #8]
      break;
 8002598:	e052      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6899      	ldr	r1, [r3, #8]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f000 f95b 	bl	8002864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	01c9      	lsls	r1, r1, #7
 80025bc:	430a      	orrs	r2, r1
 80025be:	609a      	str	r2, [r3, #8]
      break;
 80025c0:	e03e      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	001a      	movs	r2, r3
 80025d0:	f000 f8ce 	bl	8002770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2150      	movs	r1, #80	; 0x50
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 f928 	bl	8002830 <TIM_ITRx_SetConfig>
      break;
 80025e0:	e02e      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	001a      	movs	r2, r3
 80025f0:	f000 f8ec 	bl	80027cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2160      	movs	r1, #96	; 0x60
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 f918 	bl	8002830 <TIM_ITRx_SetConfig>
      break;
 8002600:	e01e      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	001a      	movs	r2, r3
 8002610:	f000 f8ae 	bl	8002770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2140      	movs	r1, #64	; 0x40
 800261a:	0018      	movs	r0, r3
 800261c:	f000 f908 	bl	8002830 <TIM_ITRx_SetConfig>
      break;
 8002620:	e00e      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	0019      	movs	r1, r3
 800262c:	0010      	movs	r0, r2
 800262e:	f000 f8ff 	bl	8002830 <TIM_ITRx_SetConfig>
      break;
 8002632:	e005      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002634:	230f      	movs	r3, #15
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
      break;
 800263c:	e000      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800263e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2239      	movs	r2, #57	; 0x39
 8002644:	2101      	movs	r1, #1
 8002646:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2238      	movs	r2, #56	; 0x38
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]

  return status;
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	781b      	ldrb	r3, [r3, #0]
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	ffff00ff 	.word	0xffff00ff

08002664 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b002      	add	sp, #8
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	05db      	lsls	r3, r3, #23
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d00b      	beq.n	80026e6 <TIM_Base_SetConfig+0x32>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a23      	ldr	r2, [pc, #140]	; (8002760 <TIM_Base_SetConfig+0xac>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <TIM_Base_SetConfig+0x32>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a22      	ldr	r2, [pc, #136]	; (8002764 <TIM_Base_SetConfig+0xb0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d003      	beq.n	80026e6 <TIM_Base_SetConfig+0x32>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a21      	ldr	r2, [pc, #132]	; (8002768 <TIM_Base_SetConfig+0xb4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d108      	bne.n	80026f8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2270      	movs	r2, #112	; 0x70
 80026ea:	4393      	bics	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	05db      	lsls	r3, r3, #23
 80026fe:	429a      	cmp	r2, r3
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0x66>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a16      	ldr	r2, [pc, #88]	; (8002760 <TIM_Base_SetConfig+0xac>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0x66>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a15      	ldr	r2, [pc, #84]	; (8002764 <TIM_Base_SetConfig+0xb0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0x66>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <TIM_Base_SetConfig+0xb4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a13      	ldr	r2, [pc, #76]	; (800276c <TIM_Base_SetConfig+0xb8>)
 800271e:	4013      	ands	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	4393      	bics	r3, r2
 8002732:	001a      	movs	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	615a      	str	r2, [r3, #20]
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b004      	add	sp, #16
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40000400 	.word	0x40000400
 8002764:	40010800 	.word	0x40010800
 8002768:	40011400 	.word	0x40011400
 800276c:	fffffcff 	.word	0xfffffcff

08002770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	2201      	movs	r2, #1
 8002788:	4393      	bics	r3, r2
 800278a:	001a      	movs	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	22f0      	movs	r2, #240	; 0xf0
 800279a:	4393      	bics	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	220a      	movs	r2, #10
 80027ac:	4393      	bics	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	621a      	str	r2, [r3, #32]
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b006      	add	sp, #24
 80027ca:	bd80      	pop	{r7, pc}

080027cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	2210      	movs	r2, #16
 80027de:	4393      	bics	r3, r2
 80027e0:	001a      	movs	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <TIM_TI2_ConfigInputStage+0x60>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	031b      	lsls	r3, r3, #12
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	22a0      	movs	r2, #160	; 0xa0
 8002808:	4393      	bics	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	621a      	str	r2, [r3, #32]
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b006      	add	sp, #24
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	ffff0fff 	.word	0xffff0fff

08002830 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2270      	movs	r2, #112	; 0x70
 8002844:	4393      	bics	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	2207      	movs	r2, #7
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	609a      	str	r2, [r3, #8]
}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b004      	add	sp, #16
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <TIM_ETR_SetConfig+0x3c>)
 800287c:	4013      	ands	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	021a      	lsls	r2, r3, #8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	431a      	orrs	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4313      	orrs	r3, r2
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b006      	add	sp, #24
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	ffff00ff 	.word	0xffff00ff

080028a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2238      	movs	r2, #56	; 0x38
 80028b2:	5c9b      	ldrb	r3, [r3, r2]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e047      	b.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2238      	movs	r2, #56	; 0x38
 80028c0:	2101      	movs	r1, #1
 80028c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2239      	movs	r2, #57	; 0x39
 80028c8:	2102      	movs	r1, #2
 80028ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2270      	movs	r2, #112	; 0x70
 80028e0:	4393      	bics	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	05db      	lsls	r3, r3, #23
 80028fe:	429a      	cmp	r2, r3
 8002900:	d00e      	beq.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a13      	ldr	r2, [pc, #76]	; (8002954 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d009      	beq.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a11      	ldr	r2, [pc, #68]	; (8002958 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a10      	ldr	r2, [pc, #64]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d10c      	bne.n	800293a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	4393      	bics	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	4313      	orrs	r3, r2
 8002930:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2239      	movs	r2, #57	; 0x39
 800293e:	2101      	movs	r1, #1
 8002940:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2238      	movs	r2, #56	; 0x38
 8002946:	2100      	movs	r1, #0
 8002948:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b004      	add	sp, #16
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40000400 	.word	0x40000400
 8002958:	40010800 	.word	0x40010800
 800295c:	40011400 	.word	0x40011400

08002960 <__libc_init_array>:
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	2600      	movs	r6, #0
 8002964:	4d0c      	ldr	r5, [pc, #48]	; (8002998 <__libc_init_array+0x38>)
 8002966:	4c0d      	ldr	r4, [pc, #52]	; (800299c <__libc_init_array+0x3c>)
 8002968:	1b64      	subs	r4, r4, r5
 800296a:	10a4      	asrs	r4, r4, #2
 800296c:	42a6      	cmp	r6, r4
 800296e:	d109      	bne.n	8002984 <__libc_init_array+0x24>
 8002970:	2600      	movs	r6, #0
 8002972:	f000 f821 	bl	80029b8 <_init>
 8002976:	4d0a      	ldr	r5, [pc, #40]	; (80029a0 <__libc_init_array+0x40>)
 8002978:	4c0a      	ldr	r4, [pc, #40]	; (80029a4 <__libc_init_array+0x44>)
 800297a:	1b64      	subs	r4, r4, r5
 800297c:	10a4      	asrs	r4, r4, #2
 800297e:	42a6      	cmp	r6, r4
 8002980:	d105      	bne.n	800298e <__libc_init_array+0x2e>
 8002982:	bd70      	pop	{r4, r5, r6, pc}
 8002984:	00b3      	lsls	r3, r6, #2
 8002986:	58eb      	ldr	r3, [r5, r3]
 8002988:	4798      	blx	r3
 800298a:	3601      	adds	r6, #1
 800298c:	e7ee      	b.n	800296c <__libc_init_array+0xc>
 800298e:	00b3      	lsls	r3, r6, #2
 8002990:	58eb      	ldr	r3, [r5, r3]
 8002992:	4798      	blx	r3
 8002994:	3601      	adds	r6, #1
 8002996:	e7f2      	b.n	800297e <__libc_init_array+0x1e>
 8002998:	080029f4 	.word	0x080029f4
 800299c:	080029f4 	.word	0x080029f4
 80029a0:	080029f4 	.word	0x080029f4
 80029a4:	080029f8 	.word	0x080029f8

080029a8 <memset>:
 80029a8:	0003      	movs	r3, r0
 80029aa:	1882      	adds	r2, r0, r2
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d100      	bne.n	80029b2 <memset+0xa>
 80029b0:	4770      	bx	lr
 80029b2:	7019      	strb	r1, [r3, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	e7f9      	b.n	80029ac <memset+0x4>

080029b8 <_init>:
 80029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029be:	bc08      	pop	{r3}
 80029c0:	469e      	mov	lr, r3
 80029c2:	4770      	bx	lr

080029c4 <_fini>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ca:	bc08      	pop	{r3}
 80029cc:	469e      	mov	lr, r3
 80029ce:	4770      	bx	lr
