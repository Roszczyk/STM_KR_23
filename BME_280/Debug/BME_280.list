
BME_280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800a7b8  0800a7b8  0001a7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acd4  0800acd4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800acd4  0800acd4  0001acd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acdc  0800acdc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acdc  0800acdc  0001acdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ace0  0800ace0  0001ace0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ace4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  200001dc  0800aec0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  0800aec0  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010141  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bd  00000000  00000000  00030345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00032408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  000332b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016371  00000000  00000000  00034090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc6d  00000000  00000000  0004a401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089046  00000000  00000000  0005a06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e30b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000472c  00000000  00000000  000e3104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a79c 	.word	0x0800a79c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800a79c 	.word	0x0800a79c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f827 	bl	8001490 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff77 	bl	8001340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f819 	bl	8001490 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f80f 	bl	8001490 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff9f 	bl	80013c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff95 	bl	80013c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 febe 	bl	80022e4 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 feb9 	bl	80022e4 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	000d      	movs	r5, r1
 80006e6:	0004      	movs	r4, r0
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	001f      	movs	r7, r3
 80006ec:	0011      	movs	r1, r2
 80006ee:	0328      	lsls	r0, r5, #12
 80006f0:	0f62      	lsrs	r2, r4, #29
 80006f2:	0a40      	lsrs	r0, r0, #9
 80006f4:	4310      	orrs	r0, r2
 80006f6:	007a      	lsls	r2, r7, #1
 80006f8:	0d52      	lsrs	r2, r2, #21
 80006fa:	00e3      	lsls	r3, r4, #3
 80006fc:	033c      	lsls	r4, r7, #12
 80006fe:	4691      	mov	r9, r2
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0ffa      	lsrs	r2, r7, #31
 8000704:	0f4f      	lsrs	r7, r1, #29
 8000706:	006e      	lsls	r6, r5, #1
 8000708:	4327      	orrs	r7, r4
 800070a:	4692      	mov	sl, r2
 800070c:	46b8      	mov	r8, r7
 800070e:	0d76      	lsrs	r6, r6, #21
 8000710:	0fed      	lsrs	r5, r5, #31
 8000712:	00c9      	lsls	r1, r1, #3
 8000714:	4295      	cmp	r5, r2
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3e>
 8000718:	e099      	b.n	800084e <__aeabi_dadd+0x172>
 800071a:	464c      	mov	r4, r9
 800071c:	1b34      	subs	r4, r6, r4
 800071e:	46a4      	mov	ip, r4
 8000720:	2c00      	cmp	r4, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x4a>
 8000724:	e07c      	b.n	8000820 <__aeabi_dadd+0x144>
 8000726:	464a      	mov	r2, r9
 8000728:	2a00      	cmp	r2, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e0b8      	b.n	80008a0 <__aeabi_dadd+0x1c4>
 800072e:	4ac5      	ldr	r2, [pc, #788]	; (8000a44 <__aeabi_dadd+0x368>)
 8000730:	4296      	cmp	r6, r2
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x5a>
 8000734:	e11c      	b.n	8000970 <__aeabi_dadd+0x294>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	003c      	movs	r4, r7
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	4314      	orrs	r4, r2
 800073e:	46a0      	mov	r8, r4
 8000740:	4662      	mov	r2, ip
 8000742:	2a38      	cmp	r2, #56	; 0x38
 8000744:	dd00      	ble.n	8000748 <__aeabi_dadd+0x6c>
 8000746:	e161      	b.n	8000a0c <__aeabi_dadd+0x330>
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x72>
 800074c:	e1cc      	b.n	8000ae8 <__aeabi_dadd+0x40c>
 800074e:	4664      	mov	r4, ip
 8000750:	2220      	movs	r2, #32
 8000752:	1b12      	subs	r2, r2, r4
 8000754:	4644      	mov	r4, r8
 8000756:	4094      	lsls	r4, r2
 8000758:	000f      	movs	r7, r1
 800075a:	46a1      	mov	r9, r4
 800075c:	4664      	mov	r4, ip
 800075e:	4091      	lsls	r1, r2
 8000760:	40e7      	lsrs	r7, r4
 8000762:	464c      	mov	r4, r9
 8000764:	1e4a      	subs	r2, r1, #1
 8000766:	4191      	sbcs	r1, r2
 8000768:	433c      	orrs	r4, r7
 800076a:	4642      	mov	r2, r8
 800076c:	4321      	orrs	r1, r4
 800076e:	4664      	mov	r4, ip
 8000770:	40e2      	lsrs	r2, r4
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	1a5c      	subs	r4, r3, r1
 8000776:	42a3      	cmp	r3, r4
 8000778:	419b      	sbcs	r3, r3
 800077a:	425f      	negs	r7, r3
 800077c:	1bc7      	subs	r7, r0, r7
 800077e:	023b      	lsls	r3, r7, #8
 8000780:	d400      	bmi.n	8000784 <__aeabi_dadd+0xa8>
 8000782:	e0d0      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000784:	027f      	lsls	r7, r7, #9
 8000786:	0a7f      	lsrs	r7, r7, #9
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0xb2>
 800078c:	e0ff      	b.n	800098e <__aeabi_dadd+0x2b2>
 800078e:	0038      	movs	r0, r7
 8000790:	f001 fd8a 	bl	80022a8 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	3908      	subs	r1, #8
 8000798:	2320      	movs	r3, #32
 800079a:	0022      	movs	r2, r4
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	408f      	lsls	r7, r1
 80007a0:	40da      	lsrs	r2, r3
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4317      	orrs	r7, r2
 80007a6:	42b1      	cmp	r1, r6
 80007a8:	da00      	bge.n	80007ac <__aeabi_dadd+0xd0>
 80007aa:	e0ff      	b.n	80009ac <__aeabi_dadd+0x2d0>
 80007ac:	1b89      	subs	r1, r1, r6
 80007ae:	1c4b      	adds	r3, r1, #1
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xda>
 80007b4:	e0a8      	b.n	8000908 <__aeabi_dadd+0x22c>
 80007b6:	2220      	movs	r2, #32
 80007b8:	0039      	movs	r1, r7
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	0020      	movs	r0, r4
 80007be:	4094      	lsls	r4, r2
 80007c0:	4091      	lsls	r1, r2
 80007c2:	40d8      	lsrs	r0, r3
 80007c4:	1e62      	subs	r2, r4, #1
 80007c6:	4194      	sbcs	r4, r2
 80007c8:	40df      	lsrs	r7, r3
 80007ca:	2600      	movs	r6, #0
 80007cc:	4301      	orrs	r1, r0
 80007ce:	430c      	orrs	r4, r1
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d23      	adds	r3, r4, #4
 80007de:	42a3      	cmp	r3, r4
 80007e0:	41a4      	sbcs	r4, r4
 80007e2:	4264      	negs	r4, r4
 80007e4:	193f      	adds	r7, r7, r4
 80007e6:	001c      	movs	r4, r3
 80007e8:	023b      	lsls	r3, r7, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x112>
 80007ec:	e09e      	b.n	800092c <__aeabi_dadd+0x250>
 80007ee:	4b95      	ldr	r3, [pc, #596]	; (8000a44 <__aeabi_dadd+0x368>)
 80007f0:	3601      	adds	r6, #1
 80007f2:	429e      	cmp	r6, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x11c>
 80007f6:	e0b7      	b.n	8000968 <__aeabi_dadd+0x28c>
 80007f8:	4a93      	ldr	r2, [pc, #588]	; (8000a48 <__aeabi_dadd+0x36c>)
 80007fa:	08e4      	lsrs	r4, r4, #3
 80007fc:	4017      	ands	r7, r2
 80007fe:	077b      	lsls	r3, r7, #29
 8000800:	0571      	lsls	r1, r6, #21
 8000802:	027f      	lsls	r7, r7, #9
 8000804:	4323      	orrs	r3, r4
 8000806:	0b3f      	lsrs	r7, r7, #12
 8000808:	0d4a      	lsrs	r2, r1, #21
 800080a:	0512      	lsls	r2, r2, #20
 800080c:	433a      	orrs	r2, r7
 800080e:	07ed      	lsls	r5, r5, #31
 8000810:	432a      	orrs	r2, r5
 8000812:	0018      	movs	r0, r3
 8000814:	0011      	movs	r1, r2
 8000816:	bce0      	pop	{r5, r6, r7}
 8000818:	46ba      	mov	sl, r7
 800081a:	46b1      	mov	r9, r6
 800081c:	46a8      	mov	r8, r5
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	2c00      	cmp	r4, #0
 8000822:	d04b      	beq.n	80008bc <__aeabi_dadd+0x1e0>
 8000824:	464c      	mov	r4, r9
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	46a4      	mov	ip, r4
 800082a:	2e00      	cmp	r6, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_dadd+0x154>
 800082e:	e123      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000830:	0004      	movs	r4, r0
 8000832:	431c      	orrs	r4, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x15c>
 8000836:	e1af      	b.n	8000b98 <__aeabi_dadd+0x4bc>
 8000838:	4662      	mov	r2, ip
 800083a:	1e54      	subs	r4, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x166>
 8000840:	e215      	b.n	8000c6e <__aeabi_dadd+0x592>
 8000842:	4d80      	ldr	r5, [pc, #512]	; (8000a44 <__aeabi_dadd+0x368>)
 8000844:	45ac      	cmp	ip, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x16e>
 8000848:	e1c8      	b.n	8000bdc <__aeabi_dadd+0x500>
 800084a:	46a4      	mov	ip, r4
 800084c:	e11b      	b.n	8000a86 <__aeabi_dadd+0x3aa>
 800084e:	464a      	mov	r2, r9
 8000850:	1ab2      	subs	r2, r6, r2
 8000852:	4694      	mov	ip, r2
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x17e>
 8000858:	e0ac      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 800085a:	464a      	mov	r2, r9
 800085c:	2a00      	cmp	r2, #0
 800085e:	d043      	beq.n	80008e8 <__aeabi_dadd+0x20c>
 8000860:	4a78      	ldr	r2, [pc, #480]	; (8000a44 <__aeabi_dadd+0x368>)
 8000862:	4296      	cmp	r6, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x18c>
 8000866:	e1af      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	003c      	movs	r4, r7
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	4314      	orrs	r4, r2
 8000870:	46a0      	mov	r8, r4
 8000872:	4662      	mov	r2, ip
 8000874:	2a38      	cmp	r2, #56	; 0x38
 8000876:	dc67      	bgt.n	8000948 <__aeabi_dadd+0x26c>
 8000878:	2a1f      	cmp	r2, #31
 800087a:	dc00      	bgt.n	800087e <__aeabi_dadd+0x1a2>
 800087c:	e15f      	b.n	8000b3e <__aeabi_dadd+0x462>
 800087e:	4647      	mov	r7, r8
 8000880:	3a20      	subs	r2, #32
 8000882:	40d7      	lsrs	r7, r2
 8000884:	4662      	mov	r2, ip
 8000886:	2a20      	cmp	r2, #32
 8000888:	d005      	beq.n	8000896 <__aeabi_dadd+0x1ba>
 800088a:	4664      	mov	r4, ip
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	1b12      	subs	r2, r2, r4
 8000890:	4644      	mov	r4, r8
 8000892:	4094      	lsls	r4, r2
 8000894:	4321      	orrs	r1, r4
 8000896:	1e4a      	subs	r2, r1, #1
 8000898:	4191      	sbcs	r1, r2
 800089a:	000c      	movs	r4, r1
 800089c:	433c      	orrs	r4, r7
 800089e:	e057      	b.n	8000950 <__aeabi_dadd+0x274>
 80008a0:	003a      	movs	r2, r7
 80008a2:	430a      	orrs	r2, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x1cc>
 80008a6:	e105      	b.n	8000ab4 <__aeabi_dadd+0x3d8>
 80008a8:	0022      	movs	r2, r4
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1d6>
 80008b0:	e182      	b.n	8000bb8 <__aeabi_dadd+0x4dc>
 80008b2:	4c64      	ldr	r4, [pc, #400]	; (8000a44 <__aeabi_dadd+0x368>)
 80008b4:	45a4      	cmp	ip, r4
 80008b6:	d05b      	beq.n	8000970 <__aeabi_dadd+0x294>
 80008b8:	4694      	mov	ip, r2
 80008ba:	e741      	b.n	8000740 <__aeabi_dadd+0x64>
 80008bc:	4c63      	ldr	r4, [pc, #396]	; (8000a4c <__aeabi_dadd+0x370>)
 80008be:	1c77      	adds	r7, r6, #1
 80008c0:	4227      	tst	r7, r4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1ea>
 80008c4:	e0c4      	b.n	8000a50 <__aeabi_dadd+0x374>
 80008c6:	0004      	movs	r4, r0
 80008c8:	431c      	orrs	r4, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x1f4>
 80008ce:	e169      	b.n	8000ba4 <__aeabi_dadd+0x4c8>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1fa>
 80008d4:	e1bf      	b.n	8000c56 <__aeabi_dadd+0x57a>
 80008d6:	4644      	mov	r4, r8
 80008d8:	430c      	orrs	r4, r1
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x202>
 80008dc:	e1d0      	b.n	8000c80 <__aeabi_dadd+0x5a4>
 80008de:	0742      	lsls	r2, r0, #29
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	08c0      	lsrs	r0, r0, #3
 80008e6:	e029      	b.n	800093c <__aeabi_dadd+0x260>
 80008e8:	003a      	movs	r2, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x214>
 80008ee:	e170      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x220>
 80008fa:	e0e0      	b.n	8000abe <__aeabi_dadd+0x3e2>
 80008fc:	4c51      	ldr	r4, [pc, #324]	; (8000a44 <__aeabi_dadd+0x368>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x228>
 8000902:	e161      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000904:	4694      	mov	ip, r2
 8000906:	e7b4      	b.n	8000872 <__aeabi_dadd+0x196>
 8000908:	003a      	movs	r2, r7
 800090a:	391f      	subs	r1, #31
 800090c:	40ca      	lsrs	r2, r1
 800090e:	0011      	movs	r1, r2
 8000910:	2b20      	cmp	r3, #32
 8000912:	d003      	beq.n	800091c <__aeabi_dadd+0x240>
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	409f      	lsls	r7, r3
 800091a:	433c      	orrs	r4, r7
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	2700      	movs	r7, #0
 8000922:	2600      	movs	r6, #0
 8000924:	430c      	orrs	r4, r1
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x250>
 800092a:	e753      	b.n	80007d4 <__aeabi_dadd+0xf8>
 800092c:	46b4      	mov	ip, r6
 800092e:	08e4      	lsrs	r4, r4, #3
 8000930:	077b      	lsls	r3, r7, #29
 8000932:	4323      	orrs	r3, r4
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <__aeabi_dadd+0x368>)
 8000938:	4594      	cmp	ip, r2
 800093a:	d01d      	beq.n	8000978 <__aeabi_dadd+0x29c>
 800093c:	4662      	mov	r2, ip
 800093e:	0307      	lsls	r7, r0, #12
 8000940:	0552      	lsls	r2, r2, #21
 8000942:	0b3f      	lsrs	r7, r7, #12
 8000944:	0d52      	lsrs	r2, r2, #21
 8000946:	e760      	b.n	800080a <__aeabi_dadd+0x12e>
 8000948:	4644      	mov	r4, r8
 800094a:	430c      	orrs	r4, r1
 800094c:	1e62      	subs	r2, r4, #1
 800094e:	4194      	sbcs	r4, r2
 8000950:	18e4      	adds	r4, r4, r3
 8000952:	429c      	cmp	r4, r3
 8000954:	419b      	sbcs	r3, r3
 8000956:	425f      	negs	r7, r3
 8000958:	183f      	adds	r7, r7, r0
 800095a:	023b      	lsls	r3, r7, #8
 800095c:	d5e3      	bpl.n	8000926 <__aeabi_dadd+0x24a>
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <__aeabi_dadd+0x368>)
 8000960:	3601      	adds	r6, #1
 8000962:	429e      	cmp	r6, r3
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x28c>
 8000966:	e0b5      	b.n	8000ad4 <__aeabi_dadd+0x3f8>
 8000968:	0032      	movs	r2, r6
 800096a:	2700      	movs	r7, #0
 800096c:	2300      	movs	r3, #0
 800096e:	e74c      	b.n	800080a <__aeabi_dadd+0x12e>
 8000970:	0742      	lsls	r2, r0, #29
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	4313      	orrs	r3, r2
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	001a      	movs	r2, r3
 800097a:	4302      	orrs	r2, r0
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2a4>
 800097e:	e1e1      	b.n	8000d44 <__aeabi_dadd+0x668>
 8000980:	2780      	movs	r7, #128	; 0x80
 8000982:	033f      	lsls	r7, r7, #12
 8000984:	4307      	orrs	r7, r0
 8000986:	033f      	lsls	r7, r7, #12
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <__aeabi_dadd+0x368>)
 800098a:	0b3f      	lsrs	r7, r7, #12
 800098c:	e73d      	b.n	800080a <__aeabi_dadd+0x12e>
 800098e:	0020      	movs	r0, r4
 8000990:	f001 fc8a 	bl	80022a8 <__clzsi2>
 8000994:	0001      	movs	r1, r0
 8000996:	3118      	adds	r1, #24
 8000998:	291f      	cmp	r1, #31
 800099a:	dc00      	bgt.n	800099e <__aeabi_dadd+0x2c2>
 800099c:	e6fc      	b.n	8000798 <__aeabi_dadd+0xbc>
 800099e:	3808      	subs	r0, #8
 80009a0:	4084      	lsls	r4, r0
 80009a2:	0027      	movs	r7, r4
 80009a4:	2400      	movs	r4, #0
 80009a6:	42b1      	cmp	r1, r6
 80009a8:	db00      	blt.n	80009ac <__aeabi_dadd+0x2d0>
 80009aa:	e6ff      	b.n	80007ac <__aeabi_dadd+0xd0>
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <__aeabi_dadd+0x36c>)
 80009ae:	1a76      	subs	r6, r6, r1
 80009b0:	4017      	ands	r7, r2
 80009b2:	e70d      	b.n	80007d0 <__aeabi_dadd+0xf4>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d02f      	beq.n	8000a18 <__aeabi_dadd+0x33c>
 80009b8:	464a      	mov	r2, r9
 80009ba:	1b92      	subs	r2, r2, r6
 80009bc:	4694      	mov	ip, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x2e8>
 80009c2:	e0ad      	b.n	8000b20 <__aeabi_dadd+0x444>
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <__aeabi_dadd+0x368>)
 80009c6:	4591      	cmp	r9, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x2f0>
 80009ca:	e10f      	b.n	8000bec <__aeabi_dadd+0x510>
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0412      	lsls	r2, r2, #16
 80009d0:	4310      	orrs	r0, r2
 80009d2:	4662      	mov	r2, ip
 80009d4:	2a38      	cmp	r2, #56	; 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x2fe>
 80009d8:	e10f      	b.n	8000bfa <__aeabi_dadd+0x51e>
 80009da:	2a1f      	cmp	r2, #31
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_dadd+0x304>
 80009de:	e180      	b.n	8000ce2 <__aeabi_dadd+0x606>
 80009e0:	4664      	mov	r4, ip
 80009e2:	2220      	movs	r2, #32
 80009e4:	001e      	movs	r6, r3
 80009e6:	1b12      	subs	r2, r2, r4
 80009e8:	4667      	mov	r7, ip
 80009ea:	0004      	movs	r4, r0
 80009ec:	4093      	lsls	r3, r2
 80009ee:	4094      	lsls	r4, r2
 80009f0:	40fe      	lsrs	r6, r7
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	40f8      	lsrs	r0, r7
 80009f8:	4334      	orrs	r4, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	4480      	add	r8, r0
 80009fe:	1864      	adds	r4, r4, r1
 8000a00:	428c      	cmp	r4, r1
 8000a02:	41bf      	sbcs	r7, r7
 8000a04:	427f      	negs	r7, r7
 8000a06:	464e      	mov	r6, r9
 8000a08:	4447      	add	r7, r8
 8000a0a:	e7a6      	b.n	800095a <__aeabi_dadd+0x27e>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	0011      	movs	r1, r2
 8000a12:	1e4a      	subs	r2, r1, #1
 8000a14:	4191      	sbcs	r1, r2
 8000a16:	e6ad      	b.n	8000774 <__aeabi_dadd+0x98>
 8000a18:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__aeabi_dadd+0x370>)
 8000a1a:	1c72      	adds	r2, r6, #1
 8000a1c:	4222      	tst	r2, r4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x346>
 8000a20:	e0a1      	b.n	8000b66 <__aeabi_dadd+0x48a>
 8000a22:	0002      	movs	r2, r0
 8000a24:	431a      	orrs	r2, r3
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e0fa      	b.n	8000c22 <__aeabi_dadd+0x546>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x356>
 8000a30:	e145      	b.n	8000cbe <__aeabi_dadd+0x5e2>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x35e>
 8000a38:	e146      	b.n	8000cc8 <__aeabi_dadd+0x5ec>
 8000a3a:	0742      	lsls	r2, r0, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	e77b      	b.n	800093c <__aeabi_dadd+0x260>
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4647      	mov	r7, r8
 8000a52:	1a5c      	subs	r4, r3, r1
 8000a54:	1bc2      	subs	r2, r0, r7
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	41bf      	sbcs	r7, r7
 8000a5a:	427f      	negs	r7, r7
 8000a5c:	46b9      	mov	r9, r7
 8000a5e:	0017      	movs	r7, r2
 8000a60:	464a      	mov	r2, r9
 8000a62:	1abf      	subs	r7, r7, r2
 8000a64:	023a      	lsls	r2, r7, #8
 8000a66:	d500      	bpl.n	8000a6a <__aeabi_dadd+0x38e>
 8000a68:	e08d      	b.n	8000b86 <__aeabi_dadd+0x4aa>
 8000a6a:	0023      	movs	r3, r4
 8000a6c:	433b      	orrs	r3, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x396>
 8000a70:	e68a      	b.n	8000788 <__aeabi_dadd+0xac>
 8000a72:	2000      	movs	r0, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	e761      	b.n	800093c <__aeabi_dadd+0x260>
 8000a78:	4cb4      	ldr	r4, [pc, #720]	; (8000d4c <__aeabi_dadd+0x670>)
 8000a7a:	45a1      	cmp	r9, r4
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x3a4>
 8000a7e:	e0ad      	b.n	8000bdc <__aeabi_dadd+0x500>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	0424      	lsls	r4, r4, #16
 8000a84:	4320      	orrs	r0, r4
 8000a86:	4664      	mov	r4, ip
 8000a88:	2c38      	cmp	r4, #56	; 0x38
 8000a8a:	dc3d      	bgt.n	8000b08 <__aeabi_dadd+0x42c>
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	2c1f      	cmp	r4, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3b8>
 8000a92:	e0b7      	b.n	8000c04 <__aeabi_dadd+0x528>
 8000a94:	2520      	movs	r5, #32
 8000a96:	001e      	movs	r6, r3
 8000a98:	1b2d      	subs	r5, r5, r4
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	40ab      	lsls	r3, r5
 8000a9e:	40ac      	lsls	r4, r5
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40d0      	lsrs	r0, r2
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	1e5d      	subs	r5, r3, #1
 8000aa8:	41ab      	sbcs	r3, r5
 8000aaa:	4334      	orrs	r4, r6
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	e02c      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000ab4:	0742      	lsls	r2, r0, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c0      	lsrs	r0, r0, #3
 8000abc:	e73b      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000abe:	185c      	adds	r4, r3, r1
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4440      	add	r0, r8
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	18c7      	adds	r7, r0, r3
 8000aca:	2601      	movs	r6, #1
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x3f6>
 8000ad0:	e729      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	4a9e      	ldr	r2, [pc, #632]	; (8000d50 <__aeabi_dadd+0x674>)
 8000ad6:	0863      	lsrs	r3, r4, #1
 8000ad8:	4017      	ands	r7, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	4014      	ands	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	07fb      	lsls	r3, r7, #31
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	087f      	lsrs	r7, r7, #1
 8000ae6:	e673      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ae8:	4644      	mov	r4, r8
 8000aea:	3a20      	subs	r2, #32
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a20      	cmp	r2, #32
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x424>
 8000af4:	4667      	mov	r7, ip
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4647      	mov	r7, r8
 8000afc:	4097      	lsls	r7, r2
 8000afe:	4339      	orrs	r1, r7
 8000b00:	1e4a      	subs	r2, r1, #1
 8000b02:	4191      	sbcs	r1, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	e635      	b.n	8000774 <__aeabi_dadd+0x98>
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	1acc      	subs	r4, r1, r3
 8000b10:	42a1      	cmp	r1, r4
 8000b12:	41bf      	sbcs	r7, r7
 8000b14:	4643      	mov	r3, r8
 8000b16:	427f      	negs	r7, r7
 8000b18:	4655      	mov	r5, sl
 8000b1a:	464e      	mov	r6, r9
 8000b1c:	1bdf      	subs	r7, r3, r7
 8000b1e:	e62e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000b20:	0002      	movs	r2, r0
 8000b22:	431a      	orrs	r2, r3
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x44c>
 8000b26:	e0bd      	b.n	8000ca4 <__aeabi_dadd+0x5c8>
 8000b28:	4662      	mov	r2, ip
 8000b2a:	4664      	mov	r4, ip
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2c01      	cmp	r4, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x458>
 8000b32:	e0e5      	b.n	8000d00 <__aeabi_dadd+0x624>
 8000b34:	4c85      	ldr	r4, [pc, #532]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d058      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	e749      	b.n	80009d2 <__aeabi_dadd+0x2f6>
 8000b3e:	4664      	mov	r4, ip
 8000b40:	2220      	movs	r2, #32
 8000b42:	1b12      	subs	r2, r2, r4
 8000b44:	4644      	mov	r4, r8
 8000b46:	4094      	lsls	r4, r2
 8000b48:	000f      	movs	r7, r1
 8000b4a:	46a1      	mov	r9, r4
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	40e7      	lsrs	r7, r4
 8000b52:	464c      	mov	r4, r9
 8000b54:	1e4a      	subs	r2, r1, #1
 8000b56:	4191      	sbcs	r1, r2
 8000b58:	433c      	orrs	r4, r7
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	40ca      	lsrs	r2, r1
 8000b62:	1880      	adds	r0, r0, r2
 8000b64:	e6f4      	b.n	8000950 <__aeabi_dadd+0x274>
 8000b66:	4c79      	ldr	r4, [pc, #484]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x492>
 8000b6c:	e6fd      	b.n	800096a <__aeabi_dadd+0x28e>
 8000b6e:	1859      	adds	r1, r3, r1
 8000b70:	4299      	cmp	r1, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4440      	add	r0, r8
 8000b76:	425f      	negs	r7, r3
 8000b78:	19c7      	adds	r7, r0, r7
 8000b7a:	07fc      	lsls	r4, r7, #31
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	0016      	movs	r6, r2
 8000b80:	430c      	orrs	r4, r1
 8000b82:	087f      	lsrs	r7, r7, #1
 8000b84:	e6cf      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000b86:	1acc      	subs	r4, r1, r3
 8000b88:	42a1      	cmp	r1, r4
 8000b8a:	41bf      	sbcs	r7, r7
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	427f      	negs	r7, r7
 8000b90:	1a18      	subs	r0, r3, r0
 8000b92:	4655      	mov	r5, sl
 8000b94:	1bc7      	subs	r7, r0, r7
 8000b96:	e5f7      	b.n	8000788 <__aeabi_dadd+0xac>
 8000b98:	08c9      	lsrs	r1, r1, #3
 8000b9a:	077b      	lsls	r3, r7, #29
 8000b9c:	4655      	mov	r5, sl
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	e6c8      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ce>
 8000ba8:	e081      	b.n	8000cae <__aeabi_dadd+0x5d2>
 8000baa:	4643      	mov	r3, r8
 8000bac:	430b      	orrs	r3, r1
 8000bae:	d115      	bne.n	8000bdc <__aeabi_dadd+0x500>
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	0300      	lsls	r0, r0, #12
 8000bb6:	e6e3      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000bb8:	1a5c      	subs	r4, r3, r1
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	1bc7      	subs	r7, r0, r7
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	e5da      	b.n	800077e <__aeabi_dadd+0xa2>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	e6d2      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bd2:	0742      	lsls	r2, r0, #29
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	e6ac      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000bdc:	4643      	mov	r3, r8
 8000bde:	4642      	mov	r2, r8
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	075b      	lsls	r3, r3, #29
 8000be4:	4655      	mov	r5, sl
 8000be6:	430b      	orrs	r3, r1
 8000be8:	08d0      	lsrs	r0, r2, #3
 8000bea:	e6c5      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bec:	4643      	mov	r3, r8
 8000bee:	4642      	mov	r2, r8
 8000bf0:	075b      	lsls	r3, r3, #29
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	08d0      	lsrs	r0, r2, #3
 8000bf8:	e6be      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	e6fc      	b.n	80009fe <__aeabi_dadd+0x322>
 8000c04:	0002      	movs	r2, r0
 8000c06:	3c20      	subs	r4, #32
 8000c08:	40e2      	lsrs	r2, r4
 8000c0a:	0014      	movs	r4, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	2a20      	cmp	r2, #32
 8000c10:	d003      	beq.n	8000c1a <__aeabi_dadd+0x53e>
 8000c12:	2540      	movs	r5, #64	; 0x40
 8000c14:	1aad      	subs	r5, r5, r2
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	1e58      	subs	r0, r3, #1
 8000c1c:	4183      	sbcs	r3, r0
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	e775      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d0e2      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000c26:	003a      	movs	r2, r7
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	d0cd      	beq.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000c2c:	0742      	lsls	r2, r0, #29
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	0312      	lsls	r2, r2, #12
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d006      	beq.n	8000c4a <__aeabi_dadd+0x56e>
 8000c3c:	08fc      	lsrs	r4, r7, #3
 8000c3e:	4214      	tst	r4, r2
 8000c40:	d103      	bne.n	8000c4a <__aeabi_dadd+0x56e>
 8000c42:	0020      	movs	r0, r4
 8000c44:	08cb      	lsrs	r3, r1, #3
 8000c46:	077a      	lsls	r2, r7, #29
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	0f5a      	lsrs	r2, r3, #29
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	0752      	lsls	r2, r2, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	e690      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000c56:	4643      	mov	r3, r8
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x582>
 8000c5c:	e709      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	4642      	mov	r2, r8
 8000c62:	08c9      	lsrs	r1, r1, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4655      	mov	r5, sl
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	08d0      	lsrs	r0, r2, #3
 8000c6c:	e666      	b.n	800093c <__aeabi_dadd+0x260>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	1a3f      	subs	r7, r7, r0
 8000c76:	4249      	negs	r1, r1
 8000c78:	4655      	mov	r5, sl
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e57e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000c80:	4642      	mov	r2, r8
 8000c82:	1a5c      	subs	r4, r3, r1
 8000c84:	1a87      	subs	r7, r0, r2
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	1abf      	subs	r7, r7, r2
 8000c8e:	023a      	lsls	r2, r7, #8
 8000c90:	d53d      	bpl.n	8000d0e <__aeabi_dadd+0x632>
 8000c92:	1acc      	subs	r4, r1, r3
 8000c94:	42a1      	cmp	r1, r4
 8000c96:	4189      	sbcs	r1, r1
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	1a1f      	subs	r7, r3, r0
 8000c9e:	4655      	mov	r5, sl
 8000ca0:	1a7f      	subs	r7, r7, r1
 8000ca2:	e595      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	08f8      	lsrs	r0, r7, #3
 8000cac:	e643      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000cae:	4644      	mov	r4, r8
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	d130      	bne.n	8000d18 <__aeabi_dadd+0x63c>
 8000cb6:	0742      	lsls	r2, r0, #29
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	e65c      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000cbe:	077b      	lsls	r3, r7, #29
 8000cc0:	08c9      	lsrs	r1, r1, #3
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	08f8      	lsrs	r0, r7, #3
 8000cc6:	e639      	b.n	800093c <__aeabi_dadd+0x260>
 8000cc8:	185c      	adds	r4, r3, r1
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	419b      	sbcs	r3, r3
 8000cce:	4440      	add	r0, r8
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	18c7      	adds	r7, r0, r3
 8000cd4:	023b      	lsls	r3, r7, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dadd+0x5fe>
 8000cd8:	e625      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <__aeabi_dadd+0x674>)
 8000cdc:	2601      	movs	r6, #1
 8000cde:	401f      	ands	r7, r3
 8000ce0:	e621      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	3a20      	subs	r2, #32
 8000ce6:	40d4      	lsrs	r4, r2
 8000ce8:	4662      	mov	r2, ip
 8000cea:	2a20      	cmp	r2, #32
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_dadd+0x61c>
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	1b92      	subs	r2, r2, r6
 8000cf4:	4090      	lsls	r0, r2
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4193      	sbcs	r3, r2
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	e67e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000d00:	185c      	adds	r4, r3, r1
 8000d02:	428c      	cmp	r4, r1
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4440      	add	r0, r8
 8000d08:	4249      	negs	r1, r1
 8000d0a:	1847      	adds	r7, r0, r1
 8000d0c:	e6dd      	b.n	8000aca <__aeabi_dadd+0x3ee>
 8000d0e:	0023      	movs	r3, r4
 8000d10:	433b      	orrs	r3, r7
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x63a>
 8000d14:	e6ad      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000d16:	e606      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d18:	0744      	lsls	r4, r0, #29
 8000d1a:	4323      	orrs	r3, r4
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	08c0      	lsrs	r0, r0, #3
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4220      	tst	r0, r4
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x65c>
 8000d26:	4642      	mov	r2, r8
 8000d28:	08d6      	lsrs	r6, r2, #3
 8000d2a:	4226      	tst	r6, r4
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x65c>
 8000d2e:	4655      	mov	r5, sl
 8000d30:	0030      	movs	r0, r6
 8000d32:	08cb      	lsrs	r3, r1, #3
 8000d34:	0751      	lsls	r1, r2, #29
 8000d36:	430b      	orrs	r3, r1
 8000d38:	0f5a      	lsrs	r2, r3, #29
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	0752      	lsls	r2, r2, #29
 8000d40:	4313      	orrs	r3, r2
 8000d42:	e619      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x670>)
 8000d48:	001f      	movs	r7, r3
 8000d4a:	e55e      	b.n	800080a <__aeabi_dadd+0x12e>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4681      	mov	r9, r0
 8000d62:	0005      	movs	r5, r0
 8000d64:	030c      	lsls	r4, r1, #12
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	0b24      	lsrs	r4, r4, #12
 8000d70:	0d40      	lsrs	r0, r0, #21
 8000d72:	0fce      	lsrs	r6, r1, #31
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x26>
 8000d78:	e156      	b.n	8001028 <__aeabi_ddiv+0x2d4>
 8000d7a:	4bd4      	ldr	r3, [pc, #848]	; (80010cc <__aeabi_ddiv+0x378>)
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x2e>
 8000d80:	e172      	b.n	8001068 <__aeabi_ddiv+0x314>
 8000d82:	0f6b      	lsrs	r3, r5, #29
 8000d84:	00e4      	lsls	r4, r4, #3
 8000d86:	431c      	orrs	r4, r3
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	4698      	mov	r8, r3
 8000d90:	4bcf      	ldr	r3, [pc, #828]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000d92:	00ed      	lsls	r5, r5, #3
 8000d94:	469b      	mov	fp, r3
 8000d96:	2300      	movs	r3, #0
 8000d98:	4699      	mov	r9, r3
 8000d9a:	4483      	add	fp, r0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	033c      	lsls	r4, r7, #12
 8000da0:	007b      	lsls	r3, r7, #1
 8000da2:	4650      	mov	r0, sl
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	0d5b      	lsrs	r3, r3, #21
 8000da8:	0fff      	lsrs	r7, r7, #31
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x5c>
 8000dae:	e11f      	b.n	8000ff0 <__aeabi_ddiv+0x29c>
 8000db0:	4ac6      	ldr	r2, [pc, #792]	; (80010cc <__aeabi_ddiv+0x378>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x64>
 8000db6:	e162      	b.n	800107e <__aeabi_ddiv+0x32a>
 8000db8:	49c5      	ldr	r1, [pc, #788]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	00e4      	lsls	r4, r4, #3
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	4463      	add	r3, ip
 8000dc8:	0412      	lsls	r2, r2, #16
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	4314      	orrs	r4, r2
 8000dce:	469b      	mov	fp, r3
 8000dd0:	00c2      	lsls	r2, r0, #3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	0033      	movs	r3, r6
 8000dd6:	407b      	eors	r3, r7
 8000dd8:	469a      	mov	sl, r3
 8000dda:	464b      	mov	r3, r9
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d827      	bhi.n	8000e30 <__aeabi_ddiv+0xdc>
 8000de0:	49bc      	ldr	r1, [pc, #752]	; (80010d4 <__aeabi_ddiv+0x380>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58cb      	ldr	r3, [r1, r3]
 8000de6:	469f      	mov	pc, r3
 8000de8:	46b2      	mov	sl, r6
 8000dea:	9b00      	ldr	r3, [sp, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d016      	beq.n	8000e1e <__aeabi_ddiv+0xca>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0xa2>
 8000df4:	e28e      	b.n	8001314 <__aeabi_ddiv+0x5c0>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d000      	beq.n	8000dfc <__aeabi_ddiv+0xa8>
 8000dfa:	e0d9      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2400      	movs	r4, #0
 8000e00:	2500      	movs	r5, #0
 8000e02:	4652      	mov	r2, sl
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	4323      	orrs	r3, r4
 8000e08:	07d2      	lsls	r2, r2, #31
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	0019      	movs	r1, r3
 8000e10:	b005      	add	sp, #20
 8000e12:	bcf0      	pop	{r4, r5, r6, r7}
 8000e14:	46bb      	mov	fp, r7
 8000e16:	46b2      	mov	sl, r6
 8000e18:	46a9      	mov	r9, r5
 8000e1a:	46a0      	mov	r8, r4
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2500      	movs	r5, #0
 8000e22:	4baa      	ldr	r3, [pc, #680]	; (80010cc <__aeabi_ddiv+0x378>)
 8000e24:	e7ed      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000e26:	46ba      	mov	sl, r7
 8000e28:	46a0      	mov	r8, r4
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	9000      	str	r0, [sp, #0]
 8000e2e:	e7dc      	b.n	8000dea <__aeabi_ddiv+0x96>
 8000e30:	4544      	cmp	r4, r8
 8000e32:	d200      	bcs.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e1c7      	b.n	80011c6 <__aeabi_ddiv+0x472>
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xe6>
 8000e38:	e1c2      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	469c      	mov	ip, r3
 8000e40:	002e      	movs	r6, r5
 8000e42:	4640      	mov	r0, r8
 8000e44:	2500      	movs	r5, #0
 8000e46:	44e3      	add	fp, ip
 8000e48:	0223      	lsls	r3, r4, #8
 8000e4a:	0e14      	lsrs	r4, r2, #24
 8000e4c:	431c      	orrs	r4, r3
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	4699      	mov	r9, r3
 8000e52:	0423      	lsls	r3, r4, #16
 8000e54:	0c1f      	lsrs	r7, r3, #16
 8000e56:	0212      	lsls	r2, r2, #8
 8000e58:	4649      	mov	r1, r9
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	f7ff f9f5 	bl	800024c <__aeabi_uidivmod>
 8000e62:	0002      	movs	r2, r0
 8000e64:	437a      	muls	r2, r7
 8000e66:	040b      	lsls	r3, r1, #16
 8000e68:	0c31      	lsrs	r1, r6, #16
 8000e6a:	4680      	mov	r8, r0
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d907      	bls.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	1909      	adds	r1, r1, r4
 8000e7a:	44e0      	add	r8, ip
 8000e7c:	428c      	cmp	r4, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e80:	e207      	b.n	8001292 <__aeabi_ddiv+0x53e>
 8000e82:	1a88      	subs	r0, r1, r2
 8000e84:	4649      	mov	r1, r9
 8000e86:	f7ff f9e1 	bl	800024c <__aeabi_uidivmod>
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	4666      	mov	r6, ip
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	0c09      	lsrs	r1, r1, #16
 8000e96:	4342      	muls	r2, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	4331      	orrs	r1, r6
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d904      	bls.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d800      	bhi.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea8:	e1ed      	b.n	8001286 <__aeabi_ddiv+0x532>
 8000eaa:	1a88      	subs	r0, r1, r2
 8000eac:	4642      	mov	r2, r8
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	040e      	lsls	r6, r1, #16
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	001f      	movs	r7, r3
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	9b00      	ldr	r3, [sp, #0]
 8000ec2:	0c36      	lsrs	r6, r6, #16
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	0c19      	lsrs	r1, r3, #16
 8000ec8:	000b      	movs	r3, r1
 8000eca:	4373      	muls	r3, r6
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	437e      	muls	r6, r7
 8000ed0:	9103      	str	r1, [sp, #12]
 8000ed2:	4351      	muls	r1, r2
 8000ed4:	437a      	muls	r2, r7
 8000ed6:	0c1f      	lsrs	r7, r3, #16
 8000ed8:	46bc      	mov	ip, r7
 8000eda:	1876      	adds	r6, r6, r1
 8000edc:	4466      	add	r6, ip
 8000ede:	42b1      	cmp	r1, r6
 8000ee0:	d903      	bls.n	8000eea <__aeabi_ddiv+0x196>
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	4462      	add	r2, ip
 8000eea:	0c31      	lsrs	r1, r6, #16
 8000eec:	188a      	adds	r2, r1, r2
 8000eee:	0431      	lsls	r1, r6, #16
 8000ef0:	041e      	lsls	r6, r3, #16
 8000ef2:	0c36      	lsrs	r6, r6, #16
 8000ef4:	198e      	adds	r6, r1, r6
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d302      	bcc.n	8000f00 <__aeabi_ddiv+0x1ac>
 8000efa:	d112      	bne.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000efc:	42b5      	cmp	r5, r6
 8000efe:	d210      	bcs.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000f00:	4643      	mov	r3, r8
 8000f02:	1e59      	subs	r1, r3, #1
 8000f04:	9b00      	ldr	r3, [sp, #0]
 8000f06:	469c      	mov	ip, r3
 8000f08:	4465      	add	r5, ip
 8000f0a:	001f      	movs	r7, r3
 8000f0c:	429d      	cmp	r5, r3
 8000f0e:	419b      	sbcs	r3, r3
 8000f10:	425b      	negs	r3, r3
 8000f12:	191b      	adds	r3, r3, r4
 8000f14:	18c0      	adds	r0, r0, r3
 8000f16:	4284      	cmp	r4, r0
 8000f18:	d200      	bcs.n	8000f1c <__aeabi_ddiv+0x1c8>
 8000f1a:	e1a0      	b.n	800125e <__aeabi_ddiv+0x50a>
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x1cc>
 8000f1e:	e19b      	b.n	8001258 <__aeabi_ddiv+0x504>
 8000f20:	4688      	mov	r8, r1
 8000f22:	1bae      	subs	r6, r5, r6
 8000f24:	42b5      	cmp	r5, r6
 8000f26:	41ad      	sbcs	r5, r5
 8000f28:	1a80      	subs	r0, r0, r2
 8000f2a:	426d      	negs	r5, r5
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x1e0>
 8000f32:	e1d5      	b.n	80012e0 <__aeabi_ddiv+0x58c>
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f989 	bl	800024c <__aeabi_uidivmod>
 8000f3a:	9a01      	ldr	r2, [sp, #4]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4342      	muls	r2, r0
 8000f40:	0c31      	lsrs	r1, r6, #16
 8000f42:	0005      	movs	r5, r0
 8000f44:	4319      	orrs	r1, r3
 8000f46:	428a      	cmp	r2, r1
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x1f8>
 8000f4a:	e16c      	b.n	8001226 <__aeabi_ddiv+0x4d2>
 8000f4c:	1a88      	subs	r0, r1, r2
 8000f4e:	4649      	mov	r1, r9
 8000f50:	f7ff f97c 	bl	800024c <__aeabi_uidivmod>
 8000f54:	9a01      	ldr	r2, [sp, #4]
 8000f56:	0436      	lsls	r6, r6, #16
 8000f58:	4342      	muls	r2, r0
 8000f5a:	0409      	lsls	r1, r1, #16
 8000f5c:	0c36      	lsrs	r6, r6, #16
 8000f5e:	0003      	movs	r3, r0
 8000f60:	430e      	orrs	r6, r1
 8000f62:	42b2      	cmp	r2, r6
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x214>
 8000f66:	e153      	b.n	8001210 <__aeabi_ddiv+0x4bc>
 8000f68:	9803      	ldr	r0, [sp, #12]
 8000f6a:	1ab6      	subs	r6, r6, r2
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	042d      	lsls	r5, r5, #16
 8000f70:	431d      	orrs	r5, r3
 8000f72:	9f02      	ldr	r7, [sp, #8]
 8000f74:	042b      	lsls	r3, r5, #16
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	437b      	muls	r3, r7
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	0c29      	lsrs	r1, r5, #16
 8000f80:	4348      	muls	r0, r1
 8000f82:	0c13      	lsrs	r3, r2, #16
 8000f84:	4484      	add	ip, r0
 8000f86:	4463      	add	r3, ip
 8000f88:	4379      	muls	r1, r7
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x242>
 8000f8e:	2080      	movs	r0, #128	; 0x80
 8000f90:	0240      	lsls	r0, r0, #9
 8000f92:	4684      	mov	ip, r0
 8000f94:	4461      	add	r1, ip
 8000f96:	0c18      	lsrs	r0, r3, #16
 8000f98:	0412      	lsls	r2, r2, #16
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	0c12      	lsrs	r2, r2, #16
 8000f9e:	1841      	adds	r1, r0, r1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	428e      	cmp	r6, r1
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x254>
 8000fa6:	e0ff      	b.n	80011a8 <__aeabi_ddiv+0x454>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x258>
 8000faa:	e0fa      	b.n	80011a2 <__aeabi_ddiv+0x44e>
 8000fac:	2301      	movs	r3, #1
 8000fae:	431d      	orrs	r5, r3
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <__aeabi_ddiv+0x384>)
 8000fb2:	445a      	add	r2, fp
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_ddiv+0x266>
 8000fb8:	e0aa      	b.n	8001110 <__aeabi_ddiv+0x3bc>
 8000fba:	076b      	lsls	r3, r5, #29
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0x26c>
 8000fbe:	e13d      	b.n	800123c <__aeabi_ddiv+0x4e8>
 8000fc0:	08ed      	lsrs	r5, r5, #3
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	01db      	lsls	r3, r3, #7
 8000fc6:	d506      	bpl.n	8000fd6 <__aeabi_ddiv+0x282>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <__aeabi_ddiv+0x388>)
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4690      	mov	r8, r2
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	00d2      	lsls	r2, r2, #3
 8000fd4:	445a      	add	r2, fp
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <__aeabi_ddiv+0x38c>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dd00      	ble.n	8000fde <__aeabi_ddiv+0x28a>
 8000fdc:	e71f      	b.n	8000e1e <__aeabi_ddiv+0xca>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	431d      	orrs	r5, r3
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0552      	lsls	r2, r2, #21
 8000fe8:	025c      	lsls	r4, r3, #9
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	0d53      	lsrs	r3, r2, #21
 8000fee:	e708      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	4322      	orrs	r2, r4
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_ddiv+0x2a4>
 8000ff6:	e07b      	b.n	80010f0 <__aeabi_ddiv+0x39c>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x2aa>
 8000ffc:	e0fa      	b.n	80011f4 <__aeabi_ddiv+0x4a0>
 8000ffe:	0020      	movs	r0, r4
 8001000:	f001 f952 	bl	80022a8 <__clzsi2>
 8001004:	0002      	movs	r2, r0
 8001006:	3a0b      	subs	r2, #11
 8001008:	231d      	movs	r3, #29
 800100a:	0001      	movs	r1, r0
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	4652      	mov	r2, sl
 8001010:	3908      	subs	r1, #8
 8001012:	40da      	lsrs	r2, r3
 8001014:	408c      	lsls	r4, r1
 8001016:	4314      	orrs	r4, r2
 8001018:	4652      	mov	r2, sl
 800101a:	408a      	lsls	r2, r1
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <__aeabi_ddiv+0x390>)
 800101e:	4458      	add	r0, fp
 8001020:	469b      	mov	fp, r3
 8001022:	4483      	add	fp, r0
 8001024:	2000      	movs	r0, #0
 8001026:	e6d5      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001028:	464b      	mov	r3, r9
 800102a:	4323      	orrs	r3, r4
 800102c:	4698      	mov	r8, r3
 800102e:	d044      	beq.n	80010ba <__aeabi_ddiv+0x366>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_ddiv+0x2e2>
 8001034:	e0ce      	b.n	80011d4 <__aeabi_ddiv+0x480>
 8001036:	0020      	movs	r0, r4
 8001038:	f001 f936 	bl	80022a8 <__clzsi2>
 800103c:	0001      	movs	r1, r0
 800103e:	0002      	movs	r2, r0
 8001040:	390b      	subs	r1, #11
 8001042:	231d      	movs	r3, #29
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4649      	mov	r1, r9
 8001048:	0010      	movs	r0, r2
 800104a:	40d9      	lsrs	r1, r3
 800104c:	3808      	subs	r0, #8
 800104e:	4084      	lsls	r4, r0
 8001050:	000b      	movs	r3, r1
 8001052:	464d      	mov	r5, r9
 8001054:	4323      	orrs	r3, r4
 8001056:	4698      	mov	r8, r3
 8001058:	4085      	lsls	r5, r0
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <__aeabi_ddiv+0x394>)
 800105c:	1a83      	subs	r3, r0, r2
 800105e:	469b      	mov	fp, r3
 8001060:	2300      	movs	r3, #0
 8001062:	4699      	mov	r9, r3
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	e69a      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 8001068:	464b      	mov	r3, r9
 800106a:	4323      	orrs	r3, r4
 800106c:	4698      	mov	r8, r3
 800106e:	d11d      	bne.n	80010ac <__aeabi_ddiv+0x358>
 8001070:	2308      	movs	r3, #8
 8001072:	4699      	mov	r9, r3
 8001074:	3b06      	subs	r3, #6
 8001076:	2500      	movs	r5, #0
 8001078:	4683      	mov	fp, r0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	e68f      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 800107e:	4652      	mov	r2, sl
 8001080:	4322      	orrs	r2, r4
 8001082:	d109      	bne.n	8001098 <__aeabi_ddiv+0x344>
 8001084:	2302      	movs	r3, #2
 8001086:	4649      	mov	r1, r9
 8001088:	4319      	orrs	r1, r3
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <__aeabi_ddiv+0x398>)
 800108c:	4689      	mov	r9, r1
 800108e:	469c      	mov	ip, r3
 8001090:	2400      	movs	r4, #0
 8001092:	2002      	movs	r0, #2
 8001094:	44e3      	add	fp, ip
 8001096:	e69d      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001098:	2303      	movs	r3, #3
 800109a:	464a      	mov	r2, r9
 800109c:	431a      	orrs	r2, r3
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <__aeabi_ddiv+0x398>)
 80010a0:	4691      	mov	r9, r2
 80010a2:	469c      	mov	ip, r3
 80010a4:	4652      	mov	r2, sl
 80010a6:	2003      	movs	r0, #3
 80010a8:	44e3      	add	fp, ip
 80010aa:	e693      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010ac:	230c      	movs	r3, #12
 80010ae:	4699      	mov	r9, r3
 80010b0:	3b09      	subs	r3, #9
 80010b2:	46a0      	mov	r8, r4
 80010b4:	4683      	mov	fp, r0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	e671      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ba:	2304      	movs	r3, #4
 80010bc:	4699      	mov	r9, r3
 80010be:	2300      	movs	r3, #0
 80010c0:	469b      	mov	fp, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	2500      	movs	r5, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	e669      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	000007ff 	.word	0x000007ff
 80010d0:	fffffc01 	.word	0xfffffc01
 80010d4:	0800a810 	.word	0x0800a810
 80010d8:	000003ff 	.word	0x000003ff
 80010dc:	feffffff 	.word	0xfeffffff
 80010e0:	000007fe 	.word	0x000007fe
 80010e4:	000003f3 	.word	0x000003f3
 80010e8:	fffffc0d 	.word	0xfffffc0d
 80010ec:	fffff801 	.word	0xfffff801
 80010f0:	4649      	mov	r1, r9
 80010f2:	2301      	movs	r3, #1
 80010f4:	4319      	orrs	r1, r3
 80010f6:	4689      	mov	r9, r1
 80010f8:	2400      	movs	r4, #0
 80010fa:	2001      	movs	r0, #1
 80010fc:	e66a      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010fe:	2300      	movs	r3, #0
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	469a      	mov	sl, r3
 8001104:	2500      	movs	r5, #0
 8001106:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	e67a      	b.n	8000e02 <__aeabi_ddiv+0xae>
 800110c:	2501      	movs	r5, #1
 800110e:	426d      	negs	r5, r5
 8001110:	2301      	movs	r3, #1
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	2b38      	cmp	r3, #56	; 0x38
 8001116:	dd00      	ble.n	800111a <__aeabi_ddiv+0x3c6>
 8001118:	e670      	b.n	8000dfc <__aeabi_ddiv+0xa8>
 800111a:	2b1f      	cmp	r3, #31
 800111c:	dc00      	bgt.n	8001120 <__aeabi_ddiv+0x3cc>
 800111e:	e0bf      	b.n	80012a0 <__aeabi_ddiv+0x54c>
 8001120:	211f      	movs	r1, #31
 8001122:	4249      	negs	r1, r1
 8001124:	1a8a      	subs	r2, r1, r2
 8001126:	4641      	mov	r1, r8
 8001128:	40d1      	lsrs	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	2b20      	cmp	r3, #32
 800112e:	d004      	beq.n	800113a <__aeabi_ddiv+0x3e6>
 8001130:	4641      	mov	r1, r8
 8001132:	4b80      	ldr	r3, [pc, #512]	; (8001334 <__aeabi_ddiv+0x5e0>)
 8001134:	445b      	add	r3, fp
 8001136:	4099      	lsls	r1, r3
 8001138:	430d      	orrs	r5, r1
 800113a:	1e6b      	subs	r3, r5, #1
 800113c:	419d      	sbcs	r5, r3
 800113e:	2307      	movs	r3, #7
 8001140:	432a      	orrs	r2, r5
 8001142:	001d      	movs	r5, r3
 8001144:	2400      	movs	r4, #0
 8001146:	4015      	ands	r5, r2
 8001148:	4213      	tst	r3, r2
 800114a:	d100      	bne.n	800114e <__aeabi_ddiv+0x3fa>
 800114c:	e0d4      	b.n	80012f8 <__aeabi_ddiv+0x5a4>
 800114e:	210f      	movs	r1, #15
 8001150:	2300      	movs	r3, #0
 8001152:	4011      	ands	r1, r2
 8001154:	2904      	cmp	r1, #4
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x406>
 8001158:	e0cb      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800115a:	1d11      	adds	r1, r2, #4
 800115c:	4291      	cmp	r1, r2
 800115e:	4192      	sbcs	r2, r2
 8001160:	4252      	negs	r2, r2
 8001162:	189b      	adds	r3, r3, r2
 8001164:	000a      	movs	r2, r1
 8001166:	0219      	lsls	r1, r3, #8
 8001168:	d400      	bmi.n	800116c <__aeabi_ddiv+0x418>
 800116a:	e0c2      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800116c:	2301      	movs	r3, #1
 800116e:	2400      	movs	r4, #0
 8001170:	2500      	movs	r5, #0
 8001172:	e646      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	4641      	mov	r1, r8
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	4219      	tst	r1, r3
 800117c:	d008      	beq.n	8001190 <__aeabi_ddiv+0x43c>
 800117e:	421c      	tst	r4, r3
 8001180:	d106      	bne.n	8001190 <__aeabi_ddiv+0x43c>
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	46ba      	mov	sl, r7
 8001188:	0015      	movs	r5, r2
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	e638      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001190:	2480      	movs	r4, #128	; 0x80
 8001192:	4643      	mov	r3, r8
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	46b2      	mov	sl, r6
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e62f      	b.n	8000e02 <__aeabi_ddiv+0xae>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x454>
 80011a6:	e703      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80011a8:	19a6      	adds	r6, r4, r6
 80011aa:	1e68      	subs	r0, r5, #1
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d200      	bcs.n	80011b2 <__aeabi_ddiv+0x45e>
 80011b0:	e08d      	b.n	80012ce <__aeabi_ddiv+0x57a>
 80011b2:	428e      	cmp	r6, r1
 80011b4:	d200      	bcs.n	80011b8 <__aeabi_ddiv+0x464>
 80011b6:	e0a3      	b.n	8001300 <__aeabi_ddiv+0x5ac>
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x468>
 80011ba:	e0b3      	b.n	8001324 <__aeabi_ddiv+0x5d0>
 80011bc:	0005      	movs	r5, r0
 80011be:	e6f5      	b.n	8000fac <__aeabi_ddiv+0x258>
 80011c0:	42aa      	cmp	r2, r5
 80011c2:	d900      	bls.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e639      	b.n	8000e3a <__aeabi_ddiv+0xe6>
 80011c6:	4643      	mov	r3, r8
 80011c8:	07de      	lsls	r6, r3, #31
 80011ca:	0858      	lsrs	r0, r3, #1
 80011cc:	086b      	lsrs	r3, r5, #1
 80011ce:	431e      	orrs	r6, r3
 80011d0:	07ed      	lsls	r5, r5, #31
 80011d2:	e639      	b.n	8000e48 <__aeabi_ddiv+0xf4>
 80011d4:	4648      	mov	r0, r9
 80011d6:	f001 f867 	bl	80022a8 <__clzsi2>
 80011da:	0001      	movs	r1, r0
 80011dc:	0002      	movs	r2, r0
 80011de:	3115      	adds	r1, #21
 80011e0:	3220      	adds	r2, #32
 80011e2:	291c      	cmp	r1, #28
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_ddiv+0x494>
 80011e6:	e72c      	b.n	8001042 <__aeabi_ddiv+0x2ee>
 80011e8:	464b      	mov	r3, r9
 80011ea:	3808      	subs	r0, #8
 80011ec:	4083      	lsls	r3, r0
 80011ee:	2500      	movs	r5, #0
 80011f0:	4698      	mov	r8, r3
 80011f2:	e732      	b.n	800105a <__aeabi_ddiv+0x306>
 80011f4:	f001 f858 	bl	80022a8 <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	001a      	movs	r2, r3
 80011fc:	3215      	adds	r2, #21
 80011fe:	3020      	adds	r0, #32
 8001200:	2a1c      	cmp	r2, #28
 8001202:	dc00      	bgt.n	8001206 <__aeabi_ddiv+0x4b2>
 8001204:	e700      	b.n	8001008 <__aeabi_ddiv+0x2b4>
 8001206:	4654      	mov	r4, sl
 8001208:	3b08      	subs	r3, #8
 800120a:	2200      	movs	r2, #0
 800120c:	409c      	lsls	r4, r3
 800120e:	e705      	b.n	800101c <__aeabi_ddiv+0x2c8>
 8001210:	1936      	adds	r6, r6, r4
 8001212:	3b01      	subs	r3, #1
 8001214:	42b4      	cmp	r4, r6
 8001216:	d900      	bls.n	800121a <__aeabi_ddiv+0x4c6>
 8001218:	e6a6      	b.n	8000f68 <__aeabi_ddiv+0x214>
 800121a:	42b2      	cmp	r2, r6
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x4cc>
 800121e:	e6a3      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001220:	1e83      	subs	r3, r0, #2
 8001222:	1936      	adds	r6, r6, r4
 8001224:	e6a0      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001226:	1909      	adds	r1, r1, r4
 8001228:	3d01      	subs	r5, #1
 800122a:	428c      	cmp	r4, r1
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x4dc>
 800122e:	e68d      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001230:	428a      	cmp	r2, r1
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x4e2>
 8001234:	e68a      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001236:	1e85      	subs	r5, r0, #2
 8001238:	1909      	adds	r1, r1, r4
 800123a:	e687      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 800123c:	230f      	movs	r3, #15
 800123e:	402b      	ands	r3, r5
 8001240:	2b04      	cmp	r3, #4
 8001242:	d100      	bne.n	8001246 <__aeabi_ddiv+0x4f2>
 8001244:	e6bc      	b.n	8000fc0 <__aeabi_ddiv+0x26c>
 8001246:	2305      	movs	r3, #5
 8001248:	425b      	negs	r3, r3
 800124a:	42ab      	cmp	r3, r5
 800124c:	419b      	sbcs	r3, r3
 800124e:	3504      	adds	r5, #4
 8001250:	425b      	negs	r3, r3
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	4498      	add	r8, r3
 8001256:	e6b4      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 8001258:	42af      	cmp	r7, r5
 800125a:	d900      	bls.n	800125e <__aeabi_ddiv+0x50a>
 800125c:	e660      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800125e:	4282      	cmp	r2, r0
 8001260:	d804      	bhi.n	800126c <__aeabi_ddiv+0x518>
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x512>
 8001264:	e65c      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 8001266:	42ae      	cmp	r6, r5
 8001268:	d800      	bhi.n	800126c <__aeabi_ddiv+0x518>
 800126a:	e659      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800126c:	2302      	movs	r3, #2
 800126e:	425b      	negs	r3, r3
 8001270:	469c      	mov	ip, r3
 8001272:	9b00      	ldr	r3, [sp, #0]
 8001274:	44e0      	add	r8, ip
 8001276:	469c      	mov	ip, r3
 8001278:	4465      	add	r5, ip
 800127a:	429d      	cmp	r5, r3
 800127c:	419b      	sbcs	r3, r3
 800127e:	425b      	negs	r3, r3
 8001280:	191b      	adds	r3, r3, r4
 8001282:	18c0      	adds	r0, r0, r3
 8001284:	e64d      	b.n	8000f22 <__aeabi_ddiv+0x1ce>
 8001286:	428a      	cmp	r2, r1
 8001288:	d800      	bhi.n	800128c <__aeabi_ddiv+0x538>
 800128a:	e60e      	b.n	8000eaa <__aeabi_ddiv+0x156>
 800128c:	1e83      	subs	r3, r0, #2
 800128e:	1909      	adds	r1, r1, r4
 8001290:	e60b      	b.n	8000eaa <__aeabi_ddiv+0x156>
 8001292:	428a      	cmp	r2, r1
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x544>
 8001296:	e5f4      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 8001298:	1e83      	subs	r3, r0, #2
 800129a:	4698      	mov	r8, r3
 800129c:	1909      	adds	r1, r1, r4
 800129e:	e5f0      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 80012a0:	4925      	ldr	r1, [pc, #148]	; (8001338 <__aeabi_ddiv+0x5e4>)
 80012a2:	0028      	movs	r0, r5
 80012a4:	4459      	add	r1, fp
 80012a6:	408d      	lsls	r5, r1
 80012a8:	4642      	mov	r2, r8
 80012aa:	408a      	lsls	r2, r1
 80012ac:	1e69      	subs	r1, r5, #1
 80012ae:	418d      	sbcs	r5, r1
 80012b0:	4641      	mov	r1, r8
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	40d9      	lsrs	r1, r3
 80012b6:	4302      	orrs	r2, r0
 80012b8:	432a      	orrs	r2, r5
 80012ba:	000b      	movs	r3, r1
 80012bc:	0751      	lsls	r1, r2, #29
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x56e>
 80012c0:	e751      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012c2:	210f      	movs	r1, #15
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0x578>
 80012ca:	e746      	b.n	800115a <__aeabi_ddiv+0x406>
 80012cc:	e74b      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012ce:	0005      	movs	r5, r0
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d000      	beq.n	80012d6 <__aeabi_ddiv+0x582>
 80012d4:	e66a      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012d6:	9a00      	ldr	r2, [sp, #0]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d000      	beq.n	80012de <__aeabi_ddiv+0x58a>
 80012dc:	e666      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012de:	e667      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <__aeabi_ddiv+0x5e8>)
 80012e2:	445a      	add	r2, fp
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_ddiv+0x596>
 80012e8:	e710      	b.n	800110c <__aeabi_ddiv+0x3b8>
 80012ea:	2301      	movs	r3, #1
 80012ec:	2500      	movs	r5, #0
 80012ee:	4498      	add	r8, r3
 80012f0:	e667      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 80012f2:	075d      	lsls	r5, r3, #29
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0b1c      	lsrs	r4, r3, #12
 80012f8:	08d2      	lsrs	r2, r2, #3
 80012fa:	2300      	movs	r3, #0
 80012fc:	4315      	orrs	r5, r2
 80012fe:	e580      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001300:	9800      	ldr	r0, [sp, #0]
 8001302:	3d02      	subs	r5, #2
 8001304:	0042      	lsls	r2, r0, #1
 8001306:	4282      	cmp	r2, r0
 8001308:	41bf      	sbcs	r7, r7
 800130a:	427f      	negs	r7, r7
 800130c:	193c      	adds	r4, r7, r4
 800130e:	1936      	adds	r6, r6, r4
 8001310:	9200      	str	r2, [sp, #0]
 8001312:	e7dd      	b.n	80012d0 <__aeabi_ddiv+0x57c>
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	4643      	mov	r3, r8
 8001318:	0324      	lsls	r4, r4, #12
 800131a:	431c      	orrs	r4, r3
 800131c:	0324      	lsls	r4, r4, #12
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001320:	0b24      	lsrs	r4, r4, #12
 8001322:	e56e      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001324:	9a00      	ldr	r2, [sp, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3ea      	bcc.n	8001300 <__aeabi_ddiv+0x5ac>
 800132a:	0005      	movs	r5, r0
 800132c:	e7d3      	b.n	80012d6 <__aeabi_ddiv+0x582>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000043e 	.word	0x0000043e
 8001338:	0000041e 	.word	0x0000041e
 800133c:	000003ff 	.word	0x000003ff

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	464e      	mov	r6, r9
 8001344:	4645      	mov	r5, r8
 8001346:	46de      	mov	lr, fp
 8001348:	4657      	mov	r7, sl
 800134a:	4690      	mov	r8, r2
 800134c:	b5e0      	push	{r5, r6, r7, lr}
 800134e:	0017      	movs	r7, r2
 8001350:	031a      	lsls	r2, r3, #12
 8001352:	0b12      	lsrs	r2, r2, #12
 8001354:	0005      	movs	r5, r0
 8001356:	4684      	mov	ip, r0
 8001358:	4819      	ldr	r0, [pc, #100]	; (80013c0 <__eqdf2+0x80>)
 800135a:	030e      	lsls	r6, r1, #12
 800135c:	004c      	lsls	r4, r1, #1
 800135e:	4691      	mov	r9, r2
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	0fdb      	lsrs	r3, r3, #31
 8001364:	469b      	mov	fp, r3
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d64      	lsrs	r4, r4, #21
 800136a:	0fc9      	lsrs	r1, r1, #31
 800136c:	0d52      	lsrs	r2, r2, #21
 800136e:	4284      	cmp	r4, r0
 8001370:	d019      	beq.n	80013a6 <__eqdf2+0x66>
 8001372:	4282      	cmp	r2, r0
 8001374:	d010      	beq.n	8001398 <__eqdf2+0x58>
 8001376:	2001      	movs	r0, #1
 8001378:	4294      	cmp	r4, r2
 800137a:	d10e      	bne.n	800139a <__eqdf2+0x5a>
 800137c:	454e      	cmp	r6, r9
 800137e:	d10c      	bne.n	800139a <__eqdf2+0x5a>
 8001380:	2001      	movs	r0, #1
 8001382:	45c4      	cmp	ip, r8
 8001384:	d109      	bne.n	800139a <__eqdf2+0x5a>
 8001386:	4559      	cmp	r1, fp
 8001388:	d017      	beq.n	80013ba <__eqdf2+0x7a>
 800138a:	2c00      	cmp	r4, #0
 800138c:	d105      	bne.n	800139a <__eqdf2+0x5a>
 800138e:	0030      	movs	r0, r6
 8001390:	4328      	orrs	r0, r5
 8001392:	1e43      	subs	r3, r0, #1
 8001394:	4198      	sbcs	r0, r3
 8001396:	e000      	b.n	800139a <__eqdf2+0x5a>
 8001398:	2001      	movs	r0, #1
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	46bb      	mov	fp, r7
 800139e:	46b2      	mov	sl, r6
 80013a0:	46a9      	mov	r9, r5
 80013a2:	46a0      	mov	r8, r4
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	0033      	movs	r3, r6
 80013a8:	2001      	movs	r0, #1
 80013aa:	432b      	orrs	r3, r5
 80013ac:	d1f5      	bne.n	800139a <__eqdf2+0x5a>
 80013ae:	42a2      	cmp	r2, r4
 80013b0:	d1f3      	bne.n	800139a <__eqdf2+0x5a>
 80013b2:	464b      	mov	r3, r9
 80013b4:	433b      	orrs	r3, r7
 80013b6:	d1f0      	bne.n	800139a <__eqdf2+0x5a>
 80013b8:	e7e2      	b.n	8001380 <__eqdf2+0x40>
 80013ba:	2000      	movs	r0, #0
 80013bc:	e7ed      	b.n	800139a <__eqdf2+0x5a>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	000007ff 	.word	0x000007ff

080013c4 <__gedf2>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	4647      	mov	r7, r8
 80013c8:	46ce      	mov	lr, r9
 80013ca:	0004      	movs	r4, r0
 80013cc:	0018      	movs	r0, r3
 80013ce:	0016      	movs	r6, r2
 80013d0:	031b      	lsls	r3, r3, #12
 80013d2:	0b1b      	lsrs	r3, r3, #12
 80013d4:	4d2d      	ldr	r5, [pc, #180]	; (800148c <__gedf2+0xc8>)
 80013d6:	004a      	lsls	r2, r1, #1
 80013d8:	4699      	mov	r9, r3
 80013da:	b580      	push	{r7, lr}
 80013dc:	0043      	lsls	r3, r0, #1
 80013de:	030f      	lsls	r7, r1, #12
 80013e0:	46a4      	mov	ip, r4
 80013e2:	46b0      	mov	r8, r6
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d52      	lsrs	r2, r2, #21
 80013e8:	0fc9      	lsrs	r1, r1, #31
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	0fc0      	lsrs	r0, r0, #31
 80013ee:	42aa      	cmp	r2, r5
 80013f0:	d021      	beq.n	8001436 <__gedf2+0x72>
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	d013      	beq.n	800141e <__gedf2+0x5a>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d122      	bne.n	8001440 <__gedf2+0x7c>
 80013fa:	433c      	orrs	r4, r7
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <__gedf2+0x42>
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d022      	beq.n	800144c <__gedf2+0x88>
 8001406:	2c00      	cmp	r4, #0
 8001408:	d010      	beq.n	800142c <__gedf2+0x68>
 800140a:	4281      	cmp	r1, r0
 800140c:	d022      	beq.n	8001454 <__gedf2+0x90>
 800140e:	2002      	movs	r0, #2
 8001410:	3901      	subs	r1, #1
 8001412:	4008      	ands	r0, r1
 8001414:	3801      	subs	r0, #1
 8001416:	bcc0      	pop	{r6, r7}
 8001418:	46b9      	mov	r9, r7
 800141a:	46b0      	mov	r8, r6
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	464d      	mov	r5, r9
 8001420:	432e      	orrs	r6, r5
 8001422:	d129      	bne.n	8001478 <__gedf2+0xb4>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d1f0      	bne.n	800140a <__gedf2+0x46>
 8001428:	433c      	orrs	r4, r7
 800142a:	d1ee      	bne.n	800140a <__gedf2+0x46>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f2      	bne.n	8001416 <__gedf2+0x52>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7ef      	b.n	8001416 <__gedf2+0x52>
 8001436:	003d      	movs	r5, r7
 8001438:	4325      	orrs	r5, r4
 800143a:	d11d      	bne.n	8001478 <__gedf2+0xb4>
 800143c:	4293      	cmp	r3, r2
 800143e:	d0ee      	beq.n	800141e <__gedf2+0x5a>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e2      	bne.n	800140a <__gedf2+0x46>
 8001444:	464c      	mov	r4, r9
 8001446:	4326      	orrs	r6, r4
 8001448:	d1df      	bne.n	800140a <__gedf2+0x46>
 800144a:	e7e0      	b.n	800140e <__gedf2+0x4a>
 800144c:	2000      	movs	r0, #0
 800144e:	2c00      	cmp	r4, #0
 8001450:	d0e1      	beq.n	8001416 <__gedf2+0x52>
 8001452:	e7dc      	b.n	800140e <__gedf2+0x4a>
 8001454:	429a      	cmp	r2, r3
 8001456:	dc0a      	bgt.n	800146e <__gedf2+0xaa>
 8001458:	dbe8      	blt.n	800142c <__gedf2+0x68>
 800145a:	454f      	cmp	r7, r9
 800145c:	d8d7      	bhi.n	800140e <__gedf2+0x4a>
 800145e:	d00e      	beq.n	800147e <__gedf2+0xba>
 8001460:	2000      	movs	r0, #0
 8001462:	454f      	cmp	r7, r9
 8001464:	d2d7      	bcs.n	8001416 <__gedf2+0x52>
 8001466:	2900      	cmp	r1, #0
 8001468:	d0e2      	beq.n	8001430 <__gedf2+0x6c>
 800146a:	0008      	movs	r0, r1
 800146c:	e7d3      	b.n	8001416 <__gedf2+0x52>
 800146e:	4243      	negs	r3, r0
 8001470:	4158      	adcs	r0, r3
 8001472:	0040      	lsls	r0, r0, #1
 8001474:	3801      	subs	r0, #1
 8001476:	e7ce      	b.n	8001416 <__gedf2+0x52>
 8001478:	2002      	movs	r0, #2
 800147a:	4240      	negs	r0, r0
 800147c:	e7cb      	b.n	8001416 <__gedf2+0x52>
 800147e:	45c4      	cmp	ip, r8
 8001480:	d8c5      	bhi.n	800140e <__gedf2+0x4a>
 8001482:	2000      	movs	r0, #0
 8001484:	45c4      	cmp	ip, r8
 8001486:	d2c6      	bcs.n	8001416 <__gedf2+0x52>
 8001488:	e7ed      	b.n	8001466 <__gedf2+0xa2>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff

08001490 <__ledf2>:
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	4647      	mov	r7, r8
 8001494:	46ce      	mov	lr, r9
 8001496:	0004      	movs	r4, r0
 8001498:	0018      	movs	r0, r3
 800149a:	0016      	movs	r6, r2
 800149c:	031b      	lsls	r3, r3, #12
 800149e:	0b1b      	lsrs	r3, r3, #12
 80014a0:	4d2c      	ldr	r5, [pc, #176]	; (8001554 <__ledf2+0xc4>)
 80014a2:	004a      	lsls	r2, r1, #1
 80014a4:	4699      	mov	r9, r3
 80014a6:	b580      	push	{r7, lr}
 80014a8:	0043      	lsls	r3, r0, #1
 80014aa:	030f      	lsls	r7, r1, #12
 80014ac:	46a4      	mov	ip, r4
 80014ae:	46b0      	mov	r8, r6
 80014b0:	0b3f      	lsrs	r7, r7, #12
 80014b2:	0d52      	lsrs	r2, r2, #21
 80014b4:	0fc9      	lsrs	r1, r1, #31
 80014b6:	0d5b      	lsrs	r3, r3, #21
 80014b8:	0fc0      	lsrs	r0, r0, #31
 80014ba:	42aa      	cmp	r2, r5
 80014bc:	d00d      	beq.n	80014da <__ledf2+0x4a>
 80014be:	42ab      	cmp	r3, r5
 80014c0:	d010      	beq.n	80014e4 <__ledf2+0x54>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d127      	bne.n	8001516 <__ledf2+0x86>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <__ledf2+0x60>
 80014cc:	464d      	mov	r5, r9
 80014ce:	432e      	orrs	r6, r5
 80014d0:	d10e      	bne.n	80014f0 <__ledf2+0x60>
 80014d2:	2000      	movs	r0, #0
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d015      	beq.n	8001504 <__ledf2+0x74>
 80014d8:	e00e      	b.n	80014f8 <__ledf2+0x68>
 80014da:	003d      	movs	r5, r7
 80014dc:	4325      	orrs	r5, r4
 80014de:	d110      	bne.n	8001502 <__ledf2+0x72>
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d118      	bne.n	8001516 <__ledf2+0x86>
 80014e4:	464d      	mov	r5, r9
 80014e6:	432e      	orrs	r6, r5
 80014e8:	d10b      	bne.n	8001502 <__ledf2+0x72>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <__ledf2+0x64>
 80014ee:	433c      	orrs	r4, r7
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d00b      	beq.n	800150c <__ledf2+0x7c>
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d014      	beq.n	8001522 <__ledf2+0x92>
 80014f8:	2002      	movs	r0, #2
 80014fa:	3901      	subs	r1, #1
 80014fc:	4008      	ands	r0, r1
 80014fe:	3801      	subs	r0, #1
 8001500:	e000      	b.n	8001504 <__ledf2+0x74>
 8001502:	2002      	movs	r0, #2
 8001504:	bcc0      	pop	{r6, r7}
 8001506:	46b9      	mov	r9, r7
 8001508:	46b0      	mov	r8, r6
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f9      	bne.n	8001504 <__ledf2+0x74>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f6      	b.n	8001504 <__ledf2+0x74>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ec      	bne.n	80014f4 <__ledf2+0x64>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e9      	bne.n	80014f4 <__ledf2+0x64>
 8001520:	e7ea      	b.n	80014f8 <__ledf2+0x68>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd04      	ble.n	8001530 <__ledf2+0xa0>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7e9      	b.n	8001504 <__ledf2+0x74>
 8001530:	429a      	cmp	r2, r3
 8001532:	dbeb      	blt.n	800150c <__ledf2+0x7c>
 8001534:	454f      	cmp	r7, r9
 8001536:	d8df      	bhi.n	80014f8 <__ledf2+0x68>
 8001538:	d006      	beq.n	8001548 <__ledf2+0xb8>
 800153a:	2000      	movs	r0, #0
 800153c:	454f      	cmp	r7, r9
 800153e:	d2e1      	bcs.n	8001504 <__ledf2+0x74>
 8001540:	2900      	cmp	r1, #0
 8001542:	d0e5      	beq.n	8001510 <__ledf2+0x80>
 8001544:	0008      	movs	r0, r1
 8001546:	e7dd      	b.n	8001504 <__ledf2+0x74>
 8001548:	45c4      	cmp	ip, r8
 800154a:	d8d5      	bhi.n	80014f8 <__ledf2+0x68>
 800154c:	2000      	movs	r0, #0
 800154e:	45c4      	cmp	ip, r8
 8001550:	d2d8      	bcs.n	8001504 <__ledf2+0x74>
 8001552:	e7f5      	b.n	8001540 <__ledf2+0xb0>
 8001554:	000007ff 	.word	0x000007ff

08001558 <__aeabi_dmul>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	4657      	mov	r7, sl
 800155c:	464e      	mov	r6, r9
 800155e:	4645      	mov	r5, r8
 8001560:	46de      	mov	lr, fp
 8001562:	b5e0      	push	{r5, r6, r7, lr}
 8001564:	4698      	mov	r8, r3
 8001566:	030c      	lsls	r4, r1, #12
 8001568:	004b      	lsls	r3, r1, #1
 800156a:	0006      	movs	r6, r0
 800156c:	4692      	mov	sl, r2
 800156e:	b087      	sub	sp, #28
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fcf      	lsrs	r7, r1, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <__aeabi_dmul+0x24>
 800157a:	e15c      	b.n	8001836 <__aeabi_dmul+0x2de>
 800157c:	4ad9      	ldr	r2, [pc, #868]	; (80018e4 <__aeabi_dmul+0x38c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x2c>
 8001582:	e175      	b.n	8001870 <__aeabi_dmul+0x318>
 8001584:	0f42      	lsrs	r2, r0, #29
 8001586:	00e4      	lsls	r4, r4, #3
 8001588:	4314      	orrs	r4, r2
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	4314      	orrs	r4, r2
 8001590:	4ad5      	ldr	r2, [pc, #852]	; (80018e8 <__aeabi_dmul+0x390>)
 8001592:	00c5      	lsls	r5, r0, #3
 8001594:	4694      	mov	ip, r2
 8001596:	4463      	add	r3, ip
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	4699      	mov	r9, r3
 800159e:	469b      	mov	fp, r3
 80015a0:	4643      	mov	r3, r8
 80015a2:	4642      	mov	r2, r8
 80015a4:	031e      	lsls	r6, r3, #12
 80015a6:	0fd2      	lsrs	r2, r2, #31
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4650      	mov	r0, sl
 80015ac:	4690      	mov	r8, r2
 80015ae:	0b36      	lsrs	r6, r6, #12
 80015b0:	0d5b      	lsrs	r3, r3, #21
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0x5e>
 80015b4:	e120      	b.n	80017f8 <__aeabi_dmul+0x2a0>
 80015b6:	4acb      	ldr	r2, [pc, #812]	; (80018e4 <__aeabi_dmul+0x38c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x66>
 80015bc:	e162      	b.n	8001884 <__aeabi_dmul+0x32c>
 80015be:	49ca      	ldr	r1, [pc, #808]	; (80018e8 <__aeabi_dmul+0x390>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d826      	bhi.n	800163e <__aeabi_dmul+0xe6>
 80015f0:	4bbe      	ldr	r3, [pc, #760]	; (80018ec <__aeabi_dmul+0x394>)
 80015f2:	0089      	lsls	r1, r1, #2
 80015f4:	5859      	ldr	r1, [r3, r1]
 80015f6:	468f      	mov	pc, r1
 80015f8:	4643      	mov	r3, r8
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	0034      	movs	r4, r6
 80015fe:	0015      	movs	r5, r2
 8001600:	4683      	mov	fp, r0
 8001602:	465b      	mov	r3, fp
 8001604:	2b02      	cmp	r3, #2
 8001606:	d016      	beq.n	8001636 <__aeabi_dmul+0xde>
 8001608:	2b03      	cmp	r3, #3
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0xb6>
 800160c:	e203      	b.n	8001a16 <__aeabi_dmul+0x4be>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d000      	beq.n	8001614 <__aeabi_dmul+0xbc>
 8001612:	e0cd      	b.n	80017b0 <__aeabi_dmul+0x258>
 8001614:	2200      	movs	r2, #0
 8001616:	2400      	movs	r4, #0
 8001618:	2500      	movs	r5, #0
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0512      	lsls	r2, r2, #20
 800161e:	4322      	orrs	r2, r4
 8001620:	07db      	lsls	r3, r3, #31
 8001622:	431a      	orrs	r2, r3
 8001624:	0028      	movs	r0, r5
 8001626:	0011      	movs	r1, r2
 8001628:	b007      	add	sp, #28
 800162a:	bcf0      	pop	{r4, r5, r6, r7}
 800162c:	46bb      	mov	fp, r7
 800162e:	46b2      	mov	sl, r6
 8001630:	46a9      	mov	r9, r5
 8001632:	46a0      	mov	r8, r4
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	2400      	movs	r4, #0
 8001638:	2500      	movs	r5, #0
 800163a:	4aaa      	ldr	r2, [pc, #680]	; (80018e4 <__aeabi_dmul+0x38c>)
 800163c:	e7ed      	b.n	800161a <__aeabi_dmul+0xc2>
 800163e:	0c28      	lsrs	r0, r5, #16
 8001640:	042d      	lsls	r5, r5, #16
 8001642:	0c2d      	lsrs	r5, r5, #16
 8001644:	002b      	movs	r3, r5
 8001646:	0c11      	lsrs	r1, r2, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	0c12      	lsrs	r2, r2, #16
 800164c:	4353      	muls	r3, r2
 800164e:	4698      	mov	r8, r3
 8001650:	0013      	movs	r3, r2
 8001652:	002f      	movs	r7, r5
 8001654:	4343      	muls	r3, r0
 8001656:	4699      	mov	r9, r3
 8001658:	434f      	muls	r7, r1
 800165a:	444f      	add	r7, r9
 800165c:	46bb      	mov	fp, r7
 800165e:	4647      	mov	r7, r8
 8001660:	000b      	movs	r3, r1
 8001662:	0c3f      	lsrs	r7, r7, #16
 8001664:	46ba      	mov	sl, r7
 8001666:	4343      	muls	r3, r0
 8001668:	44da      	add	sl, fp
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	45d1      	cmp	r9, sl
 800166e:	d904      	bls.n	800167a <__aeabi_dmul+0x122>
 8001670:	2780      	movs	r7, #128	; 0x80
 8001672:	027f      	lsls	r7, r7, #9
 8001674:	46b9      	mov	r9, r7
 8001676:	444b      	add	r3, r9
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	4653      	mov	r3, sl
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	469b      	mov	fp, r3
 8001680:	4653      	mov	r3, sl
 8001682:	041f      	lsls	r7, r3, #16
 8001684:	4643      	mov	r3, r8
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	4698      	mov	r8, r3
 800168c:	003b      	movs	r3, r7
 800168e:	4443      	add	r3, r8
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	0c33      	lsrs	r3, r6, #16
 8001694:	0436      	lsls	r6, r6, #16
 8001696:	0c36      	lsrs	r6, r6, #16
 8001698:	4698      	mov	r8, r3
 800169a:	0033      	movs	r3, r6
 800169c:	4343      	muls	r3, r0
 800169e:	4699      	mov	r9, r3
 80016a0:	4643      	mov	r3, r8
 80016a2:	4343      	muls	r3, r0
 80016a4:	002f      	movs	r7, r5
 80016a6:	469a      	mov	sl, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4377      	muls	r7, r6
 80016ac:	435d      	muls	r5, r3
 80016ae:	0c38      	lsrs	r0, r7, #16
 80016b0:	444d      	add	r5, r9
 80016b2:	1945      	adds	r5, r0, r5
 80016b4:	45a9      	cmp	r9, r5
 80016b6:	d903      	bls.n	80016c0 <__aeabi_dmul+0x168>
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4699      	mov	r9, r3
 80016be:	44ca      	add	sl, r9
 80016c0:	043f      	lsls	r7, r7, #16
 80016c2:	0c28      	lsrs	r0, r5, #16
 80016c4:	0c3f      	lsrs	r7, r7, #16
 80016c6:	042d      	lsls	r5, r5, #16
 80016c8:	19ed      	adds	r5, r5, r7
 80016ca:	0c27      	lsrs	r7, r4, #16
 80016cc:	0424      	lsls	r4, r4, #16
 80016ce:	0c24      	lsrs	r4, r4, #16
 80016d0:	0003      	movs	r3, r0
 80016d2:	0020      	movs	r0, r4
 80016d4:	4350      	muls	r0, r2
 80016d6:	437a      	muls	r2, r7
 80016d8:	4691      	mov	r9, r2
 80016da:	003a      	movs	r2, r7
 80016dc:	4453      	add	r3, sl
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	0c03      	lsrs	r3, r0, #16
 80016e2:	469a      	mov	sl, r3
 80016e4:	434a      	muls	r2, r1
 80016e6:	4361      	muls	r1, r4
 80016e8:	4449      	add	r1, r9
 80016ea:	4451      	add	r1, sl
 80016ec:	44ab      	add	fp, r5
 80016ee:	4589      	cmp	r9, r1
 80016f0:	d903      	bls.n	80016fa <__aeabi_dmul+0x1a2>
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	4699      	mov	r9, r3
 80016f8:	444a      	add	r2, r9
 80016fa:	0400      	lsls	r0, r0, #16
 80016fc:	0c0b      	lsrs	r3, r1, #16
 80016fe:	0c00      	lsrs	r0, r0, #16
 8001700:	0409      	lsls	r1, r1, #16
 8001702:	1809      	adds	r1, r1, r0
 8001704:	0020      	movs	r0, r4
 8001706:	4699      	mov	r9, r3
 8001708:	4643      	mov	r3, r8
 800170a:	4370      	muls	r0, r6
 800170c:	435c      	muls	r4, r3
 800170e:	437e      	muls	r6, r7
 8001710:	435f      	muls	r7, r3
 8001712:	0c03      	lsrs	r3, r0, #16
 8001714:	4698      	mov	r8, r3
 8001716:	19a4      	adds	r4, r4, r6
 8001718:	4444      	add	r4, r8
 800171a:	444a      	add	r2, r9
 800171c:	9703      	str	r7, [sp, #12]
 800171e:	42a6      	cmp	r6, r4
 8001720:	d904      	bls.n	800172c <__aeabi_dmul+0x1d4>
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	4698      	mov	r8, r3
 8001728:	4447      	add	r7, r8
 800172a:	9703      	str	r7, [sp, #12]
 800172c:	0423      	lsls	r3, r4, #16
 800172e:	9e02      	ldr	r6, [sp, #8]
 8001730:	469a      	mov	sl, r3
 8001732:	9b05      	ldr	r3, [sp, #20]
 8001734:	445e      	add	r6, fp
 8001736:	4698      	mov	r8, r3
 8001738:	42ae      	cmp	r6, r5
 800173a:	41ad      	sbcs	r5, r5
 800173c:	1876      	adds	r6, r6, r1
 800173e:	428e      	cmp	r6, r1
 8001740:	4189      	sbcs	r1, r1
 8001742:	0400      	lsls	r0, r0, #16
 8001744:	0c00      	lsrs	r0, r0, #16
 8001746:	4450      	add	r0, sl
 8001748:	4440      	add	r0, r8
 800174a:	426d      	negs	r5, r5
 800174c:	1947      	adds	r7, r0, r5
 800174e:	46b8      	mov	r8, r7
 8001750:	4693      	mov	fp, r2
 8001752:	4249      	negs	r1, r1
 8001754:	4689      	mov	r9, r1
 8001756:	44c3      	add	fp, r8
 8001758:	44d9      	add	r9, fp
 800175a:	4298      	cmp	r0, r3
 800175c:	4180      	sbcs	r0, r0
 800175e:	45a8      	cmp	r8, r5
 8001760:	41ad      	sbcs	r5, r5
 8001762:	4593      	cmp	fp, r2
 8001764:	4192      	sbcs	r2, r2
 8001766:	4589      	cmp	r9, r1
 8001768:	4189      	sbcs	r1, r1
 800176a:	426d      	negs	r5, r5
 800176c:	4240      	negs	r0, r0
 800176e:	4328      	orrs	r0, r5
 8001770:	0c24      	lsrs	r4, r4, #16
 8001772:	4252      	negs	r2, r2
 8001774:	4249      	negs	r1, r1
 8001776:	430a      	orrs	r2, r1
 8001778:	9b03      	ldr	r3, [sp, #12]
 800177a:	1900      	adds	r0, r0, r4
 800177c:	1880      	adds	r0, r0, r2
 800177e:	18c7      	adds	r7, r0, r3
 8001780:	464b      	mov	r3, r9
 8001782:	0ddc      	lsrs	r4, r3, #23
 8001784:	9b04      	ldr	r3, [sp, #16]
 8001786:	0275      	lsls	r5, r6, #9
 8001788:	431d      	orrs	r5, r3
 800178a:	1e6a      	subs	r2, r5, #1
 800178c:	4195      	sbcs	r5, r2
 800178e:	464b      	mov	r3, r9
 8001790:	0df6      	lsrs	r6, r6, #23
 8001792:	027f      	lsls	r7, r7, #9
 8001794:	4335      	orrs	r5, r6
 8001796:	025a      	lsls	r2, r3, #9
 8001798:	433c      	orrs	r4, r7
 800179a:	4315      	orrs	r5, r2
 800179c:	01fb      	lsls	r3, r7, #7
 800179e:	d400      	bmi.n	80017a2 <__aeabi_dmul+0x24a>
 80017a0:	e11c      	b.n	80019dc <__aeabi_dmul+0x484>
 80017a2:	2101      	movs	r1, #1
 80017a4:	086a      	lsrs	r2, r5, #1
 80017a6:	400d      	ands	r5, r1
 80017a8:	4315      	orrs	r5, r2
 80017aa:	07e2      	lsls	r2, r4, #31
 80017ac:	4315      	orrs	r5, r2
 80017ae:	0864      	lsrs	r4, r4, #1
 80017b0:	494f      	ldr	r1, [pc, #316]	; (80018f0 <__aeabi_dmul+0x398>)
 80017b2:	4461      	add	r1, ip
 80017b4:	2900      	cmp	r1, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_dmul+0x262>
 80017b8:	e0b0      	b.n	800191c <__aeabi_dmul+0x3c4>
 80017ba:	076b      	lsls	r3, r5, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017be:	220f      	movs	r2, #15
 80017c0:	402a      	ands	r2, r5
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017c6:	1d2a      	adds	r2, r5, #4
 80017c8:	42aa      	cmp	r2, r5
 80017ca:	41ad      	sbcs	r5, r5
 80017cc:	426d      	negs	r5, r5
 80017ce:	1964      	adds	r4, r4, r5
 80017d0:	0015      	movs	r5, r2
 80017d2:	01e3      	lsls	r3, r4, #7
 80017d4:	d504      	bpl.n	80017e0 <__aeabi_dmul+0x288>
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <__aeabi_dmul+0x39c>)
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4014      	ands	r4, r2
 80017de:	4461      	add	r1, ip
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <__aeabi_dmul+0x3a0>)
 80017e2:	4291      	cmp	r1, r2
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dmul+0x290>
 80017e6:	e726      	b.n	8001636 <__aeabi_dmul+0xde>
 80017e8:	0762      	lsls	r2, r4, #29
 80017ea:	08ed      	lsrs	r5, r5, #3
 80017ec:	0264      	lsls	r4, r4, #9
 80017ee:	0549      	lsls	r1, r1, #21
 80017f0:	4315      	orrs	r5, r2
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	0d4a      	lsrs	r2, r1, #21
 80017f6:	e710      	b.n	800161a <__aeabi_dmul+0xc2>
 80017f8:	4652      	mov	r2, sl
 80017fa:	4332      	orrs	r2, r6
 80017fc:	d100      	bne.n	8001800 <__aeabi_dmul+0x2a8>
 80017fe:	e07f      	b.n	8001900 <__aeabi_dmul+0x3a8>
 8001800:	2e00      	cmp	r6, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0x2ae>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dmul+0x468>
 8001806:	0030      	movs	r0, r6
 8001808:	f000 fd4e 	bl	80022a8 <__clzsi2>
 800180c:	0002      	movs	r2, r0
 800180e:	3a0b      	subs	r2, #11
 8001810:	231d      	movs	r3, #29
 8001812:	0001      	movs	r1, r0
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4652      	mov	r2, sl
 8001818:	3908      	subs	r1, #8
 800181a:	40da      	lsrs	r2, r3
 800181c:	408e      	lsls	r6, r1
 800181e:	4316      	orrs	r6, r2
 8001820:	4652      	mov	r2, sl
 8001822:	408a      	lsls	r2, r1
 8001824:	9b00      	ldr	r3, [sp, #0]
 8001826:	4935      	ldr	r1, [pc, #212]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001828:	1a18      	subs	r0, r3, r0
 800182a:	0003      	movs	r3, r0
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	2000      	movs	r0, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	e6d3      	b.n	80015de <__aeabi_dmul+0x86>
 8001836:	0025      	movs	r5, r4
 8001838:	4305      	orrs	r5, r0
 800183a:	d04a      	beq.n	80018d2 <__aeabi_dmul+0x37a>
 800183c:	2c00      	cmp	r4, #0
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0x2ea>
 8001840:	e0b0      	b.n	80019a4 <__aeabi_dmul+0x44c>
 8001842:	0020      	movs	r0, r4
 8001844:	f000 fd30 	bl	80022a8 <__clzsi2>
 8001848:	0001      	movs	r1, r0
 800184a:	0002      	movs	r2, r0
 800184c:	390b      	subs	r1, #11
 800184e:	231d      	movs	r3, #29
 8001850:	0010      	movs	r0, r2
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	0031      	movs	r1, r6
 8001856:	0035      	movs	r5, r6
 8001858:	3808      	subs	r0, #8
 800185a:	4084      	lsls	r4, r0
 800185c:	40d9      	lsrs	r1, r3
 800185e:	4085      	lsls	r5, r0
 8001860:	430c      	orrs	r4, r1
 8001862:	4826      	ldr	r0, [pc, #152]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001864:	1a83      	subs	r3, r0, r2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	4699      	mov	r9, r3
 800186c:	469b      	mov	fp, r3
 800186e:	e697      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001870:	0005      	movs	r5, r0
 8001872:	4325      	orrs	r5, r4
 8001874:	d126      	bne.n	80018c4 <__aeabi_dmul+0x36c>
 8001876:	2208      	movs	r2, #8
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	2400      	movs	r4, #0
 800187e:	4691      	mov	r9, r2
 8001880:	469b      	mov	fp, r3
 8001882:	e68d      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001884:	4652      	mov	r2, sl
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4332      	orrs	r2, r6
 800188a:	d110      	bne.n	80018ae <__aeabi_dmul+0x356>
 800188c:	4915      	ldr	r1, [pc, #84]	; (80018e4 <__aeabi_dmul+0x38c>)
 800188e:	2600      	movs	r6, #0
 8001890:	468c      	mov	ip, r1
 8001892:	4463      	add	r3, ip
 8001894:	4649      	mov	r1, r9
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2302      	movs	r3, #2
 800189a:	4319      	orrs	r1, r3
 800189c:	4689      	mov	r9, r1
 800189e:	2002      	movs	r0, #2
 80018a0:	e69d      	b.n	80015de <__aeabi_dmul+0x86>
 80018a2:	465b      	mov	r3, fp
 80018a4:	9701      	str	r7, [sp, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x354>
 80018aa:	e6ad      	b.n	8001608 <__aeabi_dmul+0xb0>
 80018ac:	e6c3      	b.n	8001636 <__aeabi_dmul+0xde>
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <__aeabi_dmul+0x38c>)
 80018b0:	2003      	movs	r0, #3
 80018b2:	4694      	mov	ip, r2
 80018b4:	4463      	add	r3, ip
 80018b6:	464a      	mov	r2, r9
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2303      	movs	r3, #3
 80018bc:	431a      	orrs	r2, r3
 80018be:	4691      	mov	r9, r2
 80018c0:	4652      	mov	r2, sl
 80018c2:	e68c      	b.n	80015de <__aeabi_dmul+0x86>
 80018c4:	220c      	movs	r2, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2303      	movs	r3, #3
 80018ca:	0005      	movs	r5, r0
 80018cc:	4691      	mov	r9, r2
 80018ce:	469b      	mov	fp, r3
 80018d0:	e666      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018d2:	2304      	movs	r3, #4
 80018d4:	4699      	mov	r9, r3
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	2400      	movs	r4, #0
 80018de:	469b      	mov	fp, r3
 80018e0:	e65e      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	fffffc01 	.word	0xfffffc01
 80018ec:	0800a850 	.word	0x0800a850
 80018f0:	000003ff 	.word	0x000003ff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	fffffc0d 	.word	0xfffffc0d
 8001900:	4649      	mov	r1, r9
 8001902:	2301      	movs	r3, #1
 8001904:	4319      	orrs	r1, r3
 8001906:	4689      	mov	r9, r1
 8001908:	2600      	movs	r6, #0
 800190a:	2001      	movs	r0, #1
 800190c:	e667      	b.n	80015de <__aeabi_dmul+0x86>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	2500      	movs	r5, #0
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e67e      	b.n	800161a <__aeabi_dmul+0xc2>
 800191c:	2001      	movs	r0, #1
 800191e:	1a40      	subs	r0, r0, r1
 8001920:	2838      	cmp	r0, #56	; 0x38
 8001922:	dd00      	ble.n	8001926 <__aeabi_dmul+0x3ce>
 8001924:	e676      	b.n	8001614 <__aeabi_dmul+0xbc>
 8001926:	281f      	cmp	r0, #31
 8001928:	dd5b      	ble.n	80019e2 <__aeabi_dmul+0x48a>
 800192a:	221f      	movs	r2, #31
 800192c:	0023      	movs	r3, r4
 800192e:	4252      	negs	r2, r2
 8001930:	1a51      	subs	r1, r2, r1
 8001932:	40cb      	lsrs	r3, r1
 8001934:	0019      	movs	r1, r3
 8001936:	2820      	cmp	r0, #32
 8001938:	d003      	beq.n	8001942 <__aeabi_dmul+0x3ea>
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <__aeabi_dmul+0x4d0>)
 800193c:	4462      	add	r2, ip
 800193e:	4094      	lsls	r4, r2
 8001940:	4325      	orrs	r5, r4
 8001942:	1e6a      	subs	r2, r5, #1
 8001944:	4195      	sbcs	r5, r2
 8001946:	002a      	movs	r2, r5
 8001948:	430a      	orrs	r2, r1
 800194a:	2107      	movs	r1, #7
 800194c:	000d      	movs	r5, r1
 800194e:	2400      	movs	r4, #0
 8001950:	4015      	ands	r5, r2
 8001952:	4211      	tst	r1, r2
 8001954:	d05b      	beq.n	8001a0e <__aeabi_dmul+0x4b6>
 8001956:	210f      	movs	r1, #15
 8001958:	2400      	movs	r4, #0
 800195a:	4011      	ands	r1, r2
 800195c:	2904      	cmp	r1, #4
 800195e:	d053      	beq.n	8001a08 <__aeabi_dmul+0x4b0>
 8001960:	1d11      	adds	r1, r2, #4
 8001962:	4291      	cmp	r1, r2
 8001964:	4192      	sbcs	r2, r2
 8001966:	4252      	negs	r2, r2
 8001968:	18a4      	adds	r4, r4, r2
 800196a:	000a      	movs	r2, r1
 800196c:	0223      	lsls	r3, r4, #8
 800196e:	d54b      	bpl.n	8001a08 <__aeabi_dmul+0x4b0>
 8001970:	2201      	movs	r2, #1
 8001972:	2400      	movs	r4, #0
 8001974:	2500      	movs	r5, #0
 8001976:	e650      	b.n	800161a <__aeabi_dmul+0xc2>
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	031b      	lsls	r3, r3, #12
 800197c:	421c      	tst	r4, r3
 800197e:	d009      	beq.n	8001994 <__aeabi_dmul+0x43c>
 8001980:	421e      	tst	r6, r3
 8001982:	d107      	bne.n	8001994 <__aeabi_dmul+0x43c>
 8001984:	4333      	orrs	r3, r6
 8001986:	031c      	lsls	r4, r3, #12
 8001988:	4643      	mov	r3, r8
 800198a:	0015      	movs	r5, r2
 800198c:	0b24      	lsrs	r4, r4, #12
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	e642      	b.n	800161a <__aeabi_dmul+0xc2>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0312      	lsls	r2, r2, #12
 8001998:	4314      	orrs	r4, r2
 800199a:	0324      	lsls	r4, r4, #12
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <__aeabi_dmul+0x4cc>)
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	9701      	str	r7, [sp, #4]
 80019a2:	e63a      	b.n	800161a <__aeabi_dmul+0xc2>
 80019a4:	f000 fc80 	bl	80022a8 <__clzsi2>
 80019a8:	0001      	movs	r1, r0
 80019aa:	0002      	movs	r2, r0
 80019ac:	3115      	adds	r1, #21
 80019ae:	3220      	adds	r2, #32
 80019b0:	291c      	cmp	r1, #28
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_dmul+0x45e>
 80019b4:	e74b      	b.n	800184e <__aeabi_dmul+0x2f6>
 80019b6:	0034      	movs	r4, r6
 80019b8:	3808      	subs	r0, #8
 80019ba:	2500      	movs	r5, #0
 80019bc:	4084      	lsls	r4, r0
 80019be:	e750      	b.n	8001862 <__aeabi_dmul+0x30a>
 80019c0:	f000 fc72 	bl	80022a8 <__clzsi2>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	3215      	adds	r2, #21
 80019ca:	3020      	adds	r0, #32
 80019cc:	2a1c      	cmp	r2, #28
 80019ce:	dc00      	bgt.n	80019d2 <__aeabi_dmul+0x47a>
 80019d0:	e71e      	b.n	8001810 <__aeabi_dmul+0x2b8>
 80019d2:	4656      	mov	r6, sl
 80019d4:	3b08      	subs	r3, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	409e      	lsls	r6, r3
 80019da:	e723      	b.n	8001824 <__aeabi_dmul+0x2cc>
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	469c      	mov	ip, r3
 80019e0:	e6e6      	b.n	80017b0 <__aeabi_dmul+0x258>
 80019e2:	4912      	ldr	r1, [pc, #72]	; (8001a2c <__aeabi_dmul+0x4d4>)
 80019e4:	0022      	movs	r2, r4
 80019e6:	4461      	add	r1, ip
 80019e8:	002e      	movs	r6, r5
 80019ea:	408d      	lsls	r5, r1
 80019ec:	408a      	lsls	r2, r1
 80019ee:	40c6      	lsrs	r6, r0
 80019f0:	1e69      	subs	r1, r5, #1
 80019f2:	418d      	sbcs	r5, r1
 80019f4:	4332      	orrs	r2, r6
 80019f6:	432a      	orrs	r2, r5
 80019f8:	40c4      	lsrs	r4, r0
 80019fa:	0753      	lsls	r3, r2, #29
 80019fc:	d0b6      	beq.n	800196c <__aeabi_dmul+0x414>
 80019fe:	210f      	movs	r1, #15
 8001a00:	4011      	ands	r1, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d1ac      	bne.n	8001960 <__aeabi_dmul+0x408>
 8001a06:	e7b1      	b.n	800196c <__aeabi_dmul+0x414>
 8001a08:	0765      	lsls	r5, r4, #29
 8001a0a:	0264      	lsls	r4, r4, #9
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	4315      	orrs	r5, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	e601      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0312      	lsls	r2, r2, #12
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	e5fa      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	0000043e 	.word	0x0000043e
 8001a2c:	0000041e 	.word	0x0000041e

08001a30 <__aeabi_dsub>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	4657      	mov	r7, sl
 8001a34:	464e      	mov	r6, r9
 8001a36:	4645      	mov	r5, r8
 8001a38:	46de      	mov	lr, fp
 8001a3a:	b5e0      	push	{r5, r6, r7, lr}
 8001a3c:	001e      	movs	r6, r3
 8001a3e:	0017      	movs	r7, r2
 8001a40:	004a      	lsls	r2, r1, #1
 8001a42:	030b      	lsls	r3, r1, #12
 8001a44:	0d52      	lsrs	r2, r2, #21
 8001a46:	0a5b      	lsrs	r3, r3, #9
 8001a48:	4690      	mov	r8, r2
 8001a4a:	0f42      	lsrs	r2, r0, #29
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0fcd      	lsrs	r5, r1, #31
 8001a50:	4ccd      	ldr	r4, [pc, #820]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a52:	0331      	lsls	r1, r6, #12
 8001a54:	00c3      	lsls	r3, r0, #3
 8001a56:	4694      	mov	ip, r2
 8001a58:	0070      	lsls	r0, r6, #1
 8001a5a:	0f7a      	lsrs	r2, r7, #29
 8001a5c:	0a49      	lsrs	r1, r1, #9
 8001a5e:	00ff      	lsls	r7, r7, #3
 8001a60:	469a      	mov	sl, r3
 8001a62:	46b9      	mov	r9, r7
 8001a64:	0d40      	lsrs	r0, r0, #21
 8001a66:	0ff6      	lsrs	r6, r6, #31
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	42a0      	cmp	r0, r4
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x40>
 8001a6e:	e0b1      	b.n	8001bd4 <__aeabi_dsub+0x1a4>
 8001a70:	2201      	movs	r2, #1
 8001a72:	4056      	eors	r6, r2
 8001a74:	46b3      	mov	fp, r6
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x4c>
 8001a7a:	e088      	b.n	8001b8e <__aeabi_dsub+0x15e>
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	1a12      	subs	r2, r2, r0
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dsub+0x56>
 8001a84:	e0ae      	b.n	8001be4 <__aeabi_dsub+0x1b4>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x5c>
 8001a8a:	e0c1      	b.n	8001c10 <__aeabi_dsub+0x1e0>
 8001a8c:	48be      	ldr	r0, [pc, #760]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a8e:	4580      	cmp	r8, r0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x64>
 8001a92:	e151      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001a94:	2080      	movs	r0, #128	; 0x80
 8001a96:	0400      	lsls	r0, r0, #16
 8001a98:	4301      	orrs	r1, r0
 8001a9a:	2a38      	cmp	r2, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x70>
 8001a9e:	e17b      	b.n	8001d98 <__aeabi_dsub+0x368>
 8001aa0:	2a1f      	cmp	r2, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x76>
 8001aa4:	e1ee      	b.n	8001e84 <__aeabi_dsub+0x454>
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	003e      	movs	r6, r7
 8001aaa:	1a80      	subs	r0, r0, r2
 8001aac:	000c      	movs	r4, r1
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	40d1      	lsrs	r1, r2
 8001ab2:	4087      	lsls	r7, r0
 8001ab4:	4662      	mov	r2, ip
 8001ab6:	4084      	lsls	r4, r0
 8001ab8:	1a52      	subs	r2, r2, r1
 8001aba:	1e78      	subs	r0, r7, #1
 8001abc:	4187      	sbcs	r7, r0
 8001abe:	4694      	mov	ip, r2
 8001ac0:	4334      	orrs	r4, r6
 8001ac2:	4327      	orrs	r7, r4
 8001ac4:	1bdc      	subs	r4, r3, r7
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	419b      	sbcs	r3, r3
 8001aca:	4662      	mov	r2, ip
 8001acc:	425b      	negs	r3, r3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	d400      	bmi.n	8001ada <__aeabi_dsub+0xaa>
 8001ad8:	e118      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001ada:	464b      	mov	r3, r9
 8001adc:	0258      	lsls	r0, r3, #9
 8001ade:	0a43      	lsrs	r3, r0, #9
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0xba>
 8001ae8:	e137      	b.n	8001d5a <__aeabi_dsub+0x32a>
 8001aea:	4648      	mov	r0, r9
 8001aec:	f000 fbdc 	bl	80022a8 <__clzsi2>
 8001af0:	0001      	movs	r1, r0
 8001af2:	3908      	subs	r1, #8
 8001af4:	2320      	movs	r3, #32
 8001af6:	0022      	movs	r2, r4
 8001af8:	4648      	mov	r0, r9
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	40da      	lsrs	r2, r3
 8001afe:	4088      	lsls	r0, r1
 8001b00:	408c      	lsls	r4, r1
 8001b02:	4643      	mov	r3, r8
 8001b04:	4310      	orrs	r0, r2
 8001b06:	4588      	cmp	r8, r1
 8001b08:	dd00      	ble.n	8001b0c <__aeabi_dsub+0xdc>
 8001b0a:	e136      	b.n	8001d7a <__aeabi_dsub+0x34a>
 8001b0c:	1ac9      	subs	r1, r1, r3
 8001b0e:	1c4b      	adds	r3, r1, #1
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe6>
 8001b14:	e0ea      	b.n	8001cec <__aeabi_dsub+0x2bc>
 8001b16:	2220      	movs	r2, #32
 8001b18:	0026      	movs	r6, r4
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	4094      	lsls	r4, r2
 8001b20:	40de      	lsrs	r6, r3
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4091      	lsls	r1, r2
 8001b28:	1e62      	subs	r2, r4, #1
 8001b2a:	4194      	sbcs	r4, r2
 8001b2c:	4681      	mov	r9, r0
 8001b2e:	4698      	mov	r8, r3
 8001b30:	4331      	orrs	r1, r6
 8001b32:	430c      	orrs	r4, r1
 8001b34:	0763      	lsls	r3, r4, #29
 8001b36:	d009      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b40:	1d23      	adds	r3, r4, #4
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	41a4      	sbcs	r4, r4
 8001b46:	4264      	negs	r4, r4
 8001b48:	44a1      	add	r9, r4
 8001b4a:	001c      	movs	r4, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d400      	bmi.n	8001b54 <__aeabi_dsub+0x124>
 8001b52:	e0de      	b.n	8001d12 <__aeabi_dsub+0x2e2>
 8001b54:	4641      	mov	r1, r8
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <__aeabi_dsub+0x358>)
 8001b58:	3101      	adds	r1, #1
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x130>
 8001b5e:	e0e7      	b.n	8001d30 <__aeabi_dsub+0x300>
 8001b60:	464b      	mov	r3, r9
 8001b62:	488a      	ldr	r0, [pc, #552]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001b64:	08e4      	lsrs	r4, r4, #3
 8001b66:	4003      	ands	r3, r0
 8001b68:	0018      	movs	r0, r3
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	0240      	lsls	r0, r0, #9
 8001b70:	4323      	orrs	r3, r4
 8001b72:	0d4a      	lsrs	r2, r1, #21
 8001b74:	0b04      	lsrs	r4, r0, #12
 8001b76:	0512      	lsls	r2, r2, #20
 8001b78:	07ed      	lsls	r5, r5, #31
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	432a      	orrs	r2, r5
 8001b7e:	0018      	movs	r0, r3
 8001b80:	0011      	movs	r1, r2
 8001b82:	bcf0      	pop	{r4, r5, r6, r7}
 8001b84:	46bb      	mov	fp, r7
 8001b86:	46b2      	mov	sl, r6
 8001b88:	46a9      	mov	r9, r5
 8001b8a:	46a0      	mov	r8, r4
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8e:	4642      	mov	r2, r8
 8001b90:	1a12      	subs	r2, r2, r0
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	dd52      	ble.n	8001c3c <__aeabi_dsub+0x20c>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x16c>
 8001b9a:	e09c      	b.n	8001cd6 <__aeabi_dsub+0x2a6>
 8001b9c:	45a0      	cmp	r8, r4
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x172>
 8001ba0:	e0ca      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001ba2:	2080      	movs	r0, #128	; 0x80
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	4301      	orrs	r1, r0
 8001ba8:	2a38      	cmp	r2, #56	; 0x38
 8001baa:	dd00      	ble.n	8001bae <__aeabi_dsub+0x17e>
 8001bac:	e149      	b.n	8001e42 <__aeabi_dsub+0x412>
 8001bae:	2a1f      	cmp	r2, #31
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dsub+0x184>
 8001bb2:	e197      	b.n	8001ee4 <__aeabi_dsub+0x4b4>
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	000e      	movs	r6, r1
 8001bb8:	3820      	subs	r0, #32
 8001bba:	40c6      	lsrs	r6, r0
 8001bbc:	2a20      	cmp	r2, #32
 8001bbe:	d004      	beq.n	8001bca <__aeabi_dsub+0x19a>
 8001bc0:	2040      	movs	r0, #64	; 0x40
 8001bc2:	1a82      	subs	r2, r0, r2
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	430f      	orrs	r7, r1
 8001bc8:	46b9      	mov	r9, r7
 8001bca:	464c      	mov	r4, r9
 8001bcc:	1e62      	subs	r2, r4, #1
 8001bce:	4194      	sbcs	r4, r2
 8001bd0:	4334      	orrs	r4, r6
 8001bd2:	e13a      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	433a      	orrs	r2, r7
 8001bd8:	d028      	beq.n	8001c2c <__aeabi_dsub+0x1fc>
 8001bda:	46b3      	mov	fp, r6
 8001bdc:	42b5      	cmp	r5, r6
 8001bde:	d02b      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <__aeabi_dsub+0x360>)
 8001be2:	4442      	add	r2, r8
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d05d      	beq.n	8001ca4 <__aeabi_dsub+0x274>
 8001be8:	4642      	mov	r2, r8
 8001bea:	4644      	mov	r4, r8
 8001bec:	1a82      	subs	r2, r0, r2
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x1c4>
 8001bf2:	e0f5      	b.n	8001de0 <__aeabi_dsub+0x3b0>
 8001bf4:	4665      	mov	r5, ip
 8001bf6:	431d      	orrs	r5, r3
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x1cc>
 8001bfa:	e19c      	b.n	8001f36 <__aeabi_dsub+0x506>
 8001bfc:	1e55      	subs	r5, r2, #1
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1d4>
 8001c02:	e1fb      	b.n	8001ffc <__aeabi_dsub+0x5cc>
 8001c04:	4c60      	ldr	r4, [pc, #384]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x1dc>
 8001c0a:	e1bd      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001c0c:	002a      	movs	r2, r5
 8001c0e:	e0f0      	b.n	8001df2 <__aeabi_dsub+0x3c2>
 8001c10:	0008      	movs	r0, r1
 8001c12:	4338      	orrs	r0, r7
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e8>
 8001c16:	e0c3      	b.n	8001da0 <__aeabi_dsub+0x370>
 8001c18:	1e50      	subs	r0, r2, #1
 8001c1a:	2a01      	cmp	r2, #1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1f0>
 8001c1e:	e1a8      	b.n	8001f72 <__aeabi_dsub+0x542>
 8001c20:	4c59      	ldr	r4, [pc, #356]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1f8>
 8001c26:	e087      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	e736      	b.n	8001a9a <__aeabi_dsub+0x6a>
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4056      	eors	r6, r2
 8001c30:	46b3      	mov	fp, r6
 8001c32:	42b5      	cmp	r5, r6
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001c36:	e721      	b.n	8001a7c <__aeabi_dsub+0x4c>
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <__aeabi_dsub+0x360>)
 8001c3a:	4442      	add	r2, r8
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x212>
 8001c40:	e0b5      	b.n	8001dae <__aeabi_dsub+0x37e>
 8001c42:	4642      	mov	r2, r8
 8001c44:	4644      	mov	r4, r8
 8001c46:	1a82      	subs	r2, r0, r2
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x21e>
 8001c4c:	e138      	b.n	8001ec0 <__aeabi_dsub+0x490>
 8001c4e:	4e4e      	ldr	r6, [pc, #312]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c50:	42b0      	cmp	r0, r6
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x226>
 8001c54:	e1de      	b.n	8002014 <__aeabi_dsub+0x5e4>
 8001c56:	2680      	movs	r6, #128	; 0x80
 8001c58:	4664      	mov	r4, ip
 8001c5a:	0436      	lsls	r6, r6, #16
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	46a4      	mov	ip, r4
 8001c60:	2a38      	cmp	r2, #56	; 0x38
 8001c62:	dd00      	ble.n	8001c66 <__aeabi_dsub+0x236>
 8001c64:	e196      	b.n	8001f94 <__aeabi_dsub+0x564>
 8001c66:	2a1f      	cmp	r2, #31
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x23c>
 8001c6a:	e224      	b.n	80020b6 <__aeabi_dsub+0x686>
 8001c6c:	2620      	movs	r6, #32
 8001c6e:	1ab4      	subs	r4, r6, r2
 8001c70:	46a2      	mov	sl, r4
 8001c72:	4664      	mov	r4, ip
 8001c74:	4656      	mov	r6, sl
 8001c76:	40b4      	lsls	r4, r6
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	40d4      	lsrs	r4, r2
 8001c80:	4326      	orrs	r6, r4
 8001c82:	0034      	movs	r4, r6
 8001c84:	4656      	mov	r6, sl
 8001c86:	40b3      	lsls	r3, r6
 8001c88:	1e5e      	subs	r6, r3, #1
 8001c8a:	41b3      	sbcs	r3, r6
 8001c8c:	431c      	orrs	r4, r3
 8001c8e:	4663      	mov	r3, ip
 8001c90:	40d3      	lsrs	r3, r2
 8001c92:	18c9      	adds	r1, r1, r3
 8001c94:	19e4      	adds	r4, r4, r7
 8001c96:	42bc      	cmp	r4, r7
 8001c98:	41bf      	sbcs	r7, r7
 8001c9a:	427f      	negs	r7, r7
 8001c9c:	46b9      	mov	r9, r7
 8001c9e:	4680      	mov	r8, r0
 8001ca0:	4489      	add	r9, r1
 8001ca2:	e0d8      	b.n	8001e56 <__aeabi_dsub+0x426>
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4c3b      	ldr	r4, [pc, #236]	; (8001d94 <__aeabi_dsub+0x364>)
 8001ca8:	3001      	adds	r0, #1
 8001caa:	4220      	tst	r0, r4
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dsub+0x280>
 8001cae:	e0b4      	b.n	8001e1a <__aeabi_dsub+0x3ea>
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x288>
 8001cb6:	e144      	b.n	8001f42 <__aeabi_dsub+0x512>
 8001cb8:	4660      	mov	r0, ip
 8001cba:	4318      	orrs	r0, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x290>
 8001cbe:	e190      	b.n	8001fe2 <__aeabi_dsub+0x5b2>
 8001cc0:	0008      	movs	r0, r1
 8001cc2:	4338      	orrs	r0, r7
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x298>
 8001cc6:	e1aa      	b.n	800201e <__aeabi_dsub+0x5ee>
 8001cc8:	4661      	mov	r1, ip
 8001cca:	08db      	lsrs	r3, r3, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	08cc      	lsrs	r4, r1, #3
 8001cd4:	e027      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	4338      	orrs	r0, r7
 8001cda:	d061      	beq.n	8001da0 <__aeabi_dsub+0x370>
 8001cdc:	1e50      	subs	r0, r2, #1
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x2b4>
 8001ce2:	e139      	b.n	8001f58 <__aeabi_dsub+0x528>
 8001ce4:	42a2      	cmp	r2, r4
 8001ce6:	d027      	beq.n	8001d38 <__aeabi_dsub+0x308>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	e75d      	b.n	8001ba8 <__aeabi_dsub+0x178>
 8001cec:	0002      	movs	r2, r0
 8001cee:	391f      	subs	r1, #31
 8001cf0:	40ca      	lsrs	r2, r1
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d003      	beq.n	8001d00 <__aeabi_dsub+0x2d0>
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4098      	lsls	r0, r3
 8001cfe:	4304      	orrs	r4, r0
 8001d00:	1e63      	subs	r3, r4, #1
 8001d02:	419c      	sbcs	r4, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	4699      	mov	r9, r3
 8001d08:	4698      	mov	r8, r3
 8001d0a:	430c      	orrs	r4, r1
 8001d0c:	0763      	lsls	r3, r4, #29
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x2e2>
 8001d10:	e712      	b.n	8001b38 <__aeabi_dsub+0x108>
 8001d12:	464b      	mov	r3, r9
 8001d14:	464a      	mov	r2, r9
 8001d16:	08e4      	lsrs	r4, r4, #3
 8001d18:	075b      	lsls	r3, r3, #29
 8001d1a:	4323      	orrs	r3, r4
 8001d1c:	08d4      	lsrs	r4, r2, #3
 8001d1e:	4642      	mov	r2, r8
 8001d20:	4919      	ldr	r1, [pc, #100]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d00e      	beq.n	8001d44 <__aeabi_dsub+0x314>
 8001d26:	0324      	lsls	r4, r4, #12
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	0d52      	lsrs	r2, r2, #21
 8001d2e:	e722      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d30:	000a      	movs	r2, r1
 8001d32:	2400      	movs	r4, #0
 8001d34:	2300      	movs	r3, #0
 8001d36:	e71e      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	4662      	mov	r2, ip
 8001d42:	08d4      	lsrs	r4, r2, #3
 8001d44:	001a      	movs	r2, r3
 8001d46:	4322      	orrs	r2, r4
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x31c>
 8001d4a:	e1fc      	b.n	8002146 <__aeabi_dsub+0x716>
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e70d      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 faa4 	bl	80022a8 <__clzsi2>
 8001d60:	0001      	movs	r1, r0
 8001d62:	3118      	adds	r1, #24
 8001d64:	291f      	cmp	r1, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x33a>
 8001d68:	e6c4      	b.n	8001af4 <__aeabi_dsub+0xc4>
 8001d6a:	3808      	subs	r0, #8
 8001d6c:	4084      	lsls	r4, r0
 8001d6e:	4643      	mov	r3, r8
 8001d70:	0020      	movs	r0, r4
 8001d72:	2400      	movs	r4, #0
 8001d74:	4588      	cmp	r8, r1
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_dsub+0x34a>
 8001d78:	e6c8      	b.n	8001b0c <__aeabi_dsub+0xdc>
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001d7c:	1a5b      	subs	r3, r3, r1
 8001d7e:	4010      	ands	r0, r2
 8001d80:	4698      	mov	r8, r3
 8001d82:	4681      	mov	r9, r0
 8001d84:	e6d6      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	ff7fffff 	.word	0xff7fffff
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	000007fe 	.word	0x000007fe
 8001d98:	430f      	orrs	r7, r1
 8001d9a:	1e7a      	subs	r2, r7, #1
 8001d9c:	4197      	sbcs	r7, r2
 8001d9e:	e691      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001da0:	4661      	mov	r1, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0749      	lsls	r1, r1, #29
 8001da6:	430b      	orrs	r3, r1
 8001da8:	4661      	mov	r1, ip
 8001daa:	08cc      	lsrs	r4, r1, #3
 8001dac:	e7b8      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001dae:	4640      	mov	r0, r8
 8001db0:	4cd3      	ldr	r4, [pc, #844]	; (8002100 <__aeabi_dsub+0x6d0>)
 8001db2:	3001      	adds	r0, #1
 8001db4:	4220      	tst	r0, r4
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x38a>
 8001db8:	e0a2      	b.n	8001f00 <__aeabi_dsub+0x4d0>
 8001dba:	4640      	mov	r0, r8
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x392>
 8001dc0:	e101      	b.n	8001fc6 <__aeabi_dsub+0x596>
 8001dc2:	4660      	mov	r0, ip
 8001dc4:	4318      	orrs	r0, r3
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x39a>
 8001dc8:	e15e      	b.n	8002088 <__aeabi_dsub+0x658>
 8001dca:	0008      	movs	r0, r1
 8001dcc:	4338      	orrs	r0, r7
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x3a2>
 8001dd0:	e15f      	b.n	8002092 <__aeabi_dsub+0x662>
 8001dd2:	4661      	mov	r1, ip
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	0749      	lsls	r1, r1, #29
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	4661      	mov	r1, ip
 8001ddc:	08cc      	lsrs	r4, r1, #3
 8001dde:	e7a2      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001de0:	4dc8      	ldr	r5, [pc, #800]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001de2:	42a8      	cmp	r0, r5
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x3b8>
 8001de6:	e0cf      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001de8:	2580      	movs	r5, #128	; 0x80
 8001dea:	4664      	mov	r4, ip
 8001dec:	042d      	lsls	r5, r5, #16
 8001dee:	432c      	orrs	r4, r5
 8001df0:	46a4      	mov	ip, r4
 8001df2:	2a38      	cmp	r2, #56	; 0x38
 8001df4:	dc56      	bgt.n	8001ea4 <__aeabi_dsub+0x474>
 8001df6:	2a1f      	cmp	r2, #31
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dsub+0x3cc>
 8001dfa:	e0d1      	b.n	8001fa0 <__aeabi_dsub+0x570>
 8001dfc:	2520      	movs	r5, #32
 8001dfe:	001e      	movs	r6, r3
 8001e00:	1aad      	subs	r5, r5, r2
 8001e02:	4664      	mov	r4, ip
 8001e04:	40ab      	lsls	r3, r5
 8001e06:	40ac      	lsls	r4, r5
 8001e08:	40d6      	lsrs	r6, r2
 8001e0a:	1e5d      	subs	r5, r3, #1
 8001e0c:	41ab      	sbcs	r3, r5
 8001e0e:	4334      	orrs	r4, r6
 8001e10:	4323      	orrs	r3, r4
 8001e12:	4664      	mov	r4, ip
 8001e14:	40d4      	lsrs	r4, r2
 8001e16:	1b09      	subs	r1, r1, r4
 8001e18:	e049      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001e1a:	4660      	mov	r0, ip
 8001e1c:	1bdc      	subs	r4, r3, r7
 8001e1e:	1a46      	subs	r6, r0, r1
 8001e20:	42a3      	cmp	r3, r4
 8001e22:	4180      	sbcs	r0, r0
 8001e24:	4240      	negs	r0, r0
 8001e26:	4681      	mov	r9, r0
 8001e28:	0030      	movs	r0, r6
 8001e2a:	464e      	mov	r6, r9
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	4681      	mov	r9, r0
 8001e30:	0200      	lsls	r0, r0, #8
 8001e32:	d476      	bmi.n	8001f22 <__aeabi_dsub+0x4f2>
 8001e34:	464b      	mov	r3, r9
 8001e36:	4323      	orrs	r3, r4
 8001e38:	d000      	beq.n	8001e3c <__aeabi_dsub+0x40c>
 8001e3a:	e652      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	2500      	movs	r5, #0
 8001e40:	e771      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001e42:	4339      	orrs	r1, r7
 8001e44:	000c      	movs	r4, r1
 8001e46:	1e62      	subs	r2, r4, #1
 8001e48:	4194      	sbcs	r4, r2
 8001e4a:	18e4      	adds	r4, r4, r3
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	419b      	sbcs	r3, r3
 8001e50:	425b      	negs	r3, r3
 8001e52:	4463      	add	r3, ip
 8001e54:	4699      	mov	r9, r3
 8001e56:	464b      	mov	r3, r9
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x42e>
 8001e5c:	e756      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	469c      	mov	ip, r3
 8001e62:	4ba8      	ldr	r3, [pc, #672]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001e64:	44e0      	add	r8, ip
 8001e66:	4598      	cmp	r8, r3
 8001e68:	d038      	beq.n	8001edc <__aeabi_dsub+0x4ac>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	48a6      	ldr	r0, [pc, #664]	; (8002108 <__aeabi_dsub+0x6d8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4003      	ands	r3, r0
 8001e72:	0018      	movs	r0, r3
 8001e74:	0863      	lsrs	r3, r4, #1
 8001e76:	4014      	ands	r4, r2
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	07c3      	lsls	r3, r0, #31
 8001e7c:	431c      	orrs	r4, r3
 8001e7e:	0843      	lsrs	r3, r0, #1
 8001e80:	4699      	mov	r9, r3
 8001e82:	e657      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001e84:	0010      	movs	r0, r2
 8001e86:	000e      	movs	r6, r1
 8001e88:	3820      	subs	r0, #32
 8001e8a:	40c6      	lsrs	r6, r0
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d004      	beq.n	8001e9a <__aeabi_dsub+0x46a>
 8001e90:	2040      	movs	r0, #64	; 0x40
 8001e92:	1a82      	subs	r2, r0, r2
 8001e94:	4091      	lsls	r1, r2
 8001e96:	430f      	orrs	r7, r1
 8001e98:	46b9      	mov	r9, r7
 8001e9a:	464f      	mov	r7, r9
 8001e9c:	1e7a      	subs	r2, r7, #1
 8001e9e:	4197      	sbcs	r7, r2
 8001ea0:	4337      	orrs	r7, r6
 8001ea2:	e60f      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001ea4:	4662      	mov	r2, ip
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	4193      	sbcs	r3, r2
 8001eae:	1afc      	subs	r4, r7, r3
 8001eb0:	42a7      	cmp	r7, r4
 8001eb2:	41bf      	sbcs	r7, r7
 8001eb4:	427f      	negs	r7, r7
 8001eb6:	1bcb      	subs	r3, r1, r7
 8001eb8:	4699      	mov	r9, r3
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	e608      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001ec0:	4666      	mov	r6, ip
 8001ec2:	431e      	orrs	r6, r3
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x498>
 8001ec6:	e0be      	b.n	8002046 <__aeabi_dsub+0x616>
 8001ec8:	1e56      	subs	r6, r2, #1
 8001eca:	2a01      	cmp	r2, #1
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x4a0>
 8001ece:	e109      	b.n	80020e4 <__aeabi_dsub+0x6b4>
 8001ed0:	4c8c      	ldr	r4, [pc, #560]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001ed2:	42a2      	cmp	r2, r4
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x4a8>
 8001ed6:	e119      	b.n	800210c <__aeabi_dsub+0x6dc>
 8001ed8:	0032      	movs	r2, r6
 8001eda:	e6c1      	b.n	8001c60 <__aeabi_dsub+0x230>
 8001edc:	4642      	mov	r2, r8
 8001ede:	2400      	movs	r4, #0
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e648      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	000c      	movs	r4, r1
 8001ee8:	1a80      	subs	r0, r0, r2
 8001eea:	003e      	movs	r6, r7
 8001eec:	4087      	lsls	r7, r0
 8001eee:	4084      	lsls	r4, r0
 8001ef0:	40d6      	lsrs	r6, r2
 8001ef2:	1e78      	subs	r0, r7, #1
 8001ef4:	4187      	sbcs	r7, r0
 8001ef6:	40d1      	lsrs	r1, r2
 8001ef8:	4334      	orrs	r4, r6
 8001efa:	433c      	orrs	r4, r7
 8001efc:	448c      	add	ip, r1
 8001efe:	e7a4      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001f00:	4a80      	ldr	r2, [pc, #512]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x4d8>
 8001f06:	e0e9      	b.n	80020dc <__aeabi_dsub+0x6ac>
 8001f08:	19df      	adds	r7, r3, r7
 8001f0a:	429f      	cmp	r7, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	4461      	add	r1, ip
 8001f10:	425b      	negs	r3, r3
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	07cc      	lsls	r4, r1, #31
 8001f16:	087f      	lsrs	r7, r7, #1
 8001f18:	084b      	lsrs	r3, r1, #1
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	e6f4      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f22:	1afc      	subs	r4, r7, r3
 8001f24:	42a7      	cmp	r7, r4
 8001f26:	41bf      	sbcs	r7, r7
 8001f28:	4663      	mov	r3, ip
 8001f2a:	427f      	negs	r7, r7
 8001f2c:	1ac9      	subs	r1, r1, r3
 8001f2e:	1bcb      	subs	r3, r1, r7
 8001f30:	4699      	mov	r9, r3
 8001f32:	465d      	mov	r5, fp
 8001f34:	e5d5      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	074b      	lsls	r3, r1, #29
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e6ee      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001f42:	4662      	mov	r2, ip
 8001f44:	431a      	orrs	r2, r3
 8001f46:	d000      	beq.n	8001f4a <__aeabi_dsub+0x51a>
 8001f48:	e082      	b.n	8002050 <__aeabi_dsub+0x620>
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	d11b      	bne.n	8001f88 <__aeabi_dsub+0x558>
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	2500      	movs	r5, #0
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	e6f9      	b.n	8001d4c <__aeabi_dsub+0x31c>
 8001f58:	19dc      	adds	r4, r3, r7
 8001f5a:	429c      	cmp	r4, r3
 8001f5c:	419b      	sbcs	r3, r3
 8001f5e:	4461      	add	r1, ip
 8001f60:	4689      	mov	r9, r1
 8001f62:	425b      	negs	r3, r3
 8001f64:	4499      	add	r9, r3
 8001f66:	464b      	mov	r3, r9
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	d444      	bmi.n	8001ff6 <__aeabi_dsub+0x5c6>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4698      	mov	r8, r3
 8001f70:	e6cc      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f72:	1bdc      	subs	r4, r3, r7
 8001f74:	4662      	mov	r2, ip
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	419b      	sbcs	r3, r3
 8001f7a:	1a51      	subs	r1, r2, r1
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	4699      	mov	r9, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	4698      	mov	r8, r3
 8001f86:	e5a4      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	465d      	mov	r5, fp
 8001f8e:	433b      	orrs	r3, r7
 8001f90:	08cc      	lsrs	r4, r1, #3
 8001f92:	e6d7      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001f94:	4662      	mov	r2, ip
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0014      	movs	r4, r2
 8001f9a:	1e63      	subs	r3, r4, #1
 8001f9c:	419c      	sbcs	r4, r3
 8001f9e:	e679      	b.n	8001c94 <__aeabi_dsub+0x264>
 8001fa0:	0015      	movs	r5, r2
 8001fa2:	4664      	mov	r4, ip
 8001fa4:	3d20      	subs	r5, #32
 8001fa6:	40ec      	lsrs	r4, r5
 8001fa8:	46a0      	mov	r8, r4
 8001faa:	2a20      	cmp	r2, #32
 8001fac:	d005      	beq.n	8001fba <__aeabi_dsub+0x58a>
 8001fae:	2540      	movs	r5, #64	; 0x40
 8001fb0:	4664      	mov	r4, ip
 8001fb2:	1aaa      	subs	r2, r5, r2
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	469a      	mov	sl, r3
 8001fba:	4654      	mov	r4, sl
 8001fbc:	1e63      	subs	r3, r4, #1
 8001fbe:	419c      	sbcs	r4, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	e773      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	d023      	beq.n	8002014 <__aeabi_dsub+0x5e4>
 8001fcc:	000a      	movs	r2, r1
 8001fce:	433a      	orrs	r2, r7
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x5a4>
 8001fd2:	e0a0      	b.n	8002116 <__aeabi_dsub+0x6e6>
 8001fd4:	4662      	mov	r2, ip
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4662      	mov	r2, ip
 8001fde:	08d4      	lsrs	r4, r2, #3
 8001fe0:	e6b0      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001fe2:	000b      	movs	r3, r1
 8001fe4:	433b      	orrs	r3, r7
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x5ba>
 8001fe8:	e728      	b.n	8001e3c <__aeabi_dsub+0x40c>
 8001fea:	08ff      	lsrs	r7, r7, #3
 8001fec:	074b      	lsls	r3, r1, #29
 8001fee:	465d      	mov	r5, fp
 8001ff0:	433b      	orrs	r3, r7
 8001ff2:	08cc      	lsrs	r4, r1, #3
 8001ff4:	e697      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	e736      	b.n	8001e6a <__aeabi_dsub+0x43a>
 8001ffc:	1afc      	subs	r4, r7, r3
 8001ffe:	42a7      	cmp	r7, r4
 8002000:	41bf      	sbcs	r7, r7
 8002002:	4663      	mov	r3, ip
 8002004:	427f      	negs	r7, r7
 8002006:	1ac9      	subs	r1, r1, r3
 8002008:	1bcb      	subs	r3, r1, r7
 800200a:	4699      	mov	r9, r3
 800200c:	2301      	movs	r3, #1
 800200e:	465d      	mov	r5, fp
 8002010:	4698      	mov	r8, r3
 8002012:	e55e      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8002014:	074b      	lsls	r3, r1, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	433b      	orrs	r3, r7
 800201a:	08cc      	lsrs	r4, r1, #3
 800201c:	e692      	b.n	8001d44 <__aeabi_dsub+0x314>
 800201e:	1bdc      	subs	r4, r3, r7
 8002020:	4660      	mov	r0, ip
 8002022:	42a3      	cmp	r3, r4
 8002024:	41b6      	sbcs	r6, r6
 8002026:	1a40      	subs	r0, r0, r1
 8002028:	4276      	negs	r6, r6
 800202a:	1b80      	subs	r0, r0, r6
 800202c:	4681      	mov	r9, r0
 800202e:	0200      	lsls	r0, r0, #8
 8002030:	d560      	bpl.n	80020f4 <__aeabi_dsub+0x6c4>
 8002032:	1afc      	subs	r4, r7, r3
 8002034:	42a7      	cmp	r7, r4
 8002036:	41bf      	sbcs	r7, r7
 8002038:	4663      	mov	r3, ip
 800203a:	427f      	negs	r7, r7
 800203c:	1ac9      	subs	r1, r1, r3
 800203e:	1bcb      	subs	r3, r1, r7
 8002040:	4699      	mov	r9, r3
 8002042:	465d      	mov	r5, fp
 8002044:	e576      	b.n	8001b34 <__aeabi_dsub+0x104>
 8002046:	08ff      	lsrs	r7, r7, #3
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	433b      	orrs	r3, r7
 800204c:	08cc      	lsrs	r4, r1, #3
 800204e:	e667      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8002050:	000a      	movs	r2, r1
 8002052:	08db      	lsrs	r3, r3, #3
 8002054:	433a      	orrs	r2, r7
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x62a>
 8002058:	e66f      	b.n	8001d3a <__aeabi_dsub+0x30a>
 800205a:	4662      	mov	r2, ip
 800205c:	0752      	lsls	r2, r2, #29
 800205e:	4313      	orrs	r3, r2
 8002060:	4662      	mov	r2, ip
 8002062:	08d4      	lsrs	r4, r2, #3
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	4214      	tst	r4, r2
 800206a:	d007      	beq.n	800207c <__aeabi_dsub+0x64c>
 800206c:	08c8      	lsrs	r0, r1, #3
 800206e:	4210      	tst	r0, r2
 8002070:	d104      	bne.n	800207c <__aeabi_dsub+0x64c>
 8002072:	465d      	mov	r5, fp
 8002074:	0004      	movs	r4, r0
 8002076:	08fb      	lsrs	r3, r7, #3
 8002078:	0749      	lsls	r1, r1, #29
 800207a:	430b      	orrs	r3, r1
 800207c:	0f5a      	lsrs	r2, r3, #29
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	0752      	lsls	r2, r2, #29
 8002084:	4313      	orrs	r3, r2
 8002086:	e65d      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	08ff      	lsrs	r7, r7, #3
 800208c:	433b      	orrs	r3, r7
 800208e:	08cc      	lsrs	r4, r1, #3
 8002090:	e649      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8002092:	19dc      	adds	r4, r3, r7
 8002094:	429c      	cmp	r4, r3
 8002096:	419b      	sbcs	r3, r3
 8002098:	4461      	add	r1, ip
 800209a:	4689      	mov	r9, r1
 800209c:	425b      	negs	r3, r3
 800209e:	4499      	add	r9, r3
 80020a0:	464b      	mov	r3, r9
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	d400      	bmi.n	80020a8 <__aeabi_dsub+0x678>
 80020a6:	e631      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020a8:	464a      	mov	r2, r9
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <__aeabi_dsub+0x6d8>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	4691      	mov	r9, r2
 80020b2:	4698      	mov	r8, r3
 80020b4:	e62a      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020b6:	0016      	movs	r6, r2
 80020b8:	4664      	mov	r4, ip
 80020ba:	3e20      	subs	r6, #32
 80020bc:	40f4      	lsrs	r4, r6
 80020be:	46a0      	mov	r8, r4
 80020c0:	2a20      	cmp	r2, #32
 80020c2:	d005      	beq.n	80020d0 <__aeabi_dsub+0x6a0>
 80020c4:	2640      	movs	r6, #64	; 0x40
 80020c6:	4664      	mov	r4, ip
 80020c8:	1ab2      	subs	r2, r6, r2
 80020ca:	4094      	lsls	r4, r2
 80020cc:	4323      	orrs	r3, r4
 80020ce:	469a      	mov	sl, r3
 80020d0:	4654      	mov	r4, sl
 80020d2:	1e63      	subs	r3, r4, #1
 80020d4:	419c      	sbcs	r4, r3
 80020d6:	4643      	mov	r3, r8
 80020d8:	431c      	orrs	r4, r3
 80020da:	e5db      	b.n	8001c94 <__aeabi_dsub+0x264>
 80020dc:	0002      	movs	r2, r0
 80020de:	2400      	movs	r4, #0
 80020e0:	2300      	movs	r3, #0
 80020e2:	e548      	b.n	8001b76 <__aeabi_dsub+0x146>
 80020e4:	19dc      	adds	r4, r3, r7
 80020e6:	42bc      	cmp	r4, r7
 80020e8:	41bf      	sbcs	r7, r7
 80020ea:	4461      	add	r1, ip
 80020ec:	4689      	mov	r9, r1
 80020ee:	427f      	negs	r7, r7
 80020f0:	44b9      	add	r9, r7
 80020f2:	e738      	b.n	8001f66 <__aeabi_dsub+0x536>
 80020f4:	464b      	mov	r3, r9
 80020f6:	4323      	orrs	r3, r4
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x6cc>
 80020fa:	e69f      	b.n	8001e3c <__aeabi_dsub+0x40c>
 80020fc:	e606      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	000007fe 	.word	0x000007fe
 8002104:	000007ff 	.word	0x000007ff
 8002108:	ff7fffff 	.word	0xff7fffff
 800210c:	08ff      	lsrs	r7, r7, #3
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	433b      	orrs	r3, r7
 8002112:	08cc      	lsrs	r4, r1, #3
 8002114:	e616      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002116:	4662      	mov	r2, ip
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	4313      	orrs	r3, r2
 800211e:	4662      	mov	r2, ip
 8002120:	08d4      	lsrs	r4, r2, #3
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0312      	lsls	r2, r2, #12
 8002126:	4214      	tst	r4, r2
 8002128:	d007      	beq.n	800213a <__aeabi_dsub+0x70a>
 800212a:	08c8      	lsrs	r0, r1, #3
 800212c:	4210      	tst	r0, r2
 800212e:	d104      	bne.n	800213a <__aeabi_dsub+0x70a>
 8002130:	465d      	mov	r5, fp
 8002132:	0004      	movs	r4, r0
 8002134:	08fb      	lsrs	r3, r7, #3
 8002136:	0749      	lsls	r1, r1, #29
 8002138:	430b      	orrs	r3, r1
 800213a:	0f5a      	lsrs	r2, r3, #29
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	0752      	lsls	r2, r2, #29
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	4313      	orrs	r3, r2
 8002144:	e5fe      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002146:	2300      	movs	r3, #0
 8002148:	4a01      	ldr	r2, [pc, #4]	; (8002150 <__aeabi_dsub+0x720>)
 800214a:	001c      	movs	r4, r3
 800214c:	e513      	b.n	8001b76 <__aeabi_dsub+0x146>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff

08002154 <__aeabi_dcmpun>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	0005      	movs	r5, r0
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <__aeabi_dcmpun+0x38>)
 800215a:	031c      	lsls	r4, r3, #12
 800215c:	0016      	movs	r6, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	030a      	lsls	r2, r1, #12
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	0b12      	lsrs	r2, r2, #12
 8002166:	0d49      	lsrs	r1, r1, #21
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d5b      	lsrs	r3, r3, #21
 800216c:	4281      	cmp	r1, r0
 800216e:	d008      	beq.n	8002182 <__aeabi_dcmpun+0x2e>
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <__aeabi_dcmpun+0x38>)
 8002172:	2000      	movs	r0, #0
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002178:	0020      	movs	r0, r4
 800217a:	4330      	orrs	r0, r6
 800217c:	1e43      	subs	r3, r0, #1
 800217e:	4198      	sbcs	r0, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2001      	movs	r0, #1
 8002184:	432a      	orrs	r2, r5
 8002186:	d1fb      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002188:	e7f2      	b.n	8002170 <__aeabi_dcmpun+0x1c>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff

08002190 <__aeabi_d2iz>:
 8002190:	000a      	movs	r2, r1
 8002192:	b530      	push	{r4, r5, lr}
 8002194:	4c13      	ldr	r4, [pc, #76]	; (80021e4 <__aeabi_d2iz+0x54>)
 8002196:	0053      	lsls	r3, r2, #1
 8002198:	0309      	lsls	r1, r1, #12
 800219a:	0005      	movs	r5, r0
 800219c:	0b09      	lsrs	r1, r1, #12
 800219e:	2000      	movs	r0, #0
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	0fd2      	lsrs	r2, r2, #31
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	dd04      	ble.n	80021b2 <__aeabi_d2iz+0x22>
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <__aeabi_d2iz+0x58>)
 80021aa:	4283      	cmp	r3, r0
 80021ac:	dd02      	ble.n	80021b4 <__aeabi_d2iz+0x24>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <__aeabi_d2iz+0x5c>)
 80021b0:	18d0      	adds	r0, r2, r3
 80021b2:	bd30      	pop	{r4, r5, pc}
 80021b4:	2080      	movs	r0, #128	; 0x80
 80021b6:	0340      	lsls	r0, r0, #13
 80021b8:	4301      	orrs	r1, r0
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <__aeabi_d2iz+0x60>)
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	281f      	cmp	r0, #31
 80021c0:	dd08      	ble.n	80021d4 <__aeabi_d2iz+0x44>
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <__aeabi_d2iz+0x64>)
 80021c4:	1ac3      	subs	r3, r0, r3
 80021c6:	40d9      	lsrs	r1, r3
 80021c8:	000b      	movs	r3, r1
 80021ca:	4258      	negs	r0, r3
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d1f0      	bne.n	80021b2 <__aeabi_d2iz+0x22>
 80021d0:	0018      	movs	r0, r3
 80021d2:	e7ee      	b.n	80021b2 <__aeabi_d2iz+0x22>
 80021d4:	4c08      	ldr	r4, [pc, #32]	; (80021f8 <__aeabi_d2iz+0x68>)
 80021d6:	40c5      	lsrs	r5, r0
 80021d8:	46a4      	mov	ip, r4
 80021da:	4463      	add	r3, ip
 80021dc:	4099      	lsls	r1, r3
 80021de:	000b      	movs	r3, r1
 80021e0:	432b      	orrs	r3, r5
 80021e2:	e7f2      	b.n	80021ca <__aeabi_d2iz+0x3a>
 80021e4:	000003fe 	.word	0x000003fe
 80021e8:	0000041d 	.word	0x0000041d
 80021ec:	7fffffff 	.word	0x7fffffff
 80021f0:	00000433 	.word	0x00000433
 80021f4:	00000413 	.word	0x00000413
 80021f8:	fffffbed 	.word	0xfffffbed

080021fc <__aeabi_i2d>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2800      	cmp	r0, #0
 8002200:	d016      	beq.n	8002230 <__aeabi_i2d+0x34>
 8002202:	17c3      	asrs	r3, r0, #31
 8002204:	18c5      	adds	r5, r0, r3
 8002206:	405d      	eors	r5, r3
 8002208:	0fc4      	lsrs	r4, r0, #31
 800220a:	0028      	movs	r0, r5
 800220c:	f000 f84c 	bl	80022a8 <__clzsi2>
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <__aeabi_i2d+0x5c>)
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	280a      	cmp	r0, #10
 8002216:	dc16      	bgt.n	8002246 <__aeabi_i2d+0x4a>
 8002218:	0003      	movs	r3, r0
 800221a:	002e      	movs	r6, r5
 800221c:	3315      	adds	r3, #21
 800221e:	409e      	lsls	r6, r3
 8002220:	230b      	movs	r3, #11
 8002222:	1a18      	subs	r0, r3, r0
 8002224:	40c5      	lsrs	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	0b2d      	lsrs	r5, r5, #12
 800222c:	0d53      	lsrs	r3, r2, #21
 800222e:	e003      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002230:	2400      	movs	r4, #0
 8002232:	2300      	movs	r3, #0
 8002234:	2500      	movs	r5, #0
 8002236:	2600      	movs	r6, #0
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	432b      	orrs	r3, r5
 800223c:	07e4      	lsls	r4, r4, #31
 800223e:	4323      	orrs	r3, r4
 8002240:	0030      	movs	r0, r6
 8002242:	0019      	movs	r1, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	380b      	subs	r0, #11
 8002248:	4085      	lsls	r5, r0
 800224a:	0552      	lsls	r2, r2, #21
 800224c:	032d      	lsls	r5, r5, #12
 800224e:	2600      	movs	r6, #0
 8002250:	0b2d      	lsrs	r5, r5, #12
 8002252:	0d53      	lsrs	r3, r2, #21
 8002254:	e7f0      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	0000041e 	.word	0x0000041e

0800225c <__aeabi_ui2d>:
 800225c:	b510      	push	{r4, lr}
 800225e:	1e04      	subs	r4, r0, #0
 8002260:	d010      	beq.n	8002284 <__aeabi_ui2d+0x28>
 8002262:	f000 f821 	bl	80022a8 <__clzsi2>
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <__aeabi_ui2d+0x48>)
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	280a      	cmp	r0, #10
 800226c:	dc11      	bgt.n	8002292 <__aeabi_ui2d+0x36>
 800226e:	220b      	movs	r2, #11
 8002270:	0021      	movs	r1, r4
 8002272:	1a12      	subs	r2, r2, r0
 8002274:	40d1      	lsrs	r1, r2
 8002276:	3015      	adds	r0, #21
 8002278:	030a      	lsls	r2, r1, #12
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4084      	lsls	r4, r0
 800227e:	0b12      	lsrs	r2, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e001      	b.n	8002288 <__aeabi_ui2d+0x2c>
 8002284:	2300      	movs	r3, #0
 8002286:	2200      	movs	r2, #0
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	4313      	orrs	r3, r2
 800228c:	0020      	movs	r0, r4
 800228e:	0019      	movs	r1, r3
 8002290:	bd10      	pop	{r4, pc}
 8002292:	0022      	movs	r2, r4
 8002294:	380b      	subs	r0, #11
 8002296:	4082      	lsls	r2, r0
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	0312      	lsls	r2, r2, #12
 800229c:	2400      	movs	r4, #0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e7f1      	b.n	8002288 <__aeabi_ui2d+0x2c>
 80022a4:	0000041e 	.word	0x0000041e

080022a8 <__clzsi2>:
 80022a8:	211c      	movs	r1, #28
 80022aa:	2301      	movs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d301      	bcc.n	80022b6 <__clzsi2+0xe>
 80022b2:	0c00      	lsrs	r0, r0, #16
 80022b4:	3910      	subs	r1, #16
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	4298      	cmp	r0, r3
 80022ba:	d301      	bcc.n	80022c0 <__clzsi2+0x18>
 80022bc:	0a00      	lsrs	r0, r0, #8
 80022be:	3908      	subs	r1, #8
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d301      	bcc.n	80022ca <__clzsi2+0x22>
 80022c6:	0900      	lsrs	r0, r0, #4
 80022c8:	3904      	subs	r1, #4
 80022ca:	a202      	add	r2, pc, #8	; (adr r2, 80022d4 <__clzsi2+0x2c>)
 80022cc:	5c10      	ldrb	r0, [r2, r0]
 80022ce:	1840      	adds	r0, r0, r1
 80022d0:	4770      	bx	lr
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	02020304 	.word	0x02020304
 80022d8:	01010101 	.word	0x01010101
	...

080022e4 <__clzdi2>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	2900      	cmp	r1, #0
 80022e8:	d103      	bne.n	80022f2 <__clzdi2+0xe>
 80022ea:	f7ff ffdd 	bl	80022a8 <__clzsi2>
 80022ee:	3020      	adds	r0, #32
 80022f0:	e002      	b.n	80022f8 <__clzdi2+0x14>
 80022f2:	0008      	movs	r0, r1
 80022f4:	f7ff ffd8 	bl	80022a8 <__clzsi2>
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)

080022fc <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8002304:	230e      	movs	r3, #14
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	2205      	movs	r2, #5
 800230a:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 800230c:	230d      	movs	r3, #13
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002314:	250f      	movs	r5, #15
 8002316:	197c      	adds	r4, r7, r5
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	0018      	movs	r0, r3
 800231c:	f001 fb0f 	bl	800393e <null_ptr_check>
 8002320:	0003      	movs	r3, r0
 8002322:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8002324:	197b      	adds	r3, r7, r5
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b25b      	sxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d14c      	bne.n	80023c8 <bme280_init+0xcc>
    {
        while (try_count)
 800232e:	e03b      	b.n	80023a8 <bme280_init+0xac>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8002330:	250f      	movs	r5, #15
 8002332:	197c      	adds	r4, r7, r5
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	260d      	movs	r6, #13
 8002338:	19b9      	adds	r1, r7, r6
 800233a:	2201      	movs	r2, #1
 800233c:	20d0      	movs	r0, #208	; 0xd0
 800233e:	f000 f84b 	bl	80023d8 <bme280_get_regs>
 8002342:	0003      	movs	r3, r0
 8002344:	7023      	strb	r3, [r4, #0]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8002346:	0029      	movs	r1, r5
 8002348:	187b      	adds	r3, r7, r1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	b25b      	sxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11c      	bne.n	800238c <bme280_init+0x90>
 8002352:	19bb      	adds	r3, r7, r6
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b60      	cmp	r3, #96	; 0x60
 8002358:	d118      	bne.n	800238c <bme280_init+0x90>
            {
                dev->chip_id = chip_id;
 800235a:	19bb      	adds	r3, r7, r6
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8002362:	000d      	movs	r5, r1
 8002364:	187c      	adds	r4, r7, r1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0018      	movs	r0, r3
 800236a:	f000 fa03 	bl	8002774 <bme280_soft_reset>
 800236e:	0003      	movs	r3, r0
 8002370:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 8002372:	197b      	adds	r3, r7, r5
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b25b      	sxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d11b      	bne.n	80023b4 <bme280_init+0xb8>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800237c:	197c      	adds	r4, r7, r5
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f001 f92f 	bl	80035e4 <get_calib_data>
 8002386:	0003      	movs	r3, r0
 8002388:	7023      	strb	r3, [r4, #0]
                }

                break;
 800238a:	e013      	b.n	80023b4 <bme280_init+0xb8>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	23fa      	movs	r3, #250	; 0xfa
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	0018      	movs	r0, r3
 800239a:	4790      	blx	r2
            --try_count;
 800239c:	220e      	movs	r2, #14
 800239e:	18bb      	adds	r3, r7, r2
 80023a0:	18ba      	adds	r2, r7, r2
 80023a2:	7812      	ldrb	r2, [r2, #0]
 80023a4:	3a01      	subs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
        while (try_count)
 80023a8:	230e      	movs	r3, #14
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1be      	bne.n	8002330 <bme280_init+0x34>
 80023b2:	e000      	b.n	80023b6 <bme280_init+0xba>
                break;
 80023b4:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 80023b6:	230e      	movs	r3, #14
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <bme280_init+0xcc>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80023c0:	230f      	movs	r3, #15
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	22fe      	movs	r2, #254	; 0xfe
 80023c6:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 80023c8:	230f      	movs	r3, #15
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b25b      	sxtb	r3, r3
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b005      	add	sp, #20
 80023d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023d8 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	0011      	movs	r1, r2
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	250f      	movs	r5, #15
 80023e6:	197b      	adds	r3, r7, r5
 80023e8:	1c02      	adds	r2, r0, #0
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	230c      	movs	r3, #12
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	1c0a      	adds	r2, r1, #0
 80023f2:	801a      	strh	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80023f4:	2617      	movs	r6, #23
 80023f6:	19bc      	adds	r4, r7, r6
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	0018      	movs	r0, r3
 80023fc:	f001 fa9f 	bl	800393e <null_ptr_check>
 8002400:	0003      	movs	r3, r0
 8002402:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8002404:	19bb      	adds	r3, r7, r6
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b25b      	sxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d129      	bne.n	8002462 <bme280_get_regs+0x8a>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d026      	beq.n	8002462 <bme280_get_regs+0x8a>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7a1b      	ldrb	r3, [r3, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d006      	beq.n	800242a <bme280_get_regs+0x52>
        {
            reg_addr = reg_addr | 0x80;
 800241c:	197b      	adds	r3, r7, r5
 800241e:	197a      	adds	r2, r7, r5
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	4249      	negs	r1, r1
 8002426:	430a      	orrs	r2, r1
 8002428:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68dc      	ldr	r4, [r3, #12]
 800242e:	230c      	movs	r3, #12
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	881a      	ldrh	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685d      	ldr	r5, [r3, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	230f      	movs	r3, #15
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	7818      	ldrb	r0, [r3, #0]
 8002440:	002b      	movs	r3, r5
 8002442:	47a0      	blx	r4
 8002444:	0003      	movs	r3, r0
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2245      	movs	r2, #69	; 0x45
 800244c:	5499      	strb	r1, [r3, r2]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2245      	movs	r2, #69	; 0x45
 8002452:	569b      	ldrsb	r3, [r3, r2]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <bme280_get_regs+0x92>
        {
            rslt = BME280_E_COMM_FAIL;
 8002458:	2317      	movs	r3, #23
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	22fc      	movs	r2, #252	; 0xfc
 800245e:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8002460:	e003      	b.n	800246a <bme280_get_regs+0x92>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002462:	2317      	movs	r3, #23
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	22ff      	movs	r2, #255	; 0xff
 8002468:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800246a:	2317      	movs	r3, #23
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b25b      	sxtb	r3, r3
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b007      	add	sp, #28
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800247a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 800247a:	b5b0      	push	{r4, r5, r7, lr}
 800247c:	b08c      	sub	sp, #48	; 0x30
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b0a      	cmp	r3, #10
 8002490:	d902      	bls.n	8002498 <bme280_set_regs+0x1e>
    {
        len = 10;
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	220a      	movs	r2, #10
 8002496:	701a      	strb	r2, [r3, #0]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002498:	252f      	movs	r5, #47	; 0x2f
 800249a:	197c      	adds	r4, r7, r5
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	0018      	movs	r0, r3
 80024a0:	f001 fa4d 	bl	800393e <null_ptr_check>
 80024a4:	0003      	movs	r3, r0
 80024a6:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80024a8:	197b      	adds	r3, r7, r5
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d000      	beq.n	80024b4 <bme280_set_regs+0x3a>
 80024b2:	e06c      	b.n	800258e <bme280_set_regs+0x114>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d069      	beq.n	800258e <bme280_set_regs+0x114>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d066      	beq.n	800258e <bme280_set_regs+0x114>
    {
        if (len != 0)
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d05d      	beq.n	8002584 <bme280_set_regs+0x10a>
        {
            temp_buff[0] = reg_data[0];
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	2314      	movs	r3, #20
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	7a1b      	ldrb	r3, [r3, #8]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d01e      	beq.n	8002518 <bme280_set_regs+0x9e>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80024da:	232b      	movs	r3, #43	; 0x2b
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e012      	b.n	800250a <bme280_set_regs+0x90>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80024e4:	202b      	movs	r0, #43	; 0x2b
 80024e6:	183b      	adds	r3, r7, r0
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	18d3      	adds	r3, r2, r3
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	183b      	adds	r3, r7, r0
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	18cb      	adds	r3, r1, r3
 80024f8:	217f      	movs	r1, #127	; 0x7f
 80024fa:	400a      	ands	r2, r1
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002500:	183b      	adds	r3, r7, r0
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	183b      	adds	r3, r7, r0
 8002506:	3201      	adds	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	232b      	movs	r3, #43	; 0x2b
 800250c:	18fa      	adds	r2, r7, r3
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d3e5      	bcc.n	80024e4 <bme280_set_regs+0x6a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8002518:	1dfb      	adds	r3, r7, #7
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d911      	bls.n	8002544 <bme280_set_regs+0xca>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8002520:	1dfb      	adds	r3, r7, #7
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	2114      	movs	r1, #20
 8002528:	1879      	adds	r1, r7, r1
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f001 f8a6 	bl	800367c <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8002530:	1dfb      	adds	r3, r7, #7
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	18db      	adds	r3, r3, r3
 8002538:	b29a      	uxth	r2, r3
 800253a:	232c      	movs	r3, #44	; 0x2c
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	3a01      	subs	r2, #1
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	e004      	b.n	800254e <bme280_set_regs+0xd4>
            }
            else
            {
                temp_len = len;
 8002544:	232c      	movs	r3, #44	; 0x2c
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	1dfa      	adds	r2, r7, #7
 800254a:	7812      	ldrb	r2, [r2, #0]
 800254c:	801a      	strh	r2, [r3, #0]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	691c      	ldr	r4, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	7818      	ldrb	r0, [r3, #0]
 8002556:	232c      	movs	r3, #44	; 0x2c
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	881a      	ldrh	r2, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2114      	movs	r1, #20
 8002562:	1879      	adds	r1, r7, r1
 8002564:	47a0      	blx	r4
 8002566:	0003      	movs	r3, r0
 8002568:	0019      	movs	r1, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2245      	movs	r2, #69	; 0x45
 800256e:	5499      	strb	r1, [r3, r2]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2245      	movs	r2, #69	; 0x45
 8002574:	569b      	ldrsb	r3, [r3, r2]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00e      	beq.n	8002598 <bme280_set_regs+0x11e>
            {
                rslt = BME280_E_COMM_FAIL;
 800257a:	232f      	movs	r3, #47	; 0x2f
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	22fc      	movs	r2, #252	; 0xfc
 8002580:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8002582:	e009      	b.n	8002598 <bme280_set_regs+0x11e>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8002584:	232f      	movs	r3, #47	; 0x2f
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	22fd      	movs	r2, #253	; 0xfd
 800258a:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 800258c:	e004      	b.n	8002598 <bme280_set_regs+0x11e>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800258e:	232f      	movs	r3, #47	; 0x2f
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e000      	b.n	800259a <bme280_set_regs+0x120>
        if (len != 0)
 8002598:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 800259a:	232f      	movs	r3, #47	; 0x2f
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b25b      	sxtb	r3, r3
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b00c      	add	sp, #48	; 0x30
 80025a8:	bdb0      	pop	{r4, r5, r7, pc}

080025aa <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 80025aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	0002      	movs	r2, r0
 80025b2:	6039      	str	r1, [r7, #0]
 80025b4:	1dfb      	adds	r3, r7, #7
 80025b6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80025b8:	250f      	movs	r5, #15
 80025ba:	197c      	adds	r4, r7, r5
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	0018      	movs	r0, r3
 80025c0:	f001 f9bd 	bl	800393e <null_ptr_check>
 80025c4:	0003      	movs	r3, r0
 80025c6:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80025c8:	197b      	adds	r3, r7, r5
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d14e      	bne.n	8002670 <bme280_set_sensor_settings+0xc6>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80025d2:	197c      	adds	r4, r7, r5
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	260e      	movs	r6, #14
 80025d8:	19bb      	adds	r3, r7, r6
 80025da:	0011      	movs	r1, r2
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 f896 	bl	800270e <bme280_get_sensor_mode>
 80025e2:	0003      	movs	r3, r0
 80025e4:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80025e6:	002a      	movs	r2, r5
 80025e8:	18bb      	adds	r3, r7, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <bme280_set_sensor_settings+0x5e>
 80025f2:	19bb      	adds	r3, r7, r6
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <bme280_set_sensor_settings+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 80025fa:	18bc      	adds	r4, r7, r2
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 fc0c 	bl	8002e1c <put_device_to_sleep>
 8002604:	0003      	movs	r3, r0
 8002606:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 8002608:	240f      	movs	r4, #15
 800260a:	193b      	adds	r3, r7, r4
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b25b      	sxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d12d      	bne.n	8002670 <bme280_set_sensor_settings+0xc6>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8002614:	1dfb      	adds	r3, r7, #7
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	0019      	movs	r1, r3
 800261a:	2007      	movs	r0, #7
 800261c:	f001 f96b 	bl	80038f6 <are_settings_changed>
 8002620:	1e03      	subs	r3, r0, #0
 8002622:	d00b      	beq.n	800263c <bme280_set_sensor_settings+0x92>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	3340      	adds	r3, #64	; 0x40
 8002628:	0019      	movs	r1, r3
 800262a:	193c      	adds	r4, r7, r4
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fa09 	bl	8002a4a <set_osr_settings>
 8002638:	0003      	movs	r3, r0
 800263a:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800263c:	240f      	movs	r4, #15
 800263e:	193b      	adds	r3, r7, r4
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b25b      	sxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d113      	bne.n	8002670 <bme280_set_sensor_settings+0xc6>
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	0019      	movs	r1, r3
 800264e:	2018      	movs	r0, #24
 8002650:	f001 f951 	bl	80038f6 <are_settings_changed>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d00b      	beq.n	8002670 <bme280_set_sensor_settings+0xc6>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	3340      	adds	r3, #64	; 0x40
 800265c:	0019      	movs	r1, r3
 800265e:	193c      	adds	r4, r7, r4
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	1dfb      	adds	r3, r7, #7
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	0018      	movs	r0, r3
 8002668:	f000 fab5 	bl	8002bd6 <set_filter_standby_settings>
 800266c:	0003      	movs	r3, r0
 800266e:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8002670:	230f      	movs	r3, #15
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b25b      	sxtb	r3, r3
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b005      	add	sp, #20
 800267e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002680 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	0002      	movs	r2, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800268e:	250f      	movs	r5, #15
 8002690:	197c      	adds	r4, r7, r5
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	0018      	movs	r0, r3
 8002696:	f001 f952 	bl	800393e <null_ptr_check>
 800269a:	0003      	movs	r3, r0
 800269c:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800269e:	197b      	adds	r3, r7, r5
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b25b      	sxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d12a      	bne.n	80026fe <bme280_set_sensor_mode+0x7e>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80026a8:	197c      	adds	r4, r7, r5
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	260e      	movs	r6, #14
 80026ae:	19bb      	adds	r3, r7, r6
 80026b0:	0011      	movs	r1, r2
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 f82b 	bl	800270e <bme280_get_sensor_mode>
 80026b8:	0003      	movs	r3, r0
 80026ba:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80026bc:	002a      	movs	r2, r5
 80026be:	18bb      	adds	r3, r7, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10a      	bne.n	80026de <bme280_set_sensor_mode+0x5e>
 80026c8:	19bb      	adds	r3, r7, r6
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <bme280_set_sensor_mode+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 80026d0:	18bc      	adds	r4, r7, r2
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 fba1 	bl	8002e1c <put_device_to_sleep>
 80026da:	0003      	movs	r3, r0
 80026dc:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 80026de:	220f      	movs	r2, #15
 80026e0:	18bb      	adds	r3, r7, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <bme280_set_sensor_mode+0x7e>
        {
            rslt = write_power_mode(sensor_mode, dev);
 80026ea:	18bc      	adds	r4, r7, r2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	1dfb      	adds	r3, r7, #7
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	0011      	movs	r1, r2
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 fb51 	bl	8002d9c <write_power_mode>
 80026fa:	0003      	movs	r3, r0
 80026fc:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 80026fe:	230f      	movs	r3, #15
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b25b      	sxtb	r3, r3
}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b005      	add	sp, #20
 800270c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800270e <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 800270e:	b5b0      	push	{r4, r5, r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002718:	250f      	movs	r5, #15
 800271a:	197c      	adds	r4, r7, r5
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	0018      	movs	r0, r3
 8002720:	f001 f90d 	bl	800393e <null_ptr_check>
 8002724:	0003      	movs	r3, r0
 8002726:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 8002728:	002a      	movs	r2, r5
 800272a:	18bb      	adds	r3, r7, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	b25b      	sxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d113      	bne.n	800275c <bme280_get_sensor_mode+0x4e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <bme280_get_sensor_mode+0x4e>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800273a:	18bc      	adds	r4, r7, r2
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	20f4      	movs	r0, #244	; 0xf4
 8002744:	f7ff fe48 	bl	80023d8 <bme280_get_regs>
 8002748:	0003      	movs	r3, r0
 800274a:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2203      	movs	r2, #3
 8002752:	4013      	ands	r3, r2
 8002754:	b2da      	uxtb	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e003      	b.n	8002764 <bme280_get_sensor_mode+0x56>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800275c:	230f      	movs	r3, #15
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	22ff      	movs	r2, #255	; 0xff
 8002762:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002764:	230f      	movs	r3, #15
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	b25b      	sxtb	r3, r3
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bdb0      	pop	{r4, r5, r7, pc}

08002774 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8002774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 800277c:	260d      	movs	r6, #13
 800277e:	19bb      	adds	r3, r7, r6
 8002780:	22e0      	movs	r2, #224	; 0xe0
 8002782:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8002784:	230c      	movs	r3, #12
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 800278c:	230e      	movs	r3, #14
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2205      	movs	r2, #5
 8002792:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8002794:	230b      	movs	r3, #11
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	22b6      	movs	r2, #182	; 0xb6
 800279a:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800279c:	250f      	movs	r5, #15
 800279e:	197c      	adds	r4, r7, r5
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f001 f8cb 	bl	800393e <null_ptr_check>
 80027a8:	0003      	movs	r3, r0
 80027aa:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80027ac:	197b      	adds	r3, r7, r5
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d13f      	bne.n	8002836 <bme280_soft_reset+0xc2>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80027b6:	197c      	adds	r4, r7, r5
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	220b      	movs	r2, #11
 80027bc:	18b9      	adds	r1, r7, r2
 80027be:	19b8      	adds	r0, r7, r6
 80027c0:	2201      	movs	r2, #1
 80027c2:	f7ff fe5a 	bl	800247a <bme280_set_regs>
 80027c6:	0003      	movs	r3, r0
 80027c8:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 80027ca:	197b      	adds	r3, r7, r5
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d130      	bne.n	8002836 <bme280_soft_reset+0xc2>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	23fa      	movs	r3, #250	; 0xfa
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	0018      	movs	r0, r3
 80027e2:	4790      	blx	r2
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80027e4:	250f      	movs	r5, #15
 80027e6:	197c      	adds	r4, r7, r5
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	260c      	movs	r6, #12
 80027ec:	19b9      	adds	r1, r7, r6
 80027ee:	2201      	movs	r2, #1
 80027f0:	20f3      	movs	r0, #243	; 0xf3
 80027f2:	f7ff fdf1 	bl	80023d8 <bme280_get_regs>
 80027f6:	0003      	movs	r3, r0
 80027f8:	7023      	strb	r3, [r4, #0]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80027fa:	197b      	adds	r3, r7, r5
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10d      	bne.n	8002820 <bme280_soft_reset+0xac>
 8002804:	220e      	movs	r2, #14
 8002806:	18bb      	adds	r3, r7, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	18ba      	adds	r2, r7, r2
 800280c:	1e59      	subs	r1, r3, #1
 800280e:	7011      	strb	r1, [r2, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <bme280_soft_reset+0xac>
 8002814:	19bb      	adds	r3, r7, r6
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	001a      	movs	r2, r3
 800281a:	2301      	movs	r3, #1
 800281c:	4013      	ands	r3, r2
 800281e:	d1d9      	bne.n	80027d4 <bme280_soft_reset+0x60>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8002820:	230c      	movs	r3, #12
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	001a      	movs	r2, r3
 8002828:	2301      	movs	r3, #1
 800282a:	4013      	ands	r3, r2
 800282c:	d003      	beq.n	8002836 <bme280_soft_reset+0xc2>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 800282e:	230f      	movs	r3, #15
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	22fa      	movs	r2, #250	; 0xfa
 8002834:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 8002836:	230f      	movs	r3, #15
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b25b      	sxtb	r3, r3
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b005      	add	sp, #20
 8002844:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002846 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8002846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002848:	b08b      	sub	sp, #44	; 0x2c
 800284a:	af00      	add	r7, sp, #0
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	230f      	movs	r3, #15
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	1c02      	adds	r2, r0, #0
 8002856:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8002858:	261c      	movs	r6, #28
 800285a:	19bb      	adds	r3, r7, r6
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8002864:	2310      	movs	r3, #16
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	0018      	movs	r0, r3
 800286a:	230c      	movs	r3, #12
 800286c:	001a      	movs	r2, r3
 800286e:	2100      	movs	r1, #0
 8002870:	f004 fff2 	bl	8007858 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002874:	2527      	movs	r5, #39	; 0x27
 8002876:	197c      	adds	r4, r7, r5
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0018      	movs	r0, r3
 800287c:	f001 f85f 	bl	800393e <null_ptr_check>
 8002880:	0003      	movs	r3, r0
 8002882:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (comp_data != NULL))
 8002884:	197b      	adds	r3, r7, r5
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b25b      	sxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d128      	bne.n	80028e0 <bme280_get_sensor_data+0x9a>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d025      	beq.n	80028e0 <bme280_get_sensor_data+0x9a>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8002894:	197c      	adds	r4, r7, r5
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	19b9      	adds	r1, r7, r6
 800289a:	2208      	movs	r2, #8
 800289c:	20f7      	movs	r0, #247	; 0xf7
 800289e:	f7ff fd9b 	bl	80023d8 <bme280_get_regs>
 80028a2:	0003      	movs	r3, r0
 80028a4:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 80028a6:	002c      	movs	r4, r5
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d11a      	bne.n	80028e8 <bme280_get_sensor_data+0xa2>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 80028b2:	2310      	movs	r3, #16
 80028b4:	18fa      	adds	r2, r7, r3
 80028b6:	19bb      	adds	r3, r7, r6
 80028b8:	0011      	movs	r1, r2
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f81c 	bl	80028f8 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	001d      	movs	r5, r3
 80028c4:	3518      	adds	r5, #24
 80028c6:	193c      	adds	r4, r7, r4
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	2310      	movs	r3, #16
 80028cc:	18f9      	adds	r1, r7, r3
 80028ce:	230f      	movs	r3, #15
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	7818      	ldrb	r0, [r3, #0]
 80028d4:	002b      	movs	r3, r5
 80028d6:	f000 f853 	bl	8002980 <bme280_compensate_data>
 80028da:	0003      	movs	r3, r0
 80028dc:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 80028de:	e003      	b.n	80028e8 <bme280_get_sensor_data+0xa2>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80028e0:	2327      	movs	r3, #39	; 0x27
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80028e8:	2327      	movs	r3, #39	; 0x27
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b25b      	sxtb	r3, r3
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b00b      	add	sp, #44	; 0x2c
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028f8 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	031b      	lsls	r3, r3, #12
 8002908:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3301      	adds	r3, #1
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3302      	adds	r3, #2
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	b2db      	uxtb	r3, r3
 800291e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	431a      	orrs	r2, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3303      	adds	r3, #3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	031b      	lsls	r3, r3, #12
 8002936:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3305      	adds	r3, #5
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	b2db      	uxtb	r3, r3
 800294c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	431a      	orrs	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	431a      	orrs	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3306      	adds	r3, #6
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3307      	adds	r3, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	431a      	orrs	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	609a      	str	r2, [r3, #8]
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b006      	add	sp, #24
 800297e:	bd80      	pop	{r7, pc}

08002980 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	240f      	movs	r4, #15
 800298e:	193b      	adds	r3, r7, r4
 8002990:	1c02      	adds	r2, r0, #0
 8002992:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 8002994:	2317      	movs	r3, #23
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d047      	beq.n	8002a32 <bme280_compensate_data+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d044      	beq.n	8002a32 <bme280_compensate_data+0xb2>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d041      	beq.n	8002a32 <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2300      	movs	r3, #0
 80029b4:	608a      	str	r2, [r1, #8]
 80029b6:	60cb      	str	r3, [r1, #12]
        comp_data->pressure = 0;
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	2300      	movs	r3, #0
 80029be:	600a      	str	r2, [r1, #0]
 80029c0:	604b      	str	r3, [r1, #4]
        comp_data->humidity = 0;
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2300      	movs	r3, #0
 80029c8:	610a      	str	r2, [r1, #16]
 80029ca:	614b      	str	r3, [r1, #20]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80029cc:	193b      	adds	r3, r7, r4
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2207      	movs	r2, #7
 80029d2:	4013      	ands	r3, r2
 80029d4:	d00a      	beq.n	80029ec <bme280_compensate_data+0x6c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	0011      	movs	r1, r2
 80029dc:	0018      	movs	r0, r3
 80029de:	f000 fa7d 	bl	8002edc <compensate_temperature>
 80029e2:	0002      	movs	r2, r0
 80029e4:	000b      	movs	r3, r1
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	608a      	str	r2, [r1, #8]
 80029ea:	60cb      	str	r3, [r1, #12]
        }

        if (sensor_comp & BME280_PRESS)
 80029ec:	230f      	movs	r3, #15
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	4013      	ands	r3, r2
 80029f6:	d00a      	beq.n	8002a0e <bme280_compensate_data+0x8e>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	0011      	movs	r1, r2
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 fb32 	bl	8003068 <compensate_pressure>
 8002a04:	0002      	movs	r2, r0
 8002a06:	000b      	movs	r3, r1
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	600a      	str	r2, [r1, #0]
 8002a0c:	604b      	str	r3, [r1, #4]
        }

        if (sensor_comp & BME280_HUM)
 8002a0e:	230f      	movs	r3, #15
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2204      	movs	r2, #4
 8002a16:	4013      	ands	r3, r2
 8002a18:	d00f      	beq.n	8002a3a <bme280_compensate_data+0xba>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	0011      	movs	r1, r2
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 fcd1 	bl	80033c8 <compensate_humidity>
 8002a26:	0002      	movs	r2, r0
 8002a28:	000b      	movs	r3, r1
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	610a      	str	r2, [r1, #16]
 8002a2e:	614b      	str	r3, [r1, #20]
        if (sensor_comp & BME280_HUM)
 8002a30:	e003      	b.n	8002a3a <bme280_compensate_data+0xba>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002a32:	2317      	movs	r3, #23
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002a3a:	2317      	movs	r3, #23
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	b25b      	sxtb	r3, r3
}
 8002a42:	0018      	movs	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b007      	add	sp, #28
 8002a48:	bd90      	pop	{r4, r7, pc}

08002a4a <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002a4a:	b590      	push	{r4, r7, lr}
 8002a4c:	b087      	sub	sp, #28
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	210f      	movs	r1, #15
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	1c02      	adds	r2, r0, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8002a5c:	2017      	movs	r0, #23
 8002a5e:	183b      	adds	r3, r7, r0
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2204      	movs	r2, #4
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d008      	beq.n	8002a80 <set_osr_settings+0x36>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8002a6e:	183c      	adds	r4, r7, r0
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	0011      	movs	r1, r2
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f81b 	bl	8002ab2 <set_osr_humidity_settings>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8002a80:	200f      	movs	r0, #15
 8002a82:	183b      	adds	r3, r7, r0
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2203      	movs	r2, #3
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d00a      	beq.n	8002aa2 <set_osr_settings+0x58>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8002a8c:	2317      	movs	r3, #23
 8002a8e:	18fc      	adds	r4, r7, r3
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	183b      	adds	r3, r7, r0
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 f851 	bl	8002b40 <set_osr_press_temp_settings>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002aa2:	2317      	movs	r3, #23
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	b25b      	sxtb	r3, r3
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b007      	add	sp, #28
 8002ab0:	bd90      	pop	{r4, r7, pc}

08002ab2 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8002abc:	250c      	movs	r5, #12
 8002abe:	197b      	adds	r3, r7, r5
 8002ac0:	22f2      	movs	r2, #242	; 0xf2
 8002ac2:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	789b      	ldrb	r3, [r3, #2]
 8002ac8:	2207      	movs	r2, #7
 8002aca:	4013      	ands	r3, r2
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	210e      	movs	r1, #14
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8002ad4:	260f      	movs	r6, #15
 8002ad6:	19bc      	adds	r4, r7, r6
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	1879      	adds	r1, r7, r1
 8002adc:	1978      	adds	r0, r7, r5
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f7ff fccb 	bl	800247a <bme280_set_regs>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8002ae8:	0031      	movs	r1, r6
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d11d      	bne.n	8002b30 <set_osr_humidity_settings+0x7e>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8002af4:	197b      	adds	r3, r7, r5
 8002af6:	22f4      	movs	r2, #244	; 0xf4
 8002af8:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8002afa:	197b      	adds	r3, r7, r5
 8002afc:	7818      	ldrb	r0, [r3, #0]
 8002afe:	000e      	movs	r6, r1
 8002b00:	187c      	adds	r4, r7, r1
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	220d      	movs	r2, #13
 8002b06:	18b9      	adds	r1, r7, r2
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f7ff fc65 	bl	80023d8 <bme280_get_regs>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8002b12:	19bb      	adds	r3, r7, r6
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <set_osr_humidity_settings+0x7e>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8002b1c:	19bc      	adds	r4, r7, r6
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	220d      	movs	r2, #13
 8002b22:	18b9      	adds	r1, r7, r2
 8002b24:	1978      	adds	r0, r7, r5
 8002b26:	2201      	movs	r2, #1
 8002b28:	f7ff fca7 	bl	800247a <bme280_set_regs>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8002b30:	230f      	movs	r3, #15
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b25b      	sxtb	r3, r3
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b005      	add	sp, #20
 8002b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b40 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8002b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	250f      	movs	r5, #15
 8002b4c:	197b      	adds	r3, r7, r5
 8002b4e:	1c02      	adds	r2, r0, #0
 8002b50:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8002b52:	2116      	movs	r1, #22
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	22f4      	movs	r2, #244	; 0xf4
 8002b58:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	7818      	ldrb	r0, [r3, #0]
 8002b5e:	2617      	movs	r6, #23
 8002b60:	19bc      	adds	r4, r7, r6
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2215      	movs	r2, #21
 8002b66:	18b9      	adds	r1, r7, r2
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f7ff fc35 	bl	80023d8 <bme280_get_regs>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002b72:	19bb      	adds	r3, r7, r6
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d124      	bne.n	8002bc6 <set_osr_press_temp_settings+0x86>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8002b7c:	197b      	adds	r3, r7, r5
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	d006      	beq.n	8002b94 <set_osr_press_temp_settings+0x54>
        {
            fill_osr_press_settings(&reg_data, settings);
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	2315      	movs	r3, #21
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	0011      	movs	r1, r2
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f000 f89f 	bl	8002cd2 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 8002b94:	230f      	movs	r3, #15
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d006      	beq.n	8002bae <set_osr_press_temp_settings+0x6e>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	2315      	movs	r3, #21
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 f8ad 	bl	8002d08 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8002bae:	2317      	movs	r3, #23
 8002bb0:	18fc      	adds	r4, r7, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2215      	movs	r2, #21
 8002bb6:	18b9      	adds	r1, r7, r2
 8002bb8:	2216      	movs	r2, #22
 8002bba:	18b8      	adds	r0, r7, r2
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f7ff fc5c 	bl	800247a <bme280_set_regs>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002bc6:	2317      	movs	r3, #23
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b25b      	sxtb	r3, r3
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b007      	add	sp, #28
 8002bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd6 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8002bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd8:	b087      	sub	sp, #28
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	250f      	movs	r5, #15
 8002be2:	197b      	adds	r3, r7, r5
 8002be4:	1c02      	adds	r2, r0, #0
 8002be6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8002be8:	2116      	movs	r1, #22
 8002bea:	187b      	adds	r3, r7, r1
 8002bec:	22f5      	movs	r2, #245	; 0xf5
 8002bee:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	7818      	ldrb	r0, [r3, #0]
 8002bf4:	2617      	movs	r6, #23
 8002bf6:	19bc      	adds	r4, r7, r6
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2215      	movs	r2, #21
 8002bfc:	18b9      	adds	r1, r7, r2
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f7ff fbea 	bl	80023d8 <bme280_get_regs>
 8002c04:	0003      	movs	r3, r0
 8002c06:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002c08:	19bb      	adds	r3, r7, r6
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d124      	bne.n	8002c5c <set_filter_standby_settings+0x86>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8002c12:	197b      	adds	r3, r7, r5
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2208      	movs	r2, #8
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d006      	beq.n	8002c2a <set_filter_standby_settings+0x54>
        {
            fill_filter_settings(&reg_data, settings);
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	2315      	movs	r3, #21
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	0011      	movs	r1, r2
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f821 	bl	8002c6c <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 8002c2a:	230f      	movs	r3, #15
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2210      	movs	r2, #16
 8002c32:	4013      	ands	r3, r2
 8002c34:	d006      	beq.n	8002c44 <set_filter_standby_settings+0x6e>
        {
            fill_standby_settings(&reg_data, settings);
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	2315      	movs	r3, #21
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	0011      	movs	r1, r2
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 f82f 	bl	8002ca2 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8002c44:	2317      	movs	r3, #23
 8002c46:	18fc      	adds	r4, r7, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2215      	movs	r2, #21
 8002c4c:	18b9      	adds	r1, r7, r2
 8002c4e:	2216      	movs	r2, #22
 8002c50:	18b8      	adds	r0, r7, r2
 8002c52:	2201      	movs	r2, #1
 8002c54:	f7ff fc11 	bl	800247a <bme280_set_regs>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002c5c:	2317      	movs	r3, #23
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b25b      	sxtb	r3, r3
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b007      	add	sp, #28
 8002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	221c      	movs	r2, #28
 8002c7e:	4393      	bics	r3, r2
 8002c80:	b25a      	sxtb	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	78db      	ldrb	r3, [r3, #3]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	211c      	movs	r1, #28
 8002c8c:	400b      	ands	r3, r1
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	4313      	orrs	r3, r2
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	701a      	strb	r2, [r3, #0]
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b002      	add	sp, #8
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b25b      	sxtb	r3, r3
 8002cb2:	221f      	movs	r2, #31
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b25a      	sxtb	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	791b      	ldrb	r3, [r3, #4]
 8002cbc:	015b      	lsls	r3, r3, #5
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	701a      	strb	r2, [r3, #0]
}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b002      	add	sp, #8
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b25b      	sxtb	r3, r3
 8002ce2:	221c      	movs	r2, #28
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	b25a      	sxtb	r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	211c      	movs	r1, #28
 8002cf2:	400b      	ands	r3, r1
 8002cf4:	b25b      	sxtb	r3, r3
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	b25b      	sxtb	r3, r3
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	701a      	strb	r2, [r3, #0]
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	221f      	movs	r2, #31
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	b25a      	sxtb	r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	015b      	lsls	r3, r3, #5
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	4313      	orrs	r3, r2
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	701a      	strb	r2, [r3, #0]
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b002      	add	sp, #8
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2207      	movs	r2, #7
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3302      	adds	r3, #2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	109b      	asrs	r3, r3, #2
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3302      	adds	r3, #2
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3303      	adds	r3, #3
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	109b      	asrs	r3, r3, #2
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3303      	adds	r3, #3
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	711a      	strb	r2, [r3, #4]
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8002d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	0002      	movs	r2, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8002daa:	260e      	movs	r6, #14
 8002dac:	19bb      	adds	r3, r7, r6
 8002dae:	22f4      	movs	r2, #244	; 0xf4
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8002db2:	19bb      	adds	r3, r7, r6
 8002db4:	7818      	ldrb	r0, [r3, #0]
 8002db6:	240f      	movs	r4, #15
 8002db8:	193c      	adds	r4, r7, r4
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	250d      	movs	r5, #13
 8002dbe:	1979      	adds	r1, r7, r5
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f7ff fb09 	bl	80023d8 <bme280_get_regs>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8002dca:	240f      	movs	r4, #15
 8002dcc:	193b      	adds	r3, r7, r4
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b25b      	sxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11a      	bne.n	8002e0c <write_power_mode+0x70>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	183b      	adds	r3, r7, r0
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	2203      	movs	r2, #3
 8002de0:	4393      	bics	r3, r2
 8002de2:	b25a      	sxtb	r2, r3
 8002de4:	1dfb      	adds	r3, r7, #7
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b25b      	sxtb	r3, r3
 8002dea:	2103      	movs	r1, #3
 8002dec:	400b      	ands	r3, r1
 8002dee:	b25b      	sxtb	r3, r3
 8002df0:	4313      	orrs	r3, r2
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	183b      	adds	r3, r7, r0
 8002df8:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8002dfa:	193c      	adds	r4, r7, r4
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	1839      	adds	r1, r7, r0
 8002e00:	19b8      	adds	r0, r7, r6
 8002e02:	2201      	movs	r2, #1
 8002e04:	f7ff fb39 	bl	800247a <bme280_set_regs>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b25b      	sxtb	r3, r3
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b005      	add	sp, #20
 8002e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e1c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8002e24:	2517      	movs	r5, #23
 8002e26:	197c      	adds	r4, r7, r5
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2610      	movs	r6, #16
 8002e2c:	19b9      	adds	r1, r7, r6
 8002e2e:	2204      	movs	r2, #4
 8002e30:	20f2      	movs	r0, #242	; 0xf2
 8002e32:	f7ff fad1 	bl	80023d8 <bme280_get_regs>
 8002e36:	0003      	movs	r3, r0
 8002e38:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002e3a:	002c      	movs	r4, r5
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b25b      	sxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d11d      	bne.n	8002e82 <put_device_to_sleep+0x66>
    {
        parse_device_settings(reg_data, &settings);
 8002e46:	2308      	movs	r3, #8
 8002e48:	18fa      	adds	r2, r7, r3
 8002e4a:	19bb      	adds	r3, r7, r6
 8002e4c:	0011      	movs	r1, r2
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7ff ff72 	bl	8002d38 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8002e54:	0025      	movs	r5, r4
 8002e56:	193c      	adds	r4, r7, r4
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff fc8a 	bl	8002774 <bme280_soft_reset>
 8002e60:	0003      	movs	r3, r0
 8002e62:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8002e64:	197b      	adds	r3, r7, r5
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <put_device_to_sleep+0x66>
        {
            rslt = reload_device_settings(&settings, dev);
 8002e6e:	197c      	adds	r4, r7, r5
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	2308      	movs	r3, #8
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	0011      	movs	r1, r2
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 f80a 	bl	8002e92 <reload_device_settings>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8002e82:	2317      	movs	r3, #23
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	b25b      	sxtb	r3, r3
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b007      	add	sp, #28
 8002e90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e92 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002e92:	b5b0      	push	{r4, r5, r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8002e9c:	250f      	movs	r5, #15
 8002e9e:	197c      	adds	r4, r7, r5
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	201f      	movs	r0, #31
 8002ea8:	f7ff fdcf 	bl	8002a4a <set_osr_settings>
 8002eac:	0003      	movs	r3, r0
 8002eae:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002eb0:	197b      	adds	r3, r7, r5
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d108      	bne.n	8002ecc <reload_device_settings+0x3a>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8002eba:	197c      	adds	r4, r7, r5
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	201f      	movs	r0, #31
 8002ec4:	f7ff fe87 	bl	8002bd6 <set_filter_standby_settings>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002ecc:	230f      	movs	r3, #15
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b25b      	sxtb	r3, r3
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b004      	add	sp, #16
 8002eda:	bdb0      	pop	{r4, r5, r7, pc}

08002edc <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	b08c      	sub	sp, #48	; 0x30
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4b59      	ldr	r3, [pc, #356]	; (8003050 <compensate_temperature+0x174>)
 8002eea:	623a      	str	r2, [r7, #32]
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    double temperature_max = 85;
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4b58      	ldr	r3, [pc, #352]	; (8003054 <compensate_temperature+0x178>)
 8002ef2:	61ba      	str	r2, [r7, #24]
 8002ef4:	61fb      	str	r3, [r7, #28]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7ff f9ae 	bl	800225c <__aeabi_ui2d>
 8002f00:	2200      	movs	r2, #0
 8002f02:	4b55      	ldr	r3, [pc, #340]	; (8003058 <compensate_temperature+0x17c>)
 8002f04:	f7fd ff26 	bl	8000d54 <__aeabi_ddiv>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	000b      	movs	r3, r1
 8002f0c:	0014      	movs	r4, r2
 8002f0e:	001d      	movs	r5, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7ff f9a1 	bl	800225c <__aeabi_ui2d>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4b4f      	ldr	r3, [pc, #316]	; (800305c <compensate_temperature+0x180>)
 8002f1e:	f7fd ff19 	bl	8000d54 <__aeabi_ddiv>
 8002f22:	0002      	movs	r2, r0
 8002f24:	000b      	movs	r3, r1
 8002f26:	0020      	movs	r0, r4
 8002f28:	0029      	movs	r1, r5
 8002f2a:	f7fe fd81 	bl	8001a30 <__aeabi_dsub>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	000b      	movs	r3, r1
 8002f32:	613a      	str	r2, [r7, #16]
 8002f34:	617b      	str	r3, [r7, #20]
    var1 = var1 * ((double)calib_data->dig_t2);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	5e9b      	ldrsh	r3, [r3, r2]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7ff f95d 	bl	80021fc <__aeabi_i2d>
 8002f42:	0002      	movs	r2, r0
 8002f44:	000b      	movs	r3, r1
 8002f46:	6938      	ldr	r0, [r7, #16]
 8002f48:	6979      	ldr	r1, [r7, #20]
 8002f4a:	f7fe fb05 	bl	8001558 <__aeabi_dmul>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	000b      	movs	r3, r1
 8002f52:	613a      	str	r2, [r7, #16]
 8002f54:	617b      	str	r3, [r7, #20]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff f97e 	bl	800225c <__aeabi_ui2d>
 8002f60:	2200      	movs	r2, #0
 8002f62:	2382      	movs	r3, #130	; 0x82
 8002f64:	05db      	lsls	r3, r3, #23
 8002f66:	f7fd fef5 	bl	8000d54 <__aeabi_ddiv>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	000b      	movs	r3, r1
 8002f6e:	0014      	movs	r4, r2
 8002f70:	001d      	movs	r5, r3
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff f970 	bl	800225c <__aeabi_ui2d>
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	4b38      	ldr	r3, [pc, #224]	; (8003060 <compensate_temperature+0x184>)
 8002f80:	f7fd fee8 	bl	8000d54 <__aeabi_ddiv>
 8002f84:	0002      	movs	r2, r0
 8002f86:	000b      	movs	r3, r1
 8002f88:	0020      	movs	r0, r4
 8002f8a:	0029      	movs	r1, r5
 8002f8c:	f7fe fd50 	bl	8001a30 <__aeabi_dsub>
 8002f90:	0002      	movs	r2, r0
 8002f92:	000b      	movs	r3, r1
 8002f94:	60ba      	str	r2, [r7, #8]
 8002f96:	60fb      	str	r3, [r7, #12]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	68b8      	ldr	r0, [r7, #8]
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	f7fe fada 	bl	8001558 <__aeabi_dmul>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	0014      	movs	r4, r2
 8002faa:	001d      	movs	r5, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	5e9b      	ldrsh	r3, [r3, r2]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff f922 	bl	80021fc <__aeabi_i2d>
 8002fb8:	0002      	movs	r2, r0
 8002fba:	000b      	movs	r3, r1
 8002fbc:	0020      	movs	r0, r4
 8002fbe:	0029      	movs	r1, r5
 8002fc0:	f7fe faca 	bl	8001558 <__aeabi_dmul>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	000b      	movs	r3, r1
 8002fc8:	60ba      	str	r2, [r7, #8]
 8002fca:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6938      	ldr	r0, [r7, #16]
 8002fd2:	6979      	ldr	r1, [r7, #20]
 8002fd4:	f7fd fb82 	bl	80006dc <__aeabi_dadd>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	000b      	movs	r3, r1
 8002fdc:	0010      	movs	r0, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	f7ff f8d6 	bl	8002190 <__aeabi_d2iz>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6938      	ldr	r0, [r7, #16]
 8002ff0:	6979      	ldr	r1, [r7, #20]
 8002ff2:	f7fd fb73 	bl	80006dc <__aeabi_dadd>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	000b      	movs	r3, r1
 8002ffa:	0010      	movs	r0, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	2200      	movs	r2, #0
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <compensate_temperature+0x188>)
 8003002:	f7fd fea7 	bl	8000d54 <__aeabi_ddiv>
 8003006:	0002      	movs	r2, r0
 8003008:	000b      	movs	r3, r1
 800300a:	62ba      	str	r2, [r7, #40]	; 0x28
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (temperature < temperature_min)
 800300e:	6a3a      	ldr	r2, [r7, #32]
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003016:	f7fd fa1f 	bl	8000458 <__aeabi_dcmplt>
 800301a:	1e03      	subs	r3, r0, #0
 800301c:	d004      	beq.n	8003028 <compensate_temperature+0x14c>
    {
        temperature = temperature_min;
 800301e:	6a3a      	ldr	r2, [r7, #32]
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	62ba      	str	r2, [r7, #40]	; 0x28
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003026:	e00b      	b.n	8003040 <compensate_temperature+0x164>
    }
    else if (temperature > temperature_max)
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800302e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003030:	f7fd fa26 	bl	8000480 <__aeabi_dcmpgt>
 8003034:	1e03      	subs	r3, r0, #0
 8003036:	d003      	beq.n	8003040 <compensate_temperature+0x164>
    {
        temperature = temperature_max;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	62ba      	str	r2, [r7, #40]	; 0x28
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return temperature;
 8003040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003044:	0010      	movs	r0, r2
 8003046:	0019      	movs	r1, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b00c      	add	sp, #48	; 0x30
 800304c:	bdb0      	pop	{r4, r5, r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	c0440000 	.word	0xc0440000
 8003054:	40554000 	.word	0x40554000
 8003058:	40d00000 	.word	0x40d00000
 800305c:	40900000 	.word	0x40900000
 8003060:	40c00000 	.word	0x40c00000
 8003064:	40b40000 	.word	0x40b40000

08003068 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b08e      	sub	sp, #56	; 0x38
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8003072:	2200      	movs	r2, #0
 8003074:	4bc7      	ldr	r3, [pc, #796]	; (8003394 <compensate_pressure+0x32c>)
 8003076:	62ba      	str	r2, [r7, #40]	; 0x28
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
    double pressure_max = 110000.0;
 800307a:	2200      	movs	r2, #0
 800307c:	4bc6      	ldr	r3, [pc, #792]	; (8003398 <compensate_pressure+0x330>)
 800307e:	623a      	str	r2, [r7, #32]
 8003080:	627b      	str	r3, [r7, #36]	; 0x24

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	0018      	movs	r0, r3
 8003088:	f7ff f8b8 	bl	80021fc <__aeabi_i2d>
 800308c:	2200      	movs	r2, #0
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	05db      	lsls	r3, r3, #23
 8003092:	f7fd fe5f 	bl	8000d54 <__aeabi_ddiv>
 8003096:	0002      	movs	r2, r0
 8003098:	000b      	movs	r3, r1
 800309a:	0010      	movs	r0, r2
 800309c:	0019      	movs	r1, r3
 800309e:	2200      	movs	r2, #0
 80030a0:	4bbe      	ldr	r3, [pc, #760]	; (800339c <compensate_pressure+0x334>)
 80030a2:	f7fe fcc5 	bl	8001a30 <__aeabi_dsub>
 80030a6:	0002      	movs	r2, r0
 80030a8:	000b      	movs	r3, r1
 80030aa:	61ba      	str	r2, [r7, #24]
 80030ac:	61fb      	str	r3, [r7, #28]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	69b8      	ldr	r0, [r7, #24]
 80030b4:	69f9      	ldr	r1, [r7, #28]
 80030b6:	f7fe fa4f 	bl	8001558 <__aeabi_dmul>
 80030ba:	0002      	movs	r2, r0
 80030bc:	000b      	movs	r3, r1
 80030be:	0014      	movs	r4, r2
 80030c0:	001d      	movs	r5, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2210      	movs	r2, #16
 80030c6:	5e9b      	ldrsh	r3, [r3, r2]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7ff f897 	bl	80021fc <__aeabi_i2d>
 80030ce:	0002      	movs	r2, r0
 80030d0:	000b      	movs	r3, r1
 80030d2:	0020      	movs	r0, r4
 80030d4:	0029      	movs	r1, r5
 80030d6:	f7fe fa3f 	bl	8001558 <__aeabi_dmul>
 80030da:	0002      	movs	r2, r0
 80030dc:	000b      	movs	r3, r1
 80030de:	0010      	movs	r0, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	2200      	movs	r2, #0
 80030e4:	4bae      	ldr	r3, [pc, #696]	; (80033a0 <compensate_pressure+0x338>)
 80030e6:	f7fd fe35 	bl	8000d54 <__aeabi_ddiv>
 80030ea:	0002      	movs	r2, r0
 80030ec:	000b      	movs	r3, r1
 80030ee:	613a      	str	r2, [r7, #16]
 80030f0:	617b      	str	r3, [r7, #20]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	220e      	movs	r2, #14
 80030f6:	5e9b      	ldrsh	r3, [r3, r2]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff f87f 	bl	80021fc <__aeabi_i2d>
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f7fe fa29 	bl	8001558 <__aeabi_dmul>
 8003106:	0002      	movs	r2, r0
 8003108:	000b      	movs	r3, r1
 800310a:	0010      	movs	r0, r2
 800310c:	0019      	movs	r1, r3
 800310e:	0002      	movs	r2, r0
 8003110:	000b      	movs	r3, r1
 8003112:	f7fd fae3 	bl	80006dc <__aeabi_dadd>
 8003116:	0002      	movs	r2, r0
 8003118:	000b      	movs	r3, r1
 800311a:	6938      	ldr	r0, [r7, #16]
 800311c:	6979      	ldr	r1, [r7, #20]
 800311e:	f7fd fadd 	bl	80006dc <__aeabi_dadd>
 8003122:	0002      	movs	r2, r0
 8003124:	000b      	movs	r3, r1
 8003126:	613a      	str	r2, [r7, #16]
 8003128:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 800312a:	2200      	movs	r2, #0
 800312c:	4b9d      	ldr	r3, [pc, #628]	; (80033a4 <compensate_pressure+0x33c>)
 800312e:	6938      	ldr	r0, [r7, #16]
 8003130:	6979      	ldr	r1, [r7, #20]
 8003132:	f7fd fe0f 	bl	8000d54 <__aeabi_ddiv>
 8003136:	0002      	movs	r2, r0
 8003138:	000b      	movs	r3, r1
 800313a:	0014      	movs	r4, r2
 800313c:	001d      	movs	r5, r3
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	220c      	movs	r2, #12
 8003142:	5e9b      	ldrsh	r3, [r3, r2]
 8003144:	0018      	movs	r0, r3
 8003146:	f7ff f859 	bl	80021fc <__aeabi_i2d>
 800314a:	2200      	movs	r2, #0
 800314c:	4b96      	ldr	r3, [pc, #600]	; (80033a8 <compensate_pressure+0x340>)
 800314e:	f7fe fa03 	bl	8001558 <__aeabi_dmul>
 8003152:	0002      	movs	r2, r0
 8003154:	000b      	movs	r3, r1
 8003156:	0020      	movs	r0, r4
 8003158:	0029      	movs	r1, r5
 800315a:	f7fd fabf 	bl	80006dc <__aeabi_dadd>
 800315e:	0002      	movs	r2, r0
 8003160:	000b      	movs	r3, r1
 8003162:	613a      	str	r2, [r7, #16]
 8003164:	617b      	str	r3, [r7, #20]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	220a      	movs	r2, #10
 800316a:	5e9b      	ldrsh	r3, [r3, r2]
 800316c:	0018      	movs	r0, r3
 800316e:	f7ff f845 	bl	80021fc <__aeabi_i2d>
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f7fe f9ef 	bl	8001558 <__aeabi_dmul>
 800317a:	0002      	movs	r2, r0
 800317c:	000b      	movs	r3, r1
 800317e:	0010      	movs	r0, r2
 8003180:	0019      	movs	r1, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f7fe f9e7 	bl	8001558 <__aeabi_dmul>
 800318a:	0002      	movs	r2, r0
 800318c:	000b      	movs	r3, r1
 800318e:	0010      	movs	r0, r2
 8003190:	0019      	movs	r1, r3
 8003192:	2200      	movs	r2, #0
 8003194:	4b85      	ldr	r3, [pc, #532]	; (80033ac <compensate_pressure+0x344>)
 8003196:	f7fd fddd 	bl	8000d54 <__aeabi_ddiv>
 800319a:	0002      	movs	r2, r0
 800319c:	000b      	movs	r3, r1
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2208      	movs	r2, #8
 80031a6:	5e9b      	ldrsh	r3, [r3, r2]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7ff f827 	bl	80021fc <__aeabi_i2d>
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f7fe f9d1 	bl	8001558 <__aeabi_dmul>
 80031b6:	0002      	movs	r2, r0
 80031b8:	000b      	movs	r3, r1
 80031ba:	0010      	movs	r0, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f7fd fa8b 	bl	80006dc <__aeabi_dadd>
 80031c6:	0002      	movs	r2, r0
 80031c8:	000b      	movs	r3, r1
 80031ca:	0010      	movs	r0, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	2200      	movs	r2, #0
 80031d0:	4b76      	ldr	r3, [pc, #472]	; (80033ac <compensate_pressure+0x344>)
 80031d2:	f7fd fdbf 	bl	8000d54 <__aeabi_ddiv>
 80031d6:	0002      	movs	r2, r0
 80031d8:	000b      	movs	r3, r1
 80031da:	61ba      	str	r2, [r7, #24]
 80031dc:	61fb      	str	r3, [r7, #28]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 80031de:	2200      	movs	r2, #0
 80031e0:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <compensate_pressure+0x338>)
 80031e2:	69b8      	ldr	r0, [r7, #24]
 80031e4:	69f9      	ldr	r1, [r7, #28]
 80031e6:	f7fd fdb5 	bl	8000d54 <__aeabi_ddiv>
 80031ea:	0002      	movs	r2, r0
 80031ec:	000b      	movs	r3, r1
 80031ee:	0010      	movs	r0, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	2200      	movs	r2, #0
 80031f4:	4b6e      	ldr	r3, [pc, #440]	; (80033b0 <compensate_pressure+0x348>)
 80031f6:	f7fd fa71 	bl	80006dc <__aeabi_dadd>
 80031fa:	0002      	movs	r2, r0
 80031fc:	000b      	movs	r3, r1
 80031fe:	0014      	movs	r4, r2
 8003200:	001d      	movs	r5, r3
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	88db      	ldrh	r3, [r3, #6]
 8003206:	0018      	movs	r0, r3
 8003208:	f7ff f828 	bl	800225c <__aeabi_ui2d>
 800320c:	0002      	movs	r2, r0
 800320e:	000b      	movs	r3, r1
 8003210:	0020      	movs	r0, r4
 8003212:	0029      	movs	r1, r5
 8003214:	f7fe f9a0 	bl	8001558 <__aeabi_dmul>
 8003218:	0002      	movs	r2, r0
 800321a:	000b      	movs	r3, r1
 800321c:	61ba      	str	r2, [r7, #24]
 800321e:	61fb      	str	r3, [r7, #28]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 8003220:	2200      	movs	r2, #0
 8003222:	2300      	movs	r3, #0
 8003224:	69b8      	ldr	r0, [r7, #24]
 8003226:	69f9      	ldr	r1, [r7, #28]
 8003228:	f7fd f92a 	bl	8000480 <__aeabi_dcmpgt>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d100      	bne.n	8003232 <compensate_pressure+0x1ca>
 8003230:	e0a4      	b.n	800337c <compensate_pressure+0x314>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0018      	movs	r0, r3
 8003238:	f7ff f810 	bl	800225c <__aeabi_ui2d>
 800323c:	0002      	movs	r2, r0
 800323e:	000b      	movs	r3, r1
 8003240:	2000      	movs	r0, #0
 8003242:	495c      	ldr	r1, [pc, #368]	; (80033b4 <compensate_pressure+0x34c>)
 8003244:	f7fe fbf4 	bl	8001a30 <__aeabi_dsub>
 8003248:	0002      	movs	r2, r0
 800324a:	000b      	movs	r3, r1
 800324c:	633a      	str	r2, [r7, #48]	; 0x30
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8003250:	2200      	movs	r2, #0
 8003252:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <compensate_pressure+0x350>)
 8003254:	6938      	ldr	r0, [r7, #16]
 8003256:	6979      	ldr	r1, [r7, #20]
 8003258:	f7fd fd7c 	bl	8000d54 <__aeabi_ddiv>
 800325c:	0002      	movs	r2, r0
 800325e:	000b      	movs	r3, r1
 8003260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003262:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003264:	f7fe fbe4 	bl	8001a30 <__aeabi_dsub>
 8003268:	0002      	movs	r2, r0
 800326a:	000b      	movs	r3, r1
 800326c:	0010      	movs	r0, r2
 800326e:	0019      	movs	r1, r3
 8003270:	2200      	movs	r2, #0
 8003272:	4b52      	ldr	r3, [pc, #328]	; (80033bc <compensate_pressure+0x354>)
 8003274:	f7fe f970 	bl	8001558 <__aeabi_dmul>
 8003278:	0002      	movs	r2, r0
 800327a:	000b      	movs	r3, r1
 800327c:	0010      	movs	r0, r2
 800327e:	0019      	movs	r1, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f7fd fd66 	bl	8000d54 <__aeabi_ddiv>
 8003288:	0002      	movs	r2, r0
 800328a:	000b      	movs	r3, r1
 800328c:	633a      	str	r2, [r7, #48]	; 0x30
 800328e:	637b      	str	r3, [r7, #52]	; 0x34
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2216      	movs	r2, #22
 8003294:	5e9b      	ldrsh	r3, [r3, r2]
 8003296:	0018      	movs	r0, r3
 8003298:	f7fe ffb0 	bl	80021fc <__aeabi_i2d>
 800329c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a0:	f7fe f95a 	bl	8001558 <__aeabi_dmul>
 80032a4:	0002      	movs	r2, r0
 80032a6:	000b      	movs	r3, r1
 80032a8:	0010      	movs	r0, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	f7fe f952 	bl	8001558 <__aeabi_dmul>
 80032b4:	0002      	movs	r2, r0
 80032b6:	000b      	movs	r3, r1
 80032b8:	0010      	movs	r0, r2
 80032ba:	0019      	movs	r1, r3
 80032bc:	2200      	movs	r2, #0
 80032be:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <compensate_pressure+0x358>)
 80032c0:	f7fd fd48 	bl	8000d54 <__aeabi_ddiv>
 80032c4:	0002      	movs	r2, r0
 80032c6:	000b      	movs	r3, r1
 80032c8:	61ba      	str	r2, [r7, #24]
 80032ca:	61fb      	str	r3, [r7, #28]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2214      	movs	r2, #20
 80032d0:	5e9b      	ldrsh	r3, [r3, r2]
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fe ff92 	bl	80021fc <__aeabi_i2d>
 80032d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032dc:	f7fe f93c 	bl	8001558 <__aeabi_dmul>
 80032e0:	0002      	movs	r2, r0
 80032e2:	000b      	movs	r3, r1
 80032e4:	0010      	movs	r0, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	2200      	movs	r2, #0
 80032ea:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <compensate_pressure+0x338>)
 80032ec:	f7fd fd32 	bl	8000d54 <__aeabi_ddiv>
 80032f0:	0002      	movs	r2, r0
 80032f2:	000b      	movs	r3, r1
 80032f4:	613a      	str	r2, [r7, #16]
 80032f6:	617b      	str	r3, [r7, #20]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	69b8      	ldr	r0, [r7, #24]
 80032fe:	69f9      	ldr	r1, [r7, #28]
 8003300:	f7fd f9ec 	bl	80006dc <__aeabi_dadd>
 8003304:	0002      	movs	r2, r0
 8003306:	000b      	movs	r3, r1
 8003308:	0014      	movs	r4, r2
 800330a:	001d      	movs	r5, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2212      	movs	r2, #18
 8003310:	5e9b      	ldrsh	r3, [r3, r2]
 8003312:	0018      	movs	r0, r3
 8003314:	f7fe ff72 	bl	80021fc <__aeabi_i2d>
 8003318:	0002      	movs	r2, r0
 800331a:	000b      	movs	r3, r1
 800331c:	0020      	movs	r0, r4
 800331e:	0029      	movs	r1, r5
 8003320:	f7fd f9dc 	bl	80006dc <__aeabi_dadd>
 8003324:	0002      	movs	r2, r0
 8003326:	000b      	movs	r3, r1
 8003328:	0010      	movs	r0, r2
 800332a:	0019      	movs	r1, r3
 800332c:	2200      	movs	r2, #0
 800332e:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <compensate_pressure+0x35c>)
 8003330:	f7fd fd10 	bl	8000d54 <__aeabi_ddiv>
 8003334:	0002      	movs	r2, r0
 8003336:	000b      	movs	r3, r1
 8003338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800333c:	f7fd f9ce 	bl	80006dc <__aeabi_dadd>
 8003340:	0002      	movs	r2, r0
 8003342:	000b      	movs	r3, r1
 8003344:	633a      	str	r2, [r7, #48]	; 0x30
 8003346:	637b      	str	r3, [r7, #52]	; 0x34

        if (pressure < pressure_min)
 8003348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800334e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003350:	f7fd f882 	bl	8000458 <__aeabi_dcmplt>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d004      	beq.n	8003362 <compensate_pressure+0x2fa>
        {
            pressure = pressure_min;
 8003358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	633a      	str	r2, [r7, #48]	; 0x30
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
 8003360:	e010      	b.n	8003384 <compensate_pressure+0x31c>
        }
        else if (pressure > pressure_max)
 8003362:	6a3a      	ldr	r2, [r7, #32]
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003368:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800336a:	f7fd f889 	bl	8000480 <__aeabi_dcmpgt>
 800336e:	1e03      	subs	r3, r0, #0
 8003370:	d008      	beq.n	8003384 <compensate_pressure+0x31c>
        {
            pressure = pressure_max;
 8003372:	6a3a      	ldr	r2, [r7, #32]
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	633a      	str	r2, [r7, #48]	; 0x30
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
 800337a:	e003      	b.n	8003384 <compensate_pressure+0x31c>
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 800337c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	633a      	str	r2, [r7, #48]	; 0x30
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
    }

    return pressure;
 8003384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003388:	0010      	movs	r0, r2
 800338a:	0019      	movs	r1, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b00e      	add	sp, #56	; 0x38
 8003390:	bdb0      	pop	{r4, r5, r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	40dd4c00 	.word	0x40dd4c00
 8003398:	40fadb00 	.word	0x40fadb00
 800339c:	40ef4000 	.word	0x40ef4000
 80033a0:	40e00000 	.word	0x40e00000
 80033a4:	40100000 	.word	0x40100000
 80033a8:	40f00000 	.word	0x40f00000
 80033ac:	41200000 	.word	0x41200000
 80033b0:	3ff00000 	.word	0x3ff00000
 80033b4:	41300000 	.word	0x41300000
 80033b8:	40b00000 	.word	0x40b00000
 80033bc:	40b86a00 	.word	0x40b86a00
 80033c0:	41e00000 	.word	0x41e00000
 80033c4:	40300000 	.word	0x40300000

080033c8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b094      	sub	sp, #80	; 0x50
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 80033d2:	2200      	movs	r2, #0
 80033d4:	2300      	movs	r3, #0
 80033d6:	643a      	str	r2, [r7, #64]	; 0x40
 80033d8:	647b      	str	r3, [r7, #68]	; 0x44
    double humidity_max = 100.0;
 80033da:	2200      	movs	r2, #0
 80033dc:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <compensate_humidity+0x1fc>)
 80033de:	63ba      	str	r2, [r7, #56]	; 0x38
 80033e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7fe ff08 	bl	80021fc <__aeabi_i2d>
 80033ec:	2200      	movs	r2, #0
 80033ee:	4b76      	ldr	r3, [pc, #472]	; (80035c8 <compensate_humidity+0x200>)
 80033f0:	f7fe fb1e 	bl	8001a30 <__aeabi_dsub>
 80033f4:	0002      	movs	r2, r0
 80033f6:	000b      	movs	r3, r1
 80033f8:	633a      	str	r2, [r7, #48]	; 0x30
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	221e      	movs	r2, #30
 8003400:	5e9b      	ldrsh	r3, [r3, r2]
 8003402:	0018      	movs	r0, r3
 8003404:	f7fe fefa 	bl	80021fc <__aeabi_i2d>
 8003408:	2200      	movs	r2, #0
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <compensate_humidity+0x204>)
 800340c:	f7fe f8a4 	bl	8001558 <__aeabi_dmul>
 8003410:	0002      	movs	r2, r0
 8003412:	000b      	movs	r3, r1
 8003414:	0014      	movs	r4, r2
 8003416:	001d      	movs	r5, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2220      	movs	r2, #32
 800341c:	5e9b      	ldrsh	r3, [r3, r2]
 800341e:	0018      	movs	r0, r3
 8003420:	f7fe feec 	bl	80021fc <__aeabi_i2d>
 8003424:	2200      	movs	r2, #0
 8003426:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <compensate_humidity+0x208>)
 8003428:	f7fd fc94 	bl	8000d54 <__aeabi_ddiv>
 800342c:	0002      	movs	r2, r0
 800342e:	000b      	movs	r3, r1
 8003430:	0010      	movs	r0, r2
 8003432:	0019      	movs	r1, r3
 8003434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	f7fe f88e 	bl	8001558 <__aeabi_dmul>
 800343c:	0002      	movs	r2, r0
 800343e:	000b      	movs	r3, r1
 8003440:	0020      	movs	r0, r4
 8003442:	0029      	movs	r1, r5
 8003444:	f7fd f94a 	bl	80006dc <__aeabi_dadd>
 8003448:	0002      	movs	r2, r0
 800344a:	000b      	movs	r3, r1
 800344c:	62ba      	str	r2, [r7, #40]	; 0x28
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
    var3 = uncomp_data->humidity - var2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	0018      	movs	r0, r3
 8003456:	f7fe ff01 	bl	800225c <__aeabi_ui2d>
 800345a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345e:	f7fe fae7 	bl	8001a30 <__aeabi_dsub>
 8003462:	0002      	movs	r2, r0
 8003464:	000b      	movs	r3, r1
 8003466:	623a      	str	r2, [r7, #32]
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	221a      	movs	r2, #26
 800346e:	5e9b      	ldrsh	r3, [r3, r2]
 8003470:	0018      	movs	r0, r3
 8003472:	f7fe fec3 	bl	80021fc <__aeabi_i2d>
 8003476:	2200      	movs	r2, #0
 8003478:	4b56      	ldr	r3, [pc, #344]	; (80035d4 <compensate_humidity+0x20c>)
 800347a:	f7fd fc6b 	bl	8000d54 <__aeabi_ddiv>
 800347e:	0002      	movs	r2, r0
 8003480:	000b      	movs	r3, r1
 8003482:	61ba      	str	r2, [r7, #24]
 8003484:	61fb      	str	r3, [r7, #28]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	7f1b      	ldrb	r3, [r3, #28]
 800348a:	0018      	movs	r0, r3
 800348c:	f7fe fee6 	bl	800225c <__aeabi_ui2d>
 8003490:	2200      	movs	r2, #0
 8003492:	4b51      	ldr	r3, [pc, #324]	; (80035d8 <compensate_humidity+0x210>)
 8003494:	f7fd fc5e 	bl	8000d54 <__aeabi_ddiv>
 8003498:	0002      	movs	r2, r0
 800349a:	000b      	movs	r3, r1
 800349c:	0010      	movs	r0, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a4:	f7fe f858 	bl	8001558 <__aeabi_dmul>
 80034a8:	0002      	movs	r2, r0
 80034aa:	000b      	movs	r3, r1
 80034ac:	0010      	movs	r0, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	2200      	movs	r2, #0
 80034b2:	4b4a      	ldr	r3, [pc, #296]	; (80035dc <compensate_humidity+0x214>)
 80034b4:	f7fd f912 	bl	80006dc <__aeabi_dadd>
 80034b8:	0002      	movs	r2, r0
 80034ba:	000b      	movs	r3, r1
 80034bc:	613a      	str	r2, [r7, #16]
 80034be:	617b      	str	r3, [r7, #20]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2222      	movs	r2, #34	; 0x22
 80034c4:	569b      	ldrsb	r3, [r3, r2]
 80034c6:	0018      	movs	r0, r3
 80034c8:	f7fe fe98 	bl	80021fc <__aeabi_i2d>
 80034cc:	2200      	movs	r2, #0
 80034ce:	4b42      	ldr	r3, [pc, #264]	; (80035d8 <compensate_humidity+0x210>)
 80034d0:	f7fd fc40 	bl	8000d54 <__aeabi_ddiv>
 80034d4:	0002      	movs	r2, r0
 80034d6:	000b      	movs	r3, r1
 80034d8:	0010      	movs	r0, r2
 80034da:	0019      	movs	r1, r3
 80034dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	f7fe f83a 	bl	8001558 <__aeabi_dmul>
 80034e4:	0002      	movs	r2, r0
 80034e6:	000b      	movs	r3, r1
 80034e8:	0010      	movs	r0, r2
 80034ea:	0019      	movs	r1, r3
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f7fe f832 	bl	8001558 <__aeabi_dmul>
 80034f4:	0002      	movs	r2, r0
 80034f6:	000b      	movs	r3, r1
 80034f8:	0010      	movs	r0, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	2200      	movs	r2, #0
 80034fe:	4b37      	ldr	r3, [pc, #220]	; (80035dc <compensate_humidity+0x214>)
 8003500:	f7fd f8ec 	bl	80006dc <__aeabi_dadd>
 8003504:	0002      	movs	r2, r0
 8003506:	000b      	movs	r3, r1
 8003508:	60ba      	str	r2, [r7, #8]
 800350a:	60fb      	str	r3, [r7, #12]
    var6 = var3 * var4 * (var5 * var6);
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	6a38      	ldr	r0, [r7, #32]
 8003512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003514:	f7fe f820 	bl	8001558 <__aeabi_dmul>
 8003518:	0002      	movs	r2, r0
 800351a:	000b      	movs	r3, r1
 800351c:	0014      	movs	r4, r2
 800351e:	001d      	movs	r5, r3
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6938      	ldr	r0, [r7, #16]
 8003526:	6979      	ldr	r1, [r7, #20]
 8003528:	f7fe f816 	bl	8001558 <__aeabi_dmul>
 800352c:	0002      	movs	r2, r0
 800352e:	000b      	movs	r3, r1
 8003530:	0020      	movs	r0, r4
 8003532:	0029      	movs	r1, r5
 8003534:	f7fe f810 	bl	8001558 <__aeabi_dmul>
 8003538:	0002      	movs	r2, r0
 800353a:	000b      	movs	r3, r1
 800353c:	60ba      	str	r2, [r7, #8]
 800353e:	60fb      	str	r3, [r7, #12]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	7e1b      	ldrb	r3, [r3, #24]
 8003544:	0018      	movs	r0, r3
 8003546:	f7fe fe89 	bl	800225c <__aeabi_ui2d>
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f7fe f803 	bl	8001558 <__aeabi_dmul>
 8003552:	0002      	movs	r2, r0
 8003554:	000b      	movs	r3, r1
 8003556:	0010      	movs	r0, r2
 8003558:	0019      	movs	r1, r3
 800355a:	2200      	movs	r2, #0
 800355c:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <compensate_humidity+0x218>)
 800355e:	f7fd fbf9 	bl	8000d54 <__aeabi_ddiv>
 8003562:	0002      	movs	r2, r0
 8003564:	000b      	movs	r3, r1
 8003566:	2000      	movs	r0, #0
 8003568:	491c      	ldr	r1, [pc, #112]	; (80035dc <compensate_humidity+0x214>)
 800356a:	f7fe fa61 	bl	8001a30 <__aeabi_dsub>
 800356e:	0002      	movs	r2, r0
 8003570:	000b      	movs	r3, r1
 8003572:	68b8      	ldr	r0, [r7, #8]
 8003574:	68f9      	ldr	r1, [r7, #12]
 8003576:	f7fd ffef 	bl	8001558 <__aeabi_dmul>
 800357a:	0002      	movs	r2, r0
 800357c:	000b      	movs	r3, r1
 800357e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003580:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (humidity > humidity_max)
 8003582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003586:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003588:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800358a:	f7fc ff79 	bl	8000480 <__aeabi_dcmpgt>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d004      	beq.n	800359c <compensate_humidity+0x1d4>
    {
        humidity = humidity_max;
 8003592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003596:	64ba      	str	r2, [r7, #72]	; 0x48
 8003598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800359a:	e00b      	b.n	80035b4 <compensate_humidity+0x1ec>
    }
    else if (humidity < humidity_min)
 800359c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800359e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80035a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80035a4:	f7fc ff58 	bl	8000458 <__aeabi_dcmplt>
 80035a8:	1e03      	subs	r3, r0, #0
 80035aa:	d003      	beq.n	80035b4 <compensate_humidity+0x1ec>
    {
        humidity = humidity_min;
 80035ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80035b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    return humidity;
 80035b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80035b8:	0010      	movs	r0, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b014      	add	sp, #80	; 0x50
 80035c0:	bdb0      	pop	{r4, r5, r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	40590000 	.word	0x40590000
 80035c8:	40f2c000 	.word	0x40f2c000
 80035cc:	40500000 	.word	0x40500000
 80035d0:	40d00000 	.word	0x40d00000
 80035d4:	40f00000 	.word	0x40f00000
 80035d8:	41900000 	.word	0x41900000
 80035dc:	3ff00000 	.word	0x3ff00000
 80035e0:	41200000 	.word	0x41200000

080035e4 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80035e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e6:	b08b      	sub	sp, #44	; 0x2c
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80035ec:	2626      	movs	r6, #38	; 0x26
 80035ee:	19bb      	adds	r3, r7, r6
 80035f0:	2288      	movs	r2, #136	; 0x88
 80035f2:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 80035f4:	250c      	movs	r5, #12
 80035f6:	197b      	adds	r3, r7, r5
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2216      	movs	r2, #22
 8003600:	2100      	movs	r1, #0
 8003602:	0018      	movs	r0, r3
 8003604:	f004 f928 	bl	8007858 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8003608:	2427      	movs	r4, #39	; 0x27
 800360a:	193c      	adds	r4, r7, r4
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	1979      	adds	r1, r7, r5
 8003610:	19bb      	adds	r3, r7, r6
 8003612:	7818      	ldrb	r0, [r3, #0]
 8003614:	0013      	movs	r3, r2
 8003616:	221a      	movs	r2, #26
 8003618:	f7fe fede 	bl	80023d8 <bme280_get_regs>
 800361c:	0003      	movs	r3, r0
 800361e:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8003620:	2427      	movs	r4, #39	; 0x27
 8003622:	193b      	adds	r3, r7, r4
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	b25b      	sxtb	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11f      	bne.n	800366c <get_calib_data+0x88>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	197b      	adds	r3, r7, r5
 8003630:	0011      	movs	r1, r2
 8003632:	0018      	movs	r0, r3
 8003634:	f000 f85a 	bl	80036ec <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8003638:	19bb      	adds	r3, r7, r6
 800363a:	22e1      	movs	r2, #225	; 0xe1
 800363c:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800363e:	193c      	adds	r4, r7, r4
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	1979      	adds	r1, r7, r5
 8003644:	19bb      	adds	r3, r7, r6
 8003646:	7818      	ldrb	r0, [r3, #0]
 8003648:	0013      	movs	r3, r2
 800364a:	2207      	movs	r2, #7
 800364c:	f7fe fec4 	bl	80023d8 <bme280_get_regs>
 8003650:	0003      	movs	r3, r0
 8003652:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8003654:	2427      	movs	r4, #39	; 0x27
 8003656:	193b      	adds	r3, r7, r4
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b25b      	sxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <get_calib_data+0x88>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	197b      	adds	r3, r7, r5
 8003664:	0011      	movs	r1, r2
 8003666:	0018      	movs	r0, r3
 8003668:	f000 f8ed 	bl	8003846 <parse_humidity_calib_data>
        }
    }

    return rslt;
 800366c:	2327      	movs	r3, #39	; 0x27
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b25b      	sxtb	r3, r3
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	b00b      	add	sp, #44	; 0x2c
 800367a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800367c <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	001a      	movs	r2, r3
 800368a:	1cfb      	adds	r3, r7, #3
 800368c:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 800368e:	2317      	movs	r3, #23
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	e01d      	b.n	80036d4 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8003698:	2017      	movs	r0, #23
 800369a:	183b      	adds	r3, r7, r0
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	18d2      	adds	r2, r2, r3
 80036a2:	183b      	adds	r3, r7, r0
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	3b01      	subs	r3, #1
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	18cb      	adds	r3, r1, r3
 80036ae:	7812      	ldrb	r2, [r2, #0]
 80036b0:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80036b2:	183b      	adds	r3, r7, r0
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	18d2      	adds	r2, r2, r3
 80036ba:	183b      	adds	r3, r7, r0
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	0019      	movs	r1, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	185b      	adds	r3, r3, r1
 80036c6:	7812      	ldrb	r2, [r2, #0]
 80036c8:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80036ca:	183b      	adds	r3, r7, r0
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	183b      	adds	r3, r7, r0
 80036d0:	3201      	adds	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	2317      	movs	r3, #23
 80036d6:	18fa      	adds	r2, r7, r3
 80036d8:	1cfb      	adds	r3, r7, #3
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d3da      	bcc.n	8003698 <interleave_reg_addr+0x1c>
    }
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b006      	add	sp, #24
 80036ea:	bd80      	pop	{r7, pc}

080036ec <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	3318      	adds	r3, #24
 80036fa:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3301      	adds	r3, #1
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	b21a      	sxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	b21b      	sxth	r3, r3
 800370c:	4313      	orrs	r3, r2
 800370e:	b21b      	sxth	r3, r3
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3303      	adds	r3, #3
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	b21a      	sxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3302      	adds	r3, #2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b21b      	sxth	r3, r3
 8003728:	4313      	orrs	r3, r2
 800372a:	b21a      	sxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3305      	adds	r3, #5
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	b21a      	sxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b21b      	sxth	r3, r3
 8003742:	4313      	orrs	r3, r2
 8003744:	b21a      	sxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3307      	adds	r3, #7
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	b21a      	sxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3306      	adds	r3, #6
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b21b      	sxth	r3, r3
 800375c:	4313      	orrs	r3, r2
 800375e:	b21b      	sxth	r3, r3
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3309      	adds	r3, #9
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	b21a      	sxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3308      	adds	r3, #8
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b21b      	sxth	r3, r3
 8003778:	4313      	orrs	r3, r2
 800377a:	b21a      	sxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	330b      	adds	r3, #11
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	b21a      	sxth	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	330a      	adds	r3, #10
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	b21b      	sxth	r3, r3
 8003792:	4313      	orrs	r3, r2
 8003794:	b21a      	sxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	330d      	adds	r3, #13
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	b21a      	sxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	330c      	adds	r3, #12
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b21b      	sxth	r3, r3
 80037ac:	4313      	orrs	r3, r2
 80037ae:	b21a      	sxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	330f      	adds	r3, #15
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	b21a      	sxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	330e      	adds	r3, #14
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b21b      	sxth	r3, r3
 80037c6:	4313      	orrs	r3, r2
 80037c8:	b21a      	sxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3311      	adds	r3, #17
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	b21a      	sxth	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3310      	adds	r3, #16
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	b21b      	sxth	r3, r3
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b21a      	sxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3313      	adds	r3, #19
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	b21a      	sxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3312      	adds	r3, #18
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b21b      	sxth	r3, r3
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b21a      	sxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3315      	adds	r3, #21
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	b21a      	sxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3314      	adds	r3, #20
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b21b      	sxth	r3, r3
 8003814:	4313      	orrs	r3, r2
 8003816:	b21a      	sxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3317      	adds	r3, #23
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	b21a      	sxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3316      	adds	r3, #22
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b21b      	sxth	r3, r3
 800382e:	4313      	orrs	r3, r2
 8003830:	b21a      	sxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7e5a      	ldrb	r2, [r3, #25]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	761a      	strb	r2, [r3, #24]
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b004      	add	sp, #16
 8003844:	bd80      	pop	{r7, pc}

08003846 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8003846:	b590      	push	{r4, r7, lr}
 8003848:	b087      	sub	sp, #28
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	3318      	adds	r3, #24
 8003854:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3301      	adds	r3, #1
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	b21a      	sxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b21b      	sxth	r3, r3
 8003866:	4313      	orrs	r3, r2
 8003868:	b21a      	sxth	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	789a      	ldrb	r2, [r3, #2]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3303      	adds	r3, #3
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	b25b      	sxtb	r3, r3
 800387e:	b29b      	uxth	r3, r3
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	b29a      	uxth	r2, r3
 8003884:	2012      	movs	r0, #18
 8003886:	183b      	adds	r3, r7, r0
 8003888:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b21a      	sxth	r2, r3
 8003892:	2410      	movs	r4, #16
 8003894:	193b      	adds	r3, r7, r4
 8003896:	210f      	movs	r1, #15
 8003898:	400a      	ands	r2, r1
 800389a:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 800389c:	183a      	adds	r2, r7, r0
 800389e:	193b      	adds	r3, r7, r4
 80038a0:	8812      	ldrh	r2, [r2, #0]
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	b21a      	sxth	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3305      	adds	r3, #5
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	210e      	movs	r1, #14
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	200c      	movs	r0, #12
 80038cc:	183b      	adds	r3, r7, r0
 80038ce:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80038d0:	187a      	adds	r2, r7, r1
 80038d2:	183b      	adds	r3, r7, r0
 80038d4:	8812      	ldrh	r2, [r2, #0]
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	b21a      	sxth	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3306      	adds	r3, #6
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b259      	sxtb	r1, r3
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2222      	movs	r2, #34	; 0x22
 80038ec:	5499      	strb	r1, [r3, r2]
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b007      	add	sp, #28
 80038f4:	bd90      	pop	{r4, r7, pc}

080038f6 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	0002      	movs	r2, r0
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	1dbb      	adds	r3, r7, #6
 8003904:	1c0a      	adds	r2, r1, #0
 8003906:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 8003908:	210f      	movs	r1, #15
 800390a:	187b      	adds	r3, r7, r1
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 8003910:	1dfb      	adds	r3, r7, #7
 8003912:	1dba      	adds	r2, r7, #6
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	4013      	ands	r3, r2
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <are_settings_changed+0x32>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8003920:	187b      	adds	r3, r7, r1
 8003922:	2201      	movs	r2, #1
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e003      	b.n	8003930 <are_settings_changed+0x3a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8003928:	230f      	movs	r3, #15
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 8003930:	230f      	movs	r3, #15
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	781b      	ldrb	r3, [r3, #0]
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b004      	add	sp, #16
 800393c:	bd80      	pop	{r7, pc}

0800393e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <null_ptr_check+0x26>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <null_ptr_check+0x26>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <null_ptr_check+0x26>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8003964:	230f      	movs	r3, #15
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e003      	b.n	8003976 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 800396e:	230f      	movs	r3, #15
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003976:	230f      	movs	r3, #15
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	b25b      	sxtb	r3, r3
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b004      	add	sp, #16
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	b094      	sub	sp, #80	; 0x50
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800398e:	f000 fd35 	bl	80043fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003992:	f000 f88d 	bl	8003ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003996:	f000 f9b3 	bl	8003d00 <MX_GPIO_Init>
  MX_TIM2_Init();
 800399a:	f000 f92d 	bl	8003bf8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800399e:	f000 f97f 	bl	8003ca0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80039a2:	f000 f8f1 	bl	8003b88 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  struct bme280_dev dev;
  int8_t rslt = BME280_OK;
 80039a6:	214f      	movs	r1, #79	; 0x4f
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
  uint8_t dev_addr = 0;
 80039ae:	234e      	movs	r3, #78	; 0x4e
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]

  dev.intf_ptr = &dev;
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	1d3a      	adds	r2, r7, #4
 80039ba:	605a      	str	r2, [r3, #4]
  dev.intf = BME280_SPI_INTF;
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	2200      	movs	r2, #0
 80039c0:	721a      	strb	r2, [r3, #8]
  dev.read = user_spi_read;
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	4a33      	ldr	r2, [pc, #204]	; (8003a94 <main+0x10c>)
 80039c6:	60da      	str	r2, [r3, #12]
  dev.write = user_spi_write;
 80039c8:	1d3b      	adds	r3, r7, #4
 80039ca:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <main+0x110>)
 80039cc:	611a      	str	r2, [r3, #16]
  dev.delay_us = user_delay_us;
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	4a32      	ldr	r2, [pc, #200]	; (8003a9c <main+0x114>)
 80039d2:	615a      	str	r2, [r3, #20]

  /*TEST*/
  sprintf((char*)tx_buffer, "%d\n", rslt);
 80039d4:	000c      	movs	r4, r1
 80039d6:	187b      	adds	r3, r7, r1
 80039d8:	2200      	movs	r2, #0
 80039da:	569a      	ldrsb	r2, [r3, r2]
 80039dc:	4930      	ldr	r1, [pc, #192]	; (8003aa0 <main+0x118>)
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <main+0x11c>)
 80039e0:	0018      	movs	r0, r3
 80039e2:	f004 fbaf 	bl	8008144 <siprintf>
  tx_com(tx_buffer, strlen((char const*)tx_buffer));
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <main+0x11c>)
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7fc fb8d 	bl	8000108 <strlen>
 80039ee:	0003      	movs	r3, r0
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <main+0x11c>)
 80039f4:	0011      	movs	r1, r2
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 faf4 	bl	8003fe4 <tx_com>
  /*TEST*/

  rslt = bme280_init(&dev);
 80039fc:	0025      	movs	r5, r4
 80039fe:	193c      	adds	r4, r7, r4
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7fe fc7a 	bl	80022fc <bme280_init>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	7023      	strb	r3, [r4, #0]
  if (rslt != BME280_OK)
 8003a0c:	197b      	adds	r3, r7, r5
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d013      	beq.n	8003a3e <main+0xb6>
  {
	  sprintf((char*)tx_buffer, "Error - BME280 not detected %d\n", rslt);
 8003a16:	197b      	adds	r3, r7, r5
 8003a18:	2200      	movs	r2, #0
 8003a1a:	569a      	ldrsb	r2, [r3, r2]
 8003a1c:	4922      	ldr	r1, [pc, #136]	; (8003aa8 <main+0x120>)
 8003a1e:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <main+0x11c>)
 8003a20:	0018      	movs	r0, r3
 8003a22:	f004 fb8f 	bl	8008144 <siprintf>
	  tx_com(tx_buffer, strlen((char const*)tx_buffer));
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <main+0x11c>)
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fc fb6d 	bl	8000108 <strlen>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <main+0x11c>)
 8003a34:	0011      	movs	r1, r2
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 fad4 	bl	8003fe4 <tx_com>
	  while(1);
 8003a3c:	e7fe      	b.n	8003a3c <main+0xb4>
  }

  dev.settings.filter = BME280_FILTER_COEFF_2;
 8003a3e:	1d3b      	adds	r3, r7, #4
 8003a40:	2243      	movs	r2, #67	; 0x43
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_p = BME280_OVERSAMPLING_2X;
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	2240      	movs	r2, #64	; 0x40
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_h = BME280_OVERSAMPLING_2X;
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	2242      	movs	r2, #66	; 0x42
 8003a52:	2102      	movs	r1, #2
 8003a54:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_t = BME280_OVERSAMPLING_8X;
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	2241      	movs	r2, #65	; 0x41
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	5499      	strb	r1, [r3, r2]
  dev.settings.standby_time = BME280_STANDBY_TIME_125_MS;
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	2244      	movs	r2, #68	; 0x44
 8003a62:	2102      	movs	r1, #2
 8003a64:	5499      	strb	r1, [r3, r2]

  sprintf((char*)tx_buffer, "Initialization successful\n");
 8003a66:	4a11      	ldr	r2, [pc, #68]	; (8003aac <main+0x124>)
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <main+0x11c>)
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f004 fb69 	bl	8008144 <siprintf>
  tx_com(tx_buffer, strlen((char const*)tx_buffer));
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <main+0x11c>)
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7fc fb47 	bl	8000108 <strlen>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <main+0x11c>)
 8003a80:	0011      	movs	r1, r2
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 faae 	bl	8003fe4 <tx_com>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  stream_sensor_data_normal_mode(&dev);
 8003a88:	1d3b      	adds	r3, r7, #4
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f000 f99e 	bl	8003dcc <stream_sensor_data_normal_mode>
 8003a90:	e7fa      	b.n	8003a88 <main+0x100>
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	08003eff 	.word	0x08003eff
 8003a98:	08003f73 	.word	0x08003f73
 8003a9c:	08003ee5 	.word	0x08003ee5
 8003aa0:	0800a7b8 	.word	0x0800a7b8
 8003aa4:	20000318 	.word	0x20000318
 8003aa8:	0800a7bc 	.word	0x0800a7bc
 8003aac:	0800a7dc 	.word	0x0800a7dc

08003ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b09f      	sub	sp, #124	; 0x7c
 8003ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ab6:	2440      	movs	r4, #64	; 0x40
 8003ab8:	193b      	adds	r3, r7, r4
 8003aba:	0018      	movs	r0, r3
 8003abc:	2338      	movs	r3, #56	; 0x38
 8003abe:	001a      	movs	r2, r3
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	f003 fec9 	bl	8007858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ac6:	232c      	movs	r3, #44	; 0x2c
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	0018      	movs	r0, r3
 8003acc:	2314      	movs	r3, #20
 8003ace:	001a      	movs	r2, r3
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	f003 fec1 	bl	8007858 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	0018      	movs	r0, r3
 8003ada:	2328      	movs	r3, #40	; 0x28
 8003adc:	001a      	movs	r2, r3
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f003 feba 	bl	8007858 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ae4:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <SystemClock_Config+0xd0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a26      	ldr	r2, [pc, #152]	; (8003b84 <SystemClock_Config+0xd4>)
 8003aea:	401a      	ands	r2, r3
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <SystemClock_Config+0xd0>)
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	0109      	lsls	r1, r1, #4
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003af6:	0021      	movs	r1, r4
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2210      	movs	r2, #16
 8003afc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	2201      	movs	r2, #1
 8003b02:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	2200      	movs	r2, #0
 8003b08:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	22a0      	movs	r2, #160	; 0xa0
 8003b0e:	0212      	lsls	r2, r2, #8
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003b12:	187b      	adds	r3, r7, r1
 8003b14:	2200      	movs	r2, #0
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 ff7c 	bl	8004a18 <HAL_RCC_OscConfig>
 8003b20:	1e03      	subs	r3, r0, #0
 8003b22:	d001      	beq.n	8003b28 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003b24:	f000 fa74 	bl	8004010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	187b      	adds	r3, r7, r1
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	2200      	movs	r2, #0
 8003b34:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b3c:	187b      	adds	r3, r7, r1
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b42:	187b      	adds	r3, r7, r1
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f001 fb37 	bl	80051c0 <HAL_RCC_ClockConfig>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d001      	beq.n	8003b5a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003b56:	f000 fa5b 	bl	8004010 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b66:	1d3b      	adds	r3, r7, #4
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f001 fd4d 	bl	8005608 <HAL_RCCEx_PeriphCLKConfig>
 8003b6e:	1e03      	subs	r3, r0, #0
 8003b70:	d001      	beq.n	8003b76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003b72:	f000 fa4d 	bl	8004010 <Error_Handler>
  }
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b01f      	add	sp, #124	; 0x7c
 8003b7c:	bd90      	pop	{r4, r7, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	40007000 	.word	0x40007000
 8003b84:	ffffe7ff 	.word	0xffffe7ff

08003b88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003b8c:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003b8e:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <MX_SPI2_Init+0x6c>)
 8003b90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b92:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003b94:	2282      	movs	r2, #130	; 0x82
 8003b96:	0052      	lsls	r2, r2, #1
 8003b98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bac:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	0092      	lsls	r2, r2, #2
 8003bb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003bd4:	2207      	movs	r2, #7
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <MX_SPI2_Init+0x68>)
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f001 feb2 	bl	8005944 <HAL_SPI_Init>
 8003be0:	1e03      	subs	r3, r0, #0
 8003be2:	d001      	beq.n	8003be8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003be4:	f000 fa14 	bl	8004010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	200001f8 	.word	0x200001f8
 8003bf4:	40003800 	.word	0x40003800

08003bf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bfe:	2308      	movs	r3, #8
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	0018      	movs	r0, r3
 8003c04:	2310      	movs	r3, #16
 8003c06:	001a      	movs	r2, r3
 8003c08:	2100      	movs	r1, #0
 8003c0a:	f003 fe25 	bl	8007858 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c0e:	003b      	movs	r3, r7
 8003c10:	0018      	movs	r0, r3
 8003c12:	2308      	movs	r3, #8
 8003c14:	001a      	movs	r2, r3
 8003c16:	2100      	movs	r1, #0
 8003c18:	f003 fe1e 	bl	8007858 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c1c:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <MX_TIM2_Init+0xa0>)
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	05d2      	lsls	r2, r2, #23
 8003c22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c24:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <MX_TIM2_Init+0xa0>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <MX_TIM2_Init+0xa0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <MX_TIM2_Init+0xa0>)
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <MX_TIM2_Init+0xa4>)
 8003c34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c36:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <MX_TIM2_Init+0xa0>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c3c:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <MX_TIM2_Init+0xa0>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <MX_TIM2_Init+0xa0>)
 8003c44:	0018      	movs	r0, r3
 8003c46:	f002 fca7 	bl	8006598 <HAL_TIM_Base_Init>
 8003c4a:	1e03      	subs	r3, r0, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003c4e:	f000 f9df 	bl	8004010 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c52:	2108      	movs	r1, #8
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	0152      	lsls	r2, r2, #5
 8003c5a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c5c:	187a      	adds	r2, r7, r1
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <MX_TIM2_Init+0xa0>)
 8003c60:	0011      	movs	r1, r2
 8003c62:	0018      	movs	r0, r3
 8003c64:	f002 fdc0 	bl	80067e8 <HAL_TIM_ConfigClockSource>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003c6c:	f000 f9d0 	bl	8004010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c70:	003b      	movs	r3, r7
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c76:	003b      	movs	r3, r7
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c7c:	003a      	movs	r2, r7
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <MX_TIM2_Init+0xa0>)
 8003c80:	0011      	movs	r1, r2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f002 ffa4 	bl	8006bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c88:	1e03      	subs	r3, r0, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003c8c:	f000 f9c0 	bl	8004010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b006      	add	sp, #24
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000250 	.word	0x20000250
 8003c9c:	0000ffff 	.word	0x0000ffff

08003ca0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ca4:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003ca6:	4a15      	ldr	r2, [pc, #84]	; (8003cfc <MX_USART2_UART_Init+0x5c>)
 8003ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003cac:	22e1      	movs	r2, #225	; 0xe1
 8003cae:	0252      	lsls	r2, r2, #9
 8003cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003cc6:	220c      	movs	r2, #12
 8003cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd0:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <MX_USART2_UART_Init+0x58>)
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f002 ffd1 	bl	8006c8c <HAL_UART_Init>
 8003cea:	1e03      	subs	r3, r0, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003cee:	f000 f98f 	bl	8004010 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000290 	.word	0x20000290
 8003cfc:	40004400 	.word	0x40004400

08003d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d06:	240c      	movs	r4, #12
 8003d08:	193b      	adds	r3, r7, r4
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	2314      	movs	r3, #20
 8003d0e:	001a      	movs	r2, r3
 8003d10:	2100      	movs	r1, #0
 8003d12:	f003 fda1 	bl	8007858 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d16:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <MX_GPIO_Init+0xc8>)
 8003d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1a:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <MX_GPIO_Init+0xc8>)
 8003d1c:	2104      	movs	r1, #4
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d22:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <MX_GPIO_Init+0xc8>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	2204      	movs	r2, #4
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2e:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <MX_GPIO_Init+0xc8>)
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <MX_GPIO_Init+0xc8>)
 8003d34:	2101      	movs	r1, #1
 8003d36:	430a      	orrs	r2, r1
 8003d38:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <MX_GPIO_Init+0xc8>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	2201      	movs	r2, #1
 8003d40:	4013      	ands	r3, r2
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d46:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <MX_GPIO_Init+0xc8>)
 8003d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <MX_GPIO_Init+0xc8>)
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <MX_GPIO_Init+0xc8>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	2202      	movs	r2, #2
 8003d58:	4013      	ands	r3, r2
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003d5e:	23a0      	movs	r3, #160	; 0xa0
 8003d60:	05db      	lsls	r3, r3, #23
 8003d62:	2201      	movs	r2, #1
 8003d64:	2110      	movs	r1, #16
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 fe38 	bl	80049dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003d6c:	193b      	adds	r3, r7, r4
 8003d6e:	2210      	movs	r2, #16
 8003d70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d72:	193b      	adds	r3, r7, r4
 8003d74:	2201      	movs	r2, #1
 8003d76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d78:	193b      	adds	r3, r7, r4
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7e:	193b      	adds	r3, r7, r4
 8003d80:	2200      	movs	r2, #0
 8003d82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003d84:	193a      	adds	r2, r7, r4
 8003d86:	23a0      	movs	r3, #160	; 0xa0
 8003d88:	05db      	lsls	r3, r3, #23
 8003d8a:	0011      	movs	r1, r2
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f000 fca7 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d92:	0021      	movs	r1, r4
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	22e0      	movs	r2, #224	; 0xe0
 8003d98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9a:	187b      	adds	r3, r7, r1
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	2203      	movs	r2, #3
 8003daa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db2:	187a      	adds	r2, r7, r1
 8003db4:	23a0      	movs	r3, #160	; 0xa0
 8003db6:	05db      	lsls	r3, r3, #23
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 fc90 	bl	80046e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b009      	add	sp, #36	; 0x24
 8003dc6:	bd90      	pop	{r4, r7, pc}
 8003dc8:	40021000 	.word	0x40021000

08003dcc <stream_sensor_data_normal_mode>:

/* USER CODE BEGIN 4 */
int8_t stream_sensor_data_normal_mode(struct bme280_dev *dev)
{
 8003dcc:	b5b0      	push	{r4, r5, r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t settings_sel;
	struct bme280_data comp_data;

	/* Recommended mode of operation: Indoor navigation */
	dev->settings.osr_h = BME280_OVERSAMPLING_1X;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2242      	movs	r2, #66	; 0x42
 8003dd8:	2101      	movs	r1, #1
 8003dda:	5499      	strb	r1, [r3, r2]
	dev->settings.osr_p = BME280_OVERSAMPLING_16X;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2240      	movs	r2, #64	; 0x40
 8003de0:	2105      	movs	r1, #5
 8003de2:	5499      	strb	r1, [r3, r2]
	dev->settings.osr_t = BME280_OVERSAMPLING_2X;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2241      	movs	r2, #65	; 0x41
 8003de8:	2102      	movs	r1, #2
 8003dea:	5499      	strb	r1, [r3, r2]
	dev->settings.filter = BME280_FILTER_COEFF_16;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2243      	movs	r2, #67	; 0x43
 8003df0:	2104      	movs	r1, #4
 8003df2:	5499      	strb	r1, [r3, r2]
	dev->settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2244      	movs	r2, #68	; 0x44
 8003df8:	2101      	movs	r1, #1
 8003dfa:	5499      	strb	r1, [r3, r2]

	settings_sel = BME280_OSR_PRESS_SEL;
 8003dfc:	2027      	movs	r0, #39	; 0x27
 8003dfe:	183b      	adds	r3, r7, r0
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_OSR_TEMP_SEL;
 8003e04:	183b      	adds	r3, r7, r0
 8003e06:	183a      	adds	r2, r7, r0
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_OSR_HUM_SEL;
 8003e10:	183b      	adds	r3, r7, r0
 8003e12:	183a      	adds	r2, r7, r0
 8003e14:	7812      	ldrb	r2, [r2, #0]
 8003e16:	2104      	movs	r1, #4
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_STANDBY_SEL;
 8003e1c:	183b      	adds	r3, r7, r0
 8003e1e:	183a      	adds	r2, r7, r0
 8003e20:	7812      	ldrb	r2, [r2, #0]
 8003e22:	2110      	movs	r1, #16
 8003e24:	430a      	orrs	r2, r1
 8003e26:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_FILTER_SEL;
 8003e28:	183b      	adds	r3, r7, r0
 8003e2a:	183a      	adds	r2, r7, r0
 8003e2c:	7812      	ldrb	r2, [r2, #0]
 8003e2e:	2108      	movs	r1, #8
 8003e30:	430a      	orrs	r2, r1
 8003e32:	701a      	strb	r2, [r3, #0]
	rslt = bme280_set_sensor_settings(settings_sel, dev);
 8003e34:	2526      	movs	r5, #38	; 0x26
 8003e36:	197c      	adds	r4, r7, r5
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	183b      	adds	r3, r7, r0
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7fe fbb2 	bl	80025aa <bme280_set_sensor_settings>
 8003e46:	0003      	movs	r3, r0
 8003e48:	7023      	strb	r3, [r4, #0]
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, dev);
 8003e4a:	197c      	adds	r4, r7, r5
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	0019      	movs	r1, r3
 8003e50:	2003      	movs	r0, #3
 8003e52:	f7fe fc15 	bl	8002680 <bme280_set_sensor_mode>
 8003e56:	0003      	movs	r3, r0
 8003e58:	7023      	strb	r3, [r4, #0]

	//printf("Temperature, Pressure, Humidity\r\n");
	while (1) {
		/* Delay while the sensor completes a measurement */
		dev->delay_us(70, dev->intf_ptr);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	0019      	movs	r1, r3
 8003e64:	2046      	movs	r0, #70	; 0x46
 8003e66:	4790      	blx	r2
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, dev);
 8003e68:	2326      	movs	r3, #38	; 0x26
 8003e6a:	18fc      	adds	r4, r7, r3
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	2508      	movs	r5, #8
 8003e70:	197b      	adds	r3, r7, r5
 8003e72:	0019      	movs	r1, r3
 8003e74:	2007      	movs	r0, #7
 8003e76:	f7fe fce6 	bl	8002846 <bme280_get_sensor_data>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	7023      	strb	r3, [r4, #0]
		print_sensor_data(&comp_data);
 8003e7e:	197b      	adds	r3, r7, r5
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 f801 	bl	8003e88 <print_sensor_data>
		dev->delay_us(70, dev->intf_ptr);
 8003e86:	e7e8      	b.n	8003e5a <stream_sensor_data_normal_mode+0x8e>

08003e88 <print_sensor_data>:

	return rslt;
}

void print_sensor_data(struct bme280_data *comp_data)
{
 8003e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af04      	add	r7, sp, #16
 8003e8e:	6078      	str	r0, [r7, #4]
#ifdef BME280_FLOAT_ENABLE
		sprintf((char*)tx_buffer, "%0.2f, %0.2f, %0.2f\r\n", comp_data->temperature, comp_data->pressure, comp_data->humidity);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689c      	ldr	r4, [r3, #8]
 8003e94:	68dd      	ldr	r5, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	6908      	ldr	r0, [r1, #16]
 8003ea0:	6949      	ldr	r1, [r1, #20]
 8003ea2:	4e0e      	ldr	r6, [pc, #56]	; (8003edc <print_sensor_data+0x54>)
 8003ea4:	46b4      	mov	ip, r6
 8003ea6:	4e0e      	ldr	r6, [pc, #56]	; (8003ee0 <print_sensor_data+0x58>)
 8003ea8:	9002      	str	r0, [sp, #8]
 8003eaa:	9103      	str	r1, [sp, #12]
 8003eac:	9200      	str	r2, [sp, #0]
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	0022      	movs	r2, r4
 8003eb2:	002b      	movs	r3, r5
 8003eb4:	4661      	mov	r1, ip
 8003eb6:	0030      	movs	r0, r6
 8003eb8:	f004 f944 	bl	8008144 <siprintf>
		tx_com(tx_buffer, strlen((char const*)tx_buffer));
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <print_sensor_data+0x58>)
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7fc f922 	bl	8000108 <strlen>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <print_sensor_data+0x58>)
 8003eca:	0011      	movs	r1, r2
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 f889 	bl	8003fe4 <tx_com>
#else
		sprintf((char*)tx_buffer, "%ld, %ld, %ld\r\n", comp_data->temperature, comp_data->pressure, comp_data->humidity);
		tx_com(tx_buffer, strlen((char const*)tx_buffer));
        //printf("%ld, %ld, %ld\r\n",comp_data->temperature, comp_data->pressure, comp_data->humidity);
#endif
}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b003      	add	sp, #12
 8003ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	0800a7f8 	.word	0x0800a7f8
 8003ee0:	20000318 	.word	0x20000318

08003ee4 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	HAL_Delay(period);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f000 faf3 	bl	80044dc <HAL_Delay>
}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b002      	add	sp, #8
 8003efc:	bd80      	pop	{r7, pc}

08003efe <user_spi_read>:

int8_t user_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003efe:	b5b0      	push	{r4, r5, r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	240f      	movs	r4, #15
 8003f0c:	193b      	adds	r3, r7, r4
 8003f0e:	1c02      	adds	r2, r0, #0
 8003f10:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8003f12:	2517      	movs	r5, #23
 8003f14:	197b      	adds	r3, r7, r5
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
    reg_addr |= 0x80;
 8003f1a:	193b      	adds	r3, r7, r4
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	4252      	negs	r2, r2
 8003f22:	4313      	orrs	r3, r2
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	193b      	adds	r3, r7, r4
 8003f28:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 8003f2a:	23a0      	movs	r3, #160	; 0xa0
 8003f2c:	05db      	lsls	r3, r3, #23
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2110      	movs	r1, #16
 8003f32:	0018      	movs	r0, r3
 8003f34:	f000 fd52 	bl	80049dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(intf_ptr, &reg_addr, 1, 1000);
 8003f38:	23fa      	movs	r3, #250	; 0xfa
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	1939      	adds	r1, r7, r4
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f001 fd93 	bl	8005a6c <HAL_SPI_Transmit>
    HAL_SPI_Receive(intf_ptr, reg_data, len, 1000);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	23fa      	movs	r3, #250	; 0xfa
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	6838      	ldr	r0, [r7, #0]
 8003f52:	f001 fee9 	bl	8005d28 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8003f56:	23a0      	movs	r3, #160	; 0xa0
 8003f58:	05db      	lsls	r3, r3, #23
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	2110      	movs	r1, #16
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f000 fd3c 	bl	80049dc <HAL_GPIO_WritePin>


    return rslt;
 8003f64:	197b      	adds	r3, r7, r5
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b25b      	sxtb	r3, r3
}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b006      	add	sp, #24
 8003f70:	bdb0      	pop	{r4, r5, r7, pc}

08003f72 <user_spi_write>:

int8_t user_spi_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003f72:	b5b0      	push	{r4, r5, r7, lr}
 8003f74:	b086      	sub	sp, #24
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	240f      	movs	r4, #15
 8003f80:	193b      	adds	r3, r7, r4
 8003f82:	1c02      	adds	r2, r0, #0
 8003f84:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8003f86:	2517      	movs	r5, #23
 8003f88:	197b      	adds	r3, r7, r5
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
    reg_addr &= 0x7F;
 8003f8e:	193b      	adds	r3, r7, r4
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	227f      	movs	r2, #127	; 0x7f
 8003f94:	4013      	ands	r3, r2
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	193b      	adds	r3, r7, r4
 8003f9a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 8003f9c:	23a0      	movs	r3, #160	; 0xa0
 8003f9e:	05db      	lsls	r3, r3, #23
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2110      	movs	r1, #16
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 fd19 	bl	80049dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(intf_ptr, &reg_addr, 1, 1000);
 8003faa:	23fa      	movs	r3, #250	; 0xfa
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	1939      	adds	r1, r7, r4
 8003fb0:	6838      	ldr	r0, [r7, #0]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f001 fd5a 	bl	8005a6c <HAL_SPI_Transmit>
    HAL_SPI_Receive(intf_ptr, reg_data, len, 1000);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	23fa      	movs	r3, #250	; 0xfa
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	6838      	ldr	r0, [r7, #0]
 8003fc4:	f001 feb0 	bl	8005d28 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8003fc8:	23a0      	movs	r3, #160	; 0xa0
 8003fca:	05db      	lsls	r3, r3, #23
 8003fcc:	2201      	movs	r2, #1
 8003fce:	2110      	movs	r1, #16
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f000 fd03 	bl	80049dc <HAL_GPIO_WritePin>
    return rslt;
 8003fd6:	197b      	adds	r3, r7, r5
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	b25b      	sxtb	r3, r3
}
 8003fdc:	0018      	movs	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b006      	add	sp, #24
 8003fe2:	bdb0      	pop	{r4, r5, r7, pc}

08003fe4 <tx_com>:

void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	000a      	movs	r2, r1
 8003fee:	1cbb      	adds	r3, r7, #2
 8003ff0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8003ff2:	23fa      	movs	r3, #250	; 0xfa
 8003ff4:	009c      	lsls	r4, r3, #2
 8003ff6:	1cbb      	adds	r3, r7, #2
 8003ff8:	881a      	ldrh	r2, [r3, #0]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4803      	ldr	r0, [pc, #12]	; (800400c <tx_com+0x28>)
 8003ffe:	0023      	movs	r3, r4
 8004000:	f002 fe98 	bl	8006d34 <HAL_UART_Transmit>
}
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	46bd      	mov	sp, r7
 8004008:	b003      	add	sp, #12
 800400a:	bd90      	pop	{r4, r7, pc}
 800400c:	20000290 	.word	0x20000290

08004010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004014:	b672      	cpsid	i
}
 8004016:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004018:	e7fe      	b.n	8004018 <Error_Handler+0x8>
	...

0800401c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <HAL_MspInit+0x24>)
 8004022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_MspInit+0x24>)
 8004026:	2101      	movs	r1, #1
 8004028:	430a      	orrs	r2, r1
 800402a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <HAL_MspInit+0x24>)
 800402e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_MspInit+0x24>)
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	0549      	lsls	r1, r1, #21
 8004036:	430a      	orrs	r2, r1
 8004038:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000

08004044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b08b      	sub	sp, #44	; 0x2c
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	2414      	movs	r4, #20
 800404e:	193b      	adds	r3, r7, r4
 8004050:	0018      	movs	r0, r3
 8004052:	2314      	movs	r3, #20
 8004054:	001a      	movs	r2, r3
 8004056:	2100      	movs	r1, #0
 8004058:	f003 fbfe 	bl	8007858 <memset>
  if(hspi->Instance==SPI2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a28      	ldr	r2, [pc, #160]	; (8004104 <HAL_SPI_MspInit+0xc0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d14a      	bne.n	80040fc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004066:	4b28      	ldr	r3, [pc, #160]	; (8004108 <HAL_SPI_MspInit+0xc4>)
 8004068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406a:	4b27      	ldr	r3, [pc, #156]	; (8004108 <HAL_SPI_MspInit+0xc4>)
 800406c:	2180      	movs	r1, #128	; 0x80
 800406e:	01c9      	lsls	r1, r1, #7
 8004070:	430a      	orrs	r2, r1
 8004072:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004074:	4b24      	ldr	r3, [pc, #144]	; (8004108 <HAL_SPI_MspInit+0xc4>)
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4b23      	ldr	r3, [pc, #140]	; (8004108 <HAL_SPI_MspInit+0xc4>)
 800407a:	2104      	movs	r1, #4
 800407c:	430a      	orrs	r2, r1
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004080:	4b21      	ldr	r3, [pc, #132]	; (8004108 <HAL_SPI_MspInit+0xc4>)
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	2204      	movs	r2, #4
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800408c:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <HAL_SPI_MspInit+0xc4>)
 800408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <HAL_SPI_MspInit+0xc4>)
 8004092:	2102      	movs	r1, #2
 8004094:	430a      	orrs	r2, r1
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_SPI_MspInit+0xc4>)
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	2202      	movs	r2, #2
 800409e:	4013      	ands	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	220c      	movs	r2, #12
 80040a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040aa:	193b      	adds	r3, r7, r4
 80040ac:	2202      	movs	r2, #2
 80040ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	193b      	adds	r3, r7, r4
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b6:	193b      	adds	r3, r7, r4
 80040b8:	2203      	movs	r2, #3
 80040ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI2;
 80040bc:	193b      	adds	r3, r7, r4
 80040be:	2202      	movs	r2, #2
 80040c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c2:	193b      	adds	r3, r7, r4
 80040c4:	4a11      	ldr	r2, [pc, #68]	; (800410c <HAL_SPI_MspInit+0xc8>)
 80040c6:	0019      	movs	r1, r3
 80040c8:	0010      	movs	r0, r2
 80040ca:	f000 fb09 	bl	80046e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040ce:	0021      	movs	r1, r4
 80040d0:	187b      	adds	r3, r7, r1
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	00d2      	lsls	r2, r2, #3
 80040d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d8:	187b      	adds	r3, r7, r1
 80040da:	2202      	movs	r2, #2
 80040dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040de:	187b      	adds	r3, r7, r1
 80040e0:	2200      	movs	r2, #0
 80040e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	2203      	movs	r2, #3
 80040e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	2205      	movs	r2, #5
 80040ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	4a07      	ldr	r2, [pc, #28]	; (8004110 <HAL_SPI_MspInit+0xcc>)
 80040f4:	0019      	movs	r1, r3
 80040f6:	0010      	movs	r0, r2
 80040f8:	f000 faf2 	bl	80046e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	b00b      	add	sp, #44	; 0x2c
 8004102:	bd90      	pop	{r4, r7, pc}
 8004104:	40003800 	.word	0x40003800
 8004108:	40021000 	.word	0x40021000
 800410c:	50000800 	.word	0x50000800
 8004110:	50000400 	.word	0x50000400

08004114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	05db      	lsls	r3, r3, #23
 8004124:	429a      	cmp	r2, r3
 8004126:	d10d      	bne.n	8004144 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004128:	4b08      	ldr	r3, [pc, #32]	; (800414c <HAL_TIM_Base_MspInit+0x38>)
 800412a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <HAL_TIM_Base_MspInit+0x38>)
 800412e:	2101      	movs	r1, #1
 8004130:	430a      	orrs	r2, r1
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004134:	2200      	movs	r2, #0
 8004136:	2100      	movs	r1, #0
 8004138:	200f      	movs	r0, #15
 800413a:	f000 fa9f 	bl	800467c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800413e:	200f      	movs	r0, #15
 8004140:	f000 fab1 	bl	80046a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000

08004150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	240c      	movs	r4, #12
 800415a:	193b      	adds	r3, r7, r4
 800415c:	0018      	movs	r0, r3
 800415e:	2314      	movs	r3, #20
 8004160:	001a      	movs	r2, r3
 8004162:	2100      	movs	r1, #0
 8004164:	f003 fb78 	bl	8007858 <memset>
  if(huart->Instance==USART2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_UART_MspInit+0x80>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d129      	bne.n	80041c6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004172:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_UART_MspInit+0x84>)
 8004174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_UART_MspInit+0x84>)
 8004178:	2180      	movs	r1, #128	; 0x80
 800417a:	0289      	lsls	r1, r1, #10
 800417c:	430a      	orrs	r2, r1
 800417e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <HAL_UART_MspInit+0x84>)
 8004182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <HAL_UART_MspInit+0x84>)
 8004186:	2101      	movs	r1, #1
 8004188:	430a      	orrs	r2, r1
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_UART_MspInit+0x84>)
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	2201      	movs	r2, #1
 8004192:	4013      	ands	r3, r2
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004198:	0021      	movs	r1, r4
 800419a:	187b      	adds	r3, r7, r1
 800419c:	220c      	movs	r2, #12
 800419e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	2202      	movs	r2, #2
 80041a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	2200      	movs	r2, #0
 80041aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	2203      	movs	r2, #3
 80041b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	2204      	movs	r2, #4
 80041b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b8:	187a      	adds	r2, r7, r1
 80041ba:	23a0      	movs	r3, #160	; 0xa0
 80041bc:	05db      	lsls	r3, r3, #23
 80041be:	0011      	movs	r1, r2
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 fa8d 	bl	80046e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b009      	add	sp, #36	; 0x24
 80041cc:	bd90      	pop	{r4, r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	40004400 	.word	0x40004400
 80041d4:	40021000 	.word	0x40021000

080041d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041dc:	e7fe      	b.n	80041dc <NMI_Handler+0x4>

080041de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041e2:	e7fe      	b.n	80041e2 <HardFault_Handler+0x4>

080041e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041fc:	f000 f952 	bl	80044a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800420c:	4b03      	ldr	r3, [pc, #12]	; (800421c <TIM2_IRQHandler+0x14>)
 800420e:	0018      	movs	r0, r3
 8004210:	f002 fa02 	bl	8006618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	20000250 	.word	0x20000250

08004220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  return 1;
 8004224:	2301      	movs	r3, #1
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <_kill>:

int _kill(int pid, int sig)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004236:	f003 fae5 	bl	8007804 <__errno>
 800423a:	0003      	movs	r3, r0
 800423c:	2216      	movs	r2, #22
 800423e:	601a      	str	r2, [r3, #0]
  return -1;
 8004240:	2301      	movs	r3, #1
 8004242:	425b      	negs	r3, r3
}
 8004244:	0018      	movs	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <_exit>:

void _exit (int status)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004254:	2301      	movs	r3, #1
 8004256:	425a      	negs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	0011      	movs	r1, r2
 800425c:	0018      	movs	r0, r3
 800425e:	f7ff ffe5 	bl	800422c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004262:	e7fe      	b.n	8004262 <_exit+0x16>

08004264 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e00a      	b.n	800428c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004276:	e000      	b.n	800427a <_read+0x16>
 8004278:	bf00      	nop
 800427a:	0001      	movs	r1, r0
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	60ba      	str	r2, [r7, #8]
 8004282:	b2ca      	uxtb	r2, r1
 8004284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	3301      	adds	r3, #1
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	dbf0      	blt.n	8004276 <_read+0x12>
  }

  return len;
 8004294:	687b      	ldr	r3, [r7, #4]
}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b006      	add	sp, #24
 800429c:	bd80      	pop	{r7, pc}

0800429e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	e009      	b.n	80042c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	60ba      	str	r2, [r7, #8]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	0018      	movs	r0, r3
 80042ba:	e000      	b.n	80042be <_write+0x20>
 80042bc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	3301      	adds	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	dbf1      	blt.n	80042b0 <_write+0x12>
  }
  return len;
 80042cc:	687b      	ldr	r3, [r7, #4]
}
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b006      	add	sp, #24
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <_close>:

int _close(int file)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042de:	2301      	movs	r3, #1
 80042e0:	425b      	negs	r3, r3
}
 80042e2:	0018      	movs	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b002      	add	sp, #8
 80042e8:	bd80      	pop	{r7, pc}

080042ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2280      	movs	r2, #128	; 0x80
 80042f8:	0192      	lsls	r2, r2, #6
 80042fa:	605a      	str	r2, [r3, #4]
  return 0;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b002      	add	sp, #8
 8004304:	bd80      	pop	{r7, pc}

08004306 <_isatty>:

int _isatty(int file)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800430e:	2301      	movs	r3, #1
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}

08004318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004324:	2300      	movs	r3, #0
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b004      	add	sp, #16
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <_sbrk+0x5c>)
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <_sbrk+0x60>)
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <_sbrk+0x64>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <_sbrk+0x64>)
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <_sbrk+0x68>)
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <_sbrk+0x64>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	18d3      	adds	r3, r2, r3
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	429a      	cmp	r2, r3
 800435e:	d207      	bcs.n	8004370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004360:	f003 fa50 	bl	8007804 <__errno>
 8004364:	0003      	movs	r3, r0
 8004366:	220c      	movs	r2, #12
 8004368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800436a:	2301      	movs	r3, #1
 800436c:	425b      	negs	r3, r3
 800436e:	e009      	b.n	8004384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004370:	4b08      	ldr	r3, [pc, #32]	; (8004394 <_sbrk+0x64>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <_sbrk+0x64>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	18d2      	adds	r2, r2, r3
 800437e:	4b05      	ldr	r3, [pc, #20]	; (8004394 <_sbrk+0x64>)
 8004380:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004382:	68fb      	ldr	r3, [r7, #12]
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b006      	add	sp, #24
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20005000 	.word	0x20005000
 8004390:	00000400 	.word	0x00000400
 8004394:	20000700 	.word	0x20000700
 8004398:	20000718 	.word	0x20000718

0800439c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043a0:	46c0      	nop			; (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80043a8:	480d      	ldr	r0, [pc, #52]	; (80043e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80043aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043ac:	f7ff fff6 	bl	800439c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043b0:	480c      	ldr	r0, [pc, #48]	; (80043e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80043b2:	490d      	ldr	r1, [pc, #52]	; (80043e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043b4:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <LoopForever+0xe>)
  movs r3, #0
 80043b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043b8:	e002      	b.n	80043c0 <LoopCopyDataInit>

080043ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043be:	3304      	adds	r3, #4

080043c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043c4:	d3f9      	bcc.n	80043ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043c6:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043c8:	4c0a      	ldr	r4, [pc, #40]	; (80043f4 <LoopForever+0x16>)
  movs r3, #0
 80043ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043cc:	e001      	b.n	80043d2 <LoopFillZerobss>

080043ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043d0:	3204      	adds	r2, #4

080043d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043d4:	d3fb      	bcc.n	80043ce <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80043d6:	f003 fa1b 	bl	8007810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043da:	f7ff fad5 	bl	8003988 <main>

080043de <LoopForever>:

LoopForever:
    b LoopForever
 80043de:	e7fe      	b.n	80043de <LoopForever>
   ldr   r0, =_estack
 80043e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80043e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80043ec:	0800ace4 	.word	0x0800ace4
  ldr r2, =_sbss
 80043f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80043f4:	20000718 	.word	0x20000718

080043f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043f8:	e7fe      	b.n	80043f8 <ADC1_COMP_IRQHandler>
	...

080043fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004402:	1dfb      	adds	r3, r7, #7
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_Init+0x3c>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <HAL_Init+0x3c>)
 800440e:	2140      	movs	r1, #64	; 0x40
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004414:	2003      	movs	r0, #3
 8004416:	f000 f811 	bl	800443c <HAL_InitTick>
 800441a:	1e03      	subs	r3, r0, #0
 800441c:	d003      	beq.n	8004426 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	2201      	movs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	e001      	b.n	800442a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004426:	f7ff fdf9 	bl	800401c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800442a:	1dfb      	adds	r3, r7, #7
 800442c:	781b      	ldrb	r3, [r3, #0]
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b002      	add	sp, #8
 8004434:	bd80      	pop	{r7, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	40022000 	.word	0x40022000

0800443c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004444:	4b14      	ldr	r3, [pc, #80]	; (8004498 <HAL_InitTick+0x5c>)
 8004446:	681c      	ldr	r4, [r3, #0]
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <HAL_InitTick+0x60>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	0019      	movs	r1, r3
 800444e:	23fa      	movs	r3, #250	; 0xfa
 8004450:	0098      	lsls	r0, r3, #2
 8004452:	f7fb fe75 	bl	8000140 <__udivsi3>
 8004456:	0003      	movs	r3, r0
 8004458:	0019      	movs	r1, r3
 800445a:	0020      	movs	r0, r4
 800445c:	f7fb fe70 	bl	8000140 <__udivsi3>
 8004460:	0003      	movs	r3, r0
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f92f 	bl	80046c6 <HAL_SYSTICK_Config>
 8004468:	1e03      	subs	r3, r0, #0
 800446a:	d001      	beq.n	8004470 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e00f      	b.n	8004490 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b03      	cmp	r3, #3
 8004474:	d80b      	bhi.n	800448e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	2301      	movs	r3, #1
 800447a:	425b      	negs	r3, r3
 800447c:	2200      	movs	r2, #0
 800447e:	0018      	movs	r0, r3
 8004480:	f000 f8fc 	bl	800467c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_InitTick+0x64>)
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	e000      	b.n	8004490 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
}
 8004490:	0018      	movs	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	b003      	add	sp, #12
 8004496:	bd90      	pop	{r4, r7, pc}
 8004498:	20000000 	.word	0x20000000
 800449c:	20000008 	.word	0x20000008
 80044a0:	20000004 	.word	0x20000004

080044a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_IncTick+0x1c>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	001a      	movs	r2, r3
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_IncTick+0x20>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	18d2      	adds	r2, r2, r3
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_IncTick+0x20>)
 80044b6:	601a      	str	r2, [r3, #0]
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	20000008 	.word	0x20000008
 80044c4:	20000704 	.word	0x20000704

080044c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  return uwTick;
 80044cc:	4b02      	ldr	r3, [pc, #8]	; (80044d8 <HAL_GetTick+0x10>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	20000704 	.word	0x20000704

080044dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044e4:	f7ff fff0 	bl	80044c8 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3301      	adds	r3, #1
 80044f4:	d005      	beq.n	8004502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <HAL_Delay+0x44>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	001a      	movs	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	f7ff ffe0 	bl	80044c8 <HAL_GetTick>
 8004508:	0002      	movs	r2, r0
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	429a      	cmp	r2, r3
 8004512:	d8f7      	bhi.n	8004504 <HAL_Delay+0x28>
  {
  }
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b004      	add	sp, #16
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	20000008 	.word	0x20000008

08004524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	0002      	movs	r2, r0
 800452c:	1dfb      	adds	r3, r7, #7
 800452e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004530:	1dfb      	adds	r3, r7, #7
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b7f      	cmp	r3, #127	; 0x7f
 8004536:	d809      	bhi.n	800454c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004538:	1dfb      	adds	r3, r7, #7
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	001a      	movs	r2, r3
 800453e:	231f      	movs	r3, #31
 8004540:	401a      	ands	r2, r3
 8004542:	4b04      	ldr	r3, [pc, #16]	; (8004554 <__NVIC_EnableIRQ+0x30>)
 8004544:	2101      	movs	r1, #1
 8004546:	4091      	lsls	r1, r2
 8004548:	000a      	movs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]
  }
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b002      	add	sp, #8
 8004552:	bd80      	pop	{r7, pc}
 8004554:	e000e100 	.word	0xe000e100

08004558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	0002      	movs	r2, r0
 8004560:	6039      	str	r1, [r7, #0]
 8004562:	1dfb      	adds	r3, r7, #7
 8004564:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004566:	1dfb      	adds	r3, r7, #7
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b7f      	cmp	r3, #127	; 0x7f
 800456c:	d828      	bhi.n	80045c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800456e:	4a2f      	ldr	r2, [pc, #188]	; (800462c <__NVIC_SetPriority+0xd4>)
 8004570:	1dfb      	adds	r3, r7, #7
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b25b      	sxtb	r3, r3
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	33c0      	adds	r3, #192	; 0xc0
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	589b      	ldr	r3, [r3, r2]
 800457e:	1dfa      	adds	r2, r7, #7
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	0011      	movs	r1, r2
 8004584:	2203      	movs	r2, #3
 8004586:	400a      	ands	r2, r1
 8004588:	00d2      	lsls	r2, r2, #3
 800458a:	21ff      	movs	r1, #255	; 0xff
 800458c:	4091      	lsls	r1, r2
 800458e:	000a      	movs	r2, r1
 8004590:	43d2      	mvns	r2, r2
 8004592:	401a      	ands	r2, r3
 8004594:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	019b      	lsls	r3, r3, #6
 800459a:	22ff      	movs	r2, #255	; 0xff
 800459c:	401a      	ands	r2, r3
 800459e:	1dfb      	adds	r3, r7, #7
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	0018      	movs	r0, r3
 80045a4:	2303      	movs	r3, #3
 80045a6:	4003      	ands	r3, r0
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045ac:	481f      	ldr	r0, [pc, #124]	; (800462c <__NVIC_SetPriority+0xd4>)
 80045ae:	1dfb      	adds	r3, r7, #7
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b25b      	sxtb	r3, r3
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	430a      	orrs	r2, r1
 80045b8:	33c0      	adds	r3, #192	; 0xc0
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80045be:	e031      	b.n	8004624 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045c0:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <__NVIC_SetPriority+0xd8>)
 80045c2:	1dfb      	adds	r3, r7, #7
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	0019      	movs	r1, r3
 80045c8:	230f      	movs	r3, #15
 80045ca:	400b      	ands	r3, r1
 80045cc:	3b08      	subs	r3, #8
 80045ce:	089b      	lsrs	r3, r3, #2
 80045d0:	3306      	adds	r3, #6
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	18d3      	adds	r3, r2, r3
 80045d6:	3304      	adds	r3, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	1dfa      	adds	r2, r7, #7
 80045dc:	7812      	ldrb	r2, [r2, #0]
 80045de:	0011      	movs	r1, r2
 80045e0:	2203      	movs	r2, #3
 80045e2:	400a      	ands	r2, r1
 80045e4:	00d2      	lsls	r2, r2, #3
 80045e6:	21ff      	movs	r1, #255	; 0xff
 80045e8:	4091      	lsls	r1, r2
 80045ea:	000a      	movs	r2, r1
 80045ec:	43d2      	mvns	r2, r2
 80045ee:	401a      	ands	r2, r3
 80045f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	22ff      	movs	r2, #255	; 0xff
 80045f8:	401a      	ands	r2, r3
 80045fa:	1dfb      	adds	r3, r7, #7
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	0018      	movs	r0, r3
 8004600:	2303      	movs	r3, #3
 8004602:	4003      	ands	r3, r0
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004608:	4809      	ldr	r0, [pc, #36]	; (8004630 <__NVIC_SetPriority+0xd8>)
 800460a:	1dfb      	adds	r3, r7, #7
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	001c      	movs	r4, r3
 8004610:	230f      	movs	r3, #15
 8004612:	4023      	ands	r3, r4
 8004614:	3b08      	subs	r3, #8
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	430a      	orrs	r2, r1
 800461a:	3306      	adds	r3, #6
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	18c3      	adds	r3, r0, r3
 8004620:	3304      	adds	r3, #4
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	b003      	add	sp, #12
 800462a:	bd90      	pop	{r4, r7, pc}
 800462c:	e000e100 	.word	0xe000e100
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	1e5a      	subs	r2, r3, #1
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	045b      	lsls	r3, r3, #17
 8004644:	429a      	cmp	r2, r3
 8004646:	d301      	bcc.n	800464c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004648:	2301      	movs	r3, #1
 800464a:	e010      	b.n	800466e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <SysTick_Config+0x44>)
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	3a01      	subs	r2, #1
 8004652:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004654:	2301      	movs	r3, #1
 8004656:	425b      	negs	r3, r3
 8004658:	2103      	movs	r1, #3
 800465a:	0018      	movs	r0, r3
 800465c:	f7ff ff7c 	bl	8004558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <SysTick_Config+0x44>)
 8004662:	2200      	movs	r2, #0
 8004664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <SysTick_Config+0x44>)
 8004668:	2207      	movs	r2, #7
 800466a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800466c:	2300      	movs	r3, #0
}
 800466e:	0018      	movs	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	b002      	add	sp, #8
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	e000e010 	.word	0xe000e010

0800467c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	210f      	movs	r1, #15
 8004688:	187b      	adds	r3, r7, r1
 800468a:	1c02      	adds	r2, r0, #0
 800468c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	187b      	adds	r3, r7, r1
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	b25b      	sxtb	r3, r3
 8004696:	0011      	movs	r1, r2
 8004698:	0018      	movs	r0, r3
 800469a:	f7ff ff5d 	bl	8004558 <__NVIC_SetPriority>
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b004      	add	sp, #16
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	0002      	movs	r2, r0
 80046ae:	1dfb      	adds	r3, r7, #7
 80046b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046b2:	1dfb      	adds	r3, r7, #7
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	b25b      	sxtb	r3, r3
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7ff ff33 	bl	8004524 <__NVIC_EnableIRQ>
}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b002      	add	sp, #8
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff ffaf 	bl	8004634 <SysTick_Config>
 80046d6:	0003      	movs	r3, r0
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80046f6:	e155      	b.n	80049a4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2101      	movs	r1, #1
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4091      	lsls	r1, r2
 8004702:	000a      	movs	r2, r1
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d100      	bne.n	8004710 <HAL_GPIO_Init+0x30>
 800470e:	e146      	b.n	800499e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2203      	movs	r2, #3
 8004716:	4013      	ands	r3, r2
 8004718:	2b01      	cmp	r3, #1
 800471a:	d005      	beq.n	8004728 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2203      	movs	r2, #3
 8004722:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004724:	2b02      	cmp	r3, #2
 8004726:	d130      	bne.n	800478a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	2203      	movs	r2, #3
 8004734:	409a      	lsls	r2, r3
 8004736:	0013      	movs	r3, r2
 8004738:	43da      	mvns	r2, r3
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4013      	ands	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	409a      	lsls	r2, r3
 800474a:	0013      	movs	r3, r2
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800475e:	2201      	movs	r2, #1
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	409a      	lsls	r2, r3
 8004764:	0013      	movs	r3, r2
 8004766:	43da      	mvns	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4013      	ands	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	2201      	movs	r2, #1
 8004776:	401a      	ands	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	409a      	lsls	r2, r3
 800477c:	0013      	movs	r3, r2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2203      	movs	r2, #3
 8004790:	4013      	ands	r3, r2
 8004792:	2b03      	cmp	r3, #3
 8004794:	d017      	beq.n	80047c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	2203      	movs	r2, #3
 80047a2:	409a      	lsls	r2, r3
 80047a4:	0013      	movs	r3, r2
 80047a6:	43da      	mvns	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4013      	ands	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	409a      	lsls	r2, r3
 80047b8:	0013      	movs	r3, r2
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2203      	movs	r2, #3
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d123      	bne.n	800481a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	08da      	lsrs	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3208      	adds	r2, #8
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	58d3      	ldr	r3, [r2, r3]
 80047de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2207      	movs	r2, #7
 80047e4:	4013      	ands	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	220f      	movs	r2, #15
 80047ea:	409a      	lsls	r2, r3
 80047ec:	0013      	movs	r3, r2
 80047ee:	43da      	mvns	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4013      	ands	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2107      	movs	r1, #7
 80047fe:	400b      	ands	r3, r1
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	409a      	lsls	r2, r3
 8004804:	0013      	movs	r3, r2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	08da      	lsrs	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3208      	adds	r2, #8
 8004814:	0092      	lsls	r2, r2, #2
 8004816:	6939      	ldr	r1, [r7, #16]
 8004818:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	2203      	movs	r2, #3
 8004826:	409a      	lsls	r2, r3
 8004828:	0013      	movs	r3, r2
 800482a:	43da      	mvns	r2, r3
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2203      	movs	r2, #3
 8004838:	401a      	ands	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	409a      	lsls	r2, r3
 8004840:	0013      	movs	r3, r2
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	23c0      	movs	r3, #192	; 0xc0
 8004854:	029b      	lsls	r3, r3, #10
 8004856:	4013      	ands	r3, r2
 8004858:	d100      	bne.n	800485c <HAL_GPIO_Init+0x17c>
 800485a:	e0a0      	b.n	800499e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485c:	4b57      	ldr	r3, [pc, #348]	; (80049bc <HAL_GPIO_Init+0x2dc>)
 800485e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004860:	4b56      	ldr	r3, [pc, #344]	; (80049bc <HAL_GPIO_Init+0x2dc>)
 8004862:	2101      	movs	r1, #1
 8004864:	430a      	orrs	r2, r1
 8004866:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004868:	4a55      	ldr	r2, [pc, #340]	; (80049c0 <HAL_GPIO_Init+0x2e0>)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	3302      	adds	r3, #2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	589b      	ldr	r3, [r3, r2]
 8004874:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2203      	movs	r2, #3
 800487a:	4013      	ands	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	220f      	movs	r2, #15
 8004880:	409a      	lsls	r2, r3
 8004882:	0013      	movs	r3, r2
 8004884:	43da      	mvns	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	23a0      	movs	r3, #160	; 0xa0
 8004890:	05db      	lsls	r3, r3, #23
 8004892:	429a      	cmp	r2, r3
 8004894:	d01f      	beq.n	80048d6 <HAL_GPIO_Init+0x1f6>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a4a      	ldr	r2, [pc, #296]	; (80049c4 <HAL_GPIO_Init+0x2e4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d019      	beq.n	80048d2 <HAL_GPIO_Init+0x1f2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a49      	ldr	r2, [pc, #292]	; (80049c8 <HAL_GPIO_Init+0x2e8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_GPIO_Init+0x1ee>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a48      	ldr	r2, [pc, #288]	; (80049cc <HAL_GPIO_Init+0x2ec>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00d      	beq.n	80048ca <HAL_GPIO_Init+0x1ea>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a47      	ldr	r2, [pc, #284]	; (80049d0 <HAL_GPIO_Init+0x2f0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <HAL_GPIO_Init+0x1e6>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a46      	ldr	r2, [pc, #280]	; (80049d4 <HAL_GPIO_Init+0x2f4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_GPIO_Init+0x1e2>
 80048be:	2305      	movs	r3, #5
 80048c0:	e00a      	b.n	80048d8 <HAL_GPIO_Init+0x1f8>
 80048c2:	2306      	movs	r3, #6
 80048c4:	e008      	b.n	80048d8 <HAL_GPIO_Init+0x1f8>
 80048c6:	2304      	movs	r3, #4
 80048c8:	e006      	b.n	80048d8 <HAL_GPIO_Init+0x1f8>
 80048ca:	2303      	movs	r3, #3
 80048cc:	e004      	b.n	80048d8 <HAL_GPIO_Init+0x1f8>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e002      	b.n	80048d8 <HAL_GPIO_Init+0x1f8>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_GPIO_Init+0x1f8>
 80048d6:	2300      	movs	r3, #0
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	2103      	movs	r1, #3
 80048dc:	400a      	ands	r2, r1
 80048de:	0092      	lsls	r2, r2, #2
 80048e0:	4093      	lsls	r3, r2
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e8:	4935      	ldr	r1, [pc, #212]	; (80049c0 <HAL_GPIO_Init+0x2e0>)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	3302      	adds	r3, #2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048f6:	4b38      	ldr	r3, [pc, #224]	; (80049d8 <HAL_GPIO_Init+0x2f8>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43da      	mvns	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4013      	ands	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	035b      	lsls	r3, r3, #13
 800490e:	4013      	ands	r3, r2
 8004910:	d003      	beq.n	800491a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800491a:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <HAL_GPIO_Init+0x2f8>)
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004920:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <HAL_GPIO_Init+0x2f8>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	43da      	mvns	r2, r3
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4013      	ands	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	039b      	lsls	r3, r3, #14
 8004938:	4013      	ands	r3, r2
 800493a:	d003      	beq.n	8004944 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004944:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <HAL_GPIO_Init+0x2f8>)
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800494a:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <HAL_GPIO_Init+0x2f8>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	43da      	mvns	r2, r3
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4013      	ands	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	029b      	lsls	r3, r3, #10
 8004962:	4013      	ands	r3, r2
 8004964:	d003      	beq.n	800496e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800496e:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <HAL_GPIO_Init+0x2f8>)
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004974:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <HAL_GPIO_Init+0x2f8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	43da      	mvns	r2, r3
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4013      	ands	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	025b      	lsls	r3, r3, #9
 800498c:	4013      	ands	r3, r2
 800498e:	d003      	beq.n	8004998 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <HAL_GPIO_Init+0x2f8>)
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	3301      	adds	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	40da      	lsrs	r2, r3
 80049ac:	1e13      	subs	r3, r2, #0
 80049ae:	d000      	beq.n	80049b2 <HAL_GPIO_Init+0x2d2>
 80049b0:	e6a2      	b.n	80046f8 <HAL_GPIO_Init+0x18>
  }
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b006      	add	sp, #24
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40010000 	.word	0x40010000
 80049c4:	50000400 	.word	0x50000400
 80049c8:	50000800 	.word	0x50000800
 80049cc:	50000c00 	.word	0x50000c00
 80049d0:	50001000 	.word	0x50001000
 80049d4:	50001c00 	.word	0x50001c00
 80049d8:	40010400 	.word	0x40010400

080049dc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	0008      	movs	r0, r1
 80049e6:	0011      	movs	r1, r2
 80049e8:	1cbb      	adds	r3, r7, #2
 80049ea:	1c02      	adds	r2, r0, #0
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	1c7b      	adds	r3, r7, #1
 80049f0:	1c0a      	adds	r2, r1, #0
 80049f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049f4:	1c7b      	adds	r3, r7, #1
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049fc:	1cbb      	adds	r3, r7, #2
 80049fe:	881a      	ldrh	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004a04:	e003      	b.n	8004a0e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004a06:	1cbb      	adds	r3, r7, #2
 8004a08:	881a      	ldrh	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b002      	add	sp, #8
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a18:	b5b0      	push	{r4, r5, r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f000 fbbf 	bl	80051aa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2c:	4bc9      	ldr	r3, [pc, #804]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	220c      	movs	r2, #12
 8004a32:	4013      	ands	r3, r2
 8004a34:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a36:	4bc7      	ldr	r3, [pc, #796]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	025b      	lsls	r3, r3, #9
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2201      	movs	r2, #1
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d100      	bne.n	8004a4e <HAL_RCC_OscConfig+0x36>
 8004a4c:	e07e      	b.n	8004b4c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d007      	beq.n	8004a64 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d112      	bne.n	8004a80 <HAL_RCC_OscConfig+0x68>
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	025b      	lsls	r3, r3, #9
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d10d      	bne.n	8004a80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	4bbb      	ldr	r3, [pc, #748]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	029b      	lsls	r3, r3, #10
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d100      	bne.n	8004a72 <HAL_RCC_OscConfig+0x5a>
 8004a70:	e06b      	b.n	8004b4a <HAL_RCC_OscConfig+0x132>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d167      	bne.n	8004b4a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f000 fb95 	bl	80051aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	025b      	lsls	r3, r3, #9
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d107      	bne.n	8004a9c <HAL_RCC_OscConfig+0x84>
 8004a8c:	4bb1      	ldr	r3, [pc, #708]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4bb0      	ldr	r3, [pc, #704]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004a92:	2180      	movs	r1, #128	; 0x80
 8004a94:	0249      	lsls	r1, r1, #9
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e027      	b.n	8004aec <HAL_RCC_OscConfig+0xd4>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	23a0      	movs	r3, #160	; 0xa0
 8004aa2:	02db      	lsls	r3, r3, #11
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d10e      	bne.n	8004ac6 <HAL_RCC_OscConfig+0xae>
 8004aa8:	4baa      	ldr	r3, [pc, #680]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4ba9      	ldr	r3, [pc, #676]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	02c9      	lsls	r1, r1, #11
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	4ba7      	ldr	r3, [pc, #668]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4ba6      	ldr	r3, [pc, #664]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004abc:	2180      	movs	r1, #128	; 0x80
 8004abe:	0249      	lsls	r1, r1, #9
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e012      	b.n	8004aec <HAL_RCC_OscConfig+0xd4>
 8004ac6:	4ba3      	ldr	r3, [pc, #652]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4ba2      	ldr	r3, [pc, #648]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004acc:	49a2      	ldr	r1, [pc, #648]	; (8004d58 <HAL_RCC_OscConfig+0x340>)
 8004ace:	400a      	ands	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	4ba0      	ldr	r3, [pc, #640]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	025b      	lsls	r3, r3, #9
 8004ada:	4013      	ands	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4b9c      	ldr	r3, [pc, #624]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4b9b      	ldr	r3, [pc, #620]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004ae6:	499d      	ldr	r1, [pc, #628]	; (8004d5c <HAL_RCC_OscConfig+0x344>)
 8004ae8:	400a      	ands	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d015      	beq.n	8004b20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7ff fce8 	bl	80044c8 <HAL_GetTick>
 8004af8:	0003      	movs	r3, r0
 8004afa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004afc:	e009      	b.n	8004b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004afe:	f7ff fce3 	bl	80044c8 <HAL_GetTick>
 8004b02:	0002      	movs	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b64      	cmp	r3, #100	; 0x64
 8004b0a:	d902      	bls.n	8004b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	f000 fb4c 	bl	80051aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b12:	4b90      	ldr	r3, [pc, #576]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	029b      	lsls	r3, r3, #10
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d0ef      	beq.n	8004afe <HAL_RCC_OscConfig+0xe6>
 8004b1e:	e015      	b.n	8004b4c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7ff fcd2 	bl	80044c8 <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b2a:	f7ff fccd 	bl	80044c8 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b64      	cmp	r3, #100	; 0x64
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e336      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b3c:	4b85      	ldr	r3, [pc, #532]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	029b      	lsls	r3, r3, #10
 8004b44:	4013      	ands	r3, r2
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCC_OscConfig+0x112>
 8004b48:	e000      	b.n	8004b4c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2202      	movs	r2, #2
 8004b52:	4013      	ands	r3, r2
 8004b54:	d100      	bne.n	8004b58 <HAL_RCC_OscConfig+0x140>
 8004b56:	e099      	b.n	8004c8c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	2220      	movs	r2, #32
 8004b62:	4013      	ands	r3, r2
 8004b64:	d009      	beq.n	8004b7a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004b66:	4b7b      	ldr	r3, [pc, #492]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b7a      	ldr	r3, [pc, #488]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004b6c:	2120      	movs	r1, #32
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	2220      	movs	r2, #32
 8004b76:	4393      	bics	r3, r2
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	d13e      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1ec>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d13b      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004b8c:	4b71      	ldr	r3, [pc, #452]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2204      	movs	r2, #4
 8004b92:	4013      	ands	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x188>
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e304      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba0:	4b6c      	ldr	r3, [pc, #432]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a6e      	ldr	r2, [pc, #440]	; (8004d60 <HAL_RCC_OscConfig+0x348>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	4b68      	ldr	r3, [pc, #416]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004bb6:	4b67      	ldr	r3, [pc, #412]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2209      	movs	r2, #9
 8004bbc:	4393      	bics	r3, r2
 8004bbe:	0019      	movs	r1, r3
 8004bc0:	4b64      	ldr	r3, [pc, #400]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bc8:	f000 fc42 	bl	8005450 <HAL_RCC_GetSysClockFreq>
 8004bcc:	0001      	movs	r1, r0
 8004bce:	4b61      	ldr	r3, [pc, #388]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	220f      	movs	r2, #15
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	4a62      	ldr	r2, [pc, #392]	; (8004d64 <HAL_RCC_OscConfig+0x34c>)
 8004bda:	5cd3      	ldrb	r3, [r2, r3]
 8004bdc:	000a      	movs	r2, r1
 8004bde:	40da      	lsrs	r2, r3
 8004be0:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <HAL_RCC_OscConfig+0x350>)
 8004be2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004be4:	4b61      	ldr	r3, [pc, #388]	; (8004d6c <HAL_RCC_OscConfig+0x354>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2513      	movs	r5, #19
 8004bea:	197c      	adds	r4, r7, r5
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7ff fc25 	bl	800443c <HAL_InitTick>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004bf6:	197b      	adds	r3, r7, r5
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d046      	beq.n	8004c8c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004bfe:	197b      	adds	r3, r7, r5
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	e2d2      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d027      	beq.n	8004c5a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c0a:	4b52      	ldr	r3, [pc, #328]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2209      	movs	r2, #9
 8004c10:	4393      	bics	r3, r2
 8004c12:	0019      	movs	r1, r3
 8004c14:	4b4f      	ldr	r3, [pc, #316]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7ff fc54 	bl	80044c8 <HAL_GetTick>
 8004c20:	0003      	movs	r3, r0
 8004c22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c26:	f7ff fc4f 	bl	80044c8 <HAL_GetTick>
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e2b8      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c38:	4b46      	ldr	r3, [pc, #280]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d0f1      	beq.n	8004c26 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c42:	4b44      	ldr	r3, [pc, #272]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4a46      	ldr	r2, [pc, #280]	; (8004d60 <HAL_RCC_OscConfig+0x348>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	021a      	lsls	r2, r3, #8
 8004c52:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
 8004c58:	e018      	b.n	8004c8c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c5a:	4b3e      	ldr	r3, [pc, #248]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004c60:	2101      	movs	r1, #1
 8004c62:	438a      	bics	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c66:	f7ff fc2f 	bl	80044c8 <HAL_GetTick>
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c70:	f7ff fc2a 	bl	80044c8 <HAL_GetTick>
 8004c74:	0002      	movs	r2, r0
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e293      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c82:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2204      	movs	r2, #4
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d1f1      	bne.n	8004c70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2210      	movs	r2, #16
 8004c92:	4013      	ands	r3, r2
 8004c94:	d100      	bne.n	8004c98 <HAL_RCC_OscConfig+0x280>
 8004c96:	e0a2      	b.n	8004dde <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d140      	bne.n	8004d20 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d005      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x29e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e279      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4a2d      	ldr	r2, [pc, #180]	; (8004d70 <HAL_RCC_OscConfig+0x358>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cc4:	4b23      	ldr	r3, [pc, #140]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cca:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	0a19      	lsrs	r1, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	061a      	lsls	r2, r3, #24
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	0b5b      	lsrs	r3, r3, #13
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	2280      	movs	r2, #128	; 0x80
 8004ce8:	0212      	lsls	r2, r2, #8
 8004cea:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004cec:	4b19      	ldr	r3, [pc, #100]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	210f      	movs	r1, #15
 8004cf4:	400b      	ands	r3, r1
 8004cf6:	491b      	ldr	r1, [pc, #108]	; (8004d64 <HAL_RCC_OscConfig+0x34c>)
 8004cf8:	5ccb      	ldrb	r3, [r1, r3]
 8004cfa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCC_OscConfig+0x350>)
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004d00:	4b1a      	ldr	r3, [pc, #104]	; (8004d6c <HAL_RCC_OscConfig+0x354>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2513      	movs	r5, #19
 8004d06:	197c      	adds	r4, r7, r5
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7ff fb97 	bl	800443c <HAL_InitTick>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004d12:	197b      	adds	r3, r7, r5
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d061      	beq.n	8004dde <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004d1a:	197b      	adds	r3, r7, r5
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	e244      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d040      	beq.n	8004daa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_OscConfig+0x33c>)
 8004d2e:	2180      	movs	r1, #128	; 0x80
 8004d30:	0049      	lsls	r1, r1, #1
 8004d32:	430a      	orrs	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d36:	f7ff fbc7 	bl	80044c8 <HAL_GetTick>
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d3e:	e019      	b.n	8004d74 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d40:	f7ff fbc2 	bl	80044c8 <HAL_GetTick>
 8004d44:	0002      	movs	r2, r0
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d912      	bls.n	8004d74 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e22b      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	40021000 	.word	0x40021000
 8004d58:	fffeffff 	.word	0xfffeffff
 8004d5c:	fffbffff 	.word	0xfffbffff
 8004d60:	ffffe0ff 	.word	0xffffe0ff
 8004d64:	0800a890 	.word	0x0800a890
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	20000004 	.word	0x20000004
 8004d70:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d74:	4bca      	ldr	r3, [pc, #808]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d0df      	beq.n	8004d40 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d80:	4bc7      	ldr	r3, [pc, #796]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4ac7      	ldr	r2, [pc, #796]	; (80050a4 <HAL_RCC_OscConfig+0x68c>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	0019      	movs	r1, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d8e:	4bc4      	ldr	r3, [pc, #784]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d94:	4bc2      	ldr	r3, [pc, #776]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	0a19      	lsrs	r1, r3, #8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	061a      	lsls	r2, r3, #24
 8004da2:	4bbf      	ldr	r3, [pc, #764]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
 8004da8:	e019      	b.n	8004dde <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004daa:	4bbd      	ldr	r3, [pc, #756]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4bbc      	ldr	r3, [pc, #752]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004db0:	49bd      	ldr	r1, [pc, #756]	; (80050a8 <HAL_RCC_OscConfig+0x690>)
 8004db2:	400a      	ands	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db6:	f7ff fb87 	bl	80044c8 <HAL_GetTick>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dc0:	f7ff fb82 	bl	80044c8 <HAL_GetTick>
 8004dc4:	0002      	movs	r2, r0
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e1eb      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004dd2:	4bb3      	ldr	r3, [pc, #716]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2208      	movs	r2, #8
 8004de4:	4013      	ands	r3, r2
 8004de6:	d036      	beq.n	8004e56 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d019      	beq.n	8004e24 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df0:	4bab      	ldr	r3, [pc, #684]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004df2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004df4:	4baa      	ldr	r3, [pc, #680]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004df6:	2101      	movs	r1, #1
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfc:	f7ff fb64 	bl	80044c8 <HAL_GetTick>
 8004e00:	0003      	movs	r3, r0
 8004e02:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e06:	f7ff fb5f 	bl	80044c8 <HAL_GetTick>
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e1c8      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e18:	4ba1      	ldr	r3, [pc, #644]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d0f1      	beq.n	8004e06 <HAL_RCC_OscConfig+0x3ee>
 8004e22:	e018      	b.n	8004e56 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e24:	4b9e      	ldr	r3, [pc, #632]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e28:	4b9d      	ldr	r3, [pc, #628]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e30:	f7ff fb4a 	bl	80044c8 <HAL_GetTick>
 8004e34:	0003      	movs	r3, r0
 8004e36:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e3a:	f7ff fb45 	bl	80044c8 <HAL_GetTick>
 8004e3e:	0002      	movs	r2, r0
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e1ae      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e4c:	4b94      	ldr	r3, [pc, #592]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e50:	2202      	movs	r2, #2
 8004e52:	4013      	ands	r3, r2
 8004e54:	d1f1      	bne.n	8004e3a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d100      	bne.n	8004e62 <HAL_RCC_OscConfig+0x44a>
 8004e60:	e0ae      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e62:	2023      	movs	r0, #35	; 0x23
 8004e64:	183b      	adds	r3, r7, r0
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6a:	4b8d      	ldr	r3, [pc, #564]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	055b      	lsls	r3, r3, #21
 8004e72:	4013      	ands	r3, r2
 8004e74:	d109      	bne.n	8004e8a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e76:	4b8a      	ldr	r3, [pc, #552]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7a:	4b89      	ldr	r3, [pc, #548]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004e7c:	2180      	movs	r1, #128	; 0x80
 8004e7e:	0549      	lsls	r1, r1, #21
 8004e80:	430a      	orrs	r2, r1
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004e84:	183b      	adds	r3, r7, r0
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8a:	4b88      	ldr	r3, [pc, #544]	; (80050ac <HAL_RCC_OscConfig+0x694>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	2380      	movs	r3, #128	; 0x80
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4013      	ands	r3, r2
 8004e94:	d11a      	bne.n	8004ecc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e96:	4b85      	ldr	r3, [pc, #532]	; (80050ac <HAL_RCC_OscConfig+0x694>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4b84      	ldr	r3, [pc, #528]	; (80050ac <HAL_RCC_OscConfig+0x694>)
 8004e9c:	2180      	movs	r1, #128	; 0x80
 8004e9e:	0049      	lsls	r1, r1, #1
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea4:	f7ff fb10 	bl	80044c8 <HAL_GetTick>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eae:	f7ff fb0b 	bl	80044c8 <HAL_GetTick>
 8004eb2:	0002      	movs	r2, r0
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b64      	cmp	r3, #100	; 0x64
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e174      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	4b7a      	ldr	r3, [pc, #488]	; (80050ac <HAL_RCC_OscConfig+0x694>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x4d0>
 8004ed8:	4b71      	ldr	r3, [pc, #452]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004edc:	4b70      	ldr	r3, [pc, #448]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	0049      	lsls	r1, r1, #1
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	651a      	str	r2, [r3, #80]	; 0x50
 8004ee6:	e031      	b.n	8004f4c <HAL_RCC_OscConfig+0x534>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCC_OscConfig+0x4f2>
 8004ef0:	4b6b      	ldr	r3, [pc, #428]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004ef2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ef4:	4b6a      	ldr	r3, [pc, #424]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004ef6:	496c      	ldr	r1, [pc, #432]	; (80050a8 <HAL_RCC_OscConfig+0x690>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	651a      	str	r2, [r3, #80]	; 0x50
 8004efc:	4b68      	ldr	r3, [pc, #416]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f00:	4b67      	ldr	r3, [pc, #412]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004f02:	496b      	ldr	r1, [pc, #428]	; (80050b0 <HAL_RCC_OscConfig+0x698>)
 8004f04:	400a      	ands	r2, r1
 8004f06:	651a      	str	r2, [r3, #80]	; 0x50
 8004f08:	e020      	b.n	8004f4c <HAL_RCC_OscConfig+0x534>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	23a0      	movs	r3, #160	; 0xa0
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d10e      	bne.n	8004f34 <HAL_RCC_OscConfig+0x51c>
 8004f16:	4b62      	ldr	r3, [pc, #392]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f1a:	4b61      	ldr	r3, [pc, #388]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004f1c:	2180      	movs	r1, #128	; 0x80
 8004f1e:	00c9      	lsls	r1, r1, #3
 8004f20:	430a      	orrs	r2, r1
 8004f22:	651a      	str	r2, [r3, #80]	; 0x50
 8004f24:	4b5e      	ldr	r3, [pc, #376]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f28:	4b5d      	ldr	r3, [pc, #372]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004f2a:	2180      	movs	r1, #128	; 0x80
 8004f2c:	0049      	lsls	r1, r1, #1
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	651a      	str	r2, [r3, #80]	; 0x50
 8004f32:	e00b      	b.n	8004f4c <HAL_RCC_OscConfig+0x534>
 8004f34:	4b5a      	ldr	r3, [pc, #360]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004f36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f38:	4b59      	ldr	r3, [pc, #356]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004f3a:	495b      	ldr	r1, [pc, #364]	; (80050a8 <HAL_RCC_OscConfig+0x690>)
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	651a      	str	r2, [r3, #80]	; 0x50
 8004f40:	4b57      	ldr	r3, [pc, #348]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f44:	4b56      	ldr	r3, [pc, #344]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004f46:	495a      	ldr	r1, [pc, #360]	; (80050b0 <HAL_RCC_OscConfig+0x698>)
 8004f48:	400a      	ands	r2, r1
 8004f4a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f54:	f7ff fab8 	bl	80044c8 <HAL_GetTick>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f5c:	e009      	b.n	8004f72 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7ff fab3 	bl	80044c8 <HAL_GetTick>
 8004f62:	0002      	movs	r2, r0
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	4a52      	ldr	r2, [pc, #328]	; (80050b4 <HAL_RCC_OscConfig+0x69c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e11b      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f72:	4b4b      	ldr	r3, [pc, #300]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d0ef      	beq.n	8004f5e <HAL_RCC_OscConfig+0x546>
 8004f7e:	e014      	b.n	8004faa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f80:	f7ff faa2 	bl	80044c8 <HAL_GetTick>
 8004f84:	0003      	movs	r3, r0
 8004f86:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f88:	e009      	b.n	8004f9e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8a:	f7ff fa9d 	bl	80044c8 <HAL_GetTick>
 8004f8e:	0002      	movs	r2, r0
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	4a47      	ldr	r2, [pc, #284]	; (80050b4 <HAL_RCC_OscConfig+0x69c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e105      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f9e:	4b40      	ldr	r3, [pc, #256]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d1ef      	bne.n	8004f8a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004faa:	2323      	movs	r3, #35	; 0x23
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb4:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb8:	4b39      	ldr	r3, [pc, #228]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004fba:	493f      	ldr	r1, [pc, #252]	; (80050b8 <HAL_RCC_OscConfig+0x6a0>)
 8004fbc:	400a      	ands	r2, r1
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d049      	beq.n	800505e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d026      	beq.n	8005020 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004fd2:	4b33      	ldr	r3, [pc, #204]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	4b32      	ldr	r3, [pc, #200]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004fd8:	2101      	movs	r1, #1
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	609a      	str	r2, [r3, #8]
 8004fde:	4b30      	ldr	r3, [pc, #192]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe2:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8004fea:	4b34      	ldr	r3, [pc, #208]	; (80050bc <HAL_RCC_OscConfig+0x6a4>)
 8004fec:	6a1a      	ldr	r2, [r3, #32]
 8004fee:	4b33      	ldr	r3, [pc, #204]	; (80050bc <HAL_RCC_OscConfig+0x6a4>)
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	0189      	lsls	r1, r1, #6
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7ff fa66 	bl	80044c8 <HAL_GetTick>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005002:	f7ff fa61 	bl	80044c8 <HAL_GetTick>
 8005006:	0002      	movs	r2, r0
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e0ca      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005014:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2202      	movs	r2, #2
 800501a:	4013      	ands	r3, r2
 800501c:	d0f1      	beq.n	8005002 <HAL_RCC_OscConfig+0x5ea>
 800501e:	e01e      	b.n	800505e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005020:	4b1f      	ldr	r3, [pc, #124]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8005026:	2101      	movs	r1, #1
 8005028:	438a      	bics	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	4b23      	ldr	r3, [pc, #140]	; (80050bc <HAL_RCC_OscConfig+0x6a4>)
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	4b22      	ldr	r3, [pc, #136]	; (80050bc <HAL_RCC_OscConfig+0x6a4>)
 8005032:	4923      	ldr	r1, [pc, #140]	; (80050c0 <HAL_RCC_OscConfig+0x6a8>)
 8005034:	400a      	ands	r2, r1
 8005036:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7ff fa46 	bl	80044c8 <HAL_GetTick>
 800503c:	0003      	movs	r3, r0
 800503e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005042:	f7ff fa41 	bl	80044c8 <HAL_GetTick>
 8005046:	0002      	movs	r2, r0
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e0aa      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005054:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2202      	movs	r2, #2
 800505a:	4013      	ands	r3, r2
 800505c:	d1f1      	bne.n	8005042 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	2b00      	cmp	r3, #0
 8005064:	d100      	bne.n	8005068 <HAL_RCC_OscConfig+0x650>
 8005066:	e09f      	b.n	80051a8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	2b0c      	cmp	r3, #12
 800506c:	d100      	bne.n	8005070 <HAL_RCC_OscConfig+0x658>
 800506e:	e078      	b.n	8005162 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	2b02      	cmp	r3, #2
 8005076:	d159      	bne.n	800512c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005078:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <HAL_RCC_OscConfig+0x688>)
 800507e:	4911      	ldr	r1, [pc, #68]	; (80050c4 <HAL_RCC_OscConfig+0x6ac>)
 8005080:	400a      	ands	r2, r1
 8005082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7ff fa20 	bl	80044c8 <HAL_GetTick>
 8005088:	0003      	movs	r3, r0
 800508a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800508c:	e01c      	b.n	80050c8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508e:	f7ff fa1b 	bl	80044c8 <HAL_GetTick>
 8005092:	0002      	movs	r2, r0
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d915      	bls.n	80050c8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e084      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
 80050a0:	40021000 	.word	0x40021000
 80050a4:	ffff1fff 	.word	0xffff1fff
 80050a8:	fffffeff 	.word	0xfffffeff
 80050ac:	40007000 	.word	0x40007000
 80050b0:	fffffbff 	.word	0xfffffbff
 80050b4:	00001388 	.word	0x00001388
 80050b8:	efffffff 	.word	0xefffffff
 80050bc:	40010000 	.word	0x40010000
 80050c0:	ffffdfff 	.word	0xffffdfff
 80050c4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050c8:	4b3a      	ldr	r3, [pc, #232]	; (80051b4 <HAL_RCC_OscConfig+0x79c>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	049b      	lsls	r3, r3, #18
 80050d0:	4013      	ands	r3, r2
 80050d2:	d1dc      	bne.n	800508e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050d4:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <HAL_RCC_OscConfig+0x79c>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a37      	ldr	r2, [pc, #220]	; (80051b8 <HAL_RCC_OscConfig+0x7a0>)
 80050da:	4013      	ands	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	431a      	orrs	r2, r3
 80050ee:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <HAL_RCC_OscConfig+0x79c>)
 80050f0:	430a      	orrs	r2, r1
 80050f2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f4:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <HAL_RCC_OscConfig+0x79c>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <HAL_RCC_OscConfig+0x79c>)
 80050fa:	2180      	movs	r1, #128	; 0x80
 80050fc:	0449      	lsls	r1, r1, #17
 80050fe:	430a      	orrs	r2, r1
 8005100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005102:	f7ff f9e1 	bl	80044c8 <HAL_GetTick>
 8005106:	0003      	movs	r3, r0
 8005108:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510c:	f7ff f9dc 	bl	80044c8 <HAL_GetTick>
 8005110:	0002      	movs	r2, r0
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e045      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800511e:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCC_OscConfig+0x79c>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	049b      	lsls	r3, r3, #18
 8005126:	4013      	ands	r3, r2
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x6f4>
 800512a:	e03d      	b.n	80051a8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512c:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <HAL_RCC_OscConfig+0x79c>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_RCC_OscConfig+0x79c>)
 8005132:	4922      	ldr	r1, [pc, #136]	; (80051bc <HAL_RCC_OscConfig+0x7a4>)
 8005134:	400a      	ands	r2, r1
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7ff f9c6 	bl	80044c8 <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005142:	f7ff f9c1 	bl	80044c8 <HAL_GetTick>
 8005146:	0002      	movs	r2, r0
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e02a      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005154:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <HAL_RCC_OscConfig+0x79c>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	049b      	lsls	r3, r3, #18
 800515c:	4013      	ands	r3, r2
 800515e:	d1f0      	bne.n	8005142 <HAL_RCC_OscConfig+0x72a>
 8005160:	e022      	b.n	80051a8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e01d      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <HAL_RCC_OscConfig+0x79c>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	025b      	lsls	r3, r3, #9
 800517a:	401a      	ands	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	429a      	cmp	r2, r3
 8005182:	d10f      	bne.n	80051a4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	23f0      	movs	r3, #240	; 0xf0
 8005188:	039b      	lsls	r3, r3, #14
 800518a:	401a      	ands	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d107      	bne.n	80051a4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	23c0      	movs	r3, #192	; 0xc0
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	401a      	ands	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b00a      	add	sp, #40	; 0x28
 80051b0:	bdb0      	pop	{r4, r5, r7, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	40021000 	.word	0x40021000
 80051b8:	ff02ffff 	.word	0xff02ffff
 80051bc:	feffffff 	.word	0xfeffffff

080051c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c0:	b5b0      	push	{r4, r5, r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e128      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051d4:	4b96      	ldr	r3, [pc, #600]	; (8005430 <HAL_RCC_ClockConfig+0x270>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2201      	movs	r2, #1
 80051da:	4013      	ands	r3, r2
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d91e      	bls.n	8005220 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b93      	ldr	r3, [pc, #588]	; (8005430 <HAL_RCC_ClockConfig+0x270>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4393      	bics	r3, r2
 80051ea:	0019      	movs	r1, r3
 80051ec:	4b90      	ldr	r3, [pc, #576]	; (8005430 <HAL_RCC_ClockConfig+0x270>)
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051f4:	f7ff f968 	bl	80044c8 <HAL_GetTick>
 80051f8:	0003      	movs	r3, r0
 80051fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fc:	e009      	b.n	8005212 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fe:	f7ff f963 	bl	80044c8 <HAL_GetTick>
 8005202:	0002      	movs	r2, r0
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	4a8a      	ldr	r2, [pc, #552]	; (8005434 <HAL_RCC_ClockConfig+0x274>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e109      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b87      	ldr	r3, [pc, #540]	; (8005430 <HAL_RCC_ClockConfig+0x270>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2201      	movs	r2, #1
 8005218:	4013      	ands	r3, r2
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d1ee      	bne.n	80051fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2202      	movs	r2, #2
 8005226:	4013      	ands	r3, r2
 8005228:	d009      	beq.n	800523e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800522a:	4b83      	ldr	r3, [pc, #524]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	22f0      	movs	r2, #240	; 0xf0
 8005230:	4393      	bics	r3, r2
 8005232:	0019      	movs	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	4b7f      	ldr	r3, [pc, #508]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 800523a:	430a      	orrs	r2, r1
 800523c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2201      	movs	r2, #1
 8005244:	4013      	ands	r3, r2
 8005246:	d100      	bne.n	800524a <HAL_RCC_ClockConfig+0x8a>
 8005248:	e089      	b.n	800535e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005252:	4b79      	ldr	r3, [pc, #484]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	029b      	lsls	r3, r3, #10
 800525a:	4013      	ands	r3, r2
 800525c:	d120      	bne.n	80052a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e0e1      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b03      	cmp	r3, #3
 8005268:	d107      	bne.n	800527a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800526a:	4b73      	ldr	r3, [pc, #460]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	049b      	lsls	r3, r3, #18
 8005272:	4013      	ands	r3, r2
 8005274:	d114      	bne.n	80052a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e0d5      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d106      	bne.n	8005290 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005282:	4b6d      	ldr	r3, [pc, #436]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2204      	movs	r2, #4
 8005288:	4013      	ands	r3, r2
 800528a:	d109      	bne.n	80052a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0ca      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005290:	4b69      	ldr	r3, [pc, #420]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4013      	ands	r3, r2
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0c2      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052a0:	4b65      	ldr	r3, [pc, #404]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2203      	movs	r2, #3
 80052a6:	4393      	bics	r3, r2
 80052a8:	0019      	movs	r1, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	4b62      	ldr	r3, [pc, #392]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 80052b0:	430a      	orrs	r2, r1
 80052b2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052b4:	f7ff f908 	bl	80044c8 <HAL_GetTick>
 80052b8:	0003      	movs	r3, r0
 80052ba:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d111      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052c4:	e009      	b.n	80052da <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c6:	f7ff f8ff 	bl	80044c8 <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	4a58      	ldr	r2, [pc, #352]	; (8005434 <HAL_RCC_ClockConfig+0x274>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e0a5      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052da:	4b57      	ldr	r3, [pc, #348]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	220c      	movs	r2, #12
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d1ef      	bne.n	80052c6 <HAL_RCC_ClockConfig+0x106>
 80052e6:	e03a      	b.n	800535e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d111      	bne.n	8005314 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052f0:	e009      	b.n	8005306 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f2:	f7ff f8e9 	bl	80044c8 <HAL_GetTick>
 80052f6:	0002      	movs	r2, r0
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	4a4d      	ldr	r2, [pc, #308]	; (8005434 <HAL_RCC_ClockConfig+0x274>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e08f      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005306:	4b4c      	ldr	r3, [pc, #304]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	220c      	movs	r2, #12
 800530c:	4013      	ands	r3, r2
 800530e:	2b0c      	cmp	r3, #12
 8005310:	d1ef      	bne.n	80052f2 <HAL_RCC_ClockConfig+0x132>
 8005312:	e024      	b.n	800535e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d11b      	bne.n	8005354 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800531c:	e009      	b.n	8005332 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800531e:	f7ff f8d3 	bl	80044c8 <HAL_GetTick>
 8005322:	0002      	movs	r2, r0
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	4a42      	ldr	r2, [pc, #264]	; (8005434 <HAL_RCC_ClockConfig+0x274>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e079      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005332:	4b41      	ldr	r3, [pc, #260]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	220c      	movs	r2, #12
 8005338:	4013      	ands	r3, r2
 800533a:	2b04      	cmp	r3, #4
 800533c:	d1ef      	bne.n	800531e <HAL_RCC_ClockConfig+0x15e>
 800533e:	e00e      	b.n	800535e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005340:	f7ff f8c2 	bl	80044c8 <HAL_GetTick>
 8005344:	0002      	movs	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	4a3a      	ldr	r2, [pc, #232]	; (8005434 <HAL_RCC_ClockConfig+0x274>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e068      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005354:	4b38      	ldr	r3, [pc, #224]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	220c      	movs	r2, #12
 800535a:	4013      	ands	r3, r2
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800535e:	4b34      	ldr	r3, [pc, #208]	; (8005430 <HAL_RCC_ClockConfig+0x270>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2201      	movs	r2, #1
 8005364:	4013      	ands	r3, r2
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d21e      	bcs.n	80053aa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536c:	4b30      	ldr	r3, [pc, #192]	; (8005430 <HAL_RCC_ClockConfig+0x270>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2201      	movs	r2, #1
 8005372:	4393      	bics	r3, r2
 8005374:	0019      	movs	r1, r3
 8005376:	4b2e      	ldr	r3, [pc, #184]	; (8005430 <HAL_RCC_ClockConfig+0x270>)
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800537e:	f7ff f8a3 	bl	80044c8 <HAL_GetTick>
 8005382:	0003      	movs	r3, r0
 8005384:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	e009      	b.n	800539c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005388:	f7ff f89e 	bl	80044c8 <HAL_GetTick>
 800538c:	0002      	movs	r2, r0
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	4a28      	ldr	r2, [pc, #160]	; (8005434 <HAL_RCC_ClockConfig+0x274>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e044      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800539c:	4b24      	ldr	r3, [pc, #144]	; (8005430 <HAL_RCC_ClockConfig+0x270>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2201      	movs	r2, #1
 80053a2:	4013      	ands	r3, r2
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d1ee      	bne.n	8005388 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2204      	movs	r2, #4
 80053b0:	4013      	ands	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b4:	4b20      	ldr	r3, [pc, #128]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4a20      	ldr	r2, [pc, #128]	; (800543c <HAL_RCC_ClockConfig+0x27c>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	0019      	movs	r1, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 80053c4:	430a      	orrs	r2, r1
 80053c6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2208      	movs	r2, #8
 80053ce:	4013      	ands	r3, r2
 80053d0:	d00a      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053d2:	4b19      	ldr	r3, [pc, #100]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <HAL_RCC_ClockConfig+0x280>)
 80053d8:	4013      	ands	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	00da      	lsls	r2, r3, #3
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 80053e4:	430a      	orrs	r2, r1
 80053e6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053e8:	f000 f832 	bl	8005450 <HAL_RCC_GetSysClockFreq>
 80053ec:	0001      	movs	r1, r0
 80053ee:	4b12      	ldr	r3, [pc, #72]	; (8005438 <HAL_RCC_ClockConfig+0x278>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	220f      	movs	r2, #15
 80053f6:	4013      	ands	r3, r2
 80053f8:	4a12      	ldr	r2, [pc, #72]	; (8005444 <HAL_RCC_ClockConfig+0x284>)
 80053fa:	5cd3      	ldrb	r3, [r2, r3]
 80053fc:	000a      	movs	r2, r1
 80053fe:	40da      	lsrs	r2, r3
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <HAL_RCC_ClockConfig+0x288>)
 8005402:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005404:	4b11      	ldr	r3, [pc, #68]	; (800544c <HAL_RCC_ClockConfig+0x28c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	250b      	movs	r5, #11
 800540a:	197c      	adds	r4, r7, r5
 800540c:	0018      	movs	r0, r3
 800540e:	f7ff f815 	bl	800443c <HAL_InitTick>
 8005412:	0003      	movs	r3, r0
 8005414:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005416:	197b      	adds	r3, r7, r5
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800541e:	197b      	adds	r3, r7, r5
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	e000      	b.n	8005426 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	0018      	movs	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	b004      	add	sp, #16
 800542c:	bdb0      	pop	{r4, r5, r7, pc}
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	40022000 	.word	0x40022000
 8005434:	00001388 	.word	0x00001388
 8005438:	40021000 	.word	0x40021000
 800543c:	fffff8ff 	.word	0xfffff8ff
 8005440:	ffffc7ff 	.word	0xffffc7ff
 8005444:	0800a890 	.word	0x0800a890
 8005448:	20000000 	.word	0x20000000
 800544c:	20000004 	.word	0x20000004

08005450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005450:	b5b0      	push	{r4, r5, r7, lr}
 8005452:	b08e      	sub	sp, #56	; 0x38
 8005454:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005456:	4b4c      	ldr	r3, [pc, #304]	; (8005588 <HAL_RCC_GetSysClockFreq+0x138>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800545c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545e:	230c      	movs	r3, #12
 8005460:	4013      	ands	r3, r2
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d014      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x40>
 8005466:	d900      	bls.n	800546a <HAL_RCC_GetSysClockFreq+0x1a>
 8005468:	e07b      	b.n	8005562 <HAL_RCC_GetSysClockFreq+0x112>
 800546a:	2b04      	cmp	r3, #4
 800546c:	d002      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0x24>
 800546e:	2b08      	cmp	r3, #8
 8005470:	d00b      	beq.n	800548a <HAL_RCC_GetSysClockFreq+0x3a>
 8005472:	e076      	b.n	8005562 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005474:	4b44      	ldr	r3, [pc, #272]	; (8005588 <HAL_RCC_GetSysClockFreq+0x138>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2210      	movs	r2, #16
 800547a:	4013      	ands	r3, r2
 800547c:	d002      	beq.n	8005484 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800547e:	4b43      	ldr	r3, [pc, #268]	; (800558c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005480:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005482:	e07c      	b.n	800557e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005484:	4b42      	ldr	r3, [pc, #264]	; (8005590 <HAL_RCC_GetSysClockFreq+0x140>)
 8005486:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005488:	e079      	b.n	800557e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800548a:	4b42      	ldr	r3, [pc, #264]	; (8005594 <HAL_RCC_GetSysClockFreq+0x144>)
 800548c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800548e:	e076      	b.n	800557e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	0c9a      	lsrs	r2, r3, #18
 8005494:	230f      	movs	r3, #15
 8005496:	401a      	ands	r2, r3
 8005498:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <HAL_RCC_GetSysClockFreq+0x148>)
 800549a:	5c9b      	ldrb	r3, [r3, r2]
 800549c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	0d9a      	lsrs	r2, r3, #22
 80054a2:	2303      	movs	r3, #3
 80054a4:	4013      	ands	r3, r2
 80054a6:	3301      	adds	r3, #1
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054aa:	4b37      	ldr	r3, [pc, #220]	; (8005588 <HAL_RCC_GetSysClockFreq+0x138>)
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	025b      	lsls	r3, r3, #9
 80054b2:	4013      	ands	r3, r2
 80054b4:	d01a      	beq.n	80054ec <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	4a35      	ldr	r2, [pc, #212]	; (8005594 <HAL_RCC_GetSysClockFreq+0x144>)
 80054c0:	2300      	movs	r3, #0
 80054c2:	69b8      	ldr	r0, [r7, #24]
 80054c4:	69f9      	ldr	r1, [r7, #28]
 80054c6:	f7fb f80f 	bl	80004e8 <__aeabi_lmul>
 80054ca:	0002      	movs	r2, r0
 80054cc:	000b      	movs	r3, r1
 80054ce:	0010      	movs	r0, r2
 80054d0:	0019      	movs	r1, r3
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f7fa ffe3 	bl	80004a8 <__aeabi_uldivmod>
 80054e2:	0002      	movs	r2, r0
 80054e4:	000b      	movs	r3, r1
 80054e6:	0013      	movs	r3, r2
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ea:	e037      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80054ec:	4b26      	ldr	r3, [pc, #152]	; (8005588 <HAL_RCC_GetSysClockFreq+0x138>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2210      	movs	r2, #16
 80054f2:	4013      	ands	r3, r2
 80054f4:	d01a      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	4a23      	ldr	r2, [pc, #140]	; (800558c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005500:	2300      	movs	r3, #0
 8005502:	68b8      	ldr	r0, [r7, #8]
 8005504:	68f9      	ldr	r1, [r7, #12]
 8005506:	f7fa ffef 	bl	80004e8 <__aeabi_lmul>
 800550a:	0002      	movs	r2, r0
 800550c:	000b      	movs	r3, r1
 800550e:	0010      	movs	r0, r2
 8005510:	0019      	movs	r1, r3
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	2300      	movs	r3, #0
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f7fa ffc3 	bl	80004a8 <__aeabi_uldivmod>
 8005522:	0002      	movs	r2, r0
 8005524:	000b      	movs	r3, r1
 8005526:	0013      	movs	r3, r2
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
 800552a:	e017      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	0018      	movs	r0, r3
 8005530:	2300      	movs	r3, #0
 8005532:	0019      	movs	r1, r3
 8005534:	4a16      	ldr	r2, [pc, #88]	; (8005590 <HAL_RCC_GetSysClockFreq+0x140>)
 8005536:	2300      	movs	r3, #0
 8005538:	f7fa ffd6 	bl	80004e8 <__aeabi_lmul>
 800553c:	0002      	movs	r2, r0
 800553e:	000b      	movs	r3, r1
 8005540:	0010      	movs	r0, r2
 8005542:	0019      	movs	r1, r3
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	001c      	movs	r4, r3
 8005548:	2300      	movs	r3, #0
 800554a:	001d      	movs	r5, r3
 800554c:	0022      	movs	r2, r4
 800554e:	002b      	movs	r3, r5
 8005550:	f7fa ffaa 	bl	80004a8 <__aeabi_uldivmod>
 8005554:	0002      	movs	r2, r0
 8005556:	000b      	movs	r3, r1
 8005558:	0013      	movs	r3, r2
 800555a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800555c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005560:	e00d      	b.n	800557e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005562:	4b09      	ldr	r3, [pc, #36]	; (8005588 <HAL_RCC_GetSysClockFreq+0x138>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	0b5b      	lsrs	r3, r3, #13
 8005568:	2207      	movs	r2, #7
 800556a:	4013      	ands	r3, r2
 800556c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	3301      	adds	r3, #1
 8005572:	2280      	movs	r2, #128	; 0x80
 8005574:	0212      	lsls	r2, r2, #8
 8005576:	409a      	lsls	r2, r3
 8005578:	0013      	movs	r3, r2
 800557a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800557c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005580:	0018      	movs	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	b00e      	add	sp, #56	; 0x38
 8005586:	bdb0      	pop	{r4, r5, r7, pc}
 8005588:	40021000 	.word	0x40021000
 800558c:	003d0900 	.word	0x003d0900
 8005590:	00f42400 	.word	0x00f42400
 8005594:	007a1200 	.word	0x007a1200
 8005598:	0800a8a8 	.word	0x0800a8a8

0800559c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055a0:	4b02      	ldr	r3, [pc, #8]	; (80055ac <HAL_RCC_GetHCLKFreq+0x10>)
 80055a2:	681b      	ldr	r3, [r3, #0]
}
 80055a4:	0018      	movs	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	20000000 	.word	0x20000000

080055b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055b4:	f7ff fff2 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055b8:	0001      	movs	r1, r0
 80055ba:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	2207      	movs	r2, #7
 80055c2:	4013      	ands	r3, r2
 80055c4:	4a04      	ldr	r2, [pc, #16]	; (80055d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055c6:	5cd3      	ldrb	r3, [r2, r3]
 80055c8:	40d9      	lsrs	r1, r3
 80055ca:	000b      	movs	r3, r1
}
 80055cc:	0018      	movs	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	40021000 	.word	0x40021000
 80055d8:	0800a8a0 	.word	0x0800a8a0

080055dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055e0:	f7ff ffdc 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055e4:	0001      	movs	r1, r0
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	0adb      	lsrs	r3, r3, #11
 80055ec:	2207      	movs	r2, #7
 80055ee:	4013      	ands	r3, r2
 80055f0:	4a04      	ldr	r2, [pc, #16]	; (8005604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055f2:	5cd3      	ldrb	r3, [r2, r3]
 80055f4:	40d9      	lsrs	r1, r3
 80055f6:	000b      	movs	r3, r1
}
 80055f8:	0018      	movs	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	40021000 	.word	0x40021000
 8005604:	0800a8a0 	.word	0x0800a8a0

08005608 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005610:	2317      	movs	r3, #23
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2220      	movs	r2, #32
 800561e:	4013      	ands	r3, r2
 8005620:	d106      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	2380      	movs	r3, #128	; 0x80
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	4013      	ands	r3, r2
 800562c:	d100      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800562e:	e104      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005630:	4bb9      	ldr	r3, [pc, #740]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	055b      	lsls	r3, r3, #21
 8005638:	4013      	ands	r3, r2
 800563a:	d10a      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800563c:	4bb6      	ldr	r3, [pc, #728]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800563e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005640:	4bb5      	ldr	r3, [pc, #724]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005642:	2180      	movs	r1, #128	; 0x80
 8005644:	0549      	lsls	r1, r1, #21
 8005646:	430a      	orrs	r2, r1
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800564a:	2317      	movs	r3, #23
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005652:	4bb2      	ldr	r3, [pc, #712]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4013      	ands	r3, r2
 800565c:	d11a      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800565e:	4baf      	ldr	r3, [pc, #700]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4bae      	ldr	r3, [pc, #696]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005664:	2180      	movs	r1, #128	; 0x80
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566c:	f7fe ff2c 	bl	80044c8 <HAL_GetTick>
 8005670:	0003      	movs	r3, r0
 8005672:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005674:	e008      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005676:	f7fe ff27 	bl	80044c8 <HAL_GetTick>
 800567a:	0002      	movs	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b64      	cmp	r3, #100	; 0x64
 8005682:	d901      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e143      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005688:	4ba4      	ldr	r3, [pc, #656]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4013      	ands	r3, r2
 8005692:	d0f0      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005694:	4ba0      	ldr	r3, [pc, #640]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	23c0      	movs	r3, #192	; 0xc0
 800569a:	039b      	lsls	r3, r3, #14
 800569c:	4013      	ands	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	23c0      	movs	r3, #192	; 0xc0
 80056a6:	039b      	lsls	r3, r3, #14
 80056a8:	4013      	ands	r3, r2
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d107      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	23c0      	movs	r3, #192	; 0xc0
 80056b6:	039b      	lsls	r3, r3, #14
 80056b8:	4013      	ands	r3, r2
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d013      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	23c0      	movs	r3, #192	; 0xc0
 80056c6:	029b      	lsls	r3, r3, #10
 80056c8:	401a      	ands	r2, r3
 80056ca:	23c0      	movs	r3, #192	; 0xc0
 80056cc:	029b      	lsls	r3, r3, #10
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d10a      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056d2:	4b91      	ldr	r3, [pc, #580]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	2380      	movs	r3, #128	; 0x80
 80056d8:	029b      	lsls	r3, r3, #10
 80056da:	401a      	ands	r2, r3
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	029b      	lsls	r3, r3, #10
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d101      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e113      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80056e8:	4b8b      	ldr	r3, [pc, #556]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80056ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056ec:	23c0      	movs	r3, #192	; 0xc0
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d049      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	23c0      	movs	r3, #192	; 0xc0
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	4013      	ands	r3, r2
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	429a      	cmp	r2, r3
 8005708:	d004      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2220      	movs	r2, #32
 8005710:	4013      	ands	r3, r2
 8005712:	d10d      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	23c0      	movs	r3, #192	; 0xc0
 800571a:	029b      	lsls	r3, r3, #10
 800571c:	4013      	ands	r3, r2
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	429a      	cmp	r2, r3
 8005722:	d034      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	2380      	movs	r3, #128	; 0x80
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	4013      	ands	r3, r2
 800572e:	d02e      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005730:	4b79      	ldr	r3, [pc, #484]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005734:	4a7a      	ldr	r2, [pc, #488]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005736:	4013      	ands	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800573a:	4b77      	ldr	r3, [pc, #476]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800573c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800573e:	4b76      	ldr	r3, [pc, #472]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005740:	2180      	movs	r1, #128	; 0x80
 8005742:	0309      	lsls	r1, r1, #12
 8005744:	430a      	orrs	r2, r1
 8005746:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005748:	4b73      	ldr	r3, [pc, #460]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800574a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800574c:	4b72      	ldr	r3, [pc, #456]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800574e:	4975      	ldr	r1, [pc, #468]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005750:	400a      	ands	r2, r1
 8005752:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005754:	4b70      	ldr	r3, [pc, #448]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4013      	ands	r3, r2
 8005762:	d014      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005764:	f7fe feb0 	bl	80044c8 <HAL_GetTick>
 8005768:	0003      	movs	r3, r0
 800576a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800576c:	e009      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800576e:	f7fe feab 	bl	80044c8 <HAL_GetTick>
 8005772:	0002      	movs	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	4a6b      	ldr	r2, [pc, #428]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e0c6      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005782:	4b65      	ldr	r3, [pc, #404]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4013      	ands	r3, r2
 800578c:	d0ef      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	4013      	ands	r3, r2
 8005798:	d01f      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	23c0      	movs	r3, #192	; 0xc0
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	401a      	ands	r2, r3
 80057a4:	23c0      	movs	r3, #192	; 0xc0
 80057a6:	029b      	lsls	r3, r3, #10
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d10c      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80057ac:	4b5a      	ldr	r3, [pc, #360]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a5e      	ldr	r2, [pc, #376]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	0019      	movs	r1, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	23c0      	movs	r3, #192	; 0xc0
 80057bc:	039b      	lsls	r3, r3, #14
 80057be:	401a      	ands	r2, r3
 80057c0:	4b55      	ldr	r3, [pc, #340]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	4b54      	ldr	r3, [pc, #336]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	23c0      	movs	r3, #192	; 0xc0
 80057d0:	029b      	lsls	r3, r3, #10
 80057d2:	401a      	ands	r2, r3
 80057d4:	4b50      	ldr	r3, [pc, #320]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057d6:	430a      	orrs	r2, r1
 80057d8:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2220      	movs	r2, #32
 80057e0:	4013      	ands	r3, r2
 80057e2:	d01f      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	23c0      	movs	r3, #192	; 0xc0
 80057ea:	029b      	lsls	r3, r3, #10
 80057ec:	401a      	ands	r2, r3
 80057ee:	23c0      	movs	r3, #192	; 0xc0
 80057f0:	029b      	lsls	r3, r3, #10
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d10c      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80057f6:	4b48      	ldr	r3, [pc, #288]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a4c      	ldr	r2, [pc, #304]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	0019      	movs	r1, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	23c0      	movs	r3, #192	; 0xc0
 8005806:	039b      	lsls	r3, r3, #14
 8005808:	401a      	ands	r2, r3
 800580a:	4b43      	ldr	r3, [pc, #268]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800580c:	430a      	orrs	r2, r1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	4b41      	ldr	r3, [pc, #260]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005812:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	23c0      	movs	r3, #192	; 0xc0
 800581a:	029b      	lsls	r3, r3, #10
 800581c:	401a      	ands	r2, r3
 800581e:	4b3e      	ldr	r3, [pc, #248]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005820:	430a      	orrs	r2, r1
 8005822:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005824:	2317      	movs	r3, #23
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d105      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800582e:	4b3a      	ldr	r3, [pc, #232]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005832:	4b39      	ldr	r3, [pc, #228]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005834:	493e      	ldr	r1, [pc, #248]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005836:	400a      	ands	r2, r1
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2201      	movs	r2, #1
 8005840:	4013      	ands	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005844:	4b34      	ldr	r3, [pc, #208]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005848:	2203      	movs	r2, #3
 800584a:	4393      	bics	r3, r2
 800584c:	0019      	movs	r1, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	4b31      	ldr	r3, [pc, #196]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005854:	430a      	orrs	r2, r1
 8005856:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2202      	movs	r2, #2
 800585e:	4013      	ands	r3, r2
 8005860:	d009      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005866:	220c      	movs	r2, #12
 8005868:	4393      	bics	r3, r2
 800586a:	0019      	movs	r1, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	4b29      	ldr	r3, [pc, #164]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005872:	430a      	orrs	r2, r1
 8005874:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2204      	movs	r2, #4
 800587c:	4013      	ands	r3, r2
 800587e:	d009      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005884:	4a2b      	ldr	r2, [pc, #172]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005886:	4013      	ands	r3, r2
 8005888:	0019      	movs	r1, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695a      	ldr	r2, [r3, #20]
 800588e:	4b22      	ldr	r3, [pc, #136]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005890:	430a      	orrs	r2, r1
 8005892:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2208      	movs	r2, #8
 800589a:	4013      	ands	r3, r2
 800589c:	d009      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80058a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a2:	4a25      	ldr	r2, [pc, #148]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	0019      	movs	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699a      	ldr	r2, [r3, #24]
 80058ac:	4b1a      	ldr	r3, [pc, #104]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80058ae:	430a      	orrs	r2, r1
 80058b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	4013      	ands	r3, r2
 80058bc:	d009      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058be:	4b16      	ldr	r3, [pc, #88]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80058c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c2:	4a17      	ldr	r2, [pc, #92]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	0019      	movs	r1, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	4b12      	ldr	r3, [pc, #72]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80058ce:	430a      	orrs	r2, r1
 80058d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2240      	movs	r2, #64	; 0x40
 80058d8:	4013      	ands	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058dc:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80058de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e0:	4a16      	ldr	r2, [pc, #88]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	0019      	movs	r1, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80058ec:	430a      	orrs	r2, r1
 80058ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2280      	movs	r2, #128	; 0x80
 80058f6:	4013      	ands	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80058fa:	4b07      	ldr	r3, [pc, #28]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	4a10      	ldr	r2, [pc, #64]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005900:	4013      	ands	r3, r2
 8005902:	0019      	movs	r1, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a1a      	ldr	r2, [r3, #32]
 8005908:	4b03      	ldr	r3, [pc, #12]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800590a:	430a      	orrs	r2, r1
 800590c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	0018      	movs	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	b006      	add	sp, #24
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40021000 	.word	0x40021000
 800591c:	40007000 	.word	0x40007000
 8005920:	fffcffff 	.word	0xfffcffff
 8005924:	fff7ffff 	.word	0xfff7ffff
 8005928:	00001388 	.word	0x00001388
 800592c:	ffcfffff 	.word	0xffcfffff
 8005930:	efffffff 	.word	0xefffffff
 8005934:	fffff3ff 	.word	0xfffff3ff
 8005938:	ffffcfff 	.word	0xffffcfff
 800593c:	fbffffff 	.word	0xfbffffff
 8005940:	fff3ffff 	.word	0xfff3ffff

08005944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e083      	b.n	8005a5e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	2382      	movs	r3, #130	; 0x82
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	429a      	cmp	r2, r3
 8005968:	d009      	beq.n	800597e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	61da      	str	r2, [r3, #28]
 8005970:	e005      	b.n	800597e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2251      	movs	r2, #81	; 0x51
 8005988:	5c9b      	ldrb	r3, [r3, r2]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d107      	bne.n	80059a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2250      	movs	r2, #80	; 0x50
 8005994:	2100      	movs	r1, #0
 8005996:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	0018      	movs	r0, r3
 800599c:	f7fe fb52 	bl	8004044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2251      	movs	r2, #81	; 0x51
 80059a4:	2102      	movs	r1, #2
 80059a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2140      	movs	r1, #64	; 0x40
 80059b4:	438a      	bics	r2, r1
 80059b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	2382      	movs	r3, #130	; 0x82
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	401a      	ands	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6899      	ldr	r1, [r3, #8]
 80059c6:	2384      	movs	r3, #132	; 0x84
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	400b      	ands	r3, r1
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68d9      	ldr	r1, [r3, #12]
 80059d2:	2380      	movs	r3, #128	; 0x80
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	400b      	ands	r3, r1
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2102      	movs	r1, #2
 80059e0:	400b      	ands	r3, r1
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	2101      	movs	r1, #1
 80059ea:	400b      	ands	r3, r1
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6999      	ldr	r1, [r3, #24]
 80059f2:	2380      	movs	r3, #128	; 0x80
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	400b      	ands	r3, r1
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	2138      	movs	r1, #56	; 0x38
 8005a00:	400b      	ands	r3, r1
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	2180      	movs	r1, #128	; 0x80
 8005a0a:	400b      	ands	r3, r1
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	0011      	movs	r1, r2
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	019b      	lsls	r3, r3, #6
 8005a18:	401a      	ands	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	0c1b      	lsrs	r3, r3, #16
 8005a28:	2204      	movs	r2, #4
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	0019      	movs	r1, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	2210      	movs	r2, #16
 8005a34:	401a      	ands	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4907      	ldr	r1, [pc, #28]	; (8005a68 <HAL_SPI_Init+0x124>)
 8005a4a:	400a      	ands	r2, r1
 8005a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2251      	movs	r2, #81	; 0x51
 8005a58:	2101      	movs	r1, #1
 8005a5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	0018      	movs	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b002      	add	sp, #8
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	fffff7ff 	.word	0xfffff7ff

08005a6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	1dbb      	adds	r3, r7, #6
 8005a7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a7c:	231f      	movs	r3, #31
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2250      	movs	r2, #80	; 0x50
 8005a88:	5c9b      	ldrb	r3, [r3, r2]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_SPI_Transmit+0x26>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e145      	b.n	8005d1e <HAL_SPI_Transmit+0x2b2>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2250      	movs	r2, #80	; 0x50
 8005a96:	2101      	movs	r1, #1
 8005a98:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a9a:	f7fe fd15 	bl	80044c8 <HAL_GetTick>
 8005a9e:	0003      	movs	r3, r0
 8005aa0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005aa2:	2316      	movs	r3, #22
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	1dba      	adds	r2, r7, #6
 8005aa8:	8812      	ldrh	r2, [r2, #0]
 8005aaa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2251      	movs	r2, #81	; 0x51
 8005ab0:	5c9b      	ldrb	r3, [r3, r2]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d004      	beq.n	8005ac2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005ab8:	231f      	movs	r3, #31
 8005aba:	18fb      	adds	r3, r7, r3
 8005abc:	2202      	movs	r2, #2
 8005abe:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ac0:	e126      	b.n	8005d10 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_SPI_Transmit+0x64>
 8005ac8:	1dbb      	adds	r3, r7, #6
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005ad0:	231f      	movs	r3, #31
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ad8:	e11a      	b.n	8005d10 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2251      	movs	r2, #81	; 0x51
 8005ade:	2103      	movs	r1, #3
 8005ae0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1dba      	adds	r2, r7, #6
 8005af2:	8812      	ldrh	r2, [r2, #0]
 8005af4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1dba      	adds	r2, r7, #6
 8005afa:	8812      	ldrh	r2, [r2, #0]
 8005afc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d110      	bne.n	8005b4a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2140      	movs	r1, #64	; 0x40
 8005b34:	438a      	bics	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2180      	movs	r1, #128	; 0x80
 8005b44:	01c9      	lsls	r1, r1, #7
 8005b46:	430a      	orrs	r2, r1
 8005b48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2240      	movs	r2, #64	; 0x40
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d007      	beq.n	8005b68 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2140      	movs	r1, #64	; 0x40
 8005b64:	430a      	orrs	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d152      	bne.n	8005c1a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <HAL_SPI_Transmit+0x11a>
 8005b7c:	2316      	movs	r3, #22
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d143      	bne.n	8005c0e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	881a      	ldrh	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	1c9a      	adds	r2, r3, #2
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005baa:	e030      	b.n	8005c0e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d112      	bne.n	8005be0 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	881a      	ldrh	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	1c9a      	adds	r2, r3, #2
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bde:	e016      	b.n	8005c0e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005be0:	f7fe fc72 	bl	80044c8 <HAL_GetTick>
 8005be4:	0002      	movs	r2, r0
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d802      	bhi.n	8005bf6 <HAL_SPI_Transmit+0x18a>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	d102      	bne.n	8005bfc <HAL_SPI_Transmit+0x190>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d108      	bne.n	8005c0e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005bfc:	231f      	movs	r3, #31
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	2203      	movs	r2, #3
 8005c02:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2251      	movs	r2, #81	; 0x51
 8005c08:	2101      	movs	r1, #1
 8005c0a:	5499      	strb	r1, [r3, r2]
          goto error;
 8005c0c:	e080      	b.n	8005d10 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1c9      	bne.n	8005bac <HAL_SPI_Transmit+0x140>
 8005c18:	e053      	b.n	8005cc2 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d004      	beq.n	8005c2c <HAL_SPI_Transmit+0x1c0>
 8005c22:	2316      	movs	r3, #22
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d145      	bne.n	8005cb8 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	330c      	adds	r3, #12
 8005c36:	7812      	ldrb	r2, [r2, #0]
 8005c38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c52:	e031      	b.n	8005cb8 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d113      	bne.n	8005c8a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	330c      	adds	r3, #12
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c88:	e016      	b.n	8005cb8 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c8a:	f7fe fc1d 	bl	80044c8 <HAL_GetTick>
 8005c8e:	0002      	movs	r2, r0
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d802      	bhi.n	8005ca0 <HAL_SPI_Transmit+0x234>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	d102      	bne.n	8005ca6 <HAL_SPI_Transmit+0x23a>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8005ca6:	231f      	movs	r3, #31
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	2203      	movs	r2, #3
 8005cac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2251      	movs	r2, #81	; 0x51
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	5499      	strb	r1, [r3, r2]
          goto error;
 8005cb6:	e02b      	b.n	8005d10 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1c8      	bne.n	8005c54 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 fc1f 	bl	800650c <SPI_EndRxTxTransaction>
 8005cce:	1e03      	subs	r3, r0, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8005cfe:	231f      	movs	r3, #31
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	2201      	movs	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	e003      	b.n	8005d10 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2251      	movs	r2, #81	; 0x51
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2250      	movs	r2, #80	; 0x50
 8005d14:	2100      	movs	r1, #0
 8005d16:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005d18:	231f      	movs	r3, #31
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	781b      	ldrb	r3, [r3, #0]
}
 8005d1e:	0018      	movs	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b008      	add	sp, #32
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	1dbb      	adds	r3, r7, #6
 8005d36:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d38:	2117      	movs	r1, #23
 8005d3a:	187b      	adds	r3, r7, r1
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2251      	movs	r2, #81	; 0x51
 8005d44:	5c9b      	ldrb	r3, [r3, r2]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d003      	beq.n	8005d54 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8005d4c:	187b      	adds	r3, r7, r1
 8005d4e:	2202      	movs	r2, #2
 8005d50:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d52:	e109      	b.n	8005f68 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	2382      	movs	r3, #130	; 0x82
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d113      	bne.n	8005d88 <HAL_SPI_Receive+0x60>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10f      	bne.n	8005d88 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2251      	movs	r2, #81	; 0x51
 8005d6c:	2104      	movs	r1, #4
 8005d6e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d70:	1dbb      	adds	r3, r7, #6
 8005d72:	881c      	ldrh	r4, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	0023      	movs	r3, r4
 8005d80:	f000 f900 	bl	8005f84 <HAL_SPI_TransmitReceive>
 8005d84:	0003      	movs	r3, r0
 8005d86:	e0f6      	b.n	8005f76 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2250      	movs	r2, #80	; 0x50
 8005d8c:	5c9b      	ldrb	r3, [r3, r2]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_SPI_Receive+0x6e>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e0ef      	b.n	8005f76 <HAL_SPI_Receive+0x24e>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2250      	movs	r2, #80	; 0x50
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d9e:	f7fe fb93 	bl	80044c8 <HAL_GetTick>
 8005da2:	0003      	movs	r3, r0
 8005da4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_SPI_Receive+0x8c>
 8005dac:	1dbb      	adds	r3, r7, #6
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d104      	bne.n	8005dbe <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005db4:	2317      	movs	r3, #23
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	2201      	movs	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
    goto error;
 8005dbc:	e0d4      	b.n	8005f68 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2251      	movs	r2, #81	; 0x51
 8005dc2:	2104      	movs	r1, #4
 8005dc4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1dba      	adds	r2, r7, #6
 8005dd6:	8812      	ldrh	r2, [r2, #0]
 8005dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1dba      	adds	r2, r7, #6
 8005dde:	8812      	ldrh	r2, [r2, #0]
 8005de0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d10f      	bne.n	8005e2c <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2140      	movs	r1, #64	; 0x40
 8005e18:	438a      	bics	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4956      	ldr	r1, [pc, #344]	; (8005f80 <HAL_SPI_Receive+0x258>)
 8005e28:	400a      	ands	r2, r1
 8005e2a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2240      	movs	r2, #64	; 0x40
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d007      	beq.n	8005e4a <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2140      	movs	r1, #64	; 0x40
 8005e46:	430a      	orrs	r2, r1
 8005e48:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d000      	beq.n	8005e54 <HAL_SPI_Receive+0x12c>
 8005e52:	e06c      	b.n	8005f2e <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e54:	e033      	b.n	8005ebe <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d115      	bne.n	8005e90 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	001a      	movs	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	7812      	ldrb	r2, [r2, #0]
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e8e:	e016      	b.n	8005ebe <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e90:	f7fe fb1a 	bl	80044c8 <HAL_GetTick>
 8005e94:	0002      	movs	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d802      	bhi.n	8005ea6 <HAL_SPI_Receive+0x17e>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	d102      	bne.n	8005eac <HAL_SPI_Receive+0x184>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d108      	bne.n	8005ebe <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8005eac:	2317      	movs	r3, #23
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2251      	movs	r2, #81	; 0x51
 8005eb8:	2101      	movs	r1, #1
 8005eba:	5499      	strb	r1, [r3, r2]
          goto error;
 8005ebc:	e054      	b.n	8005f68 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1c6      	bne.n	8005e56 <HAL_SPI_Receive+0x12e>
 8005ec8:	e036      	b.n	8005f38 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d113      	bne.n	8005f00 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	b292      	uxth	r2, r2
 8005ee4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	1c9a      	adds	r2, r3, #2
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005efe:	e016      	b.n	8005f2e <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f00:	f7fe fae2 	bl	80044c8 <HAL_GetTick>
 8005f04:	0002      	movs	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d802      	bhi.n	8005f16 <HAL_SPI_Receive+0x1ee>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	d102      	bne.n	8005f1c <HAL_SPI_Receive+0x1f4>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d108      	bne.n	8005f2e <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8005f1c:	2317      	movs	r3, #23
 8005f1e:	18fb      	adds	r3, r7, r3
 8005f20:	2203      	movs	r2, #3
 8005f22:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2251      	movs	r2, #81	; 0x51
 8005f28:	2101      	movs	r1, #1
 8005f2a:	5499      	strb	r1, [r3, r2]
          goto error;
 8005f2c:	e01c      	b.n	8005f68 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1c8      	bne.n	8005eca <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f000 fa7a 	bl	8006438 <SPI_EndRxTransaction>
 8005f44:	1e03      	subs	r3, r0, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8005f56:	2317      	movs	r3, #23
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e003      	b.n	8005f68 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2251      	movs	r2, #81	; 0x51
 8005f64:	2101      	movs	r1, #1
 8005f66:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2250      	movs	r2, #80	; 0x50
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005f70:	2317      	movs	r3, #23
 8005f72:	18fb      	adds	r3, r7, r3
 8005f74:	781b      	ldrb	r3, [r3, #0]
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b007      	add	sp, #28
 8005f7c:	bd90      	pop	{r4, r7, pc}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	ffffbfff 	.word	0xffffbfff

08005f84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	; 0x30
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	001a      	movs	r2, r3
 8005f92:	1cbb      	adds	r3, r7, #2
 8005f94:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f96:	2301      	movs	r3, #1
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f9a:	232b      	movs	r3, #43	; 0x2b
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2250      	movs	r2, #80	; 0x50
 8005fa6:	5c9b      	ldrb	r3, [r3, r2]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x2c>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e1b0      	b.n	8006312 <HAL_SPI_TransmitReceive+0x38e>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2250      	movs	r2, #80	; 0x50
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb8:	f7fe fa86 	bl	80044c8 <HAL_GetTick>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fc0:	2023      	movs	r0, #35	; 0x23
 8005fc2:	183b      	adds	r3, r7, r0
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	2151      	movs	r1, #81	; 0x51
 8005fc8:	5c52      	ldrb	r2, [r2, r1]
 8005fca:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005fd2:	231a      	movs	r3, #26
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	1cba      	adds	r2, r7, #2
 8005fd8:	8812      	ldrh	r2, [r2, #0]
 8005fda:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fdc:	183b      	adds	r3, r7, r0
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d011      	beq.n	8006008 <HAL_SPI_TransmitReceive+0x84>
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	2382      	movs	r3, #130	; 0x82
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d107      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x7a>
 8005ff6:	183b      	adds	r3, r7, r0
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d004      	beq.n	8006008 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005ffe:	232b      	movs	r3, #43	; 0x2b
 8006000:	18fb      	adds	r3, r7, r3
 8006002:	2202      	movs	r2, #2
 8006004:	701a      	strb	r2, [r3, #0]
    goto error;
 8006006:	e17d      	b.n	8006304 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d006      	beq.n	800601c <HAL_SPI_TransmitReceive+0x98>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_SPI_TransmitReceive+0x98>
 8006014:	1cbb      	adds	r3, r7, #2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800601c:	232b      	movs	r3, #43	; 0x2b
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
    goto error;
 8006024:	e16e      	b.n	8006304 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2251      	movs	r2, #81	; 0x51
 800602a:	5c9b      	ldrb	r3, [r3, r2]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b04      	cmp	r3, #4
 8006030:	d003      	beq.n	800603a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2251      	movs	r2, #81	; 0x51
 8006036:	2105      	movs	r1, #5
 8006038:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	1cba      	adds	r2, r7, #2
 800604a:	8812      	ldrh	r2, [r2, #0]
 800604c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1cba      	adds	r2, r7, #2
 8006052:	8812      	ldrh	r2, [r2, #0]
 8006054:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	1cba      	adds	r2, r7, #2
 8006060:	8812      	ldrh	r2, [r2, #0]
 8006062:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1cba      	adds	r2, r7, #2
 8006068:	8812      	ldrh	r2, [r2, #0]
 800606a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2240      	movs	r2, #64	; 0x40
 8006080:	4013      	ands	r3, r2
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d007      	beq.n	8006096 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	430a      	orrs	r2, r1
 8006094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	429a      	cmp	r2, r3
 80060a0:	d000      	beq.n	80060a4 <HAL_SPI_TransmitReceive+0x120>
 80060a2:	e07f      	b.n	80061a4 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x134>
 80060ac:	231a      	movs	r3, #26
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d000      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x134>
 80060b6:	e06a      	b.n	800618e <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	881a      	ldrh	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	1c9a      	adds	r2, r3, #2
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060dc:	e057      	b.n	800618e <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2202      	movs	r2, #2
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d11b      	bne.n	8006124 <HAL_SPI_TransmitReceive+0x1a0>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <HAL_SPI_TransmitReceive+0x1a0>
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d113      	bne.n	8006124 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	881a      	ldrh	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	1c9a      	adds	r2, r3, #2
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2201      	movs	r2, #1
 800612c:	4013      	ands	r3, r2
 800612e:	2b01      	cmp	r3, #1
 8006130:	d119      	bne.n	8006166 <HAL_SPI_TransmitReceive+0x1e2>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d014      	beq.n	8006166 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	b292      	uxth	r2, r2
 8006148:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	1c9a      	adds	r2, r3, #2
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006162:	2301      	movs	r3, #1
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006166:	f7fe f9af 	bl	80044c8 <HAL_GetTick>
 800616a:	0002      	movs	r2, r0
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006172:	429a      	cmp	r2, r3
 8006174:	d80b      	bhi.n	800618e <HAL_SPI_TransmitReceive+0x20a>
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	3301      	adds	r3, #1
 800617a:	d008      	beq.n	800618e <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 800617c:	232b      	movs	r3, #43	; 0x2b
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	2203      	movs	r2, #3
 8006182:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2251      	movs	r2, #81	; 0x51
 8006188:	2101      	movs	r1, #1
 800618a:	5499      	strb	r1, [r3, r2]
        goto error;
 800618c:	e0ba      	b.n	8006304 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1a2      	bne.n	80060de <HAL_SPI_TransmitReceive+0x15a>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d19d      	bne.n	80060de <HAL_SPI_TransmitReceive+0x15a>
 80061a2:	e083      	b.n	80062ac <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_SPI_TransmitReceive+0x234>
 80061ac:	231a      	movs	r3, #26
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d000      	beq.n	80061b8 <HAL_SPI_TransmitReceive+0x234>
 80061b6:	e06f      	b.n	8006298 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	7812      	ldrb	r2, [r2, #0]
 80061c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061de:	e05b      	b.n	8006298 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2202      	movs	r2, #2
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d11c      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x2a4>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d017      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x2a4>
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d114      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	7812      	ldrb	r2, [r2, #0]
 800620a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2201      	movs	r2, #1
 8006230:	4013      	ands	r3, r2
 8006232:	2b01      	cmp	r3, #1
 8006234:	d119      	bne.n	800626a <HAL_SPI_TransmitReceive+0x2e6>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d014      	beq.n	800626a <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006266:	2301      	movs	r3, #1
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800626a:	f7fe f92d 	bl	80044c8 <HAL_GetTick>
 800626e:	0002      	movs	r2, r0
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006276:	429a      	cmp	r2, r3
 8006278:	d802      	bhi.n	8006280 <HAL_SPI_TransmitReceive+0x2fc>
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	3301      	adds	r3, #1
 800627e:	d102      	bne.n	8006286 <HAL_SPI_TransmitReceive+0x302>
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	2b00      	cmp	r3, #0
 8006284:	d108      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8006286:	232b      	movs	r3, #43	; 0x2b
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	2203      	movs	r2, #3
 800628c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2251      	movs	r2, #81	; 0x51
 8006292:	2101      	movs	r1, #1
 8006294:	5499      	strb	r1, [r3, r2]
        goto error;
 8006296:	e035      	b.n	8006304 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d19e      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x25c>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d199      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	0018      	movs	r0, r3
 80062b4:	f000 f92a 	bl	800650c <SPI_EndRxTxTransaction>
 80062b8:	1e03      	subs	r3, r0, #0
 80062ba:	d007      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 80062bc:	232b      	movs	r3, #43	; 0x2b
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	2201      	movs	r2, #1
 80062c2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2220      	movs	r2, #32
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80062ca:	e01b      	b.n	8006304 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d004      	beq.n	80062fc <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80062f2:	232b      	movs	r3, #43	; 0x2b
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	e003      	b.n	8006304 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2251      	movs	r2, #81	; 0x51
 8006300:	2101      	movs	r1, #1
 8006302:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2250      	movs	r2, #80	; 0x50
 8006308:	2100      	movs	r1, #0
 800630a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800630c:	232b      	movs	r3, #43	; 0x2b
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	781b      	ldrb	r3, [r3, #0]
}
 8006312:	0018      	movs	r0, r3
 8006314:	46bd      	mov	sp, r7
 8006316:	b00c      	add	sp, #48	; 0x30
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	1dfb      	adds	r3, r7, #7
 800632a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800632c:	f7fe f8cc 	bl	80044c8 <HAL_GetTick>
 8006330:	0002      	movs	r2, r0
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	18d3      	adds	r3, r2, r3
 800633a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800633c:	f7fe f8c4 	bl	80044c8 <HAL_GetTick>
 8006340:	0003      	movs	r3, r0
 8006342:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006344:	4b3a      	ldr	r3, [pc, #232]	; (8006430 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	015b      	lsls	r3, r3, #5
 800634a:	0d1b      	lsrs	r3, r3, #20
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	4353      	muls	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006352:	e058      	b.n	8006406 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	3301      	adds	r3, #1
 8006358:	d055      	beq.n	8006406 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800635a:	f7fe f8b5 	bl	80044c8 <HAL_GetTick>
 800635e:	0002      	movs	r2, r0
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	429a      	cmp	r2, r3
 8006368:	d902      	bls.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x54>
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d142      	bne.n	80063f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	21e0      	movs	r1, #224	; 0xe0
 800637c:	438a      	bics	r2, r1
 800637e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	2382      	movs	r3, #130	; 0x82
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	429a      	cmp	r2, r3
 800638a:	d113      	bne.n	80063b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	429a      	cmp	r2, r3
 8006396:	d005      	beq.n	80063a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d107      	bne.n	80063b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2140      	movs	r1, #64	; 0x40
 80063b0:	438a      	bics	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b8:	2380      	movs	r3, #128	; 0x80
 80063ba:	019b      	lsls	r3, r3, #6
 80063bc:	429a      	cmp	r2, r3
 80063be:	d110      	bne.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	491a      	ldr	r1, [pc, #104]	; (8006434 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80063cc:	400a      	ands	r2, r1
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2180      	movs	r1, #128	; 0x80
 80063dc:	0189      	lsls	r1, r1, #6
 80063de:	430a      	orrs	r2, r1
 80063e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2251      	movs	r2, #81	; 0x51
 80063e6:	2101      	movs	r1, #1
 80063e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2250      	movs	r2, #80	; 0x50
 80063ee:	2100      	movs	r1, #0
 80063f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e017      	b.n	8006426 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	3b01      	subs	r3, #1
 8006404:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	4013      	ands	r3, r2
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	425a      	negs	r2, r3
 8006416:	4153      	adcs	r3, r2
 8006418:	b2db      	uxtb	r3, r3
 800641a:	001a      	movs	r2, r3
 800641c:	1dfb      	adds	r3, r7, #7
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d197      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	0018      	movs	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	b008      	add	sp, #32
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	20000000 	.word	0x20000000
 8006434:	ffffdfff 	.word	0xffffdfff

08006438 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af02      	add	r7, sp, #8
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	2382      	movs	r3, #130	; 0x82
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	429a      	cmp	r2, r3
 800644e:	d113      	bne.n	8006478 <SPI_EndRxTransaction+0x40>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	2380      	movs	r3, #128	; 0x80
 8006456:	021b      	lsls	r3, r3, #8
 8006458:	429a      	cmp	r2, r3
 800645a:	d005      	beq.n	8006468 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	429a      	cmp	r2, r3
 8006466:	d107      	bne.n	8006478 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2140      	movs	r1, #64	; 0x40
 8006474:	438a      	bics	r2, r1
 8006476:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	2382      	movs	r3, #130	; 0x82
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	429a      	cmp	r2, r3
 8006482:	d12b      	bne.n	80064dc <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	2380      	movs	r3, #128	; 0x80
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	429a      	cmp	r2, r3
 800648e:	d012      	beq.n	80064b6 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	0013      	movs	r3, r2
 800649a:	2200      	movs	r2, #0
 800649c:	2180      	movs	r1, #128	; 0x80
 800649e:	f7ff ff3d 	bl	800631c <SPI_WaitFlagStateUntilTimeout>
 80064a2:	1e03      	subs	r3, r0, #0
 80064a4:	d02d      	beq.n	8006502 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	2220      	movs	r2, #32
 80064ac:	431a      	orrs	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e026      	b.n	8006504 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	0013      	movs	r3, r2
 80064c0:	2200      	movs	r2, #0
 80064c2:	2101      	movs	r1, #1
 80064c4:	f7ff ff2a 	bl	800631c <SPI_WaitFlagStateUntilTimeout>
 80064c8:	1e03      	subs	r3, r0, #0
 80064ca:	d01a      	beq.n	8006502 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d0:	2220      	movs	r2, #32
 80064d2:	431a      	orrs	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e013      	b.n	8006504 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	0013      	movs	r3, r2
 80064e6:	2200      	movs	r2, #0
 80064e8:	2101      	movs	r1, #1
 80064ea:	f7ff ff17 	bl	800631c <SPI_WaitFlagStateUntilTimeout>
 80064ee:	1e03      	subs	r3, r0, #0
 80064f0:	d007      	beq.n	8006502 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	2220      	movs	r2, #32
 80064f8:	431a      	orrs	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e000      	b.n	8006504 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	0018      	movs	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	b004      	add	sp, #16
 800650a:	bd80      	pop	{r7, pc}

0800650c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006518:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <SPI_EndRxTxTransaction+0x84>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	491d      	ldr	r1, [pc, #116]	; (8006594 <SPI_EndRxTxTransaction+0x88>)
 800651e:	0018      	movs	r0, r3
 8006520:	f7f9 fe0e 	bl	8000140 <__udivsi3>
 8006524:	0003      	movs	r3, r0
 8006526:	001a      	movs	r2, r3
 8006528:	0013      	movs	r3, r2
 800652a:	015b      	lsls	r3, r3, #5
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	189b      	adds	r3, r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	2382      	movs	r3, #130	; 0x82
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	429a      	cmp	r2, r3
 8006540:	d112      	bne.n	8006568 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	0013      	movs	r3, r2
 800654c:	2200      	movs	r2, #0
 800654e:	2180      	movs	r1, #128	; 0x80
 8006550:	f7ff fee4 	bl	800631c <SPI_WaitFlagStateUntilTimeout>
 8006554:	1e03      	subs	r3, r0, #0
 8006556:	d016      	beq.n	8006586 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655c:	2220      	movs	r2, #32
 800655e:	431a      	orrs	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e00f      	b.n	8006588 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	3b01      	subs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2280      	movs	r2, #128	; 0x80
 800657c:	4013      	ands	r3, r2
 800657e:	2b80      	cmp	r3, #128	; 0x80
 8006580:	d0f2      	beq.n	8006568 <SPI_EndRxTxTransaction+0x5c>
 8006582:	e000      	b.n	8006586 <SPI_EndRxTxTransaction+0x7a>
        break;
 8006584:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	0018      	movs	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	b006      	add	sp, #24
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000000 	.word	0x20000000
 8006594:	016e3600 	.word	0x016e3600

08006598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e032      	b.n	8006610 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2239      	movs	r2, #57	; 0x39
 80065ae:	5c9b      	ldrb	r3, [r3, r2]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d107      	bne.n	80065c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2238      	movs	r2, #56	; 0x38
 80065ba:	2100      	movs	r1, #0
 80065bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	0018      	movs	r0, r3
 80065c2:	f7fd fda7 	bl	8004114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2239      	movs	r2, #57	; 0x39
 80065ca:	2102      	movs	r1, #2
 80065cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3304      	adds	r3, #4
 80065d6:	0019      	movs	r1, r3
 80065d8:	0010      	movs	r0, r2
 80065da:	f000 fa01 	bl	80069e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	223e      	movs	r2, #62	; 0x3e
 80065e2:	2101      	movs	r1, #1
 80065e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	223a      	movs	r2, #58	; 0x3a
 80065ea:	2101      	movs	r1, #1
 80065ec:	5499      	strb	r1, [r3, r2]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	223b      	movs	r2, #59	; 0x3b
 80065f2:	2101      	movs	r1, #1
 80065f4:	5499      	strb	r1, [r3, r2]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	223c      	movs	r2, #60	; 0x3c
 80065fa:	2101      	movs	r1, #1
 80065fc:	5499      	strb	r1, [r3, r2]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	223d      	movs	r2, #61	; 0x3d
 8006602:	2101      	movs	r1, #1
 8006604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2239      	movs	r2, #57	; 0x39
 800660a:	2101      	movs	r1, #1
 800660c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	0018      	movs	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	b002      	add	sp, #8
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2202      	movs	r2, #2
 8006628:	4013      	ands	r3, r2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d124      	bne.n	8006678 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	2202      	movs	r2, #2
 8006636:	4013      	ands	r3, r2
 8006638:	2b02      	cmp	r3, #2
 800663a:	d11d      	bne.n	8006678 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2203      	movs	r2, #3
 8006642:	4252      	negs	r2, r2
 8006644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	2203      	movs	r2, #3
 8006654:	4013      	ands	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	0018      	movs	r0, r3
 800665c:	f000 f9a8 	bl	80069b0 <HAL_TIM_IC_CaptureCallback>
 8006660:	e007      	b.n	8006672 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	0018      	movs	r0, r3
 8006666:	f000 f99b 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	0018      	movs	r0, r3
 800666e:	f000 f9a7 	bl	80069c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2204      	movs	r2, #4
 8006680:	4013      	ands	r3, r2
 8006682:	2b04      	cmp	r3, #4
 8006684:	d125      	bne.n	80066d2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	2204      	movs	r2, #4
 800668e:	4013      	ands	r3, r2
 8006690:	2b04      	cmp	r3, #4
 8006692:	d11e      	bne.n	80066d2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2205      	movs	r2, #5
 800669a:	4252      	negs	r2, r2
 800669c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2202      	movs	r2, #2
 80066a2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	23c0      	movs	r3, #192	; 0xc0
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4013      	ands	r3, r2
 80066b0:	d004      	beq.n	80066bc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	0018      	movs	r0, r3
 80066b6:	f000 f97b 	bl	80069b0 <HAL_TIM_IC_CaptureCallback>
 80066ba:	e007      	b.n	80066cc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	0018      	movs	r0, r3
 80066c0:	f000 f96e 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	0018      	movs	r0, r3
 80066c8:	f000 f97a 	bl	80069c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2208      	movs	r2, #8
 80066da:	4013      	ands	r3, r2
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d124      	bne.n	800672a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	2208      	movs	r2, #8
 80066e8:	4013      	ands	r3, r2
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d11d      	bne.n	800672a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2209      	movs	r2, #9
 80066f4:	4252      	negs	r2, r2
 80066f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2204      	movs	r2, #4
 80066fc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	2203      	movs	r2, #3
 8006706:	4013      	ands	r3, r2
 8006708:	d004      	beq.n	8006714 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	0018      	movs	r0, r3
 800670e:	f000 f94f 	bl	80069b0 <HAL_TIM_IC_CaptureCallback>
 8006712:	e007      	b.n	8006724 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	0018      	movs	r0, r3
 8006718:	f000 f942 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	0018      	movs	r0, r3
 8006720:	f000 f94e 	bl	80069c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2210      	movs	r2, #16
 8006732:	4013      	ands	r3, r2
 8006734:	2b10      	cmp	r3, #16
 8006736:	d125      	bne.n	8006784 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2210      	movs	r2, #16
 8006740:	4013      	ands	r3, r2
 8006742:	2b10      	cmp	r3, #16
 8006744:	d11e      	bne.n	8006784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2211      	movs	r2, #17
 800674c:	4252      	negs	r2, r2
 800674e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2208      	movs	r2, #8
 8006754:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	23c0      	movs	r3, #192	; 0xc0
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4013      	ands	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	0018      	movs	r0, r3
 8006768:	f000 f922 	bl	80069b0 <HAL_TIM_IC_CaptureCallback>
 800676c:	e007      	b.n	800677e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	0018      	movs	r0, r3
 8006772:	f000 f915 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0018      	movs	r0, r3
 800677a:	f000 f921 	bl	80069c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2201      	movs	r2, #1
 800678c:	4013      	ands	r3, r2
 800678e:	2b01      	cmp	r3, #1
 8006790:	d10f      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	4013      	ands	r3, r2
 800679c:	2b01      	cmp	r3, #1
 800679e:	d108      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2202      	movs	r2, #2
 80067a6:	4252      	negs	r2, r2
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	0018      	movs	r0, r3
 80067ae:	f000 f8ef 	bl	8006990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2240      	movs	r2, #64	; 0x40
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	d10f      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	2240      	movs	r2, #64	; 0x40
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b40      	cmp	r3, #64	; 0x40
 80067cc:	d108      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2241      	movs	r2, #65	; 0x41
 80067d4:	4252      	negs	r2, r2
 80067d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	0018      	movs	r0, r3
 80067dc:	f000 f8f8 	bl	80069d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067e0:	46c0      	nop			; (mov r8, r8)
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b002      	add	sp, #8
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067f2:	230f      	movs	r3, #15
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2238      	movs	r2, #56	; 0x38
 80067fe:	5c9b      	ldrb	r3, [r3, r2]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIM_ConfigClockSource+0x20>
 8006804:	2302      	movs	r3, #2
 8006806:	e0bc      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x19a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2238      	movs	r2, #56	; 0x38
 800680c:	2101      	movs	r1, #1
 800680e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2239      	movs	r2, #57	; 0x39
 8006814:	2102      	movs	r1, #2
 8006816:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2277      	movs	r2, #119	; 0x77
 8006824:	4393      	bics	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4a58      	ldr	r2, [pc, #352]	; (800698c <HAL_TIM_ConfigClockSource+0x1a4>)
 800682c:	4013      	ands	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2280      	movs	r2, #128	; 0x80
 800683e:	0192      	lsls	r2, r2, #6
 8006840:	4293      	cmp	r3, r2
 8006842:	d040      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0xde>
 8006844:	2280      	movs	r2, #128	; 0x80
 8006846:	0192      	lsls	r2, r2, #6
 8006848:	4293      	cmp	r3, r2
 800684a:	d900      	bls.n	800684e <HAL_TIM_ConfigClockSource+0x66>
 800684c:	e088      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
 800684e:	2280      	movs	r2, #128	; 0x80
 8006850:	0152      	lsls	r2, r2, #5
 8006852:	4293      	cmp	r3, r2
 8006854:	d100      	bne.n	8006858 <HAL_TIM_ConfigClockSource+0x70>
 8006856:	e088      	b.n	800696a <HAL_TIM_ConfigClockSource+0x182>
 8006858:	2280      	movs	r2, #128	; 0x80
 800685a:	0152      	lsls	r2, r2, #5
 800685c:	4293      	cmp	r3, r2
 800685e:	d900      	bls.n	8006862 <HAL_TIM_ConfigClockSource+0x7a>
 8006860:	e07e      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
 8006862:	2b70      	cmp	r3, #112	; 0x70
 8006864:	d018      	beq.n	8006898 <HAL_TIM_ConfigClockSource+0xb0>
 8006866:	d900      	bls.n	800686a <HAL_TIM_ConfigClockSource+0x82>
 8006868:	e07a      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
 800686a:	2b60      	cmp	r3, #96	; 0x60
 800686c:	d04f      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x126>
 800686e:	d900      	bls.n	8006872 <HAL_TIM_ConfigClockSource+0x8a>
 8006870:	e076      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
 8006872:	2b50      	cmp	r3, #80	; 0x50
 8006874:	d03b      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0x106>
 8006876:	d900      	bls.n	800687a <HAL_TIM_ConfigClockSource+0x92>
 8006878:	e072      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d057      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x146>
 800687e:	d900      	bls.n	8006882 <HAL_TIM_ConfigClockSource+0x9a>
 8006880:	e06e      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
 8006882:	2b30      	cmp	r3, #48	; 0x30
 8006884:	d063      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x166>
 8006886:	d86b      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
 8006888:	2b20      	cmp	r3, #32
 800688a:	d060      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x166>
 800688c:	d868      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d05d      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x166>
 8006892:	2b10      	cmp	r3, #16
 8006894:	d05b      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x166>
 8006896:	e063      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	6899      	ldr	r1, [r3, #8]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f000 f972 	bl	8006b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2277      	movs	r2, #119	; 0x77
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	609a      	str	r2, [r3, #8]
      break;
 80068c4:	e052      	b.n	800696c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6899      	ldr	r1, [r3, #8]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f000 f95b 	bl	8006b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2180      	movs	r1, #128	; 0x80
 80068e6:	01c9      	lsls	r1, r1, #7
 80068e8:	430a      	orrs	r2, r1
 80068ea:	609a      	str	r2, [r3, #8]
      break;
 80068ec:	e03e      	b.n	800696c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6859      	ldr	r1, [r3, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	001a      	movs	r2, r3
 80068fc:	f000 f8ce 	bl	8006a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2150      	movs	r1, #80	; 0x50
 8006906:	0018      	movs	r0, r3
 8006908:	f000 f928 	bl	8006b5c <TIM_ITRx_SetConfig>
      break;
 800690c:	e02e      	b.n	800696c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	001a      	movs	r2, r3
 800691c:	f000 f8ec 	bl	8006af8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2160      	movs	r1, #96	; 0x60
 8006926:	0018      	movs	r0, r3
 8006928:	f000 f918 	bl	8006b5c <TIM_ITRx_SetConfig>
      break;
 800692c:	e01e      	b.n	800696c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	001a      	movs	r2, r3
 800693c:	f000 f8ae 	bl	8006a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2140      	movs	r1, #64	; 0x40
 8006946:	0018      	movs	r0, r3
 8006948:	f000 f908 	bl	8006b5c <TIM_ITRx_SetConfig>
      break;
 800694c:	e00e      	b.n	800696c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	0019      	movs	r1, r3
 8006958:	0010      	movs	r0, r2
 800695a:	f000 f8ff 	bl	8006b5c <TIM_ITRx_SetConfig>
      break;
 800695e:	e005      	b.n	800696c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006960:	230f      	movs	r3, #15
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	2201      	movs	r2, #1
 8006966:	701a      	strb	r2, [r3, #0]
      break;
 8006968:	e000      	b.n	800696c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800696a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2239      	movs	r2, #57	; 0x39
 8006970:	2101      	movs	r1, #1
 8006972:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2238      	movs	r2, #56	; 0x38
 8006978:	2100      	movs	r1, #0
 800697a:	5499      	strb	r1, [r3, r2]

  return status;
 800697c:	230f      	movs	r3, #15
 800697e:	18fb      	adds	r3, r7, r3
 8006980:	781b      	ldrb	r3, [r3, #0]
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b004      	add	sp, #16
 8006988:	bd80      	pop	{r7, pc}
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	ffff00ff 	.word	0xffff00ff

08006990 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46bd      	mov	sp, r7
 800699c:	b002      	add	sp, #8
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069a8:	46c0      	nop			; (mov r8, r8)
 80069aa:	46bd      	mov	sp, r7
 80069ac:	b002      	add	sp, #8
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069b8:	46c0      	nop			; (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b002      	add	sp, #8
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069c8:	46c0      	nop			; (mov r8, r8)
 80069ca:	46bd      	mov	sp, r7
 80069cc:	b002      	add	sp, #8
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069d8:	46c0      	nop			; (mov r8, r8)
 80069da:	46bd      	mov	sp, r7
 80069dc:	b002      	add	sp, #8
 80069de:	bd80      	pop	{r7, pc}

080069e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	2380      	movs	r3, #128	; 0x80
 80069f4:	05db      	lsls	r3, r3, #23
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d00b      	beq.n	8006a12 <TIM_Base_SetConfig+0x32>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a23      	ldr	r2, [pc, #140]	; (8006a8c <TIM_Base_SetConfig+0xac>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d007      	beq.n	8006a12 <TIM_Base_SetConfig+0x32>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a22      	ldr	r2, [pc, #136]	; (8006a90 <TIM_Base_SetConfig+0xb0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_Base_SetConfig+0x32>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a21      	ldr	r2, [pc, #132]	; (8006a94 <TIM_Base_SetConfig+0xb4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d108      	bne.n	8006a24 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2270      	movs	r2, #112	; 0x70
 8006a16:	4393      	bics	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	2380      	movs	r3, #128	; 0x80
 8006a28:	05db      	lsls	r3, r3, #23
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d00b      	beq.n	8006a46 <TIM_Base_SetConfig+0x66>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a16      	ldr	r2, [pc, #88]	; (8006a8c <TIM_Base_SetConfig+0xac>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d007      	beq.n	8006a46 <TIM_Base_SetConfig+0x66>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a15      	ldr	r2, [pc, #84]	; (8006a90 <TIM_Base_SetConfig+0xb0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d003      	beq.n	8006a46 <TIM_Base_SetConfig+0x66>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a14      	ldr	r2, [pc, #80]	; (8006a94 <TIM_Base_SetConfig+0xb4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d108      	bne.n	8006a58 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a13      	ldr	r2, [pc, #76]	; (8006a98 <TIM_Base_SetConfig+0xb8>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2280      	movs	r2, #128	; 0x80
 8006a5c:	4393      	bics	r3, r2
 8006a5e:	001a      	movs	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	615a      	str	r2, [r3, #20]
}
 8006a84:	46c0      	nop			; (mov r8, r8)
 8006a86:	46bd      	mov	sp, r7
 8006a88:	b004      	add	sp, #16
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40010800 	.word	0x40010800
 8006a94:	40011400 	.word	0x40011400
 8006a98:	fffffcff 	.word	0xfffffcff

08006a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	4393      	bics	r3, r2
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	22f0      	movs	r2, #240	; 0xf0
 8006ac6:	4393      	bics	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	220a      	movs	r2, #10
 8006ad8:	4393      	bics	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	621a      	str	r2, [r3, #32]
}
 8006af0:	46c0      	nop			; (mov r8, r8)
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b006      	add	sp, #24
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	2210      	movs	r2, #16
 8006b0a:	4393      	bics	r3, r2
 8006b0c:	001a      	movs	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	4a0d      	ldr	r2, [pc, #52]	; (8006b58 <TIM_TI2_ConfigInputStage+0x60>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	22a0      	movs	r2, #160	; 0xa0
 8006b34:	4393      	bics	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b006      	add	sp, #24
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	ffff0fff 	.word	0xffff0fff

08006b5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2270      	movs	r2, #112	; 0x70
 8006b70:	4393      	bics	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	2207      	movs	r2, #7
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	609a      	str	r2, [r3, #8]
}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b004      	add	sp, #16
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <TIM_ETR_SetConfig+0x3c>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	021a      	lsls	r2, r3, #8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	609a      	str	r2, [r3, #8]
}
 8006bc4:	46c0      	nop			; (mov r8, r8)
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b006      	add	sp, #24
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	ffff00ff 	.word	0xffff00ff

08006bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2238      	movs	r2, #56	; 0x38
 8006bde:	5c9b      	ldrb	r3, [r3, r2]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e047      	b.n	8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2238      	movs	r2, #56	; 0x38
 8006bec:	2101      	movs	r1, #1
 8006bee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2239      	movs	r2, #57	; 0x39
 8006bf4:	2102      	movs	r1, #2
 8006bf6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2270      	movs	r2, #112	; 0x70
 8006c0c:	4393      	bics	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	2380      	movs	r3, #128	; 0x80
 8006c28:	05db      	lsls	r3, r3, #23
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d00e      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a11      	ldr	r2, [pc, #68]	; (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a10      	ldr	r2, [pc, #64]	; (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d10c      	bne.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2280      	movs	r2, #128	; 0x80
 8006c50:	4393      	bics	r3, r2
 8006c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2239      	movs	r2, #57	; 0x39
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2238      	movs	r2, #56	; 0x38
 8006c72:	2100      	movs	r1, #0
 8006c74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	0018      	movs	r0, r3
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b004      	add	sp, #16
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40000400 	.word	0x40000400
 8006c84:	40010800 	.word	0x40010800
 8006c88:	40011400 	.word	0x40011400

08006c8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e044      	b.n	8006d28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d107      	bne.n	8006cb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2278      	movs	r2, #120	; 0x78
 8006caa:	2100      	movs	r1, #0
 8006cac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f7fd fa4d 	bl	8004150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2224      	movs	r2, #36	; 0x24
 8006cba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	438a      	bics	r2, r1
 8006cca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f000 f8d0 	bl	8006e74 <UART_SetConfig>
 8006cd4:	0003      	movs	r3, r0
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e024      	b.n	8006d28 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f000 fb61 	bl	80073b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	490d      	ldr	r1, [pc, #52]	; (8006d30 <HAL_UART_Init+0xa4>)
 8006cfa:	400a      	ands	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	212a      	movs	r1, #42	; 0x2a
 8006d0a:	438a      	bics	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2101      	movs	r1, #1
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	0018      	movs	r0, r3
 8006d22:	f000 fbf9 	bl	8007518 <UART_CheckIdleState>
 8006d26:	0003      	movs	r3, r0
}
 8006d28:	0018      	movs	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b002      	add	sp, #8
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	ffffb7ff 	.word	0xffffb7ff

08006d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	1dbb      	adds	r3, r7, #6
 8006d42:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d000      	beq.n	8006d4e <HAL_UART_Transmit+0x1a>
 8006d4c:	e08c      	b.n	8006e68 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_UART_Transmit+0x28>
 8006d54:	1dbb      	adds	r3, r7, #6
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e084      	b.n	8006e6a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	2380      	movs	r3, #128	; 0x80
 8006d66:	015b      	lsls	r3, r3, #5
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d109      	bne.n	8006d80 <HAL_UART_Transmit+0x4c>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d105      	bne.n	8006d80 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2201      	movs	r2, #1
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d001      	beq.n	8006d80 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e074      	b.n	8006e6a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2284      	movs	r2, #132	; 0x84
 8006d84:	2100      	movs	r1, #0
 8006d86:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2221      	movs	r2, #33	; 0x21
 8006d8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d8e:	f7fd fb9b 	bl	80044c8 <HAL_GetTick>
 8006d92:	0003      	movs	r3, r0
 8006d94:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	1dba      	adds	r2, r7, #6
 8006d9a:	2150      	movs	r1, #80	; 0x50
 8006d9c:	8812      	ldrh	r2, [r2, #0]
 8006d9e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	1dba      	adds	r2, r7, #6
 8006da4:	2152      	movs	r1, #82	; 0x52
 8006da6:	8812      	ldrh	r2, [r2, #0]
 8006da8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	2380      	movs	r3, #128	; 0x80
 8006db0:	015b      	lsls	r3, r3, #5
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d108      	bne.n	8006dc8 <HAL_UART_Transmit+0x94>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d104      	bne.n	8006dc8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	e003      	b.n	8006dd0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dd0:	e02f      	b.n	8006e32 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	0013      	movs	r3, r2
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2180      	movs	r1, #128	; 0x80
 8006de0:	f000 fc42 	bl	8007668 <UART_WaitOnFlagUntilTimeout>
 8006de4:	1e03      	subs	r3, r0, #0
 8006de6:	d004      	beq.n	8006df2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e03b      	b.n	8006e6a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10b      	bne.n	8006e10 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	001a      	movs	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	05d2      	lsls	r2, r2, #23
 8006e04:	0dd2      	lsrs	r2, r2, #23
 8006e06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	3302      	adds	r3, #2
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	e007      	b.n	8006e20 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	781a      	ldrb	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2252      	movs	r2, #82	; 0x52
 8006e24:	5a9b      	ldrh	r3, [r3, r2]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b299      	uxth	r1, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2252      	movs	r2, #82	; 0x52
 8006e30:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2252      	movs	r2, #82	; 0x52
 8006e36:	5a9b      	ldrh	r3, [r3, r2]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1c9      	bne.n	8006dd2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	0013      	movs	r3, r2
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2140      	movs	r1, #64	; 0x40
 8006e4c:	f000 fc0c 	bl	8007668 <UART_WaitOnFlagUntilTimeout>
 8006e50:	1e03      	subs	r3, r0, #0
 8006e52:	d004      	beq.n	8006e5e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2220      	movs	r2, #32
 8006e58:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e005      	b.n	8006e6a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2220      	movs	r2, #32
 8006e62:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	e000      	b.n	8006e6a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006e68:	2302      	movs	r3, #2
  }
}
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	b008      	add	sp, #32
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e74:	b5b0      	push	{r4, r5, r7, lr}
 8006e76:	b08e      	sub	sp, #56	; 0x38
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e7c:	231a      	movs	r3, #26
 8006e7e:	2218      	movs	r2, #24
 8006e80:	189b      	adds	r3, r3, r2
 8006e82:	19db      	adds	r3, r3, r7
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	431a      	orrs	r2, r3
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4ac3      	ldr	r2, [pc, #780]	; (80071b4 <UART_SetConfig+0x340>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	0019      	movs	r1, r3
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4abe      	ldr	r2, [pc, #760]	; (80071b8 <UART_SetConfig+0x344>)
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	0019      	movs	r1, r3
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4ab8      	ldr	r2, [pc, #736]	; (80071bc <UART_SetConfig+0x348>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	4ab4      	ldr	r2, [pc, #720]	; (80071c0 <UART_SetConfig+0x34c>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	0019      	movs	r1, r3
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006efa:	430a      	orrs	r2, r1
 8006efc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4ab0      	ldr	r2, [pc, #704]	; (80071c4 <UART_SetConfig+0x350>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d131      	bne.n	8006f6c <UART_SetConfig+0xf8>
 8006f08:	4baf      	ldr	r3, [pc, #700]	; (80071c8 <UART_SetConfig+0x354>)
 8006f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d01d      	beq.n	8006f50 <UART_SetConfig+0xdc>
 8006f14:	d823      	bhi.n	8006f5e <UART_SetConfig+0xea>
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d00c      	beq.n	8006f34 <UART_SetConfig+0xc0>
 8006f1a:	d820      	bhi.n	8006f5e <UART_SetConfig+0xea>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <UART_SetConfig+0xb2>
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d00e      	beq.n	8006f42 <UART_SetConfig+0xce>
 8006f24:	e01b      	b.n	8006f5e <UART_SetConfig+0xea>
 8006f26:	231b      	movs	r3, #27
 8006f28:	2218      	movs	r2, #24
 8006f2a:	189b      	adds	r3, r3, r2
 8006f2c:	19db      	adds	r3, r3, r7
 8006f2e:	2201      	movs	r2, #1
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	e0b4      	b.n	800709e <UART_SetConfig+0x22a>
 8006f34:	231b      	movs	r3, #27
 8006f36:	2218      	movs	r2, #24
 8006f38:	189b      	adds	r3, r3, r2
 8006f3a:	19db      	adds	r3, r3, r7
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	e0ad      	b.n	800709e <UART_SetConfig+0x22a>
 8006f42:	231b      	movs	r3, #27
 8006f44:	2218      	movs	r2, #24
 8006f46:	189b      	adds	r3, r3, r2
 8006f48:	19db      	adds	r3, r3, r7
 8006f4a:	2204      	movs	r2, #4
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	e0a6      	b.n	800709e <UART_SetConfig+0x22a>
 8006f50:	231b      	movs	r3, #27
 8006f52:	2218      	movs	r2, #24
 8006f54:	189b      	adds	r3, r3, r2
 8006f56:	19db      	adds	r3, r3, r7
 8006f58:	2208      	movs	r2, #8
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	e09f      	b.n	800709e <UART_SetConfig+0x22a>
 8006f5e:	231b      	movs	r3, #27
 8006f60:	2218      	movs	r2, #24
 8006f62:	189b      	adds	r3, r3, r2
 8006f64:	19db      	adds	r3, r3, r7
 8006f66:	2210      	movs	r2, #16
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	e098      	b.n	800709e <UART_SetConfig+0x22a>
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a96      	ldr	r2, [pc, #600]	; (80071cc <UART_SetConfig+0x358>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d131      	bne.n	8006fda <UART_SetConfig+0x166>
 8006f76:	4b94      	ldr	r3, [pc, #592]	; (80071c8 <UART_SetConfig+0x354>)
 8006f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7a:	220c      	movs	r2, #12
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	2b0c      	cmp	r3, #12
 8006f80:	d01d      	beq.n	8006fbe <UART_SetConfig+0x14a>
 8006f82:	d823      	bhi.n	8006fcc <UART_SetConfig+0x158>
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d00c      	beq.n	8006fa2 <UART_SetConfig+0x12e>
 8006f88:	d820      	bhi.n	8006fcc <UART_SetConfig+0x158>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <UART_SetConfig+0x120>
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d00e      	beq.n	8006fb0 <UART_SetConfig+0x13c>
 8006f92:	e01b      	b.n	8006fcc <UART_SetConfig+0x158>
 8006f94:	231b      	movs	r3, #27
 8006f96:	2218      	movs	r2, #24
 8006f98:	189b      	adds	r3, r3, r2
 8006f9a:	19db      	adds	r3, r3, r7
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	e07d      	b.n	800709e <UART_SetConfig+0x22a>
 8006fa2:	231b      	movs	r3, #27
 8006fa4:	2218      	movs	r2, #24
 8006fa6:	189b      	adds	r3, r3, r2
 8006fa8:	19db      	adds	r3, r3, r7
 8006faa:	2202      	movs	r2, #2
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	e076      	b.n	800709e <UART_SetConfig+0x22a>
 8006fb0:	231b      	movs	r3, #27
 8006fb2:	2218      	movs	r2, #24
 8006fb4:	189b      	adds	r3, r3, r2
 8006fb6:	19db      	adds	r3, r3, r7
 8006fb8:	2204      	movs	r2, #4
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	e06f      	b.n	800709e <UART_SetConfig+0x22a>
 8006fbe:	231b      	movs	r3, #27
 8006fc0:	2218      	movs	r2, #24
 8006fc2:	189b      	adds	r3, r3, r2
 8006fc4:	19db      	adds	r3, r3, r7
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	e068      	b.n	800709e <UART_SetConfig+0x22a>
 8006fcc:	231b      	movs	r3, #27
 8006fce:	2218      	movs	r2, #24
 8006fd0:	189b      	adds	r3, r3, r2
 8006fd2:	19db      	adds	r3, r3, r7
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e061      	b.n	800709e <UART_SetConfig+0x22a>
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a7c      	ldr	r2, [pc, #496]	; (80071d0 <UART_SetConfig+0x35c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d106      	bne.n	8006ff2 <UART_SetConfig+0x17e>
 8006fe4:	231b      	movs	r3, #27
 8006fe6:	2218      	movs	r2, #24
 8006fe8:	189b      	adds	r3, r3, r2
 8006fea:	19db      	adds	r3, r3, r7
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	e055      	b.n	800709e <UART_SetConfig+0x22a>
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a77      	ldr	r2, [pc, #476]	; (80071d4 <UART_SetConfig+0x360>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d106      	bne.n	800700a <UART_SetConfig+0x196>
 8006ffc:	231b      	movs	r3, #27
 8006ffe:	2218      	movs	r2, #24
 8007000:	189b      	adds	r3, r3, r2
 8007002:	19db      	adds	r3, r3, r7
 8007004:	2200      	movs	r2, #0
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	e049      	b.n	800709e <UART_SetConfig+0x22a>
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a6b      	ldr	r2, [pc, #428]	; (80071bc <UART_SetConfig+0x348>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d13e      	bne.n	8007092 <UART_SetConfig+0x21e>
 8007014:	4b6c      	ldr	r3, [pc, #432]	; (80071c8 <UART_SetConfig+0x354>)
 8007016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007018:	23c0      	movs	r3, #192	; 0xc0
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	4013      	ands	r3, r2
 800701e:	22c0      	movs	r2, #192	; 0xc0
 8007020:	0112      	lsls	r2, r2, #4
 8007022:	4293      	cmp	r3, r2
 8007024:	d027      	beq.n	8007076 <UART_SetConfig+0x202>
 8007026:	22c0      	movs	r2, #192	; 0xc0
 8007028:	0112      	lsls	r2, r2, #4
 800702a:	4293      	cmp	r3, r2
 800702c:	d82a      	bhi.n	8007084 <UART_SetConfig+0x210>
 800702e:	2280      	movs	r2, #128	; 0x80
 8007030:	0112      	lsls	r2, r2, #4
 8007032:	4293      	cmp	r3, r2
 8007034:	d011      	beq.n	800705a <UART_SetConfig+0x1e6>
 8007036:	2280      	movs	r2, #128	; 0x80
 8007038:	0112      	lsls	r2, r2, #4
 800703a:	4293      	cmp	r3, r2
 800703c:	d822      	bhi.n	8007084 <UART_SetConfig+0x210>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <UART_SetConfig+0x1d8>
 8007042:	2280      	movs	r2, #128	; 0x80
 8007044:	00d2      	lsls	r2, r2, #3
 8007046:	4293      	cmp	r3, r2
 8007048:	d00e      	beq.n	8007068 <UART_SetConfig+0x1f4>
 800704a:	e01b      	b.n	8007084 <UART_SetConfig+0x210>
 800704c:	231b      	movs	r3, #27
 800704e:	2218      	movs	r2, #24
 8007050:	189b      	adds	r3, r3, r2
 8007052:	19db      	adds	r3, r3, r7
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	e021      	b.n	800709e <UART_SetConfig+0x22a>
 800705a:	231b      	movs	r3, #27
 800705c:	2218      	movs	r2, #24
 800705e:	189b      	adds	r3, r3, r2
 8007060:	19db      	adds	r3, r3, r7
 8007062:	2202      	movs	r2, #2
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	e01a      	b.n	800709e <UART_SetConfig+0x22a>
 8007068:	231b      	movs	r3, #27
 800706a:	2218      	movs	r2, #24
 800706c:	189b      	adds	r3, r3, r2
 800706e:	19db      	adds	r3, r3, r7
 8007070:	2204      	movs	r2, #4
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	e013      	b.n	800709e <UART_SetConfig+0x22a>
 8007076:	231b      	movs	r3, #27
 8007078:	2218      	movs	r2, #24
 800707a:	189b      	adds	r3, r3, r2
 800707c:	19db      	adds	r3, r3, r7
 800707e:	2208      	movs	r2, #8
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	e00c      	b.n	800709e <UART_SetConfig+0x22a>
 8007084:	231b      	movs	r3, #27
 8007086:	2218      	movs	r2, #24
 8007088:	189b      	adds	r3, r3, r2
 800708a:	19db      	adds	r3, r3, r7
 800708c:	2210      	movs	r2, #16
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e005      	b.n	800709e <UART_SetConfig+0x22a>
 8007092:	231b      	movs	r3, #27
 8007094:	2218      	movs	r2, #24
 8007096:	189b      	adds	r3, r3, r2
 8007098:	19db      	adds	r3, r3, r7
 800709a:	2210      	movs	r2, #16
 800709c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a46      	ldr	r2, [pc, #280]	; (80071bc <UART_SetConfig+0x348>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d000      	beq.n	80070aa <UART_SetConfig+0x236>
 80070a8:	e09a      	b.n	80071e0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070aa:	231b      	movs	r3, #27
 80070ac:	2218      	movs	r2, #24
 80070ae:	189b      	adds	r3, r3, r2
 80070b0:	19db      	adds	r3, r3, r7
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d01d      	beq.n	80070f4 <UART_SetConfig+0x280>
 80070b8:	dc20      	bgt.n	80070fc <UART_SetConfig+0x288>
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d015      	beq.n	80070ea <UART_SetConfig+0x276>
 80070be:	dc1d      	bgt.n	80070fc <UART_SetConfig+0x288>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <UART_SetConfig+0x256>
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d005      	beq.n	80070d4 <UART_SetConfig+0x260>
 80070c8:	e018      	b.n	80070fc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ca:	f7fe fa71 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 80070ce:	0003      	movs	r3, r0
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070d2:	e01c      	b.n	800710e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070d4:	4b3c      	ldr	r3, [pc, #240]	; (80071c8 <UART_SetConfig+0x354>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2210      	movs	r2, #16
 80070da:	4013      	ands	r3, r2
 80070dc:	d002      	beq.n	80070e4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80070de:	4b3e      	ldr	r3, [pc, #248]	; (80071d8 <UART_SetConfig+0x364>)
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070e2:	e014      	b.n	800710e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80070e4:	4b3d      	ldr	r3, [pc, #244]	; (80071dc <UART_SetConfig+0x368>)
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070e8:	e011      	b.n	800710e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ea:	f7fe f9b1 	bl	8005450 <HAL_RCC_GetSysClockFreq>
 80070ee:	0003      	movs	r3, r0
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070f2:	e00c      	b.n	800710e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f4:	2380      	movs	r3, #128	; 0x80
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070fa:	e008      	b.n	800710e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007100:	231a      	movs	r3, #26
 8007102:	2218      	movs	r2, #24
 8007104:	189b      	adds	r3, r3, r2
 8007106:	19db      	adds	r3, r3, r7
 8007108:	2201      	movs	r2, #1
 800710a:	701a      	strb	r2, [r3, #0]
        break;
 800710c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d100      	bne.n	8007116 <UART_SetConfig+0x2a2>
 8007114:	e133      	b.n	800737e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	0013      	movs	r3, r2
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	189b      	adds	r3, r3, r2
 8007120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007122:	429a      	cmp	r2, r3
 8007124:	d305      	bcc.n	8007132 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800712c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800712e:	429a      	cmp	r2, r3
 8007130:	d906      	bls.n	8007140 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007132:	231a      	movs	r3, #26
 8007134:	2218      	movs	r2, #24
 8007136:	189b      	adds	r3, r3, r2
 8007138:	19db      	adds	r3, r3, r7
 800713a:	2201      	movs	r2, #1
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e11e      	b.n	800737e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	6939      	ldr	r1, [r7, #16]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	000b      	movs	r3, r1
 800714e:	0e1b      	lsrs	r3, r3, #24
 8007150:	0010      	movs	r0, r2
 8007152:	0205      	lsls	r5, r0, #8
 8007154:	431d      	orrs	r5, r3
 8007156:	000b      	movs	r3, r1
 8007158:	021c      	lsls	r4, r3, #8
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	085b      	lsrs	r3, r3, #1
 8007160:	60bb      	str	r3, [r7, #8]
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	68b8      	ldr	r0, [r7, #8]
 8007168:	68f9      	ldr	r1, [r7, #12]
 800716a:	1900      	adds	r0, r0, r4
 800716c:	4169      	adcs	r1, r5
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	2300      	movs	r3, #0
 8007176:	607b      	str	r3, [r7, #4]
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f7f9 f994 	bl	80004a8 <__aeabi_uldivmod>
 8007180:	0002      	movs	r2, r0
 8007182:	000b      	movs	r3, r1
 8007184:	0013      	movs	r3, r2
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800718a:	23c0      	movs	r3, #192	; 0xc0
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	429a      	cmp	r2, r3
 8007190:	d309      	bcc.n	80071a6 <UART_SetConfig+0x332>
 8007192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007194:	2380      	movs	r3, #128	; 0x80
 8007196:	035b      	lsls	r3, r3, #13
 8007198:	429a      	cmp	r2, r3
 800719a:	d204      	bcs.n	80071a6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	e0eb      	b.n	800737e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80071a6:	231a      	movs	r3, #26
 80071a8:	2218      	movs	r2, #24
 80071aa:	189b      	adds	r3, r3, r2
 80071ac:	19db      	adds	r3, r3, r7
 80071ae:	2201      	movs	r2, #1
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	e0e4      	b.n	800737e <UART_SetConfig+0x50a>
 80071b4:	efff69f3 	.word	0xefff69f3
 80071b8:	ffffcfff 	.word	0xffffcfff
 80071bc:	40004800 	.word	0x40004800
 80071c0:	fffff4ff 	.word	0xfffff4ff
 80071c4:	40013800 	.word	0x40013800
 80071c8:	40021000 	.word	0x40021000
 80071cc:	40004400 	.word	0x40004400
 80071d0:	40004c00 	.word	0x40004c00
 80071d4:	40005000 	.word	0x40005000
 80071d8:	003d0900 	.word	0x003d0900
 80071dc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	69da      	ldr	r2, [r3, #28]
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d000      	beq.n	80071ee <UART_SetConfig+0x37a>
 80071ec:	e070      	b.n	80072d0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80071ee:	231b      	movs	r3, #27
 80071f0:	2218      	movs	r2, #24
 80071f2:	189b      	adds	r3, r3, r2
 80071f4:	19db      	adds	r3, r3, r7
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d822      	bhi.n	8007242 <UART_SetConfig+0x3ce>
 80071fc:	009a      	lsls	r2, r3, #2
 80071fe:	4b67      	ldr	r3, [pc, #412]	; (800739c <UART_SetConfig+0x528>)
 8007200:	18d3      	adds	r3, r2, r3
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007206:	f7fe f9d3 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 800720a:	0003      	movs	r3, r0
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800720e:	e021      	b.n	8007254 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007210:	f7fe f9e4 	bl	80055dc <HAL_RCC_GetPCLK2Freq>
 8007214:	0003      	movs	r3, r0
 8007216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007218:	e01c      	b.n	8007254 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800721a:	4b61      	ldr	r3, [pc, #388]	; (80073a0 <UART_SetConfig+0x52c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2210      	movs	r2, #16
 8007220:	4013      	ands	r3, r2
 8007222:	d002      	beq.n	800722a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007224:	4b5f      	ldr	r3, [pc, #380]	; (80073a4 <UART_SetConfig+0x530>)
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007228:	e014      	b.n	8007254 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800722a:	4b5f      	ldr	r3, [pc, #380]	; (80073a8 <UART_SetConfig+0x534>)
 800722c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800722e:	e011      	b.n	8007254 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007230:	f7fe f90e 	bl	8005450 <HAL_RCC_GetSysClockFreq>
 8007234:	0003      	movs	r3, r0
 8007236:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007238:	e00c      	b.n	8007254 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723a:	2380      	movs	r3, #128	; 0x80
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007240:	e008      	b.n	8007254 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007246:	231a      	movs	r3, #26
 8007248:	2218      	movs	r2, #24
 800724a:	189b      	adds	r3, r3, r2
 800724c:	19db      	adds	r3, r3, r7
 800724e:	2201      	movs	r2, #1
 8007250:	701a      	strb	r2, [r3, #0]
        break;
 8007252:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d100      	bne.n	800725c <UART_SetConfig+0x3e8>
 800725a:	e090      	b.n	800737e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	005a      	lsls	r2, r3, #1
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	085b      	lsrs	r3, r3, #1
 8007266:	18d2      	adds	r2, r2, r3
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	0019      	movs	r1, r3
 800726e:	0010      	movs	r0, r2
 8007270:	f7f8 ff66 	bl	8000140 <__udivsi3>
 8007274:	0003      	movs	r3, r0
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	2b0f      	cmp	r3, #15
 800727c:	d921      	bls.n	80072c2 <UART_SetConfig+0x44e>
 800727e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007280:	2380      	movs	r3, #128	; 0x80
 8007282:	025b      	lsls	r3, r3, #9
 8007284:	429a      	cmp	r2, r3
 8007286:	d21c      	bcs.n	80072c2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	b29a      	uxth	r2, r3
 800728c:	200e      	movs	r0, #14
 800728e:	2418      	movs	r4, #24
 8007290:	1903      	adds	r3, r0, r4
 8007292:	19db      	adds	r3, r3, r7
 8007294:	210f      	movs	r1, #15
 8007296:	438a      	bics	r2, r1
 8007298:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	085b      	lsrs	r3, r3, #1
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2207      	movs	r2, #7
 80072a2:	4013      	ands	r3, r2
 80072a4:	b299      	uxth	r1, r3
 80072a6:	1903      	adds	r3, r0, r4
 80072a8:	19db      	adds	r3, r3, r7
 80072aa:	1902      	adds	r2, r0, r4
 80072ac:	19d2      	adds	r2, r2, r7
 80072ae:	8812      	ldrh	r2, [r2, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	1902      	adds	r2, r0, r4
 80072ba:	19d2      	adds	r2, r2, r7
 80072bc:	8812      	ldrh	r2, [r2, #0]
 80072be:	60da      	str	r2, [r3, #12]
 80072c0:	e05d      	b.n	800737e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80072c2:	231a      	movs	r3, #26
 80072c4:	2218      	movs	r2, #24
 80072c6:	189b      	adds	r3, r3, r2
 80072c8:	19db      	adds	r3, r3, r7
 80072ca:	2201      	movs	r2, #1
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	e056      	b.n	800737e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072d0:	231b      	movs	r3, #27
 80072d2:	2218      	movs	r2, #24
 80072d4:	189b      	adds	r3, r3, r2
 80072d6:	19db      	adds	r3, r3, r7
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d822      	bhi.n	8007324 <UART_SetConfig+0x4b0>
 80072de:	009a      	lsls	r2, r3, #2
 80072e0:	4b32      	ldr	r3, [pc, #200]	; (80073ac <UART_SetConfig+0x538>)
 80072e2:	18d3      	adds	r3, r2, r3
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e8:	f7fe f962 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 80072ec:	0003      	movs	r3, r0
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072f0:	e021      	b.n	8007336 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f2:	f7fe f973 	bl	80055dc <HAL_RCC_GetPCLK2Freq>
 80072f6:	0003      	movs	r3, r0
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072fa:	e01c      	b.n	8007336 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072fc:	4b28      	ldr	r3, [pc, #160]	; (80073a0 <UART_SetConfig+0x52c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2210      	movs	r2, #16
 8007302:	4013      	ands	r3, r2
 8007304:	d002      	beq.n	800730c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007306:	4b27      	ldr	r3, [pc, #156]	; (80073a4 <UART_SetConfig+0x530>)
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800730a:	e014      	b.n	8007336 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800730c:	4b26      	ldr	r3, [pc, #152]	; (80073a8 <UART_SetConfig+0x534>)
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007310:	e011      	b.n	8007336 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007312:	f7fe f89d 	bl	8005450 <HAL_RCC_GetSysClockFreq>
 8007316:	0003      	movs	r3, r0
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800731a:	e00c      	b.n	8007336 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731c:	2380      	movs	r3, #128	; 0x80
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007322:	e008      	b.n	8007336 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007328:	231a      	movs	r3, #26
 800732a:	2218      	movs	r2, #24
 800732c:	189b      	adds	r3, r3, r2
 800732e:	19db      	adds	r3, r3, r7
 8007330:	2201      	movs	r2, #1
 8007332:	701a      	strb	r2, [r3, #0]
        break;
 8007334:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d020      	beq.n	800737e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	085a      	lsrs	r2, r3, #1
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	18d2      	adds	r2, r2, r3
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	0019      	movs	r1, r3
 800734c:	0010      	movs	r0, r2
 800734e:	f7f8 fef7 	bl	8000140 <__udivsi3>
 8007352:	0003      	movs	r3, r0
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	2b0f      	cmp	r3, #15
 800735a:	d90a      	bls.n	8007372 <UART_SetConfig+0x4fe>
 800735c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735e:	2380      	movs	r3, #128	; 0x80
 8007360:	025b      	lsls	r3, r3, #9
 8007362:	429a      	cmp	r2, r3
 8007364:	d205      	bcs.n	8007372 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	b29a      	uxth	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60da      	str	r2, [r3, #12]
 8007370:	e005      	b.n	800737e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007372:	231a      	movs	r3, #26
 8007374:	2218      	movs	r2, #24
 8007376:	189b      	adds	r3, r3, r2
 8007378:	19db      	adds	r3, r3, r7
 800737a:	2201      	movs	r2, #1
 800737c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	2200      	movs	r2, #0
 8007382:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	2200      	movs	r2, #0
 8007388:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800738a:	231a      	movs	r3, #26
 800738c:	2218      	movs	r2, #24
 800738e:	189b      	adds	r3, r3, r2
 8007390:	19db      	adds	r3, r3, r7
 8007392:	781b      	ldrb	r3, [r3, #0]
}
 8007394:	0018      	movs	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	b00e      	add	sp, #56	; 0x38
 800739a:	bdb0      	pop	{r4, r5, r7, pc}
 800739c:	0800a8b4 	.word	0x0800a8b4
 80073a0:	40021000 	.word	0x40021000
 80073a4:	003d0900 	.word	0x003d0900
 80073a8:	00f42400 	.word	0x00f42400
 80073ac:	0800a8d8 	.word	0x0800a8d8

080073b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	2201      	movs	r2, #1
 80073be:	4013      	ands	r3, r2
 80073c0:	d00b      	beq.n	80073da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4a4a      	ldr	r2, [pc, #296]	; (80074f4 <UART_AdvFeatureConfig+0x144>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	0019      	movs	r1, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2202      	movs	r2, #2
 80073e0:	4013      	ands	r3, r2
 80073e2:	d00b      	beq.n	80073fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	4a43      	ldr	r2, [pc, #268]	; (80074f8 <UART_AdvFeatureConfig+0x148>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	0019      	movs	r1, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2204      	movs	r2, #4
 8007402:	4013      	ands	r3, r2
 8007404:	d00b      	beq.n	800741e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	4a3b      	ldr	r2, [pc, #236]	; (80074fc <UART_AdvFeatureConfig+0x14c>)
 800740e:	4013      	ands	r3, r2
 8007410:	0019      	movs	r1, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	2208      	movs	r2, #8
 8007424:	4013      	ands	r3, r2
 8007426:	d00b      	beq.n	8007440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	4a34      	ldr	r2, [pc, #208]	; (8007500 <UART_AdvFeatureConfig+0x150>)
 8007430:	4013      	ands	r3, r2
 8007432:	0019      	movs	r1, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	2210      	movs	r2, #16
 8007446:	4013      	ands	r3, r2
 8007448:	d00b      	beq.n	8007462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	4a2c      	ldr	r2, [pc, #176]	; (8007504 <UART_AdvFeatureConfig+0x154>)
 8007452:	4013      	ands	r3, r2
 8007454:	0019      	movs	r1, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2220      	movs	r2, #32
 8007468:	4013      	ands	r3, r2
 800746a:	d00b      	beq.n	8007484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	4a25      	ldr	r2, [pc, #148]	; (8007508 <UART_AdvFeatureConfig+0x158>)
 8007474:	4013      	ands	r3, r2
 8007476:	0019      	movs	r1, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	2240      	movs	r2, #64	; 0x40
 800748a:	4013      	ands	r3, r2
 800748c:	d01d      	beq.n	80074ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	4a1d      	ldr	r2, [pc, #116]	; (800750c <UART_AdvFeatureConfig+0x15c>)
 8007496:	4013      	ands	r3, r2
 8007498:	0019      	movs	r1, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074aa:	2380      	movs	r3, #128	; 0x80
 80074ac:	035b      	lsls	r3, r3, #13
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d10b      	bne.n	80074ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4a15      	ldr	r2, [pc, #84]	; (8007510 <UART_AdvFeatureConfig+0x160>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	0019      	movs	r1, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	2280      	movs	r2, #128	; 0x80
 80074d0:	4013      	ands	r3, r2
 80074d2:	d00b      	beq.n	80074ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	4a0e      	ldr	r2, [pc, #56]	; (8007514 <UART_AdvFeatureConfig+0x164>)
 80074dc:	4013      	ands	r3, r2
 80074de:	0019      	movs	r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	605a      	str	r2, [r3, #4]
  }
}
 80074ec:	46c0      	nop			; (mov r8, r8)
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b002      	add	sp, #8
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	fffdffff 	.word	0xfffdffff
 80074f8:	fffeffff 	.word	0xfffeffff
 80074fc:	fffbffff 	.word	0xfffbffff
 8007500:	ffff7fff 	.word	0xffff7fff
 8007504:	ffffefff 	.word	0xffffefff
 8007508:	ffffdfff 	.word	0xffffdfff
 800750c:	ffefffff 	.word	0xffefffff
 8007510:	ff9fffff 	.word	0xff9fffff
 8007514:	fff7ffff 	.word	0xfff7ffff

08007518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b092      	sub	sp, #72	; 0x48
 800751c:	af02      	add	r7, sp, #8
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2284      	movs	r2, #132	; 0x84
 8007524:	2100      	movs	r1, #0
 8007526:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007528:	f7fc ffce 	bl	80044c8 <HAL_GetTick>
 800752c:	0003      	movs	r3, r0
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2208      	movs	r2, #8
 8007538:	4013      	ands	r3, r2
 800753a:	2b08      	cmp	r3, #8
 800753c:	d12c      	bne.n	8007598 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	2280      	movs	r2, #128	; 0x80
 8007542:	0391      	lsls	r1, r2, #14
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4a46      	ldr	r2, [pc, #280]	; (8007660 <UART_CheckIdleState+0x148>)
 8007548:	9200      	str	r2, [sp, #0]
 800754a:	2200      	movs	r2, #0
 800754c:	f000 f88c 	bl	8007668 <UART_WaitOnFlagUntilTimeout>
 8007550:	1e03      	subs	r3, r0, #0
 8007552:	d021      	beq.n	8007598 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007554:	f3ef 8310 	mrs	r3, PRIMASK
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800755c:	63bb      	str	r3, [r7, #56]	; 0x38
 800755e:	2301      	movs	r3, #1
 8007560:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	f383 8810 	msr	PRIMASK, r3
}
 8007568:	46c0      	nop			; (mov r8, r8)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2180      	movs	r1, #128	; 0x80
 8007576:	438a      	bics	r2, r1
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	f383 8810 	msr	PRIMASK, r3
}
 8007584:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2220      	movs	r2, #32
 800758a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2278      	movs	r2, #120	; 0x78
 8007590:	2100      	movs	r1, #0
 8007592:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e05f      	b.n	8007658 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2204      	movs	r2, #4
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d146      	bne.n	8007634 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a8:	2280      	movs	r2, #128	; 0x80
 80075aa:	03d1      	lsls	r1, r2, #15
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4a2c      	ldr	r2, [pc, #176]	; (8007660 <UART_CheckIdleState+0x148>)
 80075b0:	9200      	str	r2, [sp, #0]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f000 f858 	bl	8007668 <UART_WaitOnFlagUntilTimeout>
 80075b8:	1e03      	subs	r3, r0, #0
 80075ba:	d03b      	beq.n	8007634 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075bc:	f3ef 8310 	mrs	r3, PRIMASK
 80075c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80075c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
 80075c6:	2301      	movs	r3, #1
 80075c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f383 8810 	msr	PRIMASK, r3
}
 80075d0:	46c0      	nop			; (mov r8, r8)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4921      	ldr	r1, [pc, #132]	; (8007664 <UART_CheckIdleState+0x14c>)
 80075de:	400a      	ands	r2, r1
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f383 8810 	msr	PRIMASK, r3
}
 80075ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ee:	f3ef 8310 	mrs	r3, PRIMASK
 80075f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80075f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f6:	633b      	str	r3, [r7, #48]	; 0x30
 80075f8:	2301      	movs	r3, #1
 80075fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	f383 8810 	msr	PRIMASK, r3
}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2101      	movs	r1, #1
 8007610:	438a      	bics	r2, r1
 8007612:	609a      	str	r2, [r3, #8]
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	f383 8810 	msr	PRIMASK, r3
}
 800761e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2280      	movs	r2, #128	; 0x80
 8007624:	2120      	movs	r1, #32
 8007626:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2278      	movs	r2, #120	; 0x78
 800762c:	2100      	movs	r1, #0
 800762e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e011      	b.n	8007658 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2280      	movs	r2, #128	; 0x80
 800763e:	2120      	movs	r1, #32
 8007640:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2278      	movs	r2, #120	; 0x78
 8007652:	2100      	movs	r1, #0
 8007654:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	0018      	movs	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	b010      	add	sp, #64	; 0x40
 800765e:	bd80      	pop	{r7, pc}
 8007660:	01ffffff 	.word	0x01ffffff
 8007664:	fffffedf 	.word	0xfffffedf

08007668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	603b      	str	r3, [r7, #0]
 8007674:	1dfb      	adds	r3, r7, #7
 8007676:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007678:	e04b      	b.n	8007712 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	3301      	adds	r3, #1
 800767e:	d048      	beq.n	8007712 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007680:	f7fc ff22 	bl	80044c8 <HAL_GetTick>
 8007684:	0002      	movs	r2, r0
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	429a      	cmp	r2, r3
 800768e:	d302      	bcc.n	8007696 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e04b      	b.n	8007732 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2204      	movs	r2, #4
 80076a2:	4013      	ands	r3, r2
 80076a4:	d035      	beq.n	8007712 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	2208      	movs	r2, #8
 80076ae:	4013      	ands	r3, r2
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d111      	bne.n	80076d8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2208      	movs	r2, #8
 80076ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	0018      	movs	r0, r3
 80076c0:	f000 f83c 	bl	800773c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2284      	movs	r2, #132	; 0x84
 80076c8:	2108      	movs	r1, #8
 80076ca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2278      	movs	r2, #120	; 0x78
 80076d0:	2100      	movs	r1, #0
 80076d2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e02c      	b.n	8007732 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	69da      	ldr	r2, [r3, #28]
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	401a      	ands	r2, r3
 80076e4:	2380      	movs	r3, #128	; 0x80
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d112      	bne.n	8007712 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2280      	movs	r2, #128	; 0x80
 80076f2:	0112      	lsls	r2, r2, #4
 80076f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	0018      	movs	r0, r3
 80076fa:	f000 f81f 	bl	800773c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2284      	movs	r2, #132	; 0x84
 8007702:	2120      	movs	r1, #32
 8007704:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2278      	movs	r2, #120	; 0x78
 800770a:	2100      	movs	r1, #0
 800770c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e00f      	b.n	8007732 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	4013      	ands	r3, r2
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	425a      	negs	r2, r3
 8007722:	4153      	adcs	r3, r2
 8007724:	b2db      	uxtb	r3, r3
 8007726:	001a      	movs	r2, r3
 8007728:	1dfb      	adds	r3, r7, #7
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d0a4      	beq.n	800767a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	0018      	movs	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	b004      	add	sp, #16
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08e      	sub	sp, #56	; 0x38
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007744:	f3ef 8310 	mrs	r3, PRIMASK
 8007748:	617b      	str	r3, [r7, #20]
  return(result);
 800774a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
 800774e:	2301      	movs	r3, #1
 8007750:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	f383 8810 	msr	PRIMASK, r3
}
 8007758:	46c0      	nop			; (mov r8, r8)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4926      	ldr	r1, [pc, #152]	; (8007800 <UART_EndRxTransfer+0xc4>)
 8007766:	400a      	ands	r2, r1
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	f383 8810 	msr	PRIMASK, r3
}
 8007774:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007776:	f3ef 8310 	mrs	r3, PRIMASK
 800777a:	623b      	str	r3, [r7, #32]
  return(result);
 800777c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777e:	633b      	str	r3, [r7, #48]	; 0x30
 8007780:	2301      	movs	r3, #1
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	f383 8810 	msr	PRIMASK, r3
}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2101      	movs	r1, #1
 8007798:	438a      	bics	r2, r1
 800779a:	609a      	str	r2, [r3, #8]
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	f383 8810 	msr	PRIMASK, r3
}
 80077a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d118      	bne.n	80077e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b0:	f3ef 8310 	mrs	r3, PRIMASK
 80077b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80077b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ba:	2301      	movs	r3, #1
 80077bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f383 8810 	msr	PRIMASK, r3
}
 80077c4:	46c0      	nop			; (mov r8, r8)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2110      	movs	r1, #16
 80077d2:	438a      	bics	r2, r1
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f383 8810 	msr	PRIMASK, r3
}
 80077e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2280      	movs	r2, #128	; 0x80
 80077e6:	2120      	movs	r1, #32
 80077e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	46bd      	mov	sp, r7
 80077fa:	b00e      	add	sp, #56	; 0x38
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	fffffedf 	.word	0xfffffedf

08007804 <__errno>:
 8007804:	4b01      	ldr	r3, [pc, #4]	; (800780c <__errno+0x8>)
 8007806:	6818      	ldr	r0, [r3, #0]
 8007808:	4770      	bx	lr
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	2000000c 	.word	0x2000000c

08007810 <__libc_init_array>:
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	2600      	movs	r6, #0
 8007814:	4d0c      	ldr	r5, [pc, #48]	; (8007848 <__libc_init_array+0x38>)
 8007816:	4c0d      	ldr	r4, [pc, #52]	; (800784c <__libc_init_array+0x3c>)
 8007818:	1b64      	subs	r4, r4, r5
 800781a:	10a4      	asrs	r4, r4, #2
 800781c:	42a6      	cmp	r6, r4
 800781e:	d109      	bne.n	8007834 <__libc_init_array+0x24>
 8007820:	2600      	movs	r6, #0
 8007822:	f002 ffbb 	bl	800a79c <_init>
 8007826:	4d0a      	ldr	r5, [pc, #40]	; (8007850 <__libc_init_array+0x40>)
 8007828:	4c0a      	ldr	r4, [pc, #40]	; (8007854 <__libc_init_array+0x44>)
 800782a:	1b64      	subs	r4, r4, r5
 800782c:	10a4      	asrs	r4, r4, #2
 800782e:	42a6      	cmp	r6, r4
 8007830:	d105      	bne.n	800783e <__libc_init_array+0x2e>
 8007832:	bd70      	pop	{r4, r5, r6, pc}
 8007834:	00b3      	lsls	r3, r6, #2
 8007836:	58eb      	ldr	r3, [r5, r3]
 8007838:	4798      	blx	r3
 800783a:	3601      	adds	r6, #1
 800783c:	e7ee      	b.n	800781c <__libc_init_array+0xc>
 800783e:	00b3      	lsls	r3, r6, #2
 8007840:	58eb      	ldr	r3, [r5, r3]
 8007842:	4798      	blx	r3
 8007844:	3601      	adds	r6, #1
 8007846:	e7f2      	b.n	800782e <__libc_init_array+0x1e>
 8007848:	0800acdc 	.word	0x0800acdc
 800784c:	0800acdc 	.word	0x0800acdc
 8007850:	0800acdc 	.word	0x0800acdc
 8007854:	0800ace0 	.word	0x0800ace0

08007858 <memset>:
 8007858:	0003      	movs	r3, r0
 800785a:	1882      	adds	r2, r0, r2
 800785c:	4293      	cmp	r3, r2
 800785e:	d100      	bne.n	8007862 <memset+0xa>
 8007860:	4770      	bx	lr
 8007862:	7019      	strb	r1, [r3, #0]
 8007864:	3301      	adds	r3, #1
 8007866:	e7f9      	b.n	800785c <memset+0x4>

08007868 <__cvt>:
 8007868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800786a:	001e      	movs	r6, r3
 800786c:	2300      	movs	r3, #0
 800786e:	0014      	movs	r4, r2
 8007870:	b08b      	sub	sp, #44	; 0x2c
 8007872:	429e      	cmp	r6, r3
 8007874:	da04      	bge.n	8007880 <__cvt+0x18>
 8007876:	2180      	movs	r1, #128	; 0x80
 8007878:	0609      	lsls	r1, r1, #24
 800787a:	1873      	adds	r3, r6, r1
 800787c:	001e      	movs	r6, r3
 800787e:	232d      	movs	r3, #45	; 0x2d
 8007880:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007882:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007884:	7013      	strb	r3, [r2, #0]
 8007886:	2320      	movs	r3, #32
 8007888:	2203      	movs	r2, #3
 800788a:	439f      	bics	r7, r3
 800788c:	2f46      	cmp	r7, #70	; 0x46
 800788e:	d007      	beq.n	80078a0 <__cvt+0x38>
 8007890:	003b      	movs	r3, r7
 8007892:	3b45      	subs	r3, #69	; 0x45
 8007894:	4259      	negs	r1, r3
 8007896:	414b      	adcs	r3, r1
 8007898:	9910      	ldr	r1, [sp, #64]	; 0x40
 800789a:	3a01      	subs	r2, #1
 800789c:	18cb      	adds	r3, r1, r3
 800789e:	9310      	str	r3, [sp, #64]	; 0x40
 80078a0:	ab09      	add	r3, sp, #36	; 0x24
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	ab08      	add	r3, sp, #32
 80078a6:	9303      	str	r3, [sp, #12]
 80078a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078aa:	9200      	str	r2, [sp, #0]
 80078ac:	9302      	str	r3, [sp, #8]
 80078ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078b0:	0022      	movs	r2, r4
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	0033      	movs	r3, r6
 80078b6:	f000 fcf1 	bl	800829c <_dtoa_r>
 80078ba:	0005      	movs	r5, r0
 80078bc:	2f47      	cmp	r7, #71	; 0x47
 80078be:	d102      	bne.n	80078c6 <__cvt+0x5e>
 80078c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078c2:	07db      	lsls	r3, r3, #31
 80078c4:	d528      	bpl.n	8007918 <__cvt+0xb0>
 80078c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078c8:	18eb      	adds	r3, r5, r3
 80078ca:	9307      	str	r3, [sp, #28]
 80078cc:	2f46      	cmp	r7, #70	; 0x46
 80078ce:	d114      	bne.n	80078fa <__cvt+0x92>
 80078d0:	782b      	ldrb	r3, [r5, #0]
 80078d2:	2b30      	cmp	r3, #48	; 0x30
 80078d4:	d10c      	bne.n	80078f0 <__cvt+0x88>
 80078d6:	2200      	movs	r2, #0
 80078d8:	2300      	movs	r3, #0
 80078da:	0020      	movs	r0, r4
 80078dc:	0031      	movs	r1, r6
 80078de:	f7f8 fdb5 	bl	800044c <__aeabi_dcmpeq>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d104      	bne.n	80078f0 <__cvt+0x88>
 80078e6:	2301      	movs	r3, #1
 80078e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078f2:	9a07      	ldr	r2, [sp, #28]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	18d3      	adds	r3, r2, r3
 80078f8:	9307      	str	r3, [sp, #28]
 80078fa:	2200      	movs	r2, #0
 80078fc:	2300      	movs	r3, #0
 80078fe:	0020      	movs	r0, r4
 8007900:	0031      	movs	r1, r6
 8007902:	f7f8 fda3 	bl	800044c <__aeabi_dcmpeq>
 8007906:	2800      	cmp	r0, #0
 8007908:	d001      	beq.n	800790e <__cvt+0xa6>
 800790a:	9b07      	ldr	r3, [sp, #28]
 800790c:	9309      	str	r3, [sp, #36]	; 0x24
 800790e:	2230      	movs	r2, #48	; 0x30
 8007910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007912:	9907      	ldr	r1, [sp, #28]
 8007914:	428b      	cmp	r3, r1
 8007916:	d306      	bcc.n	8007926 <__cvt+0xbe>
 8007918:	0028      	movs	r0, r5
 800791a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800791c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800791e:	1b5b      	subs	r3, r3, r5
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	b00b      	add	sp, #44	; 0x2c
 8007924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007926:	1c59      	adds	r1, r3, #1
 8007928:	9109      	str	r1, [sp, #36]	; 0x24
 800792a:	701a      	strb	r2, [r3, #0]
 800792c:	e7f0      	b.n	8007910 <__cvt+0xa8>

0800792e <__exponent>:
 800792e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007930:	1c83      	adds	r3, r0, #2
 8007932:	b087      	sub	sp, #28
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	0005      	movs	r5, r0
 8007938:	000c      	movs	r4, r1
 800793a:	232b      	movs	r3, #43	; 0x2b
 800793c:	7002      	strb	r2, [r0, #0]
 800793e:	2900      	cmp	r1, #0
 8007940:	da01      	bge.n	8007946 <__exponent+0x18>
 8007942:	424c      	negs	r4, r1
 8007944:	3302      	adds	r3, #2
 8007946:	706b      	strb	r3, [r5, #1]
 8007948:	2c09      	cmp	r4, #9
 800794a:	dd31      	ble.n	80079b0 <__exponent+0x82>
 800794c:	270a      	movs	r7, #10
 800794e:	ab04      	add	r3, sp, #16
 8007950:	1dde      	adds	r6, r3, #7
 8007952:	0020      	movs	r0, r4
 8007954:	0039      	movs	r1, r7
 8007956:	9601      	str	r6, [sp, #4]
 8007958:	f7f8 fd62 	bl	8000420 <__aeabi_idivmod>
 800795c:	3e01      	subs	r6, #1
 800795e:	3130      	adds	r1, #48	; 0x30
 8007960:	0020      	movs	r0, r4
 8007962:	7031      	strb	r1, [r6, #0]
 8007964:	0039      	movs	r1, r7
 8007966:	9402      	str	r4, [sp, #8]
 8007968:	f7f8 fc74 	bl	8000254 <__divsi3>
 800796c:	9b02      	ldr	r3, [sp, #8]
 800796e:	0004      	movs	r4, r0
 8007970:	2b63      	cmp	r3, #99	; 0x63
 8007972:	dcee      	bgt.n	8007952 <__exponent+0x24>
 8007974:	9b01      	ldr	r3, [sp, #4]
 8007976:	3430      	adds	r4, #48	; 0x30
 8007978:	1e9a      	subs	r2, r3, #2
 800797a:	0013      	movs	r3, r2
 800797c:	9903      	ldr	r1, [sp, #12]
 800797e:	7014      	strb	r4, [r2, #0]
 8007980:	a804      	add	r0, sp, #16
 8007982:	3007      	adds	r0, #7
 8007984:	4298      	cmp	r0, r3
 8007986:	d80e      	bhi.n	80079a6 <__exponent+0x78>
 8007988:	ab04      	add	r3, sp, #16
 800798a:	3307      	adds	r3, #7
 800798c:	2000      	movs	r0, #0
 800798e:	429a      	cmp	r2, r3
 8007990:	d804      	bhi.n	800799c <__exponent+0x6e>
 8007992:	ab04      	add	r3, sp, #16
 8007994:	3009      	adds	r0, #9
 8007996:	18c0      	adds	r0, r0, r3
 8007998:	9b01      	ldr	r3, [sp, #4]
 800799a:	1ac0      	subs	r0, r0, r3
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	1818      	adds	r0, r3, r0
 80079a0:	1b40      	subs	r0, r0, r5
 80079a2:	b007      	add	sp, #28
 80079a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a6:	7818      	ldrb	r0, [r3, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	7008      	strb	r0, [r1, #0]
 80079ac:	3101      	adds	r1, #1
 80079ae:	e7e7      	b.n	8007980 <__exponent+0x52>
 80079b0:	2330      	movs	r3, #48	; 0x30
 80079b2:	18e4      	adds	r4, r4, r3
 80079b4:	70ab      	strb	r3, [r5, #2]
 80079b6:	1d28      	adds	r0, r5, #4
 80079b8:	70ec      	strb	r4, [r5, #3]
 80079ba:	e7f1      	b.n	80079a0 <__exponent+0x72>

080079bc <_printf_float>:
 80079bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079be:	b095      	sub	sp, #84	; 0x54
 80079c0:	000c      	movs	r4, r1
 80079c2:	9209      	str	r2, [sp, #36]	; 0x24
 80079c4:	001e      	movs	r6, r3
 80079c6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80079c8:	0007      	movs	r7, r0
 80079ca:	f001 fa81 	bl	8008ed0 <_localeconv_r>
 80079ce:	6803      	ldr	r3, [r0, #0]
 80079d0:	0018      	movs	r0, r3
 80079d2:	930c      	str	r3, [sp, #48]	; 0x30
 80079d4:	f7f8 fb98 	bl	8000108 <strlen>
 80079d8:	2300      	movs	r3, #0
 80079da:	9312      	str	r3, [sp, #72]	; 0x48
 80079dc:	7e23      	ldrb	r3, [r4, #24]
 80079de:	2207      	movs	r2, #7
 80079e0:	930a      	str	r3, [sp, #40]	; 0x28
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	900e      	str	r0, [sp, #56]	; 0x38
 80079e6:	930d      	str	r3, [sp, #52]	; 0x34
 80079e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	05c9      	lsls	r1, r1, #23
 80079ee:	d547      	bpl.n	8007a80 <_printf_float+0xc4>
 80079f0:	189b      	adds	r3, r3, r2
 80079f2:	4393      	bics	r3, r2
 80079f4:	001a      	movs	r2, r3
 80079f6:	3208      	adds	r2, #8
 80079f8:	602a      	str	r2, [r5, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	64a2      	str	r2, [r4, #72]	; 0x48
 8007a00:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007a02:	2201      	movs	r2, #1
 8007a04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007a06:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a0a:	006b      	lsls	r3, r5, #1
 8007a0c:	085b      	lsrs	r3, r3, #1
 8007a0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a12:	4ba7      	ldr	r3, [pc, #668]	; (8007cb0 <_printf_float+0x2f4>)
 8007a14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a16:	4252      	negs	r2, r2
 8007a18:	f7fa fb9c 	bl	8002154 <__aeabi_dcmpun>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d131      	bne.n	8007a84 <_printf_float+0xc8>
 8007a20:	2201      	movs	r2, #1
 8007a22:	4ba3      	ldr	r3, [pc, #652]	; (8007cb0 <_printf_float+0x2f4>)
 8007a24:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a28:	4252      	negs	r2, r2
 8007a2a:	f7f8 fd1f 	bl	800046c <__aeabi_dcmple>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d128      	bne.n	8007a84 <_printf_float+0xc8>
 8007a32:	2200      	movs	r2, #0
 8007a34:	2300      	movs	r3, #0
 8007a36:	0029      	movs	r1, r5
 8007a38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a3a:	f7f8 fd0d 	bl	8000458 <__aeabi_dcmplt>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d003      	beq.n	8007a4a <_printf_float+0x8e>
 8007a42:	0023      	movs	r3, r4
 8007a44:	222d      	movs	r2, #45	; 0x2d
 8007a46:	3343      	adds	r3, #67	; 0x43
 8007a48:	701a      	strb	r2, [r3, #0]
 8007a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4c:	4d99      	ldr	r5, [pc, #612]	; (8007cb4 <_printf_float+0x2f8>)
 8007a4e:	2b47      	cmp	r3, #71	; 0x47
 8007a50:	d900      	bls.n	8007a54 <_printf_float+0x98>
 8007a52:	4d99      	ldr	r5, [pc, #612]	; (8007cb8 <_printf_float+0x2fc>)
 8007a54:	2303      	movs	r3, #3
 8007a56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a58:	6123      	str	r3, [r4, #16]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	439a      	bics	r2, r3
 8007a5e:	2300      	movs	r3, #0
 8007a60:	6022      	str	r2, [r4, #0]
 8007a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a66:	0021      	movs	r1, r4
 8007a68:	0038      	movs	r0, r7
 8007a6a:	9600      	str	r6, [sp, #0]
 8007a6c:	aa13      	add	r2, sp, #76	; 0x4c
 8007a6e:	f000 f9e7 	bl	8007e40 <_printf_common>
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	d000      	beq.n	8007a78 <_printf_float+0xbc>
 8007a76:	e0a2      	b.n	8007bbe <_printf_float+0x202>
 8007a78:	2001      	movs	r0, #1
 8007a7a:	4240      	negs	r0, r0
 8007a7c:	b015      	add	sp, #84	; 0x54
 8007a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a80:	3307      	adds	r3, #7
 8007a82:	e7b6      	b.n	80079f2 <_printf_float+0x36>
 8007a84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a86:	002b      	movs	r3, r5
 8007a88:	0010      	movs	r0, r2
 8007a8a:	0029      	movs	r1, r5
 8007a8c:	f7fa fb62 	bl	8002154 <__aeabi_dcmpun>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d00b      	beq.n	8007aac <_printf_float+0xf0>
 8007a94:	2d00      	cmp	r5, #0
 8007a96:	da03      	bge.n	8007aa0 <_printf_float+0xe4>
 8007a98:	0023      	movs	r3, r4
 8007a9a:	222d      	movs	r2, #45	; 0x2d
 8007a9c:	3343      	adds	r3, #67	; 0x43
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa2:	4d86      	ldr	r5, [pc, #536]	; (8007cbc <_printf_float+0x300>)
 8007aa4:	2b47      	cmp	r3, #71	; 0x47
 8007aa6:	d9d5      	bls.n	8007a54 <_printf_float+0x98>
 8007aa8:	4d85      	ldr	r5, [pc, #532]	; (8007cc0 <_printf_float+0x304>)
 8007aaa:	e7d3      	b.n	8007a54 <_printf_float+0x98>
 8007aac:	2220      	movs	r2, #32
 8007aae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ab0:	6863      	ldr	r3, [r4, #4]
 8007ab2:	4391      	bics	r1, r2
 8007ab4:	910f      	str	r1, [sp, #60]	; 0x3c
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	d149      	bne.n	8007b4e <_printf_float+0x192>
 8007aba:	3307      	adds	r3, #7
 8007abc:	6063      	str	r3, [r4, #4]
 8007abe:	2380      	movs	r3, #128	; 0x80
 8007ac0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	9206      	str	r2, [sp, #24]
 8007aca:	aa12      	add	r2, sp, #72	; 0x48
 8007acc:	9205      	str	r2, [sp, #20]
 8007ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ad0:	a908      	add	r1, sp, #32
 8007ad2:	9204      	str	r2, [sp, #16]
 8007ad4:	aa11      	add	r2, sp, #68	; 0x44
 8007ad6:	9203      	str	r2, [sp, #12]
 8007ad8:	2223      	movs	r2, #35	; 0x23
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	6863      	ldr	r3, [r4, #4]
 8007ae0:	1852      	adds	r2, r2, r1
 8007ae2:	9202      	str	r2, [sp, #8]
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	0038      	movs	r0, r7
 8007ae8:	002b      	movs	r3, r5
 8007aea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007aec:	f7ff febc 	bl	8007868 <__cvt>
 8007af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007af2:	0005      	movs	r5, r0
 8007af4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007af6:	2b47      	cmp	r3, #71	; 0x47
 8007af8:	d108      	bne.n	8007b0c <_printf_float+0x150>
 8007afa:	1ccb      	adds	r3, r1, #3
 8007afc:	db02      	blt.n	8007b04 <_printf_float+0x148>
 8007afe:	6863      	ldr	r3, [r4, #4]
 8007b00:	4299      	cmp	r1, r3
 8007b02:	dd48      	ble.n	8007b96 <_printf_float+0x1da>
 8007b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b06:	3b02      	subs	r3, #2
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b0e:	2b65      	cmp	r3, #101	; 0x65
 8007b10:	d824      	bhi.n	8007b5c <_printf_float+0x1a0>
 8007b12:	0020      	movs	r0, r4
 8007b14:	001a      	movs	r2, r3
 8007b16:	3901      	subs	r1, #1
 8007b18:	3050      	adds	r0, #80	; 0x50
 8007b1a:	9111      	str	r1, [sp, #68]	; 0x44
 8007b1c:	f7ff ff07 	bl	800792e <__exponent>
 8007b20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b22:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b24:	1813      	adds	r3, r2, r0
 8007b26:	6123      	str	r3, [r4, #16]
 8007b28:	2a01      	cmp	r2, #1
 8007b2a:	dc02      	bgt.n	8007b32 <_printf_float+0x176>
 8007b2c:	6822      	ldr	r2, [r4, #0]
 8007b2e:	07d2      	lsls	r2, r2, #31
 8007b30:	d501      	bpl.n	8007b36 <_printf_float+0x17a>
 8007b32:	3301      	adds	r3, #1
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	2323      	movs	r3, #35	; 0x23
 8007b38:	aa08      	add	r2, sp, #32
 8007b3a:	189b      	adds	r3, r3, r2
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d100      	bne.n	8007b44 <_printf_float+0x188>
 8007b42:	e78f      	b.n	8007a64 <_printf_float+0xa8>
 8007b44:	0023      	movs	r3, r4
 8007b46:	222d      	movs	r2, #45	; 0x2d
 8007b48:	3343      	adds	r3, #67	; 0x43
 8007b4a:	701a      	strb	r2, [r3, #0]
 8007b4c:	e78a      	b.n	8007a64 <_printf_float+0xa8>
 8007b4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b50:	2a47      	cmp	r2, #71	; 0x47
 8007b52:	d1b4      	bne.n	8007abe <_printf_float+0x102>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1b2      	bne.n	8007abe <_printf_float+0x102>
 8007b58:	3301      	adds	r3, #1
 8007b5a:	e7af      	b.n	8007abc <_printf_float+0x100>
 8007b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5e:	2b66      	cmp	r3, #102	; 0x66
 8007b60:	d11b      	bne.n	8007b9a <_printf_float+0x1de>
 8007b62:	6863      	ldr	r3, [r4, #4]
 8007b64:	2900      	cmp	r1, #0
 8007b66:	dd0d      	ble.n	8007b84 <_printf_float+0x1c8>
 8007b68:	6121      	str	r1, [r4, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d102      	bne.n	8007b74 <_printf_float+0x1b8>
 8007b6e:	6822      	ldr	r2, [r4, #0]
 8007b70:	07d2      	lsls	r2, r2, #31
 8007b72:	d502      	bpl.n	8007b7a <_printf_float+0x1be>
 8007b74:	3301      	adds	r3, #1
 8007b76:	1859      	adds	r1, r3, r1
 8007b78:	6121      	str	r1, [r4, #16]
 8007b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b7c:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b7e:	2300      	movs	r3, #0
 8007b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b82:	e7d8      	b.n	8007b36 <_printf_float+0x17a>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <_printf_float+0x1d4>
 8007b88:	2201      	movs	r2, #1
 8007b8a:	6821      	ldr	r1, [r4, #0]
 8007b8c:	4211      	tst	r1, r2
 8007b8e:	d000      	beq.n	8007b92 <_printf_float+0x1d6>
 8007b90:	1c9a      	adds	r2, r3, #2
 8007b92:	6122      	str	r2, [r4, #16]
 8007b94:	e7f1      	b.n	8007b7a <_printf_float+0x1be>
 8007b96:	2367      	movs	r3, #103	; 0x67
 8007b98:	930a      	str	r3, [sp, #40]	; 0x28
 8007b9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	db06      	blt.n	8007bb0 <_printf_float+0x1f4>
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	07d2      	lsls	r2, r2, #31
 8007ba8:	d5e7      	bpl.n	8007b7a <_printf_float+0x1be>
 8007baa:	3301      	adds	r3, #1
 8007bac:	6123      	str	r3, [r4, #16]
 8007bae:	e7e4      	b.n	8007b7a <_printf_float+0x1be>
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	dc01      	bgt.n	8007bba <_printf_float+0x1fe>
 8007bb6:	1849      	adds	r1, r1, r1
 8007bb8:	1ac9      	subs	r1, r1, r3
 8007bba:	1852      	adds	r2, r2, r1
 8007bbc:	e7e9      	b.n	8007b92 <_printf_float+0x1d6>
 8007bbe:	6822      	ldr	r2, [r4, #0]
 8007bc0:	0553      	lsls	r3, r2, #21
 8007bc2:	d407      	bmi.n	8007bd4 <_printf_float+0x218>
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	002a      	movs	r2, r5
 8007bc8:	0038      	movs	r0, r7
 8007bca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bcc:	47b0      	blx	r6
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	d128      	bne.n	8007c24 <_printf_float+0x268>
 8007bd2:	e751      	b.n	8007a78 <_printf_float+0xbc>
 8007bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd6:	2b65      	cmp	r3, #101	; 0x65
 8007bd8:	d800      	bhi.n	8007bdc <_printf_float+0x220>
 8007bda:	e0e1      	b.n	8007da0 <_printf_float+0x3e4>
 8007bdc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007bde:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007be0:	2200      	movs	r2, #0
 8007be2:	2300      	movs	r3, #0
 8007be4:	f7f8 fc32 	bl	800044c <__aeabi_dcmpeq>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d031      	beq.n	8007c50 <_printf_float+0x294>
 8007bec:	2301      	movs	r3, #1
 8007bee:	0038      	movs	r0, r7
 8007bf0:	4a34      	ldr	r2, [pc, #208]	; (8007cc4 <_printf_float+0x308>)
 8007bf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bf4:	47b0      	blx	r6
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	d100      	bne.n	8007bfc <_printf_float+0x240>
 8007bfa:	e73d      	b.n	8007a78 <_printf_float+0xbc>
 8007bfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c00:	4293      	cmp	r3, r2
 8007c02:	db02      	blt.n	8007c0a <_printf_float+0x24e>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	07db      	lsls	r3, r3, #31
 8007c08:	d50c      	bpl.n	8007c24 <_printf_float+0x268>
 8007c0a:	0038      	movs	r0, r7
 8007c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c12:	47b0      	blx	r6
 8007c14:	2500      	movs	r5, #0
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	d100      	bne.n	8007c1c <_printf_float+0x260>
 8007c1a:	e72d      	b.n	8007a78 <_printf_float+0xbc>
 8007c1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	42ab      	cmp	r3, r5
 8007c22:	dc0a      	bgt.n	8007c3a <_printf_float+0x27e>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	079b      	lsls	r3, r3, #30
 8007c28:	d500      	bpl.n	8007c2c <_printf_float+0x270>
 8007c2a:	e106      	b.n	8007e3a <_printf_float+0x47e>
 8007c2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c2e:	68e0      	ldr	r0, [r4, #12]
 8007c30:	4298      	cmp	r0, r3
 8007c32:	db00      	blt.n	8007c36 <_printf_float+0x27a>
 8007c34:	e722      	b.n	8007a7c <_printf_float+0xc0>
 8007c36:	0018      	movs	r0, r3
 8007c38:	e720      	b.n	8007a7c <_printf_float+0xc0>
 8007c3a:	0022      	movs	r2, r4
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	0038      	movs	r0, r7
 8007c40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c42:	321a      	adds	r2, #26
 8007c44:	47b0      	blx	r6
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	d100      	bne.n	8007c4c <_printf_float+0x290>
 8007c4a:	e715      	b.n	8007a78 <_printf_float+0xbc>
 8007c4c:	3501      	adds	r5, #1
 8007c4e:	e7e5      	b.n	8007c1c <_printf_float+0x260>
 8007c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dc38      	bgt.n	8007cc8 <_printf_float+0x30c>
 8007c56:	2301      	movs	r3, #1
 8007c58:	0038      	movs	r0, r7
 8007c5a:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <_printf_float+0x308>)
 8007c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c5e:	47b0      	blx	r6
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d100      	bne.n	8007c66 <_printf_float+0x2aa>
 8007c64:	e708      	b.n	8007a78 <_printf_float+0xbc>
 8007c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	d102      	bne.n	8007c74 <_printf_float+0x2b8>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	07db      	lsls	r3, r3, #31
 8007c72:	d5d7      	bpl.n	8007c24 <_printf_float+0x268>
 8007c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c76:	0038      	movs	r0, r7
 8007c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c7c:	47b0      	blx	r6
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	d100      	bne.n	8007c84 <_printf_float+0x2c8>
 8007c82:	e6f9      	b.n	8007a78 <_printf_float+0xbc>
 8007c84:	2300      	movs	r3, #0
 8007c86:	930a      	str	r3, [sp, #40]	; 0x28
 8007c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c8c:	425b      	negs	r3, r3
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	dc01      	bgt.n	8007c96 <_printf_float+0x2da>
 8007c92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c94:	e797      	b.n	8007bc6 <_printf_float+0x20a>
 8007c96:	0022      	movs	r2, r4
 8007c98:	2301      	movs	r3, #1
 8007c9a:	0038      	movs	r0, r7
 8007c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c9e:	321a      	adds	r2, #26
 8007ca0:	47b0      	blx	r6
 8007ca2:	1c43      	adds	r3, r0, #1
 8007ca4:	d100      	bne.n	8007ca8 <_printf_float+0x2ec>
 8007ca6:	e6e7      	b.n	8007a78 <_printf_float+0xbc>
 8007ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007caa:	3301      	adds	r3, #1
 8007cac:	e7eb      	b.n	8007c86 <_printf_float+0x2ca>
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	7fefffff 	.word	0x7fefffff
 8007cb4:	0800a900 	.word	0x0800a900
 8007cb8:	0800a904 	.word	0x0800a904
 8007cbc:	0800a908 	.word	0x0800a908
 8007cc0:	0800a90c 	.word	0x0800a90c
 8007cc4:	0800a910 	.word	0x0800a910
 8007cc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	dd00      	ble.n	8007cd4 <_printf_float+0x318>
 8007cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	dc3c      	bgt.n	8007d54 <_printf_float+0x398>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	930d      	str	r3, [sp, #52]	; 0x34
 8007cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce0:	43db      	mvns	r3, r3
 8007ce2:	17db      	asrs	r3, r3, #31
 8007ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ce6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cee:	4013      	ands	r3, r2
 8007cf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	dc34      	bgt.n	8007d64 <_printf_float+0x3a8>
 8007cfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	db3d      	blt.n	8007d7e <_printf_float+0x3c2>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	07db      	lsls	r3, r3, #31
 8007d06:	d43a      	bmi.n	8007d7e <_printf_float+0x3c2>
 8007d08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	1a52      	subs	r2, r2, r1
 8007d12:	920a      	str	r2, [sp, #40]	; 0x28
 8007d14:	429a      	cmp	r2, r3
 8007d16:	dd00      	ble.n	8007d1a <_printf_float+0x35e>
 8007d18:	930a      	str	r3, [sp, #40]	; 0x28
 8007d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dc36      	bgt.n	8007d8e <_printf_float+0x3d2>
 8007d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d22:	2500      	movs	r5, #0
 8007d24:	43db      	mvns	r3, r3
 8007d26:	17db      	asrs	r3, r3, #31
 8007d28:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d30:	1a9b      	subs	r3, r3, r2
 8007d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d34:	400a      	ands	r2, r1
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	42ab      	cmp	r3, r5
 8007d3a:	dc00      	bgt.n	8007d3e <_printf_float+0x382>
 8007d3c:	e772      	b.n	8007c24 <_printf_float+0x268>
 8007d3e:	0022      	movs	r2, r4
 8007d40:	2301      	movs	r3, #1
 8007d42:	0038      	movs	r0, r7
 8007d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d46:	321a      	adds	r2, #26
 8007d48:	47b0      	blx	r6
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	d100      	bne.n	8007d50 <_printf_float+0x394>
 8007d4e:	e693      	b.n	8007a78 <_printf_float+0xbc>
 8007d50:	3501      	adds	r5, #1
 8007d52:	e7ea      	b.n	8007d2a <_printf_float+0x36e>
 8007d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d56:	002a      	movs	r2, r5
 8007d58:	0038      	movs	r0, r7
 8007d5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d5c:	47b0      	blx	r6
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	d1bb      	bne.n	8007cda <_printf_float+0x31e>
 8007d62:	e689      	b.n	8007a78 <_printf_float+0xbc>
 8007d64:	0022      	movs	r2, r4
 8007d66:	2301      	movs	r3, #1
 8007d68:	0038      	movs	r0, r7
 8007d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d6c:	321a      	adds	r2, #26
 8007d6e:	47b0      	blx	r6
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d100      	bne.n	8007d76 <_printf_float+0x3ba>
 8007d74:	e680      	b.n	8007a78 <_printf_float+0xbc>
 8007d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d78:	3301      	adds	r3, #1
 8007d7a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d7c:	e7b3      	b.n	8007ce6 <_printf_float+0x32a>
 8007d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d80:	0038      	movs	r0, r7
 8007d82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d86:	47b0      	blx	r6
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d1bd      	bne.n	8007d08 <_printf_float+0x34c>
 8007d8c:	e674      	b.n	8007a78 <_printf_float+0xbc>
 8007d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d90:	0038      	movs	r0, r7
 8007d92:	18ea      	adds	r2, r5, r3
 8007d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d98:	47b0      	blx	r6
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	d1c0      	bne.n	8007d20 <_printf_float+0x364>
 8007d9e:	e66b      	b.n	8007a78 <_printf_float+0xbc>
 8007da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	dc02      	bgt.n	8007dac <_printf_float+0x3f0>
 8007da6:	2301      	movs	r3, #1
 8007da8:	421a      	tst	r2, r3
 8007daa:	d034      	beq.n	8007e16 <_printf_float+0x45a>
 8007dac:	2301      	movs	r3, #1
 8007dae:	002a      	movs	r2, r5
 8007db0:	0038      	movs	r0, r7
 8007db2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007db4:	47b0      	blx	r6
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	d100      	bne.n	8007dbc <_printf_float+0x400>
 8007dba:	e65d      	b.n	8007a78 <_printf_float+0xbc>
 8007dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dbe:	0038      	movs	r0, r7
 8007dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dc4:	47b0      	blx	r6
 8007dc6:	1c43      	adds	r3, r0, #1
 8007dc8:	d100      	bne.n	8007dcc <_printf_float+0x410>
 8007dca:	e655      	b.n	8007a78 <_printf_float+0xbc>
 8007dcc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007dce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f7f8 fb3a 	bl	800044c <__aeabi_dcmpeq>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d11a      	bne.n	8007e12 <_printf_float+0x456>
 8007ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dde:	1c6a      	adds	r2, r5, #1
 8007de0:	3b01      	subs	r3, #1
 8007de2:	0038      	movs	r0, r7
 8007de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007de6:	47b0      	blx	r6
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d10e      	bne.n	8007e0a <_printf_float+0x44e>
 8007dec:	e644      	b.n	8007a78 <_printf_float+0xbc>
 8007dee:	0022      	movs	r2, r4
 8007df0:	2301      	movs	r3, #1
 8007df2:	0038      	movs	r0, r7
 8007df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007df6:	321a      	adds	r2, #26
 8007df8:	47b0      	blx	r6
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d100      	bne.n	8007e00 <_printf_float+0x444>
 8007dfe:	e63b      	b.n	8007a78 <_printf_float+0xbc>
 8007e00:	3501      	adds	r5, #1
 8007e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e04:	3b01      	subs	r3, #1
 8007e06:	42ab      	cmp	r3, r5
 8007e08:	dcf1      	bgt.n	8007dee <_printf_float+0x432>
 8007e0a:	0022      	movs	r2, r4
 8007e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0e:	3250      	adds	r2, #80	; 0x50
 8007e10:	e6da      	b.n	8007bc8 <_printf_float+0x20c>
 8007e12:	2500      	movs	r5, #0
 8007e14:	e7f5      	b.n	8007e02 <_printf_float+0x446>
 8007e16:	002a      	movs	r2, r5
 8007e18:	e7e3      	b.n	8007de2 <_printf_float+0x426>
 8007e1a:	0022      	movs	r2, r4
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	0038      	movs	r0, r7
 8007e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e22:	3219      	adds	r2, #25
 8007e24:	47b0      	blx	r6
 8007e26:	1c43      	adds	r3, r0, #1
 8007e28:	d100      	bne.n	8007e2c <_printf_float+0x470>
 8007e2a:	e625      	b.n	8007a78 <_printf_float+0xbc>
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	68e3      	ldr	r3, [r4, #12]
 8007e30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e32:	1a9b      	subs	r3, r3, r2
 8007e34:	42ab      	cmp	r3, r5
 8007e36:	dcf0      	bgt.n	8007e1a <_printf_float+0x45e>
 8007e38:	e6f8      	b.n	8007c2c <_printf_float+0x270>
 8007e3a:	2500      	movs	r5, #0
 8007e3c:	e7f7      	b.n	8007e2e <_printf_float+0x472>
 8007e3e:	46c0      	nop			; (mov r8, r8)

08007e40 <_printf_common>:
 8007e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e42:	0015      	movs	r5, r2
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	688a      	ldr	r2, [r1, #8]
 8007e48:	690b      	ldr	r3, [r1, #16]
 8007e4a:	000c      	movs	r4, r1
 8007e4c:	9000      	str	r0, [sp, #0]
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	da00      	bge.n	8007e54 <_printf_common+0x14>
 8007e52:	0013      	movs	r3, r2
 8007e54:	0022      	movs	r2, r4
 8007e56:	602b      	str	r3, [r5, #0]
 8007e58:	3243      	adds	r2, #67	; 0x43
 8007e5a:	7812      	ldrb	r2, [r2, #0]
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	d001      	beq.n	8007e64 <_printf_common+0x24>
 8007e60:	3301      	adds	r3, #1
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	069b      	lsls	r3, r3, #26
 8007e68:	d502      	bpl.n	8007e70 <_printf_common+0x30>
 8007e6a:	682b      	ldr	r3, [r5, #0]
 8007e6c:	3302      	adds	r3, #2
 8007e6e:	602b      	str	r3, [r5, #0]
 8007e70:	6822      	ldr	r2, [r4, #0]
 8007e72:	2306      	movs	r3, #6
 8007e74:	0017      	movs	r7, r2
 8007e76:	401f      	ands	r7, r3
 8007e78:	421a      	tst	r2, r3
 8007e7a:	d027      	beq.n	8007ecc <_printf_common+0x8c>
 8007e7c:	0023      	movs	r3, r4
 8007e7e:	3343      	adds	r3, #67	; 0x43
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	1e5a      	subs	r2, r3, #1
 8007e84:	4193      	sbcs	r3, r2
 8007e86:	6822      	ldr	r2, [r4, #0]
 8007e88:	0692      	lsls	r2, r2, #26
 8007e8a:	d430      	bmi.n	8007eee <_printf_common+0xae>
 8007e8c:	0022      	movs	r2, r4
 8007e8e:	9901      	ldr	r1, [sp, #4]
 8007e90:	9800      	ldr	r0, [sp, #0]
 8007e92:	9e08      	ldr	r6, [sp, #32]
 8007e94:	3243      	adds	r2, #67	; 0x43
 8007e96:	47b0      	blx	r6
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d025      	beq.n	8007ee8 <_printf_common+0xa8>
 8007e9c:	2306      	movs	r3, #6
 8007e9e:	6820      	ldr	r0, [r4, #0]
 8007ea0:	682a      	ldr	r2, [r5, #0]
 8007ea2:	68e1      	ldr	r1, [r4, #12]
 8007ea4:	2500      	movs	r5, #0
 8007ea6:	4003      	ands	r3, r0
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d103      	bne.n	8007eb4 <_printf_common+0x74>
 8007eac:	1a8d      	subs	r5, r1, r2
 8007eae:	43eb      	mvns	r3, r5
 8007eb0:	17db      	asrs	r3, r3, #31
 8007eb2:	401d      	ands	r5, r3
 8007eb4:	68a3      	ldr	r3, [r4, #8]
 8007eb6:	6922      	ldr	r2, [r4, #16]
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	dd01      	ble.n	8007ec0 <_printf_common+0x80>
 8007ebc:	1a9b      	subs	r3, r3, r2
 8007ebe:	18ed      	adds	r5, r5, r3
 8007ec0:	2700      	movs	r7, #0
 8007ec2:	42bd      	cmp	r5, r7
 8007ec4:	d120      	bne.n	8007f08 <_printf_common+0xc8>
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	e010      	b.n	8007eec <_printf_common+0xac>
 8007eca:	3701      	adds	r7, #1
 8007ecc:	68e3      	ldr	r3, [r4, #12]
 8007ece:	682a      	ldr	r2, [r5, #0]
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	42bb      	cmp	r3, r7
 8007ed4:	ddd2      	ble.n	8007e7c <_printf_common+0x3c>
 8007ed6:	0022      	movs	r2, r4
 8007ed8:	2301      	movs	r3, #1
 8007eda:	9901      	ldr	r1, [sp, #4]
 8007edc:	9800      	ldr	r0, [sp, #0]
 8007ede:	9e08      	ldr	r6, [sp, #32]
 8007ee0:	3219      	adds	r2, #25
 8007ee2:	47b0      	blx	r6
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d1f0      	bne.n	8007eca <_printf_common+0x8a>
 8007ee8:	2001      	movs	r0, #1
 8007eea:	4240      	negs	r0, r0
 8007eec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007eee:	2030      	movs	r0, #48	; 0x30
 8007ef0:	18e1      	adds	r1, r4, r3
 8007ef2:	3143      	adds	r1, #67	; 0x43
 8007ef4:	7008      	strb	r0, [r1, #0]
 8007ef6:	0021      	movs	r1, r4
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	3145      	adds	r1, #69	; 0x45
 8007efc:	7809      	ldrb	r1, [r1, #0]
 8007efe:	18a2      	adds	r2, r4, r2
 8007f00:	3243      	adds	r2, #67	; 0x43
 8007f02:	3302      	adds	r3, #2
 8007f04:	7011      	strb	r1, [r2, #0]
 8007f06:	e7c1      	b.n	8007e8c <_printf_common+0x4c>
 8007f08:	0022      	movs	r2, r4
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	9901      	ldr	r1, [sp, #4]
 8007f0e:	9800      	ldr	r0, [sp, #0]
 8007f10:	9e08      	ldr	r6, [sp, #32]
 8007f12:	321a      	adds	r2, #26
 8007f14:	47b0      	blx	r6
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	d0e6      	beq.n	8007ee8 <_printf_common+0xa8>
 8007f1a:	3701      	adds	r7, #1
 8007f1c:	e7d1      	b.n	8007ec2 <_printf_common+0x82>
	...

08007f20 <_printf_i>:
 8007f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f22:	b08b      	sub	sp, #44	; 0x2c
 8007f24:	9206      	str	r2, [sp, #24]
 8007f26:	000a      	movs	r2, r1
 8007f28:	3243      	adds	r2, #67	; 0x43
 8007f2a:	9307      	str	r3, [sp, #28]
 8007f2c:	9005      	str	r0, [sp, #20]
 8007f2e:	9204      	str	r2, [sp, #16]
 8007f30:	7e0a      	ldrb	r2, [r1, #24]
 8007f32:	000c      	movs	r4, r1
 8007f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f36:	2a78      	cmp	r2, #120	; 0x78
 8007f38:	d807      	bhi.n	8007f4a <_printf_i+0x2a>
 8007f3a:	2a62      	cmp	r2, #98	; 0x62
 8007f3c:	d809      	bhi.n	8007f52 <_printf_i+0x32>
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	d100      	bne.n	8007f44 <_printf_i+0x24>
 8007f42:	e0c1      	b.n	80080c8 <_printf_i+0x1a8>
 8007f44:	2a58      	cmp	r2, #88	; 0x58
 8007f46:	d100      	bne.n	8007f4a <_printf_i+0x2a>
 8007f48:	e08c      	b.n	8008064 <_printf_i+0x144>
 8007f4a:	0026      	movs	r6, r4
 8007f4c:	3642      	adds	r6, #66	; 0x42
 8007f4e:	7032      	strb	r2, [r6, #0]
 8007f50:	e022      	b.n	8007f98 <_printf_i+0x78>
 8007f52:	0010      	movs	r0, r2
 8007f54:	3863      	subs	r0, #99	; 0x63
 8007f56:	2815      	cmp	r0, #21
 8007f58:	d8f7      	bhi.n	8007f4a <_printf_i+0x2a>
 8007f5a:	f7f8 f8e7 	bl	800012c <__gnu_thumb1_case_shi>
 8007f5e:	0016      	.short	0x0016
 8007f60:	fff6001f 	.word	0xfff6001f
 8007f64:	fff6fff6 	.word	0xfff6fff6
 8007f68:	001ffff6 	.word	0x001ffff6
 8007f6c:	fff6fff6 	.word	0xfff6fff6
 8007f70:	fff6fff6 	.word	0xfff6fff6
 8007f74:	003600a8 	.word	0x003600a8
 8007f78:	fff6009a 	.word	0xfff6009a
 8007f7c:	00b9fff6 	.word	0x00b9fff6
 8007f80:	0036fff6 	.word	0x0036fff6
 8007f84:	fff6fff6 	.word	0xfff6fff6
 8007f88:	009e      	.short	0x009e
 8007f8a:	0026      	movs	r6, r4
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	3642      	adds	r6, #66	; 0x42
 8007f90:	1d11      	adds	r1, r2, #4
 8007f92:	6019      	str	r1, [r3, #0]
 8007f94:	6813      	ldr	r3, [r2, #0]
 8007f96:	7033      	strb	r3, [r6, #0]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e0a7      	b.n	80080ec <_printf_i+0x1cc>
 8007f9c:	6808      	ldr	r0, [r1, #0]
 8007f9e:	6819      	ldr	r1, [r3, #0]
 8007fa0:	1d0a      	adds	r2, r1, #4
 8007fa2:	0605      	lsls	r5, r0, #24
 8007fa4:	d50b      	bpl.n	8007fbe <_printf_i+0x9e>
 8007fa6:	680d      	ldr	r5, [r1, #0]
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	da03      	bge.n	8007fb6 <_printf_i+0x96>
 8007fae:	232d      	movs	r3, #45	; 0x2d
 8007fb0:	9a04      	ldr	r2, [sp, #16]
 8007fb2:	426d      	negs	r5, r5
 8007fb4:	7013      	strb	r3, [r2, #0]
 8007fb6:	4b61      	ldr	r3, [pc, #388]	; (800813c <_printf_i+0x21c>)
 8007fb8:	270a      	movs	r7, #10
 8007fba:	9303      	str	r3, [sp, #12]
 8007fbc:	e01b      	b.n	8007ff6 <_printf_i+0xd6>
 8007fbe:	680d      	ldr	r5, [r1, #0]
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	0641      	lsls	r1, r0, #25
 8007fc4:	d5f1      	bpl.n	8007faa <_printf_i+0x8a>
 8007fc6:	b22d      	sxth	r5, r5
 8007fc8:	e7ef      	b.n	8007faa <_printf_i+0x8a>
 8007fca:	680d      	ldr	r5, [r1, #0]
 8007fcc:	6819      	ldr	r1, [r3, #0]
 8007fce:	1d08      	adds	r0, r1, #4
 8007fd0:	6018      	str	r0, [r3, #0]
 8007fd2:	062e      	lsls	r6, r5, #24
 8007fd4:	d501      	bpl.n	8007fda <_printf_i+0xba>
 8007fd6:	680d      	ldr	r5, [r1, #0]
 8007fd8:	e003      	b.n	8007fe2 <_printf_i+0xc2>
 8007fda:	066d      	lsls	r5, r5, #25
 8007fdc:	d5fb      	bpl.n	8007fd6 <_printf_i+0xb6>
 8007fde:	680d      	ldr	r5, [r1, #0]
 8007fe0:	b2ad      	uxth	r5, r5
 8007fe2:	4b56      	ldr	r3, [pc, #344]	; (800813c <_printf_i+0x21c>)
 8007fe4:	2708      	movs	r7, #8
 8007fe6:	9303      	str	r3, [sp, #12]
 8007fe8:	2a6f      	cmp	r2, #111	; 0x6f
 8007fea:	d000      	beq.n	8007fee <_printf_i+0xce>
 8007fec:	3702      	adds	r7, #2
 8007fee:	0023      	movs	r3, r4
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	3343      	adds	r3, #67	; 0x43
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	6863      	ldr	r3, [r4, #4]
 8007ff8:	60a3      	str	r3, [r4, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	db03      	blt.n	8008006 <_printf_i+0xe6>
 8007ffe:	2204      	movs	r2, #4
 8008000:	6821      	ldr	r1, [r4, #0]
 8008002:	4391      	bics	r1, r2
 8008004:	6021      	str	r1, [r4, #0]
 8008006:	2d00      	cmp	r5, #0
 8008008:	d102      	bne.n	8008010 <_printf_i+0xf0>
 800800a:	9e04      	ldr	r6, [sp, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00c      	beq.n	800802a <_printf_i+0x10a>
 8008010:	9e04      	ldr	r6, [sp, #16]
 8008012:	0028      	movs	r0, r5
 8008014:	0039      	movs	r1, r7
 8008016:	f7f8 f919 	bl	800024c <__aeabi_uidivmod>
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	3e01      	subs	r6, #1
 800801e:	5c5b      	ldrb	r3, [r3, r1]
 8008020:	7033      	strb	r3, [r6, #0]
 8008022:	002b      	movs	r3, r5
 8008024:	0005      	movs	r5, r0
 8008026:	429f      	cmp	r7, r3
 8008028:	d9f3      	bls.n	8008012 <_printf_i+0xf2>
 800802a:	2f08      	cmp	r7, #8
 800802c:	d109      	bne.n	8008042 <_printf_i+0x122>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	07db      	lsls	r3, r3, #31
 8008032:	d506      	bpl.n	8008042 <_printf_i+0x122>
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	6922      	ldr	r2, [r4, #16]
 8008038:	4293      	cmp	r3, r2
 800803a:	dc02      	bgt.n	8008042 <_printf_i+0x122>
 800803c:	2330      	movs	r3, #48	; 0x30
 800803e:	3e01      	subs	r6, #1
 8008040:	7033      	strb	r3, [r6, #0]
 8008042:	9b04      	ldr	r3, [sp, #16]
 8008044:	1b9b      	subs	r3, r3, r6
 8008046:	6123      	str	r3, [r4, #16]
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	0021      	movs	r1, r4
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	9805      	ldr	r0, [sp, #20]
 8008050:	9b06      	ldr	r3, [sp, #24]
 8008052:	aa09      	add	r2, sp, #36	; 0x24
 8008054:	f7ff fef4 	bl	8007e40 <_printf_common>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d14c      	bne.n	80080f6 <_printf_i+0x1d6>
 800805c:	2001      	movs	r0, #1
 800805e:	4240      	negs	r0, r0
 8008060:	b00b      	add	sp, #44	; 0x2c
 8008062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008064:	3145      	adds	r1, #69	; 0x45
 8008066:	700a      	strb	r2, [r1, #0]
 8008068:	4a34      	ldr	r2, [pc, #208]	; (800813c <_printf_i+0x21c>)
 800806a:	9203      	str	r2, [sp, #12]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	6821      	ldr	r1, [r4, #0]
 8008070:	ca20      	ldmia	r2!, {r5}
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	0608      	lsls	r0, r1, #24
 8008076:	d516      	bpl.n	80080a6 <_printf_i+0x186>
 8008078:	07cb      	lsls	r3, r1, #31
 800807a:	d502      	bpl.n	8008082 <_printf_i+0x162>
 800807c:	2320      	movs	r3, #32
 800807e:	4319      	orrs	r1, r3
 8008080:	6021      	str	r1, [r4, #0]
 8008082:	2710      	movs	r7, #16
 8008084:	2d00      	cmp	r5, #0
 8008086:	d1b2      	bne.n	8007fee <_printf_i+0xce>
 8008088:	2320      	movs	r3, #32
 800808a:	6822      	ldr	r2, [r4, #0]
 800808c:	439a      	bics	r2, r3
 800808e:	6022      	str	r2, [r4, #0]
 8008090:	e7ad      	b.n	8007fee <_printf_i+0xce>
 8008092:	2220      	movs	r2, #32
 8008094:	6809      	ldr	r1, [r1, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	6022      	str	r2, [r4, #0]
 800809a:	0022      	movs	r2, r4
 800809c:	2178      	movs	r1, #120	; 0x78
 800809e:	3245      	adds	r2, #69	; 0x45
 80080a0:	7011      	strb	r1, [r2, #0]
 80080a2:	4a27      	ldr	r2, [pc, #156]	; (8008140 <_printf_i+0x220>)
 80080a4:	e7e1      	b.n	800806a <_printf_i+0x14a>
 80080a6:	0648      	lsls	r0, r1, #25
 80080a8:	d5e6      	bpl.n	8008078 <_printf_i+0x158>
 80080aa:	b2ad      	uxth	r5, r5
 80080ac:	e7e4      	b.n	8008078 <_printf_i+0x158>
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	680d      	ldr	r5, [r1, #0]
 80080b2:	1d10      	adds	r0, r2, #4
 80080b4:	6949      	ldr	r1, [r1, #20]
 80080b6:	6018      	str	r0, [r3, #0]
 80080b8:	6813      	ldr	r3, [r2, #0]
 80080ba:	062e      	lsls	r6, r5, #24
 80080bc:	d501      	bpl.n	80080c2 <_printf_i+0x1a2>
 80080be:	6019      	str	r1, [r3, #0]
 80080c0:	e002      	b.n	80080c8 <_printf_i+0x1a8>
 80080c2:	066d      	lsls	r5, r5, #25
 80080c4:	d5fb      	bpl.n	80080be <_printf_i+0x19e>
 80080c6:	8019      	strh	r1, [r3, #0]
 80080c8:	2300      	movs	r3, #0
 80080ca:	9e04      	ldr	r6, [sp, #16]
 80080cc:	6123      	str	r3, [r4, #16]
 80080ce:	e7bb      	b.n	8008048 <_printf_i+0x128>
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	1d11      	adds	r1, r2, #4
 80080d4:	6019      	str	r1, [r3, #0]
 80080d6:	6816      	ldr	r6, [r2, #0]
 80080d8:	2100      	movs	r1, #0
 80080da:	0030      	movs	r0, r6
 80080dc:	6862      	ldr	r2, [r4, #4]
 80080de:	f000 ff05 	bl	8008eec <memchr>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d001      	beq.n	80080ea <_printf_i+0x1ca>
 80080e6:	1b80      	subs	r0, r0, r6
 80080e8:	6060      	str	r0, [r4, #4]
 80080ea:	6863      	ldr	r3, [r4, #4]
 80080ec:	6123      	str	r3, [r4, #16]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9a04      	ldr	r2, [sp, #16]
 80080f2:	7013      	strb	r3, [r2, #0]
 80080f4:	e7a8      	b.n	8008048 <_printf_i+0x128>
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	0032      	movs	r2, r6
 80080fa:	9906      	ldr	r1, [sp, #24]
 80080fc:	9805      	ldr	r0, [sp, #20]
 80080fe:	9d07      	ldr	r5, [sp, #28]
 8008100:	47a8      	blx	r5
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	d0aa      	beq.n	800805c <_printf_i+0x13c>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	079b      	lsls	r3, r3, #30
 800810a:	d415      	bmi.n	8008138 <_printf_i+0x218>
 800810c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810e:	68e0      	ldr	r0, [r4, #12]
 8008110:	4298      	cmp	r0, r3
 8008112:	daa5      	bge.n	8008060 <_printf_i+0x140>
 8008114:	0018      	movs	r0, r3
 8008116:	e7a3      	b.n	8008060 <_printf_i+0x140>
 8008118:	0022      	movs	r2, r4
 800811a:	2301      	movs	r3, #1
 800811c:	9906      	ldr	r1, [sp, #24]
 800811e:	9805      	ldr	r0, [sp, #20]
 8008120:	9e07      	ldr	r6, [sp, #28]
 8008122:	3219      	adds	r2, #25
 8008124:	47b0      	blx	r6
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	d098      	beq.n	800805c <_printf_i+0x13c>
 800812a:	3501      	adds	r5, #1
 800812c:	68e3      	ldr	r3, [r4, #12]
 800812e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	42ab      	cmp	r3, r5
 8008134:	dcf0      	bgt.n	8008118 <_printf_i+0x1f8>
 8008136:	e7e9      	b.n	800810c <_printf_i+0x1ec>
 8008138:	2500      	movs	r5, #0
 800813a:	e7f7      	b.n	800812c <_printf_i+0x20c>
 800813c:	0800a912 	.word	0x0800a912
 8008140:	0800a923 	.word	0x0800a923

08008144 <siprintf>:
 8008144:	b40e      	push	{r1, r2, r3}
 8008146:	b500      	push	{lr}
 8008148:	490b      	ldr	r1, [pc, #44]	; (8008178 <siprintf+0x34>)
 800814a:	b09c      	sub	sp, #112	; 0x70
 800814c:	ab1d      	add	r3, sp, #116	; 0x74
 800814e:	9002      	str	r0, [sp, #8]
 8008150:	9006      	str	r0, [sp, #24]
 8008152:	9107      	str	r1, [sp, #28]
 8008154:	9104      	str	r1, [sp, #16]
 8008156:	4809      	ldr	r0, [pc, #36]	; (800817c <siprintf+0x38>)
 8008158:	4909      	ldr	r1, [pc, #36]	; (8008180 <siprintf+0x3c>)
 800815a:	cb04      	ldmia	r3!, {r2}
 800815c:	9105      	str	r1, [sp, #20]
 800815e:	6800      	ldr	r0, [r0, #0]
 8008160:	a902      	add	r1, sp, #8
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	f001 fbe2 	bl	800992c <_svfiprintf_r>
 8008168:	2300      	movs	r3, #0
 800816a:	9a02      	ldr	r2, [sp, #8]
 800816c:	7013      	strb	r3, [r2, #0]
 800816e:	b01c      	add	sp, #112	; 0x70
 8008170:	bc08      	pop	{r3}
 8008172:	b003      	add	sp, #12
 8008174:	4718      	bx	r3
 8008176:	46c0      	nop			; (mov r8, r8)
 8008178:	7fffffff 	.word	0x7fffffff
 800817c:	2000000c 	.word	0x2000000c
 8008180:	ffff0208 	.word	0xffff0208

08008184 <quorem>:
 8008184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008186:	0006      	movs	r6, r0
 8008188:	690b      	ldr	r3, [r1, #16]
 800818a:	6932      	ldr	r2, [r6, #16]
 800818c:	b087      	sub	sp, #28
 800818e:	2000      	movs	r0, #0
 8008190:	9103      	str	r1, [sp, #12]
 8008192:	429a      	cmp	r2, r3
 8008194:	db65      	blt.n	8008262 <quorem+0xde>
 8008196:	3b01      	subs	r3, #1
 8008198:	009c      	lsls	r4, r3, #2
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	000b      	movs	r3, r1
 800819e:	3314      	adds	r3, #20
 80081a0:	9305      	str	r3, [sp, #20]
 80081a2:	191b      	adds	r3, r3, r4
 80081a4:	9304      	str	r3, [sp, #16]
 80081a6:	0033      	movs	r3, r6
 80081a8:	3314      	adds	r3, #20
 80081aa:	9302      	str	r3, [sp, #8]
 80081ac:	191c      	adds	r4, r3, r4
 80081ae:	9b04      	ldr	r3, [sp, #16]
 80081b0:	6827      	ldr	r7, [r4, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	0038      	movs	r0, r7
 80081b6:	1c5d      	adds	r5, r3, #1
 80081b8:	0029      	movs	r1, r5
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	f7f7 ffc0 	bl	8000140 <__udivsi3>
 80081c0:	9001      	str	r0, [sp, #4]
 80081c2:	42af      	cmp	r7, r5
 80081c4:	d324      	bcc.n	8008210 <quorem+0x8c>
 80081c6:	2500      	movs	r5, #0
 80081c8:	46ac      	mov	ip, r5
 80081ca:	9802      	ldr	r0, [sp, #8]
 80081cc:	9f05      	ldr	r7, [sp, #20]
 80081ce:	cf08      	ldmia	r7!, {r3}
 80081d0:	9a01      	ldr	r2, [sp, #4]
 80081d2:	b299      	uxth	r1, r3
 80081d4:	4351      	muls	r1, r2
 80081d6:	0c1b      	lsrs	r3, r3, #16
 80081d8:	4353      	muls	r3, r2
 80081da:	1949      	adds	r1, r1, r5
 80081dc:	0c0a      	lsrs	r2, r1, #16
 80081de:	189b      	adds	r3, r3, r2
 80081e0:	6802      	ldr	r2, [r0, #0]
 80081e2:	b289      	uxth	r1, r1
 80081e4:	b292      	uxth	r2, r2
 80081e6:	4462      	add	r2, ip
 80081e8:	1a52      	subs	r2, r2, r1
 80081ea:	6801      	ldr	r1, [r0, #0]
 80081ec:	0c1d      	lsrs	r5, r3, #16
 80081ee:	0c09      	lsrs	r1, r1, #16
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	1acb      	subs	r3, r1, r3
 80081f4:	1411      	asrs	r1, r2, #16
 80081f6:	185b      	adds	r3, r3, r1
 80081f8:	1419      	asrs	r1, r3, #16
 80081fa:	b292      	uxth	r2, r2
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	431a      	orrs	r2, r3
 8008200:	9b04      	ldr	r3, [sp, #16]
 8008202:	468c      	mov	ip, r1
 8008204:	c004      	stmia	r0!, {r2}
 8008206:	42bb      	cmp	r3, r7
 8008208:	d2e1      	bcs.n	80081ce <quorem+0x4a>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d030      	beq.n	8008272 <quorem+0xee>
 8008210:	0030      	movs	r0, r6
 8008212:	9903      	ldr	r1, [sp, #12]
 8008214:	f001 f902 	bl	800941c <__mcmp>
 8008218:	2800      	cmp	r0, #0
 800821a:	db21      	blt.n	8008260 <quorem+0xdc>
 800821c:	0030      	movs	r0, r6
 800821e:	2400      	movs	r4, #0
 8008220:	9b01      	ldr	r3, [sp, #4]
 8008222:	9903      	ldr	r1, [sp, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	9301      	str	r3, [sp, #4]
 8008228:	3014      	adds	r0, #20
 800822a:	3114      	adds	r1, #20
 800822c:	6803      	ldr	r3, [r0, #0]
 800822e:	c920      	ldmia	r1!, {r5}
 8008230:	b29a      	uxth	r2, r3
 8008232:	1914      	adds	r4, r2, r4
 8008234:	b2aa      	uxth	r2, r5
 8008236:	1aa2      	subs	r2, r4, r2
 8008238:	0c1b      	lsrs	r3, r3, #16
 800823a:	0c2d      	lsrs	r5, r5, #16
 800823c:	1414      	asrs	r4, r2, #16
 800823e:	1b5b      	subs	r3, r3, r5
 8008240:	191b      	adds	r3, r3, r4
 8008242:	141c      	asrs	r4, r3, #16
 8008244:	b292      	uxth	r2, r2
 8008246:	041b      	lsls	r3, r3, #16
 8008248:	4313      	orrs	r3, r2
 800824a:	c008      	stmia	r0!, {r3}
 800824c:	9b04      	ldr	r3, [sp, #16]
 800824e:	428b      	cmp	r3, r1
 8008250:	d2ec      	bcs.n	800822c <quorem+0xa8>
 8008252:	9b00      	ldr	r3, [sp, #0]
 8008254:	9a02      	ldr	r2, [sp, #8]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	18d3      	adds	r3, r2, r3
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	2a00      	cmp	r2, #0
 800825e:	d015      	beq.n	800828c <quorem+0x108>
 8008260:	9801      	ldr	r0, [sp, #4]
 8008262:	b007      	add	sp, #28
 8008264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d106      	bne.n	800827a <quorem+0xf6>
 800826c:	9b00      	ldr	r3, [sp, #0]
 800826e:	3b01      	subs	r3, #1
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	9b02      	ldr	r3, [sp, #8]
 8008274:	3c04      	subs	r4, #4
 8008276:	42a3      	cmp	r3, r4
 8008278:	d3f5      	bcc.n	8008266 <quorem+0xe2>
 800827a:	9b00      	ldr	r3, [sp, #0]
 800827c:	6133      	str	r3, [r6, #16]
 800827e:	e7c7      	b.n	8008210 <quorem+0x8c>
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	2a00      	cmp	r2, #0
 8008284:	d106      	bne.n	8008294 <quorem+0x110>
 8008286:	9a00      	ldr	r2, [sp, #0]
 8008288:	3a01      	subs	r2, #1
 800828a:	9200      	str	r2, [sp, #0]
 800828c:	9a02      	ldr	r2, [sp, #8]
 800828e:	3b04      	subs	r3, #4
 8008290:	429a      	cmp	r2, r3
 8008292:	d3f5      	bcc.n	8008280 <quorem+0xfc>
 8008294:	9b00      	ldr	r3, [sp, #0]
 8008296:	6133      	str	r3, [r6, #16]
 8008298:	e7e2      	b.n	8008260 <quorem+0xdc>
	...

0800829c <_dtoa_r>:
 800829c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800829e:	b09d      	sub	sp, #116	; 0x74
 80082a0:	9202      	str	r2, [sp, #8]
 80082a2:	9303      	str	r3, [sp, #12]
 80082a4:	9b02      	ldr	r3, [sp, #8]
 80082a6:	9c03      	ldr	r4, [sp, #12]
 80082a8:	9308      	str	r3, [sp, #32]
 80082aa:	9409      	str	r4, [sp, #36]	; 0x24
 80082ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80082ae:	0007      	movs	r7, r0
 80082b0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80082b2:	2c00      	cmp	r4, #0
 80082b4:	d10e      	bne.n	80082d4 <_dtoa_r+0x38>
 80082b6:	2010      	movs	r0, #16
 80082b8:	f000 fe0e 	bl	8008ed8 <malloc>
 80082bc:	1e02      	subs	r2, r0, #0
 80082be:	6278      	str	r0, [r7, #36]	; 0x24
 80082c0:	d104      	bne.n	80082cc <_dtoa_r+0x30>
 80082c2:	21ea      	movs	r1, #234	; 0xea
 80082c4:	4bc7      	ldr	r3, [pc, #796]	; (80085e4 <_dtoa_r+0x348>)
 80082c6:	48c8      	ldr	r0, [pc, #800]	; (80085e8 <_dtoa_r+0x34c>)
 80082c8:	f001 fc42 	bl	8009b50 <__assert_func>
 80082cc:	6044      	str	r4, [r0, #4]
 80082ce:	6084      	str	r4, [r0, #8]
 80082d0:	6004      	str	r4, [r0, #0]
 80082d2:	60c4      	str	r4, [r0, #12]
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	6819      	ldr	r1, [r3, #0]
 80082d8:	2900      	cmp	r1, #0
 80082da:	d00a      	beq.n	80082f2 <_dtoa_r+0x56>
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	2301      	movs	r3, #1
 80082e0:	4093      	lsls	r3, r2
 80082e2:	604a      	str	r2, [r1, #4]
 80082e4:	608b      	str	r3, [r1, #8]
 80082e6:	0038      	movs	r0, r7
 80082e8:	f000 fe58 	bl	8008f9c <_Bfree>
 80082ec:	2200      	movs	r2, #0
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	da20      	bge.n	800833a <_dtoa_r+0x9e>
 80082f8:	2301      	movs	r3, #1
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	085b      	lsrs	r3, r3, #1
 8008302:	9309      	str	r3, [sp, #36]	; 0x24
 8008304:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008306:	4bb9      	ldr	r3, [pc, #740]	; (80085ec <_dtoa_r+0x350>)
 8008308:	4ab8      	ldr	r2, [pc, #736]	; (80085ec <_dtoa_r+0x350>)
 800830a:	402b      	ands	r3, r5
 800830c:	4293      	cmp	r3, r2
 800830e:	d117      	bne.n	8008340 <_dtoa_r+0xa4>
 8008310:	4bb7      	ldr	r3, [pc, #732]	; (80085f0 <_dtoa_r+0x354>)
 8008312:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008314:	0328      	lsls	r0, r5, #12
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	9b02      	ldr	r3, [sp, #8]
 800831a:	0b00      	lsrs	r0, r0, #12
 800831c:	4318      	orrs	r0, r3
 800831e:	d101      	bne.n	8008324 <_dtoa_r+0x88>
 8008320:	f000 fdbf 	bl	8008ea2 <_dtoa_r+0xc06>
 8008324:	48b3      	ldr	r0, [pc, #716]	; (80085f4 <_dtoa_r+0x358>)
 8008326:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008328:	9006      	str	r0, [sp, #24]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <_dtoa_r+0x98>
 800832e:	4bb2      	ldr	r3, [pc, #712]	; (80085f8 <_dtoa_r+0x35c>)
 8008330:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	9806      	ldr	r0, [sp, #24]
 8008336:	b01d      	add	sp, #116	; 0x74
 8008338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800833a:	2300      	movs	r3, #0
 800833c:	602b      	str	r3, [r5, #0]
 800833e:	e7e1      	b.n	8008304 <_dtoa_r+0x68>
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008344:	9312      	str	r3, [sp, #72]	; 0x48
 8008346:	9413      	str	r4, [sp, #76]	; 0x4c
 8008348:	9812      	ldr	r0, [sp, #72]	; 0x48
 800834a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800834c:	2200      	movs	r2, #0
 800834e:	2300      	movs	r3, #0
 8008350:	f7f8 f87c 	bl	800044c <__aeabi_dcmpeq>
 8008354:	1e04      	subs	r4, r0, #0
 8008356:	d009      	beq.n	800836c <_dtoa_r+0xd0>
 8008358:	2301      	movs	r3, #1
 800835a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	4ba7      	ldr	r3, [pc, #668]	; (80085fc <_dtoa_r+0x360>)
 8008360:	9306      	str	r3, [sp, #24]
 8008362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0e5      	beq.n	8008334 <_dtoa_r+0x98>
 8008368:	4ba5      	ldr	r3, [pc, #660]	; (8008600 <_dtoa_r+0x364>)
 800836a:	e7e1      	b.n	8008330 <_dtoa_r+0x94>
 800836c:	ab1a      	add	r3, sp, #104	; 0x68
 800836e:	9301      	str	r3, [sp, #4]
 8008370:	ab1b      	add	r3, sp, #108	; 0x6c
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	0038      	movs	r0, r7
 8008376:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800837a:	f001 f903 	bl	8009584 <__d2b>
 800837e:	006e      	lsls	r6, r5, #1
 8008380:	9005      	str	r0, [sp, #20]
 8008382:	0d76      	lsrs	r6, r6, #21
 8008384:	d100      	bne.n	8008388 <_dtoa_r+0xec>
 8008386:	e07c      	b.n	8008482 <_dtoa_r+0x1e6>
 8008388:	9812      	ldr	r0, [sp, #72]	; 0x48
 800838a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800838c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800838e:	4a9d      	ldr	r2, [pc, #628]	; (8008604 <_dtoa_r+0x368>)
 8008390:	031b      	lsls	r3, r3, #12
 8008392:	0b1b      	lsrs	r3, r3, #12
 8008394:	431a      	orrs	r2, r3
 8008396:	0011      	movs	r1, r2
 8008398:	4b9b      	ldr	r3, [pc, #620]	; (8008608 <_dtoa_r+0x36c>)
 800839a:	9418      	str	r4, [sp, #96]	; 0x60
 800839c:	18f6      	adds	r6, r6, r3
 800839e:	2200      	movs	r2, #0
 80083a0:	4b9a      	ldr	r3, [pc, #616]	; (800860c <_dtoa_r+0x370>)
 80083a2:	f7f9 fb45 	bl	8001a30 <__aeabi_dsub>
 80083a6:	4a9a      	ldr	r2, [pc, #616]	; (8008610 <_dtoa_r+0x374>)
 80083a8:	4b9a      	ldr	r3, [pc, #616]	; (8008614 <_dtoa_r+0x378>)
 80083aa:	f7f9 f8d5 	bl	8001558 <__aeabi_dmul>
 80083ae:	4a9a      	ldr	r2, [pc, #616]	; (8008618 <_dtoa_r+0x37c>)
 80083b0:	4b9a      	ldr	r3, [pc, #616]	; (800861c <_dtoa_r+0x380>)
 80083b2:	f7f8 f993 	bl	80006dc <__aeabi_dadd>
 80083b6:	0004      	movs	r4, r0
 80083b8:	0030      	movs	r0, r6
 80083ba:	000d      	movs	r5, r1
 80083bc:	f7f9 ff1e 	bl	80021fc <__aeabi_i2d>
 80083c0:	4a97      	ldr	r2, [pc, #604]	; (8008620 <_dtoa_r+0x384>)
 80083c2:	4b98      	ldr	r3, [pc, #608]	; (8008624 <_dtoa_r+0x388>)
 80083c4:	f7f9 f8c8 	bl	8001558 <__aeabi_dmul>
 80083c8:	0002      	movs	r2, r0
 80083ca:	000b      	movs	r3, r1
 80083cc:	0020      	movs	r0, r4
 80083ce:	0029      	movs	r1, r5
 80083d0:	f7f8 f984 	bl	80006dc <__aeabi_dadd>
 80083d4:	0004      	movs	r4, r0
 80083d6:	000d      	movs	r5, r1
 80083d8:	f7f9 feda 	bl	8002190 <__aeabi_d2iz>
 80083dc:	2200      	movs	r2, #0
 80083de:	9002      	str	r0, [sp, #8]
 80083e0:	2300      	movs	r3, #0
 80083e2:	0020      	movs	r0, r4
 80083e4:	0029      	movs	r1, r5
 80083e6:	f7f8 f837 	bl	8000458 <__aeabi_dcmplt>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d00b      	beq.n	8008406 <_dtoa_r+0x16a>
 80083ee:	9802      	ldr	r0, [sp, #8]
 80083f0:	f7f9 ff04 	bl	80021fc <__aeabi_i2d>
 80083f4:	002b      	movs	r3, r5
 80083f6:	0022      	movs	r2, r4
 80083f8:	f7f8 f828 	bl	800044c <__aeabi_dcmpeq>
 80083fc:	4243      	negs	r3, r0
 80083fe:	4158      	adcs	r0, r3
 8008400:	9b02      	ldr	r3, [sp, #8]
 8008402:	1a1b      	subs	r3, r3, r0
 8008404:	9302      	str	r3, [sp, #8]
 8008406:	2301      	movs	r3, #1
 8008408:	9316      	str	r3, [sp, #88]	; 0x58
 800840a:	9b02      	ldr	r3, [sp, #8]
 800840c:	2b16      	cmp	r3, #22
 800840e:	d80f      	bhi.n	8008430 <_dtoa_r+0x194>
 8008410:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008412:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008414:	00da      	lsls	r2, r3, #3
 8008416:	4b84      	ldr	r3, [pc, #528]	; (8008628 <_dtoa_r+0x38c>)
 8008418:	189b      	adds	r3, r3, r2
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f7f8 f81b 	bl	8000458 <__aeabi_dcmplt>
 8008422:	2800      	cmp	r0, #0
 8008424:	d049      	beq.n	80084ba <_dtoa_r+0x21e>
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	3b01      	subs	r3, #1
 800842a:	9302      	str	r3, [sp, #8]
 800842c:	2300      	movs	r3, #0
 800842e:	9316      	str	r3, [sp, #88]	; 0x58
 8008430:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008432:	1b9e      	subs	r6, r3, r6
 8008434:	2300      	movs	r3, #0
 8008436:	930a      	str	r3, [sp, #40]	; 0x28
 8008438:	0033      	movs	r3, r6
 800843a:	3b01      	subs	r3, #1
 800843c:	930d      	str	r3, [sp, #52]	; 0x34
 800843e:	d504      	bpl.n	800844a <_dtoa_r+0x1ae>
 8008440:	2301      	movs	r3, #1
 8008442:	1b9b      	subs	r3, r3, r6
 8008444:	930a      	str	r3, [sp, #40]	; 0x28
 8008446:	2300      	movs	r3, #0
 8008448:	930d      	str	r3, [sp, #52]	; 0x34
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	db36      	blt.n	80084be <_dtoa_r+0x222>
 8008450:	9a02      	ldr	r2, [sp, #8]
 8008452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008454:	4694      	mov	ip, r2
 8008456:	4463      	add	r3, ip
 8008458:	930d      	str	r3, [sp, #52]	; 0x34
 800845a:	2300      	movs	r3, #0
 800845c:	9215      	str	r2, [sp, #84]	; 0x54
 800845e:	930e      	str	r3, [sp, #56]	; 0x38
 8008460:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008462:	2401      	movs	r4, #1
 8008464:	2b09      	cmp	r3, #9
 8008466:	d864      	bhi.n	8008532 <_dtoa_r+0x296>
 8008468:	2b05      	cmp	r3, #5
 800846a:	dd02      	ble.n	8008472 <_dtoa_r+0x1d6>
 800846c:	2400      	movs	r4, #0
 800846e:	3b04      	subs	r3, #4
 8008470:	9322      	str	r3, [sp, #136]	; 0x88
 8008472:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008474:	1e98      	subs	r0, r3, #2
 8008476:	2803      	cmp	r0, #3
 8008478:	d864      	bhi.n	8008544 <_dtoa_r+0x2a8>
 800847a:	f7f7 fe4d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800847e:	3829      	.short	0x3829
 8008480:	5836      	.short	0x5836
 8008482:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008484:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008486:	189e      	adds	r6, r3, r2
 8008488:	4b68      	ldr	r3, [pc, #416]	; (800862c <_dtoa_r+0x390>)
 800848a:	18f2      	adds	r2, r6, r3
 800848c:	2a20      	cmp	r2, #32
 800848e:	dd0f      	ble.n	80084b0 <_dtoa_r+0x214>
 8008490:	2340      	movs	r3, #64	; 0x40
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	409d      	lsls	r5, r3
 8008496:	4b66      	ldr	r3, [pc, #408]	; (8008630 <_dtoa_r+0x394>)
 8008498:	9802      	ldr	r0, [sp, #8]
 800849a:	18f3      	adds	r3, r6, r3
 800849c:	40d8      	lsrs	r0, r3
 800849e:	4328      	orrs	r0, r5
 80084a0:	f7f9 fedc 	bl	800225c <__aeabi_ui2d>
 80084a4:	2301      	movs	r3, #1
 80084a6:	4c63      	ldr	r4, [pc, #396]	; (8008634 <_dtoa_r+0x398>)
 80084a8:	3e01      	subs	r6, #1
 80084aa:	1909      	adds	r1, r1, r4
 80084ac:	9318      	str	r3, [sp, #96]	; 0x60
 80084ae:	e776      	b.n	800839e <_dtoa_r+0x102>
 80084b0:	2320      	movs	r3, #32
 80084b2:	9802      	ldr	r0, [sp, #8]
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	4098      	lsls	r0, r3
 80084b8:	e7f2      	b.n	80084a0 <_dtoa_r+0x204>
 80084ba:	9016      	str	r0, [sp, #88]	; 0x58
 80084bc:	e7b8      	b.n	8008430 <_dtoa_r+0x194>
 80084be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c0:	9a02      	ldr	r2, [sp, #8]
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	930a      	str	r3, [sp, #40]	; 0x28
 80084c6:	4253      	negs	r3, r2
 80084c8:	930e      	str	r3, [sp, #56]	; 0x38
 80084ca:	2300      	movs	r3, #0
 80084cc:	9315      	str	r3, [sp, #84]	; 0x54
 80084ce:	e7c7      	b.n	8008460 <_dtoa_r+0x1c4>
 80084d0:	2300      	movs	r3, #0
 80084d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80084d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084d6:	930c      	str	r3, [sp, #48]	; 0x30
 80084d8:	9307      	str	r3, [sp, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	dc13      	bgt.n	8008506 <_dtoa_r+0x26a>
 80084de:	2301      	movs	r3, #1
 80084e0:	001a      	movs	r2, r3
 80084e2:	930c      	str	r3, [sp, #48]	; 0x30
 80084e4:	9307      	str	r3, [sp, #28]
 80084e6:	9223      	str	r2, [sp, #140]	; 0x8c
 80084e8:	e00d      	b.n	8008506 <_dtoa_r+0x26a>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e7f1      	b.n	80084d2 <_dtoa_r+0x236>
 80084ee:	2300      	movs	r3, #0
 80084f0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80084f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80084f4:	4694      	mov	ip, r2
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	4463      	add	r3, ip
 80084fa:	930c      	str	r3, [sp, #48]	; 0x30
 80084fc:	3301      	adds	r3, #1
 80084fe:	9307      	str	r3, [sp, #28]
 8008500:	2b00      	cmp	r3, #0
 8008502:	dc00      	bgt.n	8008506 <_dtoa_r+0x26a>
 8008504:	2301      	movs	r3, #1
 8008506:	2200      	movs	r2, #0
 8008508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800850a:	6042      	str	r2, [r0, #4]
 800850c:	3204      	adds	r2, #4
 800850e:	0015      	movs	r5, r2
 8008510:	3514      	adds	r5, #20
 8008512:	6841      	ldr	r1, [r0, #4]
 8008514:	429d      	cmp	r5, r3
 8008516:	d919      	bls.n	800854c <_dtoa_r+0x2b0>
 8008518:	0038      	movs	r0, r7
 800851a:	f000 fcfb 	bl	8008f14 <_Balloc>
 800851e:	9006      	str	r0, [sp, #24]
 8008520:	2800      	cmp	r0, #0
 8008522:	d117      	bne.n	8008554 <_dtoa_r+0x2b8>
 8008524:	21d5      	movs	r1, #213	; 0xd5
 8008526:	0002      	movs	r2, r0
 8008528:	4b43      	ldr	r3, [pc, #268]	; (8008638 <_dtoa_r+0x39c>)
 800852a:	0049      	lsls	r1, r1, #1
 800852c:	e6cb      	b.n	80082c6 <_dtoa_r+0x2a>
 800852e:	2301      	movs	r3, #1
 8008530:	e7de      	b.n	80084f0 <_dtoa_r+0x254>
 8008532:	2300      	movs	r3, #0
 8008534:	940f      	str	r4, [sp, #60]	; 0x3c
 8008536:	9322      	str	r3, [sp, #136]	; 0x88
 8008538:	3b01      	subs	r3, #1
 800853a:	930c      	str	r3, [sp, #48]	; 0x30
 800853c:	9307      	str	r3, [sp, #28]
 800853e:	2200      	movs	r2, #0
 8008540:	3313      	adds	r3, #19
 8008542:	e7d0      	b.n	80084e6 <_dtoa_r+0x24a>
 8008544:	2301      	movs	r3, #1
 8008546:	930f      	str	r3, [sp, #60]	; 0x3c
 8008548:	3b02      	subs	r3, #2
 800854a:	e7f6      	b.n	800853a <_dtoa_r+0x29e>
 800854c:	3101      	adds	r1, #1
 800854e:	6041      	str	r1, [r0, #4]
 8008550:	0052      	lsls	r2, r2, #1
 8008552:	e7dc      	b.n	800850e <_dtoa_r+0x272>
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	9a06      	ldr	r2, [sp, #24]
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	9b07      	ldr	r3, [sp, #28]
 800855c:	2b0e      	cmp	r3, #14
 800855e:	d900      	bls.n	8008562 <_dtoa_r+0x2c6>
 8008560:	e0eb      	b.n	800873a <_dtoa_r+0x49e>
 8008562:	2c00      	cmp	r4, #0
 8008564:	d100      	bne.n	8008568 <_dtoa_r+0x2cc>
 8008566:	e0e8      	b.n	800873a <_dtoa_r+0x49e>
 8008568:	9b02      	ldr	r3, [sp, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	dd68      	ble.n	8008640 <_dtoa_r+0x3a4>
 800856e:	001a      	movs	r2, r3
 8008570:	210f      	movs	r1, #15
 8008572:	4b2d      	ldr	r3, [pc, #180]	; (8008628 <_dtoa_r+0x38c>)
 8008574:	400a      	ands	r2, r1
 8008576:	00d2      	lsls	r2, r2, #3
 8008578:	189b      	adds	r3, r3, r2
 800857a:	681d      	ldr	r5, [r3, #0]
 800857c:	685e      	ldr	r6, [r3, #4]
 800857e:	9b02      	ldr	r3, [sp, #8]
 8008580:	111c      	asrs	r4, r3, #4
 8008582:	2302      	movs	r3, #2
 8008584:	9310      	str	r3, [sp, #64]	; 0x40
 8008586:	9b02      	ldr	r3, [sp, #8]
 8008588:	05db      	lsls	r3, r3, #23
 800858a:	d50b      	bpl.n	80085a4 <_dtoa_r+0x308>
 800858c:	4b2b      	ldr	r3, [pc, #172]	; (800863c <_dtoa_r+0x3a0>)
 800858e:	400c      	ands	r4, r1
 8008590:	6a1a      	ldr	r2, [r3, #32]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008596:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008598:	f7f8 fbdc 	bl	8000d54 <__aeabi_ddiv>
 800859c:	2303      	movs	r3, #3
 800859e:	9008      	str	r0, [sp, #32]
 80085a0:	9109      	str	r1, [sp, #36]	; 0x24
 80085a2:	9310      	str	r3, [sp, #64]	; 0x40
 80085a4:	4b25      	ldr	r3, [pc, #148]	; (800863c <_dtoa_r+0x3a0>)
 80085a6:	9314      	str	r3, [sp, #80]	; 0x50
 80085a8:	2c00      	cmp	r4, #0
 80085aa:	d108      	bne.n	80085be <_dtoa_r+0x322>
 80085ac:	9808      	ldr	r0, [sp, #32]
 80085ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085b0:	002a      	movs	r2, r5
 80085b2:	0033      	movs	r3, r6
 80085b4:	f7f8 fbce 	bl	8000d54 <__aeabi_ddiv>
 80085b8:	9008      	str	r0, [sp, #32]
 80085ba:	9109      	str	r1, [sp, #36]	; 0x24
 80085bc:	e05c      	b.n	8008678 <_dtoa_r+0x3dc>
 80085be:	2301      	movs	r3, #1
 80085c0:	421c      	tst	r4, r3
 80085c2:	d00b      	beq.n	80085dc <_dtoa_r+0x340>
 80085c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085c6:	0028      	movs	r0, r5
 80085c8:	3301      	adds	r3, #1
 80085ca:	9310      	str	r3, [sp, #64]	; 0x40
 80085cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085ce:	0031      	movs	r1, r6
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f7f8 ffc0 	bl	8001558 <__aeabi_dmul>
 80085d8:	0005      	movs	r5, r0
 80085da:	000e      	movs	r6, r1
 80085dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085de:	1064      	asrs	r4, r4, #1
 80085e0:	3308      	adds	r3, #8
 80085e2:	e7e0      	b.n	80085a6 <_dtoa_r+0x30a>
 80085e4:	0800a941 	.word	0x0800a941
 80085e8:	0800a958 	.word	0x0800a958
 80085ec:	7ff00000 	.word	0x7ff00000
 80085f0:	0000270f 	.word	0x0000270f
 80085f4:	0800a93d 	.word	0x0800a93d
 80085f8:	0800a940 	.word	0x0800a940
 80085fc:	0800a910 	.word	0x0800a910
 8008600:	0800a911 	.word	0x0800a911
 8008604:	3ff00000 	.word	0x3ff00000
 8008608:	fffffc01 	.word	0xfffffc01
 800860c:	3ff80000 	.word	0x3ff80000
 8008610:	636f4361 	.word	0x636f4361
 8008614:	3fd287a7 	.word	0x3fd287a7
 8008618:	8b60c8b3 	.word	0x8b60c8b3
 800861c:	3fc68a28 	.word	0x3fc68a28
 8008620:	509f79fb 	.word	0x509f79fb
 8008624:	3fd34413 	.word	0x3fd34413
 8008628:	0800aa48 	.word	0x0800aa48
 800862c:	00000432 	.word	0x00000432
 8008630:	00000412 	.word	0x00000412
 8008634:	fe100000 	.word	0xfe100000
 8008638:	0800a9b3 	.word	0x0800a9b3
 800863c:	0800aa20 	.word	0x0800aa20
 8008640:	2302      	movs	r3, #2
 8008642:	9310      	str	r3, [sp, #64]	; 0x40
 8008644:	9b02      	ldr	r3, [sp, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d016      	beq.n	8008678 <_dtoa_r+0x3dc>
 800864a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800864c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800864e:	425c      	negs	r4, r3
 8008650:	230f      	movs	r3, #15
 8008652:	4ab6      	ldr	r2, [pc, #728]	; (800892c <_dtoa_r+0x690>)
 8008654:	4023      	ands	r3, r4
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	18d3      	adds	r3, r2, r3
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f7f8 ff7b 	bl	8001558 <__aeabi_dmul>
 8008662:	2601      	movs	r6, #1
 8008664:	2300      	movs	r3, #0
 8008666:	9008      	str	r0, [sp, #32]
 8008668:	9109      	str	r1, [sp, #36]	; 0x24
 800866a:	4db1      	ldr	r5, [pc, #708]	; (8008930 <_dtoa_r+0x694>)
 800866c:	1124      	asrs	r4, r4, #4
 800866e:	2c00      	cmp	r4, #0
 8008670:	d000      	beq.n	8008674 <_dtoa_r+0x3d8>
 8008672:	e094      	b.n	800879e <_dtoa_r+0x502>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d19f      	bne.n	80085b8 <_dtoa_r+0x31c>
 8008678:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800867a:	2b00      	cmp	r3, #0
 800867c:	d100      	bne.n	8008680 <_dtoa_r+0x3e4>
 800867e:	e09b      	b.n	80087b8 <_dtoa_r+0x51c>
 8008680:	9c08      	ldr	r4, [sp, #32]
 8008682:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008684:	2200      	movs	r2, #0
 8008686:	0020      	movs	r0, r4
 8008688:	0029      	movs	r1, r5
 800868a:	4baa      	ldr	r3, [pc, #680]	; (8008934 <_dtoa_r+0x698>)
 800868c:	f7f7 fee4 	bl	8000458 <__aeabi_dcmplt>
 8008690:	2800      	cmp	r0, #0
 8008692:	d100      	bne.n	8008696 <_dtoa_r+0x3fa>
 8008694:	e090      	b.n	80087b8 <_dtoa_r+0x51c>
 8008696:	9b07      	ldr	r3, [sp, #28]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d100      	bne.n	800869e <_dtoa_r+0x402>
 800869c:	e08c      	b.n	80087b8 <_dtoa_r+0x51c>
 800869e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dd46      	ble.n	8008732 <_dtoa_r+0x496>
 80086a4:	9b02      	ldr	r3, [sp, #8]
 80086a6:	2200      	movs	r2, #0
 80086a8:	0020      	movs	r0, r4
 80086aa:	0029      	movs	r1, r5
 80086ac:	1e5e      	subs	r6, r3, #1
 80086ae:	4ba2      	ldr	r3, [pc, #648]	; (8008938 <_dtoa_r+0x69c>)
 80086b0:	f7f8 ff52 	bl	8001558 <__aeabi_dmul>
 80086b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086b6:	9008      	str	r0, [sp, #32]
 80086b8:	9109      	str	r1, [sp, #36]	; 0x24
 80086ba:	3301      	adds	r3, #1
 80086bc:	9310      	str	r3, [sp, #64]	; 0x40
 80086be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80086c2:	9c08      	ldr	r4, [sp, #32]
 80086c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086c6:	9314      	str	r3, [sp, #80]	; 0x50
 80086c8:	f7f9 fd98 	bl	80021fc <__aeabi_i2d>
 80086cc:	0022      	movs	r2, r4
 80086ce:	002b      	movs	r3, r5
 80086d0:	f7f8 ff42 	bl	8001558 <__aeabi_dmul>
 80086d4:	2200      	movs	r2, #0
 80086d6:	4b99      	ldr	r3, [pc, #612]	; (800893c <_dtoa_r+0x6a0>)
 80086d8:	f7f8 f800 	bl	80006dc <__aeabi_dadd>
 80086dc:	9010      	str	r0, [sp, #64]	; 0x40
 80086de:	9111      	str	r1, [sp, #68]	; 0x44
 80086e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086e4:	9208      	str	r2, [sp, #32]
 80086e6:	9309      	str	r3, [sp, #36]	; 0x24
 80086e8:	4a95      	ldr	r2, [pc, #596]	; (8008940 <_dtoa_r+0x6a4>)
 80086ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086ec:	4694      	mov	ip, r2
 80086ee:	4463      	add	r3, ip
 80086f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80086f2:	9309      	str	r3, [sp, #36]	; 0x24
 80086f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d161      	bne.n	80087be <_dtoa_r+0x522>
 80086fa:	2200      	movs	r2, #0
 80086fc:	0020      	movs	r0, r4
 80086fe:	0029      	movs	r1, r5
 8008700:	4b90      	ldr	r3, [pc, #576]	; (8008944 <_dtoa_r+0x6a8>)
 8008702:	f7f9 f995 	bl	8001a30 <__aeabi_dsub>
 8008706:	9a08      	ldr	r2, [sp, #32]
 8008708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800870a:	0004      	movs	r4, r0
 800870c:	000d      	movs	r5, r1
 800870e:	f7f7 feb7 	bl	8000480 <__aeabi_dcmpgt>
 8008712:	2800      	cmp	r0, #0
 8008714:	d000      	beq.n	8008718 <_dtoa_r+0x47c>
 8008716:	e2af      	b.n	8008c78 <_dtoa_r+0x9dc>
 8008718:	488b      	ldr	r0, [pc, #556]	; (8008948 <_dtoa_r+0x6ac>)
 800871a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800871c:	4684      	mov	ip, r0
 800871e:	4461      	add	r1, ip
 8008720:	000b      	movs	r3, r1
 8008722:	0020      	movs	r0, r4
 8008724:	0029      	movs	r1, r5
 8008726:	9a08      	ldr	r2, [sp, #32]
 8008728:	f7f7 fe96 	bl	8000458 <__aeabi_dcmplt>
 800872c:	2800      	cmp	r0, #0
 800872e:	d000      	beq.n	8008732 <_dtoa_r+0x496>
 8008730:	e29f      	b.n	8008c72 <_dtoa_r+0x9d6>
 8008732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008734:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008736:	9308      	str	r3, [sp, #32]
 8008738:	9409      	str	r4, [sp, #36]	; 0x24
 800873a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800873c:	2b00      	cmp	r3, #0
 800873e:	da00      	bge.n	8008742 <_dtoa_r+0x4a6>
 8008740:	e172      	b.n	8008a28 <_dtoa_r+0x78c>
 8008742:	9a02      	ldr	r2, [sp, #8]
 8008744:	2a0e      	cmp	r2, #14
 8008746:	dd00      	ble.n	800874a <_dtoa_r+0x4ae>
 8008748:	e16e      	b.n	8008a28 <_dtoa_r+0x78c>
 800874a:	4b78      	ldr	r3, [pc, #480]	; (800892c <_dtoa_r+0x690>)
 800874c:	00d2      	lsls	r2, r2, #3
 800874e:	189b      	adds	r3, r3, r2
 8008750:	685c      	ldr	r4, [r3, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	930a      	str	r3, [sp, #40]	; 0x28
 8008756:	940b      	str	r4, [sp, #44]	; 0x2c
 8008758:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800875a:	2b00      	cmp	r3, #0
 800875c:	db00      	blt.n	8008760 <_dtoa_r+0x4c4>
 800875e:	e0f7      	b.n	8008950 <_dtoa_r+0x6b4>
 8008760:	9b07      	ldr	r3, [sp, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	dd00      	ble.n	8008768 <_dtoa_r+0x4cc>
 8008766:	e0f3      	b.n	8008950 <_dtoa_r+0x6b4>
 8008768:	d000      	beq.n	800876c <_dtoa_r+0x4d0>
 800876a:	e282      	b.n	8008c72 <_dtoa_r+0x9d6>
 800876c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800876e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008770:	2200      	movs	r2, #0
 8008772:	4b74      	ldr	r3, [pc, #464]	; (8008944 <_dtoa_r+0x6a8>)
 8008774:	f7f8 fef0 	bl	8001558 <__aeabi_dmul>
 8008778:	9a08      	ldr	r2, [sp, #32]
 800877a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800877c:	f7f7 fe8a 	bl	8000494 <__aeabi_dcmpge>
 8008780:	9e07      	ldr	r6, [sp, #28]
 8008782:	0035      	movs	r5, r6
 8008784:	2800      	cmp	r0, #0
 8008786:	d000      	beq.n	800878a <_dtoa_r+0x4ee>
 8008788:	e259      	b.n	8008c3e <_dtoa_r+0x9a2>
 800878a:	9b06      	ldr	r3, [sp, #24]
 800878c:	9a06      	ldr	r2, [sp, #24]
 800878e:	3301      	adds	r3, #1
 8008790:	9308      	str	r3, [sp, #32]
 8008792:	2331      	movs	r3, #49	; 0x31
 8008794:	7013      	strb	r3, [r2, #0]
 8008796:	9b02      	ldr	r3, [sp, #8]
 8008798:	3301      	adds	r3, #1
 800879a:	9302      	str	r3, [sp, #8]
 800879c:	e254      	b.n	8008c48 <_dtoa_r+0x9ac>
 800879e:	4234      	tst	r4, r6
 80087a0:	d007      	beq.n	80087b2 <_dtoa_r+0x516>
 80087a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087a4:	3301      	adds	r3, #1
 80087a6:	9310      	str	r3, [sp, #64]	; 0x40
 80087a8:	682a      	ldr	r2, [r5, #0]
 80087aa:	686b      	ldr	r3, [r5, #4]
 80087ac:	f7f8 fed4 	bl	8001558 <__aeabi_dmul>
 80087b0:	0033      	movs	r3, r6
 80087b2:	1064      	asrs	r4, r4, #1
 80087b4:	3508      	adds	r5, #8
 80087b6:	e75a      	b.n	800866e <_dtoa_r+0x3d2>
 80087b8:	9e02      	ldr	r6, [sp, #8]
 80087ba:	9b07      	ldr	r3, [sp, #28]
 80087bc:	e780      	b.n	80086c0 <_dtoa_r+0x424>
 80087be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80087c2:	1e5a      	subs	r2, r3, #1
 80087c4:	4b59      	ldr	r3, [pc, #356]	; (800892c <_dtoa_r+0x690>)
 80087c6:	00d2      	lsls	r2, r2, #3
 80087c8:	189b      	adds	r3, r3, r2
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	2900      	cmp	r1, #0
 80087d0:	d051      	beq.n	8008876 <_dtoa_r+0x5da>
 80087d2:	2000      	movs	r0, #0
 80087d4:	495d      	ldr	r1, [pc, #372]	; (800894c <_dtoa_r+0x6b0>)
 80087d6:	f7f8 fabd 	bl	8000d54 <__aeabi_ddiv>
 80087da:	9a08      	ldr	r2, [sp, #32]
 80087dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087de:	f7f9 f927 	bl	8001a30 <__aeabi_dsub>
 80087e2:	9a06      	ldr	r2, [sp, #24]
 80087e4:	9b06      	ldr	r3, [sp, #24]
 80087e6:	4694      	mov	ip, r2
 80087e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80087ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087ec:	9010      	str	r0, [sp, #64]	; 0x40
 80087ee:	9111      	str	r1, [sp, #68]	; 0x44
 80087f0:	4463      	add	r3, ip
 80087f2:	9319      	str	r3, [sp, #100]	; 0x64
 80087f4:	0029      	movs	r1, r5
 80087f6:	0020      	movs	r0, r4
 80087f8:	f7f9 fcca 	bl	8002190 <__aeabi_d2iz>
 80087fc:	9014      	str	r0, [sp, #80]	; 0x50
 80087fe:	f7f9 fcfd 	bl	80021fc <__aeabi_i2d>
 8008802:	0002      	movs	r2, r0
 8008804:	000b      	movs	r3, r1
 8008806:	0020      	movs	r0, r4
 8008808:	0029      	movs	r1, r5
 800880a:	f7f9 f911 	bl	8001a30 <__aeabi_dsub>
 800880e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008810:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008812:	3301      	adds	r3, #1
 8008814:	9308      	str	r3, [sp, #32]
 8008816:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008818:	0004      	movs	r4, r0
 800881a:	3330      	adds	r3, #48	; 0x30
 800881c:	7013      	strb	r3, [r2, #0]
 800881e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008822:	000d      	movs	r5, r1
 8008824:	f7f7 fe18 	bl	8000458 <__aeabi_dcmplt>
 8008828:	2800      	cmp	r0, #0
 800882a:	d175      	bne.n	8008918 <_dtoa_r+0x67c>
 800882c:	0022      	movs	r2, r4
 800882e:	002b      	movs	r3, r5
 8008830:	2000      	movs	r0, #0
 8008832:	4940      	ldr	r1, [pc, #256]	; (8008934 <_dtoa_r+0x698>)
 8008834:	f7f9 f8fc 	bl	8001a30 <__aeabi_dsub>
 8008838:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800883a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800883c:	f7f7 fe0c 	bl	8000458 <__aeabi_dcmplt>
 8008840:	2800      	cmp	r0, #0
 8008842:	d000      	beq.n	8008846 <_dtoa_r+0x5aa>
 8008844:	e0d2      	b.n	80089ec <_dtoa_r+0x750>
 8008846:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008848:	9a08      	ldr	r2, [sp, #32]
 800884a:	4293      	cmp	r3, r2
 800884c:	d100      	bne.n	8008850 <_dtoa_r+0x5b4>
 800884e:	e770      	b.n	8008732 <_dtoa_r+0x496>
 8008850:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008852:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008854:	2200      	movs	r2, #0
 8008856:	4b38      	ldr	r3, [pc, #224]	; (8008938 <_dtoa_r+0x69c>)
 8008858:	f7f8 fe7e 	bl	8001558 <__aeabi_dmul>
 800885c:	4b36      	ldr	r3, [pc, #216]	; (8008938 <_dtoa_r+0x69c>)
 800885e:	9010      	str	r0, [sp, #64]	; 0x40
 8008860:	9111      	str	r1, [sp, #68]	; 0x44
 8008862:	2200      	movs	r2, #0
 8008864:	0020      	movs	r0, r4
 8008866:	0029      	movs	r1, r5
 8008868:	f7f8 fe76 	bl	8001558 <__aeabi_dmul>
 800886c:	9b08      	ldr	r3, [sp, #32]
 800886e:	0004      	movs	r4, r0
 8008870:	000d      	movs	r5, r1
 8008872:	9317      	str	r3, [sp, #92]	; 0x5c
 8008874:	e7be      	b.n	80087f4 <_dtoa_r+0x558>
 8008876:	9808      	ldr	r0, [sp, #32]
 8008878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800887a:	f7f8 fe6d 	bl	8001558 <__aeabi_dmul>
 800887e:	9a06      	ldr	r2, [sp, #24]
 8008880:	9b06      	ldr	r3, [sp, #24]
 8008882:	4694      	mov	ip, r2
 8008884:	9308      	str	r3, [sp, #32]
 8008886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008888:	9010      	str	r0, [sp, #64]	; 0x40
 800888a:	9111      	str	r1, [sp, #68]	; 0x44
 800888c:	4463      	add	r3, ip
 800888e:	9319      	str	r3, [sp, #100]	; 0x64
 8008890:	0029      	movs	r1, r5
 8008892:	0020      	movs	r0, r4
 8008894:	f7f9 fc7c 	bl	8002190 <__aeabi_d2iz>
 8008898:	9017      	str	r0, [sp, #92]	; 0x5c
 800889a:	f7f9 fcaf 	bl	80021fc <__aeabi_i2d>
 800889e:	0002      	movs	r2, r0
 80088a0:	000b      	movs	r3, r1
 80088a2:	0020      	movs	r0, r4
 80088a4:	0029      	movs	r1, r5
 80088a6:	f7f9 f8c3 	bl	8001a30 <__aeabi_dsub>
 80088aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088ac:	9a08      	ldr	r2, [sp, #32]
 80088ae:	3330      	adds	r3, #48	; 0x30
 80088b0:	7013      	strb	r3, [r2, #0]
 80088b2:	0013      	movs	r3, r2
 80088b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80088b6:	3301      	adds	r3, #1
 80088b8:	0004      	movs	r4, r0
 80088ba:	000d      	movs	r5, r1
 80088bc:	9308      	str	r3, [sp, #32]
 80088be:	4293      	cmp	r3, r2
 80088c0:	d12c      	bne.n	800891c <_dtoa_r+0x680>
 80088c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80088c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80088c6:	9a06      	ldr	r2, [sp, #24]
 80088c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088ca:	4694      	mov	ip, r2
 80088cc:	4463      	add	r3, ip
 80088ce:	2200      	movs	r2, #0
 80088d0:	9308      	str	r3, [sp, #32]
 80088d2:	4b1e      	ldr	r3, [pc, #120]	; (800894c <_dtoa_r+0x6b0>)
 80088d4:	f7f7 ff02 	bl	80006dc <__aeabi_dadd>
 80088d8:	0002      	movs	r2, r0
 80088da:	000b      	movs	r3, r1
 80088dc:	0020      	movs	r0, r4
 80088de:	0029      	movs	r1, r5
 80088e0:	f7f7 fdce 	bl	8000480 <__aeabi_dcmpgt>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d000      	beq.n	80088ea <_dtoa_r+0x64e>
 80088e8:	e080      	b.n	80089ec <_dtoa_r+0x750>
 80088ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088ee:	2000      	movs	r0, #0
 80088f0:	4916      	ldr	r1, [pc, #88]	; (800894c <_dtoa_r+0x6b0>)
 80088f2:	f7f9 f89d 	bl	8001a30 <__aeabi_dsub>
 80088f6:	0002      	movs	r2, r0
 80088f8:	000b      	movs	r3, r1
 80088fa:	0020      	movs	r0, r4
 80088fc:	0029      	movs	r1, r5
 80088fe:	f7f7 fdab 	bl	8000458 <__aeabi_dcmplt>
 8008902:	2800      	cmp	r0, #0
 8008904:	d100      	bne.n	8008908 <_dtoa_r+0x66c>
 8008906:	e714      	b.n	8008732 <_dtoa_r+0x496>
 8008908:	9b08      	ldr	r3, [sp, #32]
 800890a:	001a      	movs	r2, r3
 800890c:	3a01      	subs	r2, #1
 800890e:	9208      	str	r2, [sp, #32]
 8008910:	7812      	ldrb	r2, [r2, #0]
 8008912:	2a30      	cmp	r2, #48	; 0x30
 8008914:	d0f8      	beq.n	8008908 <_dtoa_r+0x66c>
 8008916:	9308      	str	r3, [sp, #32]
 8008918:	9602      	str	r6, [sp, #8]
 800891a:	e055      	b.n	80089c8 <_dtoa_r+0x72c>
 800891c:	2200      	movs	r2, #0
 800891e:	4b06      	ldr	r3, [pc, #24]	; (8008938 <_dtoa_r+0x69c>)
 8008920:	f7f8 fe1a 	bl	8001558 <__aeabi_dmul>
 8008924:	0004      	movs	r4, r0
 8008926:	000d      	movs	r5, r1
 8008928:	e7b2      	b.n	8008890 <_dtoa_r+0x5f4>
 800892a:	46c0      	nop			; (mov r8, r8)
 800892c:	0800aa48 	.word	0x0800aa48
 8008930:	0800aa20 	.word	0x0800aa20
 8008934:	3ff00000 	.word	0x3ff00000
 8008938:	40240000 	.word	0x40240000
 800893c:	401c0000 	.word	0x401c0000
 8008940:	fcc00000 	.word	0xfcc00000
 8008944:	40140000 	.word	0x40140000
 8008948:	7cc00000 	.word	0x7cc00000
 800894c:	3fe00000 	.word	0x3fe00000
 8008950:	9b07      	ldr	r3, [sp, #28]
 8008952:	9e06      	ldr	r6, [sp, #24]
 8008954:	3b01      	subs	r3, #1
 8008956:	199b      	adds	r3, r3, r6
 8008958:	930c      	str	r3, [sp, #48]	; 0x30
 800895a:	9c08      	ldr	r4, [sp, #32]
 800895c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800895e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008962:	0020      	movs	r0, r4
 8008964:	0029      	movs	r1, r5
 8008966:	f7f8 f9f5 	bl	8000d54 <__aeabi_ddiv>
 800896a:	f7f9 fc11 	bl	8002190 <__aeabi_d2iz>
 800896e:	9007      	str	r0, [sp, #28]
 8008970:	f7f9 fc44 	bl	80021fc <__aeabi_i2d>
 8008974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008978:	f7f8 fdee 	bl	8001558 <__aeabi_dmul>
 800897c:	0002      	movs	r2, r0
 800897e:	000b      	movs	r3, r1
 8008980:	0020      	movs	r0, r4
 8008982:	0029      	movs	r1, r5
 8008984:	f7f9 f854 	bl	8001a30 <__aeabi_dsub>
 8008988:	0033      	movs	r3, r6
 800898a:	9a07      	ldr	r2, [sp, #28]
 800898c:	3601      	adds	r6, #1
 800898e:	3230      	adds	r2, #48	; 0x30
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008994:	9608      	str	r6, [sp, #32]
 8008996:	429a      	cmp	r2, r3
 8008998:	d139      	bne.n	8008a0e <_dtoa_r+0x772>
 800899a:	0002      	movs	r2, r0
 800899c:	000b      	movs	r3, r1
 800899e:	f7f7 fe9d 	bl	80006dc <__aeabi_dadd>
 80089a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a6:	0004      	movs	r4, r0
 80089a8:	000d      	movs	r5, r1
 80089aa:	f7f7 fd69 	bl	8000480 <__aeabi_dcmpgt>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d11b      	bne.n	80089ea <_dtoa_r+0x74e>
 80089b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089b6:	0020      	movs	r0, r4
 80089b8:	0029      	movs	r1, r5
 80089ba:	f7f7 fd47 	bl	800044c <__aeabi_dcmpeq>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d002      	beq.n	80089c8 <_dtoa_r+0x72c>
 80089c2:	9b07      	ldr	r3, [sp, #28]
 80089c4:	07db      	lsls	r3, r3, #31
 80089c6:	d410      	bmi.n	80089ea <_dtoa_r+0x74e>
 80089c8:	0038      	movs	r0, r7
 80089ca:	9905      	ldr	r1, [sp, #20]
 80089cc:	f000 fae6 	bl	8008f9c <_Bfree>
 80089d0:	2300      	movs	r3, #0
 80089d2:	9a08      	ldr	r2, [sp, #32]
 80089d4:	9802      	ldr	r0, [sp, #8]
 80089d6:	7013      	strb	r3, [r2, #0]
 80089d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80089da:	3001      	adds	r0, #1
 80089dc:	6018      	str	r0, [r3, #0]
 80089de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d100      	bne.n	80089e6 <_dtoa_r+0x74a>
 80089e4:	e4a6      	b.n	8008334 <_dtoa_r+0x98>
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	e4a4      	b.n	8008334 <_dtoa_r+0x98>
 80089ea:	9e02      	ldr	r6, [sp, #8]
 80089ec:	9b08      	ldr	r3, [sp, #32]
 80089ee:	9308      	str	r3, [sp, #32]
 80089f0:	3b01      	subs	r3, #1
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	2a39      	cmp	r2, #57	; 0x39
 80089f6:	d106      	bne.n	8008a06 <_dtoa_r+0x76a>
 80089f8:	9a06      	ldr	r2, [sp, #24]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d1f7      	bne.n	80089ee <_dtoa_r+0x752>
 80089fe:	2230      	movs	r2, #48	; 0x30
 8008a00:	9906      	ldr	r1, [sp, #24]
 8008a02:	3601      	adds	r6, #1
 8008a04:	700a      	strb	r2, [r1, #0]
 8008a06:	781a      	ldrb	r2, [r3, #0]
 8008a08:	3201      	adds	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	e784      	b.n	8008918 <_dtoa_r+0x67c>
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4baa      	ldr	r3, [pc, #680]	; (8008cbc <_dtoa_r+0xa20>)
 8008a12:	f7f8 fda1 	bl	8001558 <__aeabi_dmul>
 8008a16:	2200      	movs	r2, #0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	0004      	movs	r4, r0
 8008a1c:	000d      	movs	r5, r1
 8008a1e:	f7f7 fd15 	bl	800044c <__aeabi_dcmpeq>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d09b      	beq.n	800895e <_dtoa_r+0x6c2>
 8008a26:	e7cf      	b.n	80089c8 <_dtoa_r+0x72c>
 8008a28:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a2a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008a2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	d012      	beq.n	8008a58 <_dtoa_r+0x7bc>
 8008a32:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a34:	2a01      	cmp	r2, #1
 8008a36:	dc66      	bgt.n	8008b06 <_dtoa_r+0x86a>
 8008a38:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	d05d      	beq.n	8008afa <_dtoa_r+0x85e>
 8008a3e:	4aa0      	ldr	r2, [pc, #640]	; (8008cc0 <_dtoa_r+0xa24>)
 8008a40:	189b      	adds	r3, r3, r2
 8008a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a44:	2101      	movs	r1, #1
 8008a46:	18d2      	adds	r2, r2, r3
 8008a48:	920a      	str	r2, [sp, #40]	; 0x28
 8008a4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a4c:	0038      	movs	r0, r7
 8008a4e:	18d3      	adds	r3, r2, r3
 8008a50:	930d      	str	r3, [sp, #52]	; 0x34
 8008a52:	f000 fb53 	bl	80090fc <__i2b>
 8008a56:	0005      	movs	r5, r0
 8008a58:	2c00      	cmp	r4, #0
 8008a5a:	dd0e      	ble.n	8008a7a <_dtoa_r+0x7de>
 8008a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	dd0b      	ble.n	8008a7a <_dtoa_r+0x7de>
 8008a62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a64:	0023      	movs	r3, r4
 8008a66:	4294      	cmp	r4, r2
 8008a68:	dd00      	ble.n	8008a6c <_dtoa_r+0x7d0>
 8008a6a:	0013      	movs	r3, r2
 8008a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a6e:	1ae4      	subs	r4, r4, r3
 8008a70:	1ad2      	subs	r2, r2, r3
 8008a72:	920a      	str	r2, [sp, #40]	; 0x28
 8008a74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	930d      	str	r3, [sp, #52]	; 0x34
 8008a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01f      	beq.n	8008ac0 <_dtoa_r+0x824>
 8008a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d054      	beq.n	8008b30 <_dtoa_r+0x894>
 8008a86:	2e00      	cmp	r6, #0
 8008a88:	dd11      	ble.n	8008aae <_dtoa_r+0x812>
 8008a8a:	0029      	movs	r1, r5
 8008a8c:	0032      	movs	r2, r6
 8008a8e:	0038      	movs	r0, r7
 8008a90:	f000 fbfa 	bl	8009288 <__pow5mult>
 8008a94:	9a05      	ldr	r2, [sp, #20]
 8008a96:	0001      	movs	r1, r0
 8008a98:	0005      	movs	r5, r0
 8008a9a:	0038      	movs	r0, r7
 8008a9c:	f000 fb44 	bl	8009128 <__multiply>
 8008aa0:	9905      	ldr	r1, [sp, #20]
 8008aa2:	9014      	str	r0, [sp, #80]	; 0x50
 8008aa4:	0038      	movs	r0, r7
 8008aa6:	f000 fa79 	bl	8008f9c <_Bfree>
 8008aaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008aac:	9305      	str	r3, [sp, #20]
 8008aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ab0:	1b9a      	subs	r2, r3, r6
 8008ab2:	42b3      	cmp	r3, r6
 8008ab4:	d004      	beq.n	8008ac0 <_dtoa_r+0x824>
 8008ab6:	0038      	movs	r0, r7
 8008ab8:	9905      	ldr	r1, [sp, #20]
 8008aba:	f000 fbe5 	bl	8009288 <__pow5mult>
 8008abe:	9005      	str	r0, [sp, #20]
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	0038      	movs	r0, r7
 8008ac4:	f000 fb1a 	bl	80090fc <__i2b>
 8008ac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aca:	0006      	movs	r6, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	dd31      	ble.n	8008b34 <_dtoa_r+0x898>
 8008ad0:	001a      	movs	r2, r3
 8008ad2:	0001      	movs	r1, r0
 8008ad4:	0038      	movs	r0, r7
 8008ad6:	f000 fbd7 	bl	8009288 <__pow5mult>
 8008ada:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008adc:	0006      	movs	r6, r0
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	dd2d      	ble.n	8008b3e <_dtoa_r+0x8a2>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ae6:	6933      	ldr	r3, [r6, #16]
 8008ae8:	3303      	adds	r3, #3
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	18f3      	adds	r3, r6, r3
 8008aee:	6858      	ldr	r0, [r3, #4]
 8008af0:	f000 fabc 	bl	800906c <__hi0bits>
 8008af4:	2320      	movs	r3, #32
 8008af6:	1a18      	subs	r0, r3, r0
 8008af8:	e039      	b.n	8008b6e <_dtoa_r+0x8d2>
 8008afa:	2336      	movs	r3, #54	; 0x36
 8008afc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008afe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008b00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	e79d      	b.n	8008a42 <_dtoa_r+0x7a6>
 8008b06:	9b07      	ldr	r3, [sp, #28]
 8008b08:	1e5e      	subs	r6, r3, #1
 8008b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b0c:	42b3      	cmp	r3, r6
 8008b0e:	db07      	blt.n	8008b20 <_dtoa_r+0x884>
 8008b10:	1b9e      	subs	r6, r3, r6
 8008b12:	9b07      	ldr	r3, [sp, #28]
 8008b14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	da93      	bge.n	8008a42 <_dtoa_r+0x7a6>
 8008b1a:	1ae4      	subs	r4, r4, r3
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e790      	b.n	8008a42 <_dtoa_r+0x7a6>
 8008b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b24:	1af3      	subs	r3, r6, r3
 8008b26:	18d3      	adds	r3, r2, r3
 8008b28:	960e      	str	r6, [sp, #56]	; 0x38
 8008b2a:	9315      	str	r3, [sp, #84]	; 0x54
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	e7f0      	b.n	8008b12 <_dtoa_r+0x876>
 8008b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b32:	e7c0      	b.n	8008ab6 <_dtoa_r+0x81a>
 8008b34:	2300      	movs	r3, #0
 8008b36:	930e      	str	r3, [sp, #56]	; 0x38
 8008b38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	dc13      	bgt.n	8008b66 <_dtoa_r+0x8ca>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	930e      	str	r3, [sp, #56]	; 0x38
 8008b42:	9b08      	ldr	r3, [sp, #32]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10e      	bne.n	8008b66 <_dtoa_r+0x8ca>
 8008b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b4a:	031b      	lsls	r3, r3, #12
 8008b4c:	d10b      	bne.n	8008b66 <_dtoa_r+0x8ca>
 8008b4e:	4b5d      	ldr	r3, [pc, #372]	; (8008cc4 <_dtoa_r+0xa28>)
 8008b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b52:	4213      	tst	r3, r2
 8008b54:	d007      	beq.n	8008b66 <_dtoa_r+0x8ca>
 8008b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b58:	3301      	adds	r3, #1
 8008b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b5e:	3301      	adds	r3, #1
 8008b60:	930d      	str	r3, [sp, #52]	; 0x34
 8008b62:	2301      	movs	r3, #1
 8008b64:	930e      	str	r3, [sp, #56]	; 0x38
 8008b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b68:	2001      	movs	r0, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1bb      	bne.n	8008ae6 <_dtoa_r+0x84a>
 8008b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b70:	221f      	movs	r2, #31
 8008b72:	1818      	adds	r0, r3, r0
 8008b74:	0003      	movs	r3, r0
 8008b76:	4013      	ands	r3, r2
 8008b78:	4210      	tst	r0, r2
 8008b7a:	d046      	beq.n	8008c0a <_dtoa_r+0x96e>
 8008b7c:	3201      	adds	r2, #1
 8008b7e:	1ad2      	subs	r2, r2, r3
 8008b80:	2a04      	cmp	r2, #4
 8008b82:	dd3f      	ble.n	8008c04 <_dtoa_r+0x968>
 8008b84:	221c      	movs	r2, #28
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b8a:	18e4      	adds	r4, r4, r3
 8008b8c:	18d2      	adds	r2, r2, r3
 8008b8e:	920a      	str	r2, [sp, #40]	; 0x28
 8008b90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b92:	18d3      	adds	r3, r2, r3
 8008b94:	930d      	str	r3, [sp, #52]	; 0x34
 8008b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	dd05      	ble.n	8008ba8 <_dtoa_r+0x90c>
 8008b9c:	001a      	movs	r2, r3
 8008b9e:	0038      	movs	r0, r7
 8008ba0:	9905      	ldr	r1, [sp, #20]
 8008ba2:	f000 fbcd 	bl	8009340 <__lshift>
 8008ba6:	9005      	str	r0, [sp, #20]
 8008ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd05      	ble.n	8008bba <_dtoa_r+0x91e>
 8008bae:	0031      	movs	r1, r6
 8008bb0:	001a      	movs	r2, r3
 8008bb2:	0038      	movs	r0, r7
 8008bb4:	f000 fbc4 	bl	8009340 <__lshift>
 8008bb8:	0006      	movs	r6, r0
 8008bba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d026      	beq.n	8008c0e <_dtoa_r+0x972>
 8008bc0:	0031      	movs	r1, r6
 8008bc2:	9805      	ldr	r0, [sp, #20]
 8008bc4:	f000 fc2a 	bl	800941c <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	da20      	bge.n	8008c0e <_dtoa_r+0x972>
 8008bcc:	9b02      	ldr	r3, [sp, #8]
 8008bce:	220a      	movs	r2, #10
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	0038      	movs	r0, r7
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9905      	ldr	r1, [sp, #20]
 8008bda:	f000 fa03 	bl	8008fe4 <__multadd>
 8008bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008be0:	9005      	str	r0, [sp, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d100      	bne.n	8008be8 <_dtoa_r+0x94c>
 8008be6:	e166      	b.n	8008eb6 <_dtoa_r+0xc1a>
 8008be8:	2300      	movs	r3, #0
 8008bea:	0029      	movs	r1, r5
 8008bec:	220a      	movs	r2, #10
 8008bee:	0038      	movs	r0, r7
 8008bf0:	f000 f9f8 	bl	8008fe4 <__multadd>
 8008bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bf6:	0005      	movs	r5, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	dc47      	bgt.n	8008c8c <_dtoa_r+0x9f0>
 8008bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	dc0d      	bgt.n	8008c1e <_dtoa_r+0x982>
 8008c02:	e043      	b.n	8008c8c <_dtoa_r+0x9f0>
 8008c04:	2a04      	cmp	r2, #4
 8008c06:	d0c6      	beq.n	8008b96 <_dtoa_r+0x8fa>
 8008c08:	0013      	movs	r3, r2
 8008c0a:	331c      	adds	r3, #28
 8008c0c:	e7bc      	b.n	8008b88 <_dtoa_r+0x8ec>
 8008c0e:	9b07      	ldr	r3, [sp, #28]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dc35      	bgt.n	8008c80 <_dtoa_r+0x9e4>
 8008c14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	dd32      	ble.n	8008c80 <_dtoa_r+0x9e4>
 8008c1a:	9b07      	ldr	r3, [sp, #28]
 8008c1c:	930c      	str	r3, [sp, #48]	; 0x30
 8008c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10c      	bne.n	8008c3e <_dtoa_r+0x9a2>
 8008c24:	0031      	movs	r1, r6
 8008c26:	2205      	movs	r2, #5
 8008c28:	0038      	movs	r0, r7
 8008c2a:	f000 f9db 	bl	8008fe4 <__multadd>
 8008c2e:	0006      	movs	r6, r0
 8008c30:	0001      	movs	r1, r0
 8008c32:	9805      	ldr	r0, [sp, #20]
 8008c34:	f000 fbf2 	bl	800941c <__mcmp>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	dd00      	ble.n	8008c3e <_dtoa_r+0x9a2>
 8008c3c:	e5a5      	b.n	800878a <_dtoa_r+0x4ee>
 8008c3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c40:	43db      	mvns	r3, r3
 8008c42:	9302      	str	r3, [sp, #8]
 8008c44:	9b06      	ldr	r3, [sp, #24]
 8008c46:	9308      	str	r3, [sp, #32]
 8008c48:	2400      	movs	r4, #0
 8008c4a:	0031      	movs	r1, r6
 8008c4c:	0038      	movs	r0, r7
 8008c4e:	f000 f9a5 	bl	8008f9c <_Bfree>
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	d100      	bne.n	8008c58 <_dtoa_r+0x9bc>
 8008c56:	e6b7      	b.n	80089c8 <_dtoa_r+0x72c>
 8008c58:	2c00      	cmp	r4, #0
 8008c5a:	d005      	beq.n	8008c68 <_dtoa_r+0x9cc>
 8008c5c:	42ac      	cmp	r4, r5
 8008c5e:	d003      	beq.n	8008c68 <_dtoa_r+0x9cc>
 8008c60:	0021      	movs	r1, r4
 8008c62:	0038      	movs	r0, r7
 8008c64:	f000 f99a 	bl	8008f9c <_Bfree>
 8008c68:	0029      	movs	r1, r5
 8008c6a:	0038      	movs	r0, r7
 8008c6c:	f000 f996 	bl	8008f9c <_Bfree>
 8008c70:	e6aa      	b.n	80089c8 <_dtoa_r+0x72c>
 8008c72:	2600      	movs	r6, #0
 8008c74:	0035      	movs	r5, r6
 8008c76:	e7e2      	b.n	8008c3e <_dtoa_r+0x9a2>
 8008c78:	9602      	str	r6, [sp, #8]
 8008c7a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008c7c:	0035      	movs	r5, r6
 8008c7e:	e584      	b.n	800878a <_dtoa_r+0x4ee>
 8008c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d100      	bne.n	8008c88 <_dtoa_r+0x9ec>
 8008c86:	e0ce      	b.n	8008e26 <_dtoa_r+0xb8a>
 8008c88:	9b07      	ldr	r3, [sp, #28]
 8008c8a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c8c:	2c00      	cmp	r4, #0
 8008c8e:	dd05      	ble.n	8008c9c <_dtoa_r+0xa00>
 8008c90:	0029      	movs	r1, r5
 8008c92:	0022      	movs	r2, r4
 8008c94:	0038      	movs	r0, r7
 8008c96:	f000 fb53 	bl	8009340 <__lshift>
 8008c9a:	0005      	movs	r5, r0
 8008c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c9e:	0028      	movs	r0, r5
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d022      	beq.n	8008cea <_dtoa_r+0xa4e>
 8008ca4:	0038      	movs	r0, r7
 8008ca6:	6869      	ldr	r1, [r5, #4]
 8008ca8:	f000 f934 	bl	8008f14 <_Balloc>
 8008cac:	1e04      	subs	r4, r0, #0
 8008cae:	d10f      	bne.n	8008cd0 <_dtoa_r+0xa34>
 8008cb0:	0002      	movs	r2, r0
 8008cb2:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <_dtoa_r+0xa2c>)
 8008cb4:	4905      	ldr	r1, [pc, #20]	; (8008ccc <_dtoa_r+0xa30>)
 8008cb6:	f7ff fb06 	bl	80082c6 <_dtoa_r+0x2a>
 8008cba:	46c0      	nop			; (mov r8, r8)
 8008cbc:	40240000 	.word	0x40240000
 8008cc0:	00000433 	.word	0x00000433
 8008cc4:	7ff00000 	.word	0x7ff00000
 8008cc8:	0800a9b3 	.word	0x0800a9b3
 8008ccc:	000002ea 	.word	0x000002ea
 8008cd0:	0029      	movs	r1, r5
 8008cd2:	692b      	ldr	r3, [r5, #16]
 8008cd4:	310c      	adds	r1, #12
 8008cd6:	1c9a      	adds	r2, r3, #2
 8008cd8:	0092      	lsls	r2, r2, #2
 8008cda:	300c      	adds	r0, #12
 8008cdc:	f000 f911 	bl	8008f02 <memcpy>
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	0021      	movs	r1, r4
 8008ce4:	0038      	movs	r0, r7
 8008ce6:	f000 fb2b 	bl	8009340 <__lshift>
 8008cea:	9b06      	ldr	r3, [sp, #24]
 8008cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cee:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	189b      	adds	r3, r3, r2
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	002c      	movs	r4, r5
 8008cf8:	0005      	movs	r5, r0
 8008cfa:	9314      	str	r3, [sp, #80]	; 0x50
 8008cfc:	9b08      	ldr	r3, [sp, #32]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d02:	0031      	movs	r1, r6
 8008d04:	9805      	ldr	r0, [sp, #20]
 8008d06:	f7ff fa3d 	bl	8008184 <quorem>
 8008d0a:	0003      	movs	r3, r0
 8008d0c:	0021      	movs	r1, r4
 8008d0e:	3330      	adds	r3, #48	; 0x30
 8008d10:	900d      	str	r0, [sp, #52]	; 0x34
 8008d12:	9805      	ldr	r0, [sp, #20]
 8008d14:	9307      	str	r3, [sp, #28]
 8008d16:	f000 fb81 	bl	800941c <__mcmp>
 8008d1a:	002a      	movs	r2, r5
 8008d1c:	900e      	str	r0, [sp, #56]	; 0x38
 8008d1e:	0031      	movs	r1, r6
 8008d20:	0038      	movs	r0, r7
 8008d22:	f000 fb97 	bl	8009454 <__mdiff>
 8008d26:	68c3      	ldr	r3, [r0, #12]
 8008d28:	9008      	str	r0, [sp, #32]
 8008d2a:	9310      	str	r3, [sp, #64]	; 0x40
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	930c      	str	r3, [sp, #48]	; 0x30
 8008d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <_dtoa_r+0xaa4>
 8008d36:	0001      	movs	r1, r0
 8008d38:	9805      	ldr	r0, [sp, #20]
 8008d3a:	f000 fb6f 	bl	800941c <__mcmp>
 8008d3e:	900c      	str	r0, [sp, #48]	; 0x30
 8008d40:	0038      	movs	r0, r7
 8008d42:	9908      	ldr	r1, [sp, #32]
 8008d44:	f000 f92a 	bl	8008f9c <_Bfree>
 8008d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	9308      	str	r3, [sp, #32]
 8008d50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d52:	4313      	orrs	r3, r2
 8008d54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d56:	4313      	orrs	r3, r2
 8008d58:	d10c      	bne.n	8008d74 <_dtoa_r+0xad8>
 8008d5a:	9b07      	ldr	r3, [sp, #28]
 8008d5c:	2b39      	cmp	r3, #57	; 0x39
 8008d5e:	d026      	beq.n	8008dae <_dtoa_r+0xb12>
 8008d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	dd02      	ble.n	8008d6c <_dtoa_r+0xad0>
 8008d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d68:	3331      	adds	r3, #49	; 0x31
 8008d6a:	9307      	str	r3, [sp, #28]
 8008d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d6e:	9a07      	ldr	r2, [sp, #28]
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	e76a      	b.n	8008c4a <_dtoa_r+0x9ae>
 8008d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	db04      	blt.n	8008d84 <_dtoa_r+0xae8>
 8008d7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d80:	4313      	orrs	r3, r2
 8008d82:	d11f      	bne.n	8008dc4 <_dtoa_r+0xb28>
 8008d84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	ddf0      	ble.n	8008d6c <_dtoa_r+0xad0>
 8008d8a:	9905      	ldr	r1, [sp, #20]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	0038      	movs	r0, r7
 8008d90:	f000 fad6 	bl	8009340 <__lshift>
 8008d94:	0031      	movs	r1, r6
 8008d96:	9005      	str	r0, [sp, #20]
 8008d98:	f000 fb40 	bl	800941c <__mcmp>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	dc03      	bgt.n	8008da8 <_dtoa_r+0xb0c>
 8008da0:	d1e4      	bne.n	8008d6c <_dtoa_r+0xad0>
 8008da2:	9b07      	ldr	r3, [sp, #28]
 8008da4:	07db      	lsls	r3, r3, #31
 8008da6:	d5e1      	bpl.n	8008d6c <_dtoa_r+0xad0>
 8008da8:	9b07      	ldr	r3, [sp, #28]
 8008daa:	2b39      	cmp	r3, #57	; 0x39
 8008dac:	d1db      	bne.n	8008d66 <_dtoa_r+0xaca>
 8008dae:	2339      	movs	r3, #57	; 0x39
 8008db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008db2:	7013      	strb	r3, [r2, #0]
 8008db4:	9b08      	ldr	r3, [sp, #32]
 8008db6:	9308      	str	r3, [sp, #32]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	2a39      	cmp	r2, #57	; 0x39
 8008dbe:	d068      	beq.n	8008e92 <_dtoa_r+0xbf6>
 8008dc0:	3201      	adds	r2, #1
 8008dc2:	e7d5      	b.n	8008d70 <_dtoa_r+0xad4>
 8008dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	dd07      	ble.n	8008dda <_dtoa_r+0xb3e>
 8008dca:	9b07      	ldr	r3, [sp, #28]
 8008dcc:	2b39      	cmp	r3, #57	; 0x39
 8008dce:	d0ee      	beq.n	8008dae <_dtoa_r+0xb12>
 8008dd0:	9b07      	ldr	r3, [sp, #28]
 8008dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	7013      	strb	r3, [r2, #0]
 8008dd8:	e737      	b.n	8008c4a <_dtoa_r+0x9ae>
 8008dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ddc:	9a07      	ldr	r2, [sp, #28]
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d03e      	beq.n	8008e66 <_dtoa_r+0xbca>
 8008de8:	2300      	movs	r3, #0
 8008dea:	220a      	movs	r2, #10
 8008dec:	9905      	ldr	r1, [sp, #20]
 8008dee:	0038      	movs	r0, r7
 8008df0:	f000 f8f8 	bl	8008fe4 <__multadd>
 8008df4:	2300      	movs	r3, #0
 8008df6:	9005      	str	r0, [sp, #20]
 8008df8:	220a      	movs	r2, #10
 8008dfa:	0021      	movs	r1, r4
 8008dfc:	0038      	movs	r0, r7
 8008dfe:	42ac      	cmp	r4, r5
 8008e00:	d106      	bne.n	8008e10 <_dtoa_r+0xb74>
 8008e02:	f000 f8ef 	bl	8008fe4 <__multadd>
 8008e06:	0004      	movs	r4, r0
 8008e08:	0005      	movs	r5, r0
 8008e0a:	9b08      	ldr	r3, [sp, #32]
 8008e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e0e:	e778      	b.n	8008d02 <_dtoa_r+0xa66>
 8008e10:	f000 f8e8 	bl	8008fe4 <__multadd>
 8008e14:	0029      	movs	r1, r5
 8008e16:	0004      	movs	r4, r0
 8008e18:	2300      	movs	r3, #0
 8008e1a:	220a      	movs	r2, #10
 8008e1c:	0038      	movs	r0, r7
 8008e1e:	f000 f8e1 	bl	8008fe4 <__multadd>
 8008e22:	0005      	movs	r5, r0
 8008e24:	e7f1      	b.n	8008e0a <_dtoa_r+0xb6e>
 8008e26:	9b07      	ldr	r3, [sp, #28]
 8008e28:	930c      	str	r3, [sp, #48]	; 0x30
 8008e2a:	2400      	movs	r4, #0
 8008e2c:	0031      	movs	r1, r6
 8008e2e:	9805      	ldr	r0, [sp, #20]
 8008e30:	f7ff f9a8 	bl	8008184 <quorem>
 8008e34:	9b06      	ldr	r3, [sp, #24]
 8008e36:	3030      	adds	r0, #48	; 0x30
 8008e38:	5518      	strb	r0, [r3, r4]
 8008e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e3c:	3401      	adds	r4, #1
 8008e3e:	9007      	str	r0, [sp, #28]
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	dd07      	ble.n	8008e54 <_dtoa_r+0xbb8>
 8008e44:	2300      	movs	r3, #0
 8008e46:	220a      	movs	r2, #10
 8008e48:	0038      	movs	r0, r7
 8008e4a:	9905      	ldr	r1, [sp, #20]
 8008e4c:	f000 f8ca 	bl	8008fe4 <__multadd>
 8008e50:	9005      	str	r0, [sp, #20]
 8008e52:	e7eb      	b.n	8008e2c <_dtoa_r+0xb90>
 8008e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e56:	2001      	movs	r0, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dd00      	ble.n	8008e5e <_dtoa_r+0xbc2>
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	2400      	movs	r4, #0
 8008e60:	9b06      	ldr	r3, [sp, #24]
 8008e62:	181b      	adds	r3, r3, r0
 8008e64:	9308      	str	r3, [sp, #32]
 8008e66:	9905      	ldr	r1, [sp, #20]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	0038      	movs	r0, r7
 8008e6c:	f000 fa68 	bl	8009340 <__lshift>
 8008e70:	0031      	movs	r1, r6
 8008e72:	9005      	str	r0, [sp, #20]
 8008e74:	f000 fad2 	bl	800941c <__mcmp>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	dc9b      	bgt.n	8008db4 <_dtoa_r+0xb18>
 8008e7c:	d102      	bne.n	8008e84 <_dtoa_r+0xbe8>
 8008e7e:	9b07      	ldr	r3, [sp, #28]
 8008e80:	07db      	lsls	r3, r3, #31
 8008e82:	d497      	bmi.n	8008db4 <_dtoa_r+0xb18>
 8008e84:	9b08      	ldr	r3, [sp, #32]
 8008e86:	9308      	str	r3, [sp, #32]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	781a      	ldrb	r2, [r3, #0]
 8008e8c:	2a30      	cmp	r2, #48	; 0x30
 8008e8e:	d0fa      	beq.n	8008e86 <_dtoa_r+0xbea>
 8008e90:	e6db      	b.n	8008c4a <_dtoa_r+0x9ae>
 8008e92:	9a06      	ldr	r2, [sp, #24]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d18e      	bne.n	8008db6 <_dtoa_r+0xb1a>
 8008e98:	9b02      	ldr	r3, [sp, #8]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	9302      	str	r3, [sp, #8]
 8008e9e:	2331      	movs	r3, #49	; 0x31
 8008ea0:	e799      	b.n	8008dd6 <_dtoa_r+0xb3a>
 8008ea2:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <_dtoa_r+0xc2c>)
 8008ea4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ea6:	9306      	str	r3, [sp, #24]
 8008ea8:	4b08      	ldr	r3, [pc, #32]	; (8008ecc <_dtoa_r+0xc30>)
 8008eaa:	2a00      	cmp	r2, #0
 8008eac:	d001      	beq.n	8008eb2 <_dtoa_r+0xc16>
 8008eae:	f7ff fa3f 	bl	8008330 <_dtoa_r+0x94>
 8008eb2:	f7ff fa3f 	bl	8008334 <_dtoa_r+0x98>
 8008eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	dcb6      	bgt.n	8008e2a <_dtoa_r+0xb8e>
 8008ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	dd00      	ble.n	8008ec4 <_dtoa_r+0xc28>
 8008ec2:	e6ac      	b.n	8008c1e <_dtoa_r+0x982>
 8008ec4:	e7b1      	b.n	8008e2a <_dtoa_r+0xb8e>
 8008ec6:	46c0      	nop			; (mov r8, r8)
 8008ec8:	0800a934 	.word	0x0800a934
 8008ecc:	0800a93c 	.word	0x0800a93c

08008ed0 <_localeconv_r>:
 8008ed0:	4800      	ldr	r0, [pc, #0]	; (8008ed4 <_localeconv_r+0x4>)
 8008ed2:	4770      	bx	lr
 8008ed4:	20000160 	.word	0x20000160

08008ed8 <malloc>:
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	4b03      	ldr	r3, [pc, #12]	; (8008ee8 <malloc+0x10>)
 8008edc:	0001      	movs	r1, r0
 8008ede:	6818      	ldr	r0, [r3, #0]
 8008ee0:	f000 fc4c 	bl	800977c <_malloc_r>
 8008ee4:	bd10      	pop	{r4, pc}
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	2000000c 	.word	0x2000000c

08008eec <memchr>:
 8008eec:	b2c9      	uxtb	r1, r1
 8008eee:	1882      	adds	r2, r0, r2
 8008ef0:	4290      	cmp	r0, r2
 8008ef2:	d101      	bne.n	8008ef8 <memchr+0xc>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	4770      	bx	lr
 8008ef8:	7803      	ldrb	r3, [r0, #0]
 8008efa:	428b      	cmp	r3, r1
 8008efc:	d0fb      	beq.n	8008ef6 <memchr+0xa>
 8008efe:	3001      	adds	r0, #1
 8008f00:	e7f6      	b.n	8008ef0 <memchr+0x4>

08008f02 <memcpy>:
 8008f02:	2300      	movs	r3, #0
 8008f04:	b510      	push	{r4, lr}
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d100      	bne.n	8008f0c <memcpy+0xa>
 8008f0a:	bd10      	pop	{r4, pc}
 8008f0c:	5ccc      	ldrb	r4, [r1, r3]
 8008f0e:	54c4      	strb	r4, [r0, r3]
 8008f10:	3301      	adds	r3, #1
 8008f12:	e7f8      	b.n	8008f06 <memcpy+0x4>

08008f14 <_Balloc>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f18:	0006      	movs	r6, r0
 8008f1a:	000c      	movs	r4, r1
 8008f1c:	2d00      	cmp	r5, #0
 8008f1e:	d10e      	bne.n	8008f3e <_Balloc+0x2a>
 8008f20:	2010      	movs	r0, #16
 8008f22:	f7ff ffd9 	bl	8008ed8 <malloc>
 8008f26:	1e02      	subs	r2, r0, #0
 8008f28:	6270      	str	r0, [r6, #36]	; 0x24
 8008f2a:	d104      	bne.n	8008f36 <_Balloc+0x22>
 8008f2c:	2166      	movs	r1, #102	; 0x66
 8008f2e:	4b19      	ldr	r3, [pc, #100]	; (8008f94 <_Balloc+0x80>)
 8008f30:	4819      	ldr	r0, [pc, #100]	; (8008f98 <_Balloc+0x84>)
 8008f32:	f000 fe0d 	bl	8009b50 <__assert_func>
 8008f36:	6045      	str	r5, [r0, #4]
 8008f38:	6085      	str	r5, [r0, #8]
 8008f3a:	6005      	str	r5, [r0, #0]
 8008f3c:	60c5      	str	r5, [r0, #12]
 8008f3e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008f40:	68eb      	ldr	r3, [r5, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d013      	beq.n	8008f6e <_Balloc+0x5a>
 8008f46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f48:	00a2      	lsls	r2, r4, #2
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	189b      	adds	r3, r3, r2
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d118      	bne.n	8008f86 <_Balloc+0x72>
 8008f54:	2101      	movs	r1, #1
 8008f56:	000d      	movs	r5, r1
 8008f58:	40a5      	lsls	r5, r4
 8008f5a:	1d6a      	adds	r2, r5, #5
 8008f5c:	0030      	movs	r0, r6
 8008f5e:	0092      	lsls	r2, r2, #2
 8008f60:	f000 fb74 	bl	800964c <_calloc_r>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d00c      	beq.n	8008f82 <_Balloc+0x6e>
 8008f68:	6044      	str	r4, [r0, #4]
 8008f6a:	6085      	str	r5, [r0, #8]
 8008f6c:	e00d      	b.n	8008f8a <_Balloc+0x76>
 8008f6e:	2221      	movs	r2, #33	; 0x21
 8008f70:	2104      	movs	r1, #4
 8008f72:	0030      	movs	r0, r6
 8008f74:	f000 fb6a 	bl	800964c <_calloc_r>
 8008f78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f7a:	60e8      	str	r0, [r5, #12]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1e1      	bne.n	8008f46 <_Balloc+0x32>
 8008f82:	2000      	movs	r0, #0
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	6802      	ldr	r2, [r0, #0]
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6103      	str	r3, [r0, #16]
 8008f8e:	60c3      	str	r3, [r0, #12]
 8008f90:	e7f8      	b.n	8008f84 <_Balloc+0x70>
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	0800a941 	.word	0x0800a941
 8008f98:	0800a9c4 	.word	0x0800a9c4

08008f9c <_Bfree>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fa0:	0005      	movs	r5, r0
 8008fa2:	000c      	movs	r4, r1
 8008fa4:	2e00      	cmp	r6, #0
 8008fa6:	d10e      	bne.n	8008fc6 <_Bfree+0x2a>
 8008fa8:	2010      	movs	r0, #16
 8008faa:	f7ff ff95 	bl	8008ed8 <malloc>
 8008fae:	1e02      	subs	r2, r0, #0
 8008fb0:	6268      	str	r0, [r5, #36]	; 0x24
 8008fb2:	d104      	bne.n	8008fbe <_Bfree+0x22>
 8008fb4:	218a      	movs	r1, #138	; 0x8a
 8008fb6:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <_Bfree+0x40>)
 8008fb8:	4809      	ldr	r0, [pc, #36]	; (8008fe0 <_Bfree+0x44>)
 8008fba:	f000 fdc9 	bl	8009b50 <__assert_func>
 8008fbe:	6046      	str	r6, [r0, #4]
 8008fc0:	6086      	str	r6, [r0, #8]
 8008fc2:	6006      	str	r6, [r0, #0]
 8008fc4:	60c6      	str	r6, [r0, #12]
 8008fc6:	2c00      	cmp	r4, #0
 8008fc8:	d007      	beq.n	8008fda <_Bfree+0x3e>
 8008fca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fcc:	6862      	ldr	r2, [r4, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	0092      	lsls	r2, r2, #2
 8008fd2:	189b      	adds	r3, r3, r2
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	6022      	str	r2, [r4, #0]
 8008fd8:	601c      	str	r4, [r3, #0]
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	0800a941 	.word	0x0800a941
 8008fe0:	0800a9c4 	.word	0x0800a9c4

08008fe4 <__multadd>:
 8008fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fe6:	000e      	movs	r6, r1
 8008fe8:	9001      	str	r0, [sp, #4]
 8008fea:	000c      	movs	r4, r1
 8008fec:	001d      	movs	r5, r3
 8008fee:	2000      	movs	r0, #0
 8008ff0:	690f      	ldr	r7, [r1, #16]
 8008ff2:	3614      	adds	r6, #20
 8008ff4:	6833      	ldr	r3, [r6, #0]
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	b299      	uxth	r1, r3
 8008ffa:	4351      	muls	r1, r2
 8008ffc:	0c1b      	lsrs	r3, r3, #16
 8008ffe:	4353      	muls	r3, r2
 8009000:	1949      	adds	r1, r1, r5
 8009002:	0c0d      	lsrs	r5, r1, #16
 8009004:	195b      	adds	r3, r3, r5
 8009006:	0c1d      	lsrs	r5, r3, #16
 8009008:	b289      	uxth	r1, r1
 800900a:	041b      	lsls	r3, r3, #16
 800900c:	185b      	adds	r3, r3, r1
 800900e:	c608      	stmia	r6!, {r3}
 8009010:	4287      	cmp	r7, r0
 8009012:	dcef      	bgt.n	8008ff4 <__multadd+0x10>
 8009014:	2d00      	cmp	r5, #0
 8009016:	d022      	beq.n	800905e <__multadd+0x7a>
 8009018:	68a3      	ldr	r3, [r4, #8]
 800901a:	42bb      	cmp	r3, r7
 800901c:	dc19      	bgt.n	8009052 <__multadd+0x6e>
 800901e:	6863      	ldr	r3, [r4, #4]
 8009020:	9801      	ldr	r0, [sp, #4]
 8009022:	1c59      	adds	r1, r3, #1
 8009024:	f7ff ff76 	bl	8008f14 <_Balloc>
 8009028:	1e06      	subs	r6, r0, #0
 800902a:	d105      	bne.n	8009038 <__multadd+0x54>
 800902c:	0002      	movs	r2, r0
 800902e:	21b5      	movs	r1, #181	; 0xb5
 8009030:	4b0c      	ldr	r3, [pc, #48]	; (8009064 <__multadd+0x80>)
 8009032:	480d      	ldr	r0, [pc, #52]	; (8009068 <__multadd+0x84>)
 8009034:	f000 fd8c 	bl	8009b50 <__assert_func>
 8009038:	0021      	movs	r1, r4
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	310c      	adds	r1, #12
 800903e:	1c9a      	adds	r2, r3, #2
 8009040:	0092      	lsls	r2, r2, #2
 8009042:	300c      	adds	r0, #12
 8009044:	f7ff ff5d 	bl	8008f02 <memcpy>
 8009048:	0021      	movs	r1, r4
 800904a:	9801      	ldr	r0, [sp, #4]
 800904c:	f7ff ffa6 	bl	8008f9c <_Bfree>
 8009050:	0034      	movs	r4, r6
 8009052:	1d3b      	adds	r3, r7, #4
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	18e3      	adds	r3, r4, r3
 8009058:	605d      	str	r5, [r3, #4]
 800905a:	1c7b      	adds	r3, r7, #1
 800905c:	6123      	str	r3, [r4, #16]
 800905e:	0020      	movs	r0, r4
 8009060:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	0800a9b3 	.word	0x0800a9b3
 8009068:	0800a9c4 	.word	0x0800a9c4

0800906c <__hi0bits>:
 800906c:	0003      	movs	r3, r0
 800906e:	0c02      	lsrs	r2, r0, #16
 8009070:	2000      	movs	r0, #0
 8009072:	4282      	cmp	r2, r0
 8009074:	d101      	bne.n	800907a <__hi0bits+0xe>
 8009076:	041b      	lsls	r3, r3, #16
 8009078:	3010      	adds	r0, #16
 800907a:	0e1a      	lsrs	r2, r3, #24
 800907c:	d101      	bne.n	8009082 <__hi0bits+0x16>
 800907e:	3008      	adds	r0, #8
 8009080:	021b      	lsls	r3, r3, #8
 8009082:	0f1a      	lsrs	r2, r3, #28
 8009084:	d101      	bne.n	800908a <__hi0bits+0x1e>
 8009086:	3004      	adds	r0, #4
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	0f9a      	lsrs	r2, r3, #30
 800908c:	d101      	bne.n	8009092 <__hi0bits+0x26>
 800908e:	3002      	adds	r0, #2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	2b00      	cmp	r3, #0
 8009094:	db03      	blt.n	800909e <__hi0bits+0x32>
 8009096:	3001      	adds	r0, #1
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	d400      	bmi.n	800909e <__hi0bits+0x32>
 800909c:	2020      	movs	r0, #32
 800909e:	4770      	bx	lr

080090a0 <__lo0bits>:
 80090a0:	6803      	ldr	r3, [r0, #0]
 80090a2:	0002      	movs	r2, r0
 80090a4:	2107      	movs	r1, #7
 80090a6:	0018      	movs	r0, r3
 80090a8:	4008      	ands	r0, r1
 80090aa:	420b      	tst	r3, r1
 80090ac:	d00d      	beq.n	80090ca <__lo0bits+0x2a>
 80090ae:	3906      	subs	r1, #6
 80090b0:	2000      	movs	r0, #0
 80090b2:	420b      	tst	r3, r1
 80090b4:	d105      	bne.n	80090c2 <__lo0bits+0x22>
 80090b6:	3002      	adds	r0, #2
 80090b8:	4203      	tst	r3, r0
 80090ba:	d003      	beq.n	80090c4 <__lo0bits+0x24>
 80090bc:	40cb      	lsrs	r3, r1
 80090be:	0008      	movs	r0, r1
 80090c0:	6013      	str	r3, [r2, #0]
 80090c2:	4770      	bx	lr
 80090c4:	089b      	lsrs	r3, r3, #2
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	e7fb      	b.n	80090c2 <__lo0bits+0x22>
 80090ca:	b299      	uxth	r1, r3
 80090cc:	2900      	cmp	r1, #0
 80090ce:	d101      	bne.n	80090d4 <__lo0bits+0x34>
 80090d0:	2010      	movs	r0, #16
 80090d2:	0c1b      	lsrs	r3, r3, #16
 80090d4:	b2d9      	uxtb	r1, r3
 80090d6:	2900      	cmp	r1, #0
 80090d8:	d101      	bne.n	80090de <__lo0bits+0x3e>
 80090da:	3008      	adds	r0, #8
 80090dc:	0a1b      	lsrs	r3, r3, #8
 80090de:	0719      	lsls	r1, r3, #28
 80090e0:	d101      	bne.n	80090e6 <__lo0bits+0x46>
 80090e2:	3004      	adds	r0, #4
 80090e4:	091b      	lsrs	r3, r3, #4
 80090e6:	0799      	lsls	r1, r3, #30
 80090e8:	d101      	bne.n	80090ee <__lo0bits+0x4e>
 80090ea:	3002      	adds	r0, #2
 80090ec:	089b      	lsrs	r3, r3, #2
 80090ee:	07d9      	lsls	r1, r3, #31
 80090f0:	d4e9      	bmi.n	80090c6 <__lo0bits+0x26>
 80090f2:	3001      	adds	r0, #1
 80090f4:	085b      	lsrs	r3, r3, #1
 80090f6:	d1e6      	bne.n	80090c6 <__lo0bits+0x26>
 80090f8:	2020      	movs	r0, #32
 80090fa:	e7e2      	b.n	80090c2 <__lo0bits+0x22>

080090fc <__i2b>:
 80090fc:	b510      	push	{r4, lr}
 80090fe:	000c      	movs	r4, r1
 8009100:	2101      	movs	r1, #1
 8009102:	f7ff ff07 	bl	8008f14 <_Balloc>
 8009106:	2800      	cmp	r0, #0
 8009108:	d106      	bne.n	8009118 <__i2b+0x1c>
 800910a:	21a0      	movs	r1, #160	; 0xa0
 800910c:	0002      	movs	r2, r0
 800910e:	4b04      	ldr	r3, [pc, #16]	; (8009120 <__i2b+0x24>)
 8009110:	4804      	ldr	r0, [pc, #16]	; (8009124 <__i2b+0x28>)
 8009112:	0049      	lsls	r1, r1, #1
 8009114:	f000 fd1c 	bl	8009b50 <__assert_func>
 8009118:	2301      	movs	r3, #1
 800911a:	6144      	str	r4, [r0, #20]
 800911c:	6103      	str	r3, [r0, #16]
 800911e:	bd10      	pop	{r4, pc}
 8009120:	0800a9b3 	.word	0x0800a9b3
 8009124:	0800a9c4 	.word	0x0800a9c4

08009128 <__multiply>:
 8009128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800912a:	690b      	ldr	r3, [r1, #16]
 800912c:	0014      	movs	r4, r2
 800912e:	6912      	ldr	r2, [r2, #16]
 8009130:	000d      	movs	r5, r1
 8009132:	b089      	sub	sp, #36	; 0x24
 8009134:	4293      	cmp	r3, r2
 8009136:	da01      	bge.n	800913c <__multiply+0x14>
 8009138:	0025      	movs	r5, r4
 800913a:	000c      	movs	r4, r1
 800913c:	692f      	ldr	r7, [r5, #16]
 800913e:	6926      	ldr	r6, [r4, #16]
 8009140:	6869      	ldr	r1, [r5, #4]
 8009142:	19bb      	adds	r3, r7, r6
 8009144:	9302      	str	r3, [sp, #8]
 8009146:	68ab      	ldr	r3, [r5, #8]
 8009148:	19ba      	adds	r2, r7, r6
 800914a:	4293      	cmp	r3, r2
 800914c:	da00      	bge.n	8009150 <__multiply+0x28>
 800914e:	3101      	adds	r1, #1
 8009150:	f7ff fee0 	bl	8008f14 <_Balloc>
 8009154:	9001      	str	r0, [sp, #4]
 8009156:	2800      	cmp	r0, #0
 8009158:	d106      	bne.n	8009168 <__multiply+0x40>
 800915a:	215e      	movs	r1, #94	; 0x5e
 800915c:	0002      	movs	r2, r0
 800915e:	4b48      	ldr	r3, [pc, #288]	; (8009280 <__multiply+0x158>)
 8009160:	4848      	ldr	r0, [pc, #288]	; (8009284 <__multiply+0x15c>)
 8009162:	31ff      	adds	r1, #255	; 0xff
 8009164:	f000 fcf4 	bl	8009b50 <__assert_func>
 8009168:	9b01      	ldr	r3, [sp, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	3314      	adds	r3, #20
 800916e:	469c      	mov	ip, r3
 8009170:	19bb      	adds	r3, r7, r6
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4463      	add	r3, ip
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	4663      	mov	r3, ip
 800917a:	9903      	ldr	r1, [sp, #12]
 800917c:	428b      	cmp	r3, r1
 800917e:	d32c      	bcc.n	80091da <__multiply+0xb2>
 8009180:	002b      	movs	r3, r5
 8009182:	0022      	movs	r2, r4
 8009184:	3314      	adds	r3, #20
 8009186:	00bf      	lsls	r7, r7, #2
 8009188:	3214      	adds	r2, #20
 800918a:	9306      	str	r3, [sp, #24]
 800918c:	00b6      	lsls	r6, r6, #2
 800918e:	19db      	adds	r3, r3, r7
 8009190:	9304      	str	r3, [sp, #16]
 8009192:	1993      	adds	r3, r2, r6
 8009194:	9307      	str	r3, [sp, #28]
 8009196:	2304      	movs	r3, #4
 8009198:	9305      	str	r3, [sp, #20]
 800919a:	002b      	movs	r3, r5
 800919c:	9904      	ldr	r1, [sp, #16]
 800919e:	3315      	adds	r3, #21
 80091a0:	9200      	str	r2, [sp, #0]
 80091a2:	4299      	cmp	r1, r3
 80091a4:	d305      	bcc.n	80091b2 <__multiply+0x8a>
 80091a6:	1b4b      	subs	r3, r1, r5
 80091a8:	3b15      	subs	r3, #21
 80091aa:	089b      	lsrs	r3, r3, #2
 80091ac:	3301      	adds	r3, #1
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	9305      	str	r3, [sp, #20]
 80091b2:	9b07      	ldr	r3, [sp, #28]
 80091b4:	9a00      	ldr	r2, [sp, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d311      	bcc.n	80091de <__multiply+0xb6>
 80091ba:	9b02      	ldr	r3, [sp, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	dd06      	ble.n	80091ce <__multiply+0xa6>
 80091c0:	9b03      	ldr	r3, [sp, #12]
 80091c2:	3b04      	subs	r3, #4
 80091c4:	9303      	str	r3, [sp, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d053      	beq.n	8009276 <__multiply+0x14e>
 80091ce:	9b01      	ldr	r3, [sp, #4]
 80091d0:	9a02      	ldr	r2, [sp, #8]
 80091d2:	0018      	movs	r0, r3
 80091d4:	611a      	str	r2, [r3, #16]
 80091d6:	b009      	add	sp, #36	; 0x24
 80091d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091da:	c304      	stmia	r3!, {r2}
 80091dc:	e7cd      	b.n	800917a <__multiply+0x52>
 80091de:	9b00      	ldr	r3, [sp, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	b298      	uxth	r0, r3
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d01b      	beq.n	8009220 <__multiply+0xf8>
 80091e8:	4667      	mov	r7, ip
 80091ea:	2400      	movs	r4, #0
 80091ec:	9e06      	ldr	r6, [sp, #24]
 80091ee:	ce02      	ldmia	r6!, {r1}
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	b28b      	uxth	r3, r1
 80091f4:	4343      	muls	r3, r0
 80091f6:	b292      	uxth	r2, r2
 80091f8:	189b      	adds	r3, r3, r2
 80091fa:	191b      	adds	r3, r3, r4
 80091fc:	0c0c      	lsrs	r4, r1, #16
 80091fe:	4344      	muls	r4, r0
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	0c11      	lsrs	r1, r2, #16
 8009204:	1861      	adds	r1, r4, r1
 8009206:	0c1c      	lsrs	r4, r3, #16
 8009208:	1909      	adds	r1, r1, r4
 800920a:	0c0c      	lsrs	r4, r1, #16
 800920c:	b29b      	uxth	r3, r3
 800920e:	0409      	lsls	r1, r1, #16
 8009210:	430b      	orrs	r3, r1
 8009212:	c708      	stmia	r7!, {r3}
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	42b3      	cmp	r3, r6
 8009218:	d8e9      	bhi.n	80091ee <__multiply+0xc6>
 800921a:	4663      	mov	r3, ip
 800921c:	9a05      	ldr	r2, [sp, #20]
 800921e:	509c      	str	r4, [r3, r2]
 8009220:	9b00      	ldr	r3, [sp, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	0c1e      	lsrs	r6, r3, #16
 8009226:	d020      	beq.n	800926a <__multiply+0x142>
 8009228:	4663      	mov	r3, ip
 800922a:	002c      	movs	r4, r5
 800922c:	4660      	mov	r0, ip
 800922e:	2700      	movs	r7, #0
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3414      	adds	r4, #20
 8009234:	6822      	ldr	r2, [r4, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	b291      	uxth	r1, r2
 800923a:	4371      	muls	r1, r6
 800923c:	6802      	ldr	r2, [r0, #0]
 800923e:	0c12      	lsrs	r2, r2, #16
 8009240:	1889      	adds	r1, r1, r2
 8009242:	19cf      	adds	r7, r1, r7
 8009244:	0439      	lsls	r1, r7, #16
 8009246:	430b      	orrs	r3, r1
 8009248:	6003      	str	r3, [r0, #0]
 800924a:	cc02      	ldmia	r4!, {r1}
 800924c:	6843      	ldr	r3, [r0, #4]
 800924e:	0c09      	lsrs	r1, r1, #16
 8009250:	4371      	muls	r1, r6
 8009252:	b29b      	uxth	r3, r3
 8009254:	0c3f      	lsrs	r7, r7, #16
 8009256:	18cb      	adds	r3, r1, r3
 8009258:	9a04      	ldr	r2, [sp, #16]
 800925a:	19db      	adds	r3, r3, r7
 800925c:	0c1f      	lsrs	r7, r3, #16
 800925e:	3004      	adds	r0, #4
 8009260:	42a2      	cmp	r2, r4
 8009262:	d8e7      	bhi.n	8009234 <__multiply+0x10c>
 8009264:	4662      	mov	r2, ip
 8009266:	9905      	ldr	r1, [sp, #20]
 8009268:	5053      	str	r3, [r2, r1]
 800926a:	9b00      	ldr	r3, [sp, #0]
 800926c:	3304      	adds	r3, #4
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	2304      	movs	r3, #4
 8009272:	449c      	add	ip, r3
 8009274:	e79d      	b.n	80091b2 <__multiply+0x8a>
 8009276:	9b02      	ldr	r3, [sp, #8]
 8009278:	3b01      	subs	r3, #1
 800927a:	9302      	str	r3, [sp, #8]
 800927c:	e79d      	b.n	80091ba <__multiply+0x92>
 800927e:	46c0      	nop			; (mov r8, r8)
 8009280:	0800a9b3 	.word	0x0800a9b3
 8009284:	0800a9c4 	.word	0x0800a9c4

08009288 <__pow5mult>:
 8009288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800928a:	2303      	movs	r3, #3
 800928c:	0015      	movs	r5, r2
 800928e:	0007      	movs	r7, r0
 8009290:	000e      	movs	r6, r1
 8009292:	401a      	ands	r2, r3
 8009294:	421d      	tst	r5, r3
 8009296:	d008      	beq.n	80092aa <__pow5mult+0x22>
 8009298:	4925      	ldr	r1, [pc, #148]	; (8009330 <__pow5mult+0xa8>)
 800929a:	3a01      	subs	r2, #1
 800929c:	0092      	lsls	r2, r2, #2
 800929e:	5852      	ldr	r2, [r2, r1]
 80092a0:	2300      	movs	r3, #0
 80092a2:	0031      	movs	r1, r6
 80092a4:	f7ff fe9e 	bl	8008fe4 <__multadd>
 80092a8:	0006      	movs	r6, r0
 80092aa:	10ad      	asrs	r5, r5, #2
 80092ac:	d03d      	beq.n	800932a <__pow5mult+0xa2>
 80092ae:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	d10f      	bne.n	80092d4 <__pow5mult+0x4c>
 80092b4:	2010      	movs	r0, #16
 80092b6:	f7ff fe0f 	bl	8008ed8 <malloc>
 80092ba:	1e02      	subs	r2, r0, #0
 80092bc:	6278      	str	r0, [r7, #36]	; 0x24
 80092be:	d105      	bne.n	80092cc <__pow5mult+0x44>
 80092c0:	21d7      	movs	r1, #215	; 0xd7
 80092c2:	4b1c      	ldr	r3, [pc, #112]	; (8009334 <__pow5mult+0xac>)
 80092c4:	481c      	ldr	r0, [pc, #112]	; (8009338 <__pow5mult+0xb0>)
 80092c6:	0049      	lsls	r1, r1, #1
 80092c8:	f000 fc42 	bl	8009b50 <__assert_func>
 80092cc:	6044      	str	r4, [r0, #4]
 80092ce:	6084      	str	r4, [r0, #8]
 80092d0:	6004      	str	r4, [r0, #0]
 80092d2:	60c4      	str	r4, [r0, #12]
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	689c      	ldr	r4, [r3, #8]
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	2c00      	cmp	r4, #0
 80092dc:	d108      	bne.n	80092f0 <__pow5mult+0x68>
 80092de:	0038      	movs	r0, r7
 80092e0:	4916      	ldr	r1, [pc, #88]	; (800933c <__pow5mult+0xb4>)
 80092e2:	f7ff ff0b 	bl	80090fc <__i2b>
 80092e6:	9b01      	ldr	r3, [sp, #4]
 80092e8:	0004      	movs	r4, r0
 80092ea:	6098      	str	r0, [r3, #8]
 80092ec:	2300      	movs	r3, #0
 80092ee:	6003      	str	r3, [r0, #0]
 80092f0:	2301      	movs	r3, #1
 80092f2:	421d      	tst	r5, r3
 80092f4:	d00a      	beq.n	800930c <__pow5mult+0x84>
 80092f6:	0031      	movs	r1, r6
 80092f8:	0022      	movs	r2, r4
 80092fa:	0038      	movs	r0, r7
 80092fc:	f7ff ff14 	bl	8009128 <__multiply>
 8009300:	0031      	movs	r1, r6
 8009302:	9001      	str	r0, [sp, #4]
 8009304:	0038      	movs	r0, r7
 8009306:	f7ff fe49 	bl	8008f9c <_Bfree>
 800930a:	9e01      	ldr	r6, [sp, #4]
 800930c:	106d      	asrs	r5, r5, #1
 800930e:	d00c      	beq.n	800932a <__pow5mult+0xa2>
 8009310:	6820      	ldr	r0, [r4, #0]
 8009312:	2800      	cmp	r0, #0
 8009314:	d107      	bne.n	8009326 <__pow5mult+0x9e>
 8009316:	0022      	movs	r2, r4
 8009318:	0021      	movs	r1, r4
 800931a:	0038      	movs	r0, r7
 800931c:	f7ff ff04 	bl	8009128 <__multiply>
 8009320:	2300      	movs	r3, #0
 8009322:	6020      	str	r0, [r4, #0]
 8009324:	6003      	str	r3, [r0, #0]
 8009326:	0004      	movs	r4, r0
 8009328:	e7e2      	b.n	80092f0 <__pow5mult+0x68>
 800932a:	0030      	movs	r0, r6
 800932c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800932e:	46c0      	nop			; (mov r8, r8)
 8009330:	0800ab10 	.word	0x0800ab10
 8009334:	0800a941 	.word	0x0800a941
 8009338:	0800a9c4 	.word	0x0800a9c4
 800933c:	00000271 	.word	0x00000271

08009340 <__lshift>:
 8009340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009342:	000c      	movs	r4, r1
 8009344:	0017      	movs	r7, r2
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	1155      	asrs	r5, r2, #5
 800934a:	b087      	sub	sp, #28
 800934c:	18eb      	adds	r3, r5, r3
 800934e:	9302      	str	r3, [sp, #8]
 8009350:	3301      	adds	r3, #1
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	6849      	ldr	r1, [r1, #4]
 8009356:	68a3      	ldr	r3, [r4, #8]
 8009358:	9004      	str	r0, [sp, #16]
 800935a:	9a01      	ldr	r2, [sp, #4]
 800935c:	4293      	cmp	r3, r2
 800935e:	db10      	blt.n	8009382 <__lshift+0x42>
 8009360:	9804      	ldr	r0, [sp, #16]
 8009362:	f7ff fdd7 	bl	8008f14 <_Balloc>
 8009366:	2300      	movs	r3, #0
 8009368:	0002      	movs	r2, r0
 800936a:	0006      	movs	r6, r0
 800936c:	0019      	movs	r1, r3
 800936e:	3214      	adds	r2, #20
 8009370:	4298      	cmp	r0, r3
 8009372:	d10c      	bne.n	800938e <__lshift+0x4e>
 8009374:	21da      	movs	r1, #218	; 0xda
 8009376:	0002      	movs	r2, r0
 8009378:	4b26      	ldr	r3, [pc, #152]	; (8009414 <__lshift+0xd4>)
 800937a:	4827      	ldr	r0, [pc, #156]	; (8009418 <__lshift+0xd8>)
 800937c:	31ff      	adds	r1, #255	; 0xff
 800937e:	f000 fbe7 	bl	8009b50 <__assert_func>
 8009382:	3101      	adds	r1, #1
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	e7e8      	b.n	800935a <__lshift+0x1a>
 8009388:	0098      	lsls	r0, r3, #2
 800938a:	5011      	str	r1, [r2, r0]
 800938c:	3301      	adds	r3, #1
 800938e:	42ab      	cmp	r3, r5
 8009390:	dbfa      	blt.n	8009388 <__lshift+0x48>
 8009392:	43eb      	mvns	r3, r5
 8009394:	17db      	asrs	r3, r3, #31
 8009396:	401d      	ands	r5, r3
 8009398:	211f      	movs	r1, #31
 800939a:	0023      	movs	r3, r4
 800939c:	0038      	movs	r0, r7
 800939e:	00ad      	lsls	r5, r5, #2
 80093a0:	1955      	adds	r5, r2, r5
 80093a2:	6922      	ldr	r2, [r4, #16]
 80093a4:	3314      	adds	r3, #20
 80093a6:	0092      	lsls	r2, r2, #2
 80093a8:	4008      	ands	r0, r1
 80093aa:	4684      	mov	ip, r0
 80093ac:	189a      	adds	r2, r3, r2
 80093ae:	420f      	tst	r7, r1
 80093b0:	d02a      	beq.n	8009408 <__lshift+0xc8>
 80093b2:	3101      	adds	r1, #1
 80093b4:	1a09      	subs	r1, r1, r0
 80093b6:	9105      	str	r1, [sp, #20]
 80093b8:	2100      	movs	r1, #0
 80093ba:	9503      	str	r5, [sp, #12]
 80093bc:	4667      	mov	r7, ip
 80093be:	6818      	ldr	r0, [r3, #0]
 80093c0:	40b8      	lsls	r0, r7
 80093c2:	4301      	orrs	r1, r0
 80093c4:	9803      	ldr	r0, [sp, #12]
 80093c6:	c002      	stmia	r0!, {r1}
 80093c8:	cb02      	ldmia	r3!, {r1}
 80093ca:	9003      	str	r0, [sp, #12]
 80093cc:	9805      	ldr	r0, [sp, #20]
 80093ce:	40c1      	lsrs	r1, r0
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d8f3      	bhi.n	80093bc <__lshift+0x7c>
 80093d4:	0020      	movs	r0, r4
 80093d6:	3015      	adds	r0, #21
 80093d8:	2304      	movs	r3, #4
 80093da:	4282      	cmp	r2, r0
 80093dc:	d304      	bcc.n	80093e8 <__lshift+0xa8>
 80093de:	1b13      	subs	r3, r2, r4
 80093e0:	3b15      	subs	r3, #21
 80093e2:	089b      	lsrs	r3, r3, #2
 80093e4:	3301      	adds	r3, #1
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	50e9      	str	r1, [r5, r3]
 80093ea:	2900      	cmp	r1, #0
 80093ec:	d002      	beq.n	80093f4 <__lshift+0xb4>
 80093ee:	9b02      	ldr	r3, [sp, #8]
 80093f0:	3302      	adds	r3, #2
 80093f2:	9301      	str	r3, [sp, #4]
 80093f4:	9b01      	ldr	r3, [sp, #4]
 80093f6:	9804      	ldr	r0, [sp, #16]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	0021      	movs	r1, r4
 80093fc:	6133      	str	r3, [r6, #16]
 80093fe:	f7ff fdcd 	bl	8008f9c <_Bfree>
 8009402:	0030      	movs	r0, r6
 8009404:	b007      	add	sp, #28
 8009406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009408:	cb02      	ldmia	r3!, {r1}
 800940a:	c502      	stmia	r5!, {r1}
 800940c:	429a      	cmp	r2, r3
 800940e:	d8fb      	bhi.n	8009408 <__lshift+0xc8>
 8009410:	e7f0      	b.n	80093f4 <__lshift+0xb4>
 8009412:	46c0      	nop			; (mov r8, r8)
 8009414:	0800a9b3 	.word	0x0800a9b3
 8009418:	0800a9c4 	.word	0x0800a9c4

0800941c <__mcmp>:
 800941c:	6902      	ldr	r2, [r0, #16]
 800941e:	690b      	ldr	r3, [r1, #16]
 8009420:	b530      	push	{r4, r5, lr}
 8009422:	0004      	movs	r4, r0
 8009424:	1ad0      	subs	r0, r2, r3
 8009426:	429a      	cmp	r2, r3
 8009428:	d10d      	bne.n	8009446 <__mcmp+0x2a>
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	3414      	adds	r4, #20
 800942e:	3114      	adds	r1, #20
 8009430:	18e2      	adds	r2, r4, r3
 8009432:	18c9      	adds	r1, r1, r3
 8009434:	3a04      	subs	r2, #4
 8009436:	3904      	subs	r1, #4
 8009438:	6815      	ldr	r5, [r2, #0]
 800943a:	680b      	ldr	r3, [r1, #0]
 800943c:	429d      	cmp	r5, r3
 800943e:	d003      	beq.n	8009448 <__mcmp+0x2c>
 8009440:	2001      	movs	r0, #1
 8009442:	429d      	cmp	r5, r3
 8009444:	d303      	bcc.n	800944e <__mcmp+0x32>
 8009446:	bd30      	pop	{r4, r5, pc}
 8009448:	4294      	cmp	r4, r2
 800944a:	d3f3      	bcc.n	8009434 <__mcmp+0x18>
 800944c:	e7fb      	b.n	8009446 <__mcmp+0x2a>
 800944e:	4240      	negs	r0, r0
 8009450:	e7f9      	b.n	8009446 <__mcmp+0x2a>
	...

08009454 <__mdiff>:
 8009454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009456:	000e      	movs	r6, r1
 8009458:	0007      	movs	r7, r0
 800945a:	0011      	movs	r1, r2
 800945c:	0030      	movs	r0, r6
 800945e:	b087      	sub	sp, #28
 8009460:	0014      	movs	r4, r2
 8009462:	f7ff ffdb 	bl	800941c <__mcmp>
 8009466:	1e05      	subs	r5, r0, #0
 8009468:	d110      	bne.n	800948c <__mdiff+0x38>
 800946a:	0001      	movs	r1, r0
 800946c:	0038      	movs	r0, r7
 800946e:	f7ff fd51 	bl	8008f14 <_Balloc>
 8009472:	1e02      	subs	r2, r0, #0
 8009474:	d104      	bne.n	8009480 <__mdiff+0x2c>
 8009476:	4b40      	ldr	r3, [pc, #256]	; (8009578 <__mdiff+0x124>)
 8009478:	4940      	ldr	r1, [pc, #256]	; (800957c <__mdiff+0x128>)
 800947a:	4841      	ldr	r0, [pc, #260]	; (8009580 <__mdiff+0x12c>)
 800947c:	f000 fb68 	bl	8009b50 <__assert_func>
 8009480:	2301      	movs	r3, #1
 8009482:	6145      	str	r5, [r0, #20]
 8009484:	6103      	str	r3, [r0, #16]
 8009486:	0010      	movs	r0, r2
 8009488:	b007      	add	sp, #28
 800948a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800948c:	2301      	movs	r3, #1
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	2800      	cmp	r0, #0
 8009492:	db04      	blt.n	800949e <__mdiff+0x4a>
 8009494:	0023      	movs	r3, r4
 8009496:	0034      	movs	r4, r6
 8009498:	001e      	movs	r6, r3
 800949a:	2300      	movs	r3, #0
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	0038      	movs	r0, r7
 80094a0:	6861      	ldr	r1, [r4, #4]
 80094a2:	f7ff fd37 	bl	8008f14 <_Balloc>
 80094a6:	1e02      	subs	r2, r0, #0
 80094a8:	d103      	bne.n	80094b2 <__mdiff+0x5e>
 80094aa:	2190      	movs	r1, #144	; 0x90
 80094ac:	4b32      	ldr	r3, [pc, #200]	; (8009578 <__mdiff+0x124>)
 80094ae:	0089      	lsls	r1, r1, #2
 80094b0:	e7e3      	b.n	800947a <__mdiff+0x26>
 80094b2:	9b01      	ldr	r3, [sp, #4]
 80094b4:	2700      	movs	r7, #0
 80094b6:	60c3      	str	r3, [r0, #12]
 80094b8:	6920      	ldr	r0, [r4, #16]
 80094ba:	3414      	adds	r4, #20
 80094bc:	9401      	str	r4, [sp, #4]
 80094be:	9b01      	ldr	r3, [sp, #4]
 80094c0:	0084      	lsls	r4, r0, #2
 80094c2:	191b      	adds	r3, r3, r4
 80094c4:	0034      	movs	r4, r6
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	6933      	ldr	r3, [r6, #16]
 80094ca:	3414      	adds	r4, #20
 80094cc:	0099      	lsls	r1, r3, #2
 80094ce:	1863      	adds	r3, r4, r1
 80094d0:	9303      	str	r3, [sp, #12]
 80094d2:	0013      	movs	r3, r2
 80094d4:	3314      	adds	r3, #20
 80094d6:	469c      	mov	ip, r3
 80094d8:	9305      	str	r3, [sp, #20]
 80094da:	9b01      	ldr	r3, [sp, #4]
 80094dc:	9304      	str	r3, [sp, #16]
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	cc02      	ldmia	r4!, {r1}
 80094e2:	cb20      	ldmia	r3!, {r5}
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	b2ab      	uxth	r3, r5
 80094e8:	19df      	adds	r7, r3, r7
 80094ea:	b28b      	uxth	r3, r1
 80094ec:	1afb      	subs	r3, r7, r3
 80094ee:	0c09      	lsrs	r1, r1, #16
 80094f0:	0c2d      	lsrs	r5, r5, #16
 80094f2:	1a6d      	subs	r5, r5, r1
 80094f4:	1419      	asrs	r1, r3, #16
 80094f6:	186d      	adds	r5, r5, r1
 80094f8:	4661      	mov	r1, ip
 80094fa:	142f      	asrs	r7, r5, #16
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	042d      	lsls	r5, r5, #16
 8009500:	432b      	orrs	r3, r5
 8009502:	c108      	stmia	r1!, {r3}
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	468c      	mov	ip, r1
 8009508:	42a3      	cmp	r3, r4
 800950a:	d8e8      	bhi.n	80094de <__mdiff+0x8a>
 800950c:	0031      	movs	r1, r6
 800950e:	9c03      	ldr	r4, [sp, #12]
 8009510:	3115      	adds	r1, #21
 8009512:	2304      	movs	r3, #4
 8009514:	428c      	cmp	r4, r1
 8009516:	d304      	bcc.n	8009522 <__mdiff+0xce>
 8009518:	1ba3      	subs	r3, r4, r6
 800951a:	3b15      	subs	r3, #21
 800951c:	089b      	lsrs	r3, r3, #2
 800951e:	3301      	adds	r3, #1
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	9901      	ldr	r1, [sp, #4]
 8009524:	18cc      	adds	r4, r1, r3
 8009526:	9905      	ldr	r1, [sp, #20]
 8009528:	0026      	movs	r6, r4
 800952a:	18cb      	adds	r3, r1, r3
 800952c:	469c      	mov	ip, r3
 800952e:	9902      	ldr	r1, [sp, #8]
 8009530:	428e      	cmp	r6, r1
 8009532:	d310      	bcc.n	8009556 <__mdiff+0x102>
 8009534:	9e02      	ldr	r6, [sp, #8]
 8009536:	1ee1      	subs	r1, r4, #3
 8009538:	2500      	movs	r5, #0
 800953a:	428e      	cmp	r6, r1
 800953c:	d304      	bcc.n	8009548 <__mdiff+0xf4>
 800953e:	0031      	movs	r1, r6
 8009540:	3103      	adds	r1, #3
 8009542:	1b0c      	subs	r4, r1, r4
 8009544:	08a4      	lsrs	r4, r4, #2
 8009546:	00a5      	lsls	r5, r4, #2
 8009548:	195b      	adds	r3, r3, r5
 800954a:	3b04      	subs	r3, #4
 800954c:	6819      	ldr	r1, [r3, #0]
 800954e:	2900      	cmp	r1, #0
 8009550:	d00f      	beq.n	8009572 <__mdiff+0x11e>
 8009552:	6110      	str	r0, [r2, #16]
 8009554:	e797      	b.n	8009486 <__mdiff+0x32>
 8009556:	ce02      	ldmia	r6!, {r1}
 8009558:	b28d      	uxth	r5, r1
 800955a:	19ed      	adds	r5, r5, r7
 800955c:	0c0f      	lsrs	r7, r1, #16
 800955e:	1429      	asrs	r1, r5, #16
 8009560:	1879      	adds	r1, r7, r1
 8009562:	140f      	asrs	r7, r1, #16
 8009564:	b2ad      	uxth	r5, r5
 8009566:	0409      	lsls	r1, r1, #16
 8009568:	430d      	orrs	r5, r1
 800956a:	4661      	mov	r1, ip
 800956c:	c120      	stmia	r1!, {r5}
 800956e:	468c      	mov	ip, r1
 8009570:	e7dd      	b.n	800952e <__mdiff+0xda>
 8009572:	3801      	subs	r0, #1
 8009574:	e7e9      	b.n	800954a <__mdiff+0xf6>
 8009576:	46c0      	nop			; (mov r8, r8)
 8009578:	0800a9b3 	.word	0x0800a9b3
 800957c:	00000232 	.word	0x00000232
 8009580:	0800a9c4 	.word	0x0800a9c4

08009584 <__d2b>:
 8009584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009586:	2101      	movs	r1, #1
 8009588:	0014      	movs	r4, r2
 800958a:	001e      	movs	r6, r3
 800958c:	9f08      	ldr	r7, [sp, #32]
 800958e:	f7ff fcc1 	bl	8008f14 <_Balloc>
 8009592:	1e05      	subs	r5, r0, #0
 8009594:	d105      	bne.n	80095a2 <__d2b+0x1e>
 8009596:	0002      	movs	r2, r0
 8009598:	4b26      	ldr	r3, [pc, #152]	; (8009634 <__d2b+0xb0>)
 800959a:	4927      	ldr	r1, [pc, #156]	; (8009638 <__d2b+0xb4>)
 800959c:	4827      	ldr	r0, [pc, #156]	; (800963c <__d2b+0xb8>)
 800959e:	f000 fad7 	bl	8009b50 <__assert_func>
 80095a2:	0333      	lsls	r3, r6, #12
 80095a4:	0076      	lsls	r6, r6, #1
 80095a6:	0b1b      	lsrs	r3, r3, #12
 80095a8:	0d76      	lsrs	r6, r6, #21
 80095aa:	d124      	bne.n	80095f6 <__d2b+0x72>
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	2c00      	cmp	r4, #0
 80095b0:	d027      	beq.n	8009602 <__d2b+0x7e>
 80095b2:	4668      	mov	r0, sp
 80095b4:	9400      	str	r4, [sp, #0]
 80095b6:	f7ff fd73 	bl	80090a0 <__lo0bits>
 80095ba:	9c00      	ldr	r4, [sp, #0]
 80095bc:	2800      	cmp	r0, #0
 80095be:	d01e      	beq.n	80095fe <__d2b+0x7a>
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	2120      	movs	r1, #32
 80095c4:	001a      	movs	r2, r3
 80095c6:	1a09      	subs	r1, r1, r0
 80095c8:	408a      	lsls	r2, r1
 80095ca:	40c3      	lsrs	r3, r0
 80095cc:	4322      	orrs	r2, r4
 80095ce:	616a      	str	r2, [r5, #20]
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	9c01      	ldr	r4, [sp, #4]
 80095d4:	61ac      	str	r4, [r5, #24]
 80095d6:	1e63      	subs	r3, r4, #1
 80095d8:	419c      	sbcs	r4, r3
 80095da:	3401      	adds	r4, #1
 80095dc:	612c      	str	r4, [r5, #16]
 80095de:	2e00      	cmp	r6, #0
 80095e0:	d018      	beq.n	8009614 <__d2b+0x90>
 80095e2:	4b17      	ldr	r3, [pc, #92]	; (8009640 <__d2b+0xbc>)
 80095e4:	18f6      	adds	r6, r6, r3
 80095e6:	2335      	movs	r3, #53	; 0x35
 80095e8:	1836      	adds	r6, r6, r0
 80095ea:	1a18      	subs	r0, r3, r0
 80095ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ee:	603e      	str	r6, [r7, #0]
 80095f0:	6018      	str	r0, [r3, #0]
 80095f2:	0028      	movs	r0, r5
 80095f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095f6:	2280      	movs	r2, #128	; 0x80
 80095f8:	0352      	lsls	r2, r2, #13
 80095fa:	4313      	orrs	r3, r2
 80095fc:	e7d6      	b.n	80095ac <__d2b+0x28>
 80095fe:	616c      	str	r4, [r5, #20]
 8009600:	e7e7      	b.n	80095d2 <__d2b+0x4e>
 8009602:	a801      	add	r0, sp, #4
 8009604:	f7ff fd4c 	bl	80090a0 <__lo0bits>
 8009608:	2401      	movs	r4, #1
 800960a:	9b01      	ldr	r3, [sp, #4]
 800960c:	612c      	str	r4, [r5, #16]
 800960e:	616b      	str	r3, [r5, #20]
 8009610:	3020      	adds	r0, #32
 8009612:	e7e4      	b.n	80095de <__d2b+0x5a>
 8009614:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <__d2b+0xc0>)
 8009616:	18c0      	adds	r0, r0, r3
 8009618:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <__d2b+0xc4>)
 800961a:	6038      	str	r0, [r7, #0]
 800961c:	18e3      	adds	r3, r4, r3
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	18eb      	adds	r3, r5, r3
 8009622:	6958      	ldr	r0, [r3, #20]
 8009624:	f7ff fd22 	bl	800906c <__hi0bits>
 8009628:	0164      	lsls	r4, r4, #5
 800962a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800962c:	1a24      	subs	r4, r4, r0
 800962e:	601c      	str	r4, [r3, #0]
 8009630:	e7df      	b.n	80095f2 <__d2b+0x6e>
 8009632:	46c0      	nop			; (mov r8, r8)
 8009634:	0800a9b3 	.word	0x0800a9b3
 8009638:	0000030a 	.word	0x0000030a
 800963c:	0800a9c4 	.word	0x0800a9c4
 8009640:	fffffbcd 	.word	0xfffffbcd
 8009644:	fffffbce 	.word	0xfffffbce
 8009648:	3fffffff 	.word	0x3fffffff

0800964c <_calloc_r>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	0c13      	lsrs	r3, r2, #16
 8009650:	0c0d      	lsrs	r5, r1, #16
 8009652:	d11e      	bne.n	8009692 <_calloc_r+0x46>
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10c      	bne.n	8009672 <_calloc_r+0x26>
 8009658:	b289      	uxth	r1, r1
 800965a:	b294      	uxth	r4, r2
 800965c:	434c      	muls	r4, r1
 800965e:	0021      	movs	r1, r4
 8009660:	f000 f88c 	bl	800977c <_malloc_r>
 8009664:	1e05      	subs	r5, r0, #0
 8009666:	d01b      	beq.n	80096a0 <_calloc_r+0x54>
 8009668:	0022      	movs	r2, r4
 800966a:	2100      	movs	r1, #0
 800966c:	f7fe f8f4 	bl	8007858 <memset>
 8009670:	e016      	b.n	80096a0 <_calloc_r+0x54>
 8009672:	1c1d      	adds	r5, r3, #0
 8009674:	1c0b      	adds	r3, r1, #0
 8009676:	b292      	uxth	r2, r2
 8009678:	b289      	uxth	r1, r1
 800967a:	b29c      	uxth	r4, r3
 800967c:	4351      	muls	r1, r2
 800967e:	b2ab      	uxth	r3, r5
 8009680:	4363      	muls	r3, r4
 8009682:	0c0c      	lsrs	r4, r1, #16
 8009684:	191c      	adds	r4, r3, r4
 8009686:	0c22      	lsrs	r2, r4, #16
 8009688:	d107      	bne.n	800969a <_calloc_r+0x4e>
 800968a:	0424      	lsls	r4, r4, #16
 800968c:	b289      	uxth	r1, r1
 800968e:	430c      	orrs	r4, r1
 8009690:	e7e5      	b.n	800965e <_calloc_r+0x12>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <_calloc_r+0x4e>
 8009696:	1c13      	adds	r3, r2, #0
 8009698:	e7ed      	b.n	8009676 <_calloc_r+0x2a>
 800969a:	230c      	movs	r3, #12
 800969c:	2500      	movs	r5, #0
 800969e:	6003      	str	r3, [r0, #0]
 80096a0:	0028      	movs	r0, r5
 80096a2:	bd70      	pop	{r4, r5, r6, pc}

080096a4 <_free_r>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	0005      	movs	r5, r0
 80096a8:	2900      	cmp	r1, #0
 80096aa:	d010      	beq.n	80096ce <_free_r+0x2a>
 80096ac:	1f0c      	subs	r4, r1, #4
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	da00      	bge.n	80096b6 <_free_r+0x12>
 80096b4:	18e4      	adds	r4, r4, r3
 80096b6:	0028      	movs	r0, r5
 80096b8:	f000 fa9e 	bl	8009bf8 <__malloc_lock>
 80096bc:	4a1d      	ldr	r2, [pc, #116]	; (8009734 <_free_r+0x90>)
 80096be:	6813      	ldr	r3, [r2, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d105      	bne.n	80096d0 <_free_r+0x2c>
 80096c4:	6063      	str	r3, [r4, #4]
 80096c6:	6014      	str	r4, [r2, #0]
 80096c8:	0028      	movs	r0, r5
 80096ca:	f000 fa9d 	bl	8009c08 <__malloc_unlock>
 80096ce:	bd70      	pop	{r4, r5, r6, pc}
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	d908      	bls.n	80096e6 <_free_r+0x42>
 80096d4:	6821      	ldr	r1, [r4, #0]
 80096d6:	1860      	adds	r0, r4, r1
 80096d8:	4283      	cmp	r3, r0
 80096da:	d1f3      	bne.n	80096c4 <_free_r+0x20>
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	1841      	adds	r1, r0, r1
 80096e2:	6021      	str	r1, [r4, #0]
 80096e4:	e7ee      	b.n	80096c4 <_free_r+0x20>
 80096e6:	001a      	movs	r2, r3
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <_free_r+0x4e>
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	d9f9      	bls.n	80096e6 <_free_r+0x42>
 80096f2:	6811      	ldr	r1, [r2, #0]
 80096f4:	1850      	adds	r0, r2, r1
 80096f6:	42a0      	cmp	r0, r4
 80096f8:	d10b      	bne.n	8009712 <_free_r+0x6e>
 80096fa:	6820      	ldr	r0, [r4, #0]
 80096fc:	1809      	adds	r1, r1, r0
 80096fe:	1850      	adds	r0, r2, r1
 8009700:	6011      	str	r1, [r2, #0]
 8009702:	4283      	cmp	r3, r0
 8009704:	d1e0      	bne.n	80096c8 <_free_r+0x24>
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	1841      	adds	r1, r0, r1
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	6053      	str	r3, [r2, #4]
 8009710:	e7da      	b.n	80096c8 <_free_r+0x24>
 8009712:	42a0      	cmp	r0, r4
 8009714:	d902      	bls.n	800971c <_free_r+0x78>
 8009716:	230c      	movs	r3, #12
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	e7d5      	b.n	80096c8 <_free_r+0x24>
 800971c:	6821      	ldr	r1, [r4, #0]
 800971e:	1860      	adds	r0, r4, r1
 8009720:	4283      	cmp	r3, r0
 8009722:	d103      	bne.n	800972c <_free_r+0x88>
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	1841      	adds	r1, r0, r1
 800972a:	6021      	str	r1, [r4, #0]
 800972c:	6063      	str	r3, [r4, #4]
 800972e:	6054      	str	r4, [r2, #4]
 8009730:	e7ca      	b.n	80096c8 <_free_r+0x24>
 8009732:	46c0      	nop			; (mov r8, r8)
 8009734:	20000708 	.word	0x20000708

08009738 <sbrk_aligned>:
 8009738:	b570      	push	{r4, r5, r6, lr}
 800973a:	4e0f      	ldr	r6, [pc, #60]	; (8009778 <sbrk_aligned+0x40>)
 800973c:	000d      	movs	r5, r1
 800973e:	6831      	ldr	r1, [r6, #0]
 8009740:	0004      	movs	r4, r0
 8009742:	2900      	cmp	r1, #0
 8009744:	d102      	bne.n	800974c <sbrk_aligned+0x14>
 8009746:	f000 f9f1 	bl	8009b2c <_sbrk_r>
 800974a:	6030      	str	r0, [r6, #0]
 800974c:	0029      	movs	r1, r5
 800974e:	0020      	movs	r0, r4
 8009750:	f000 f9ec 	bl	8009b2c <_sbrk_r>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d00a      	beq.n	800976e <sbrk_aligned+0x36>
 8009758:	2303      	movs	r3, #3
 800975a:	1cc5      	adds	r5, r0, #3
 800975c:	439d      	bics	r5, r3
 800975e:	42a8      	cmp	r0, r5
 8009760:	d007      	beq.n	8009772 <sbrk_aligned+0x3a>
 8009762:	1a29      	subs	r1, r5, r0
 8009764:	0020      	movs	r0, r4
 8009766:	f000 f9e1 	bl	8009b2c <_sbrk_r>
 800976a:	1c43      	adds	r3, r0, #1
 800976c:	d101      	bne.n	8009772 <sbrk_aligned+0x3a>
 800976e:	2501      	movs	r5, #1
 8009770:	426d      	negs	r5, r5
 8009772:	0028      	movs	r0, r5
 8009774:	bd70      	pop	{r4, r5, r6, pc}
 8009776:	46c0      	nop			; (mov r8, r8)
 8009778:	2000070c 	.word	0x2000070c

0800977c <_malloc_r>:
 800977c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800977e:	2203      	movs	r2, #3
 8009780:	1ccb      	adds	r3, r1, #3
 8009782:	4393      	bics	r3, r2
 8009784:	3308      	adds	r3, #8
 8009786:	0006      	movs	r6, r0
 8009788:	001f      	movs	r7, r3
 800978a:	2b0c      	cmp	r3, #12
 800978c:	d232      	bcs.n	80097f4 <_malloc_r+0x78>
 800978e:	270c      	movs	r7, #12
 8009790:	42b9      	cmp	r1, r7
 8009792:	d831      	bhi.n	80097f8 <_malloc_r+0x7c>
 8009794:	0030      	movs	r0, r6
 8009796:	f000 fa2f 	bl	8009bf8 <__malloc_lock>
 800979a:	4d32      	ldr	r5, [pc, #200]	; (8009864 <_malloc_r+0xe8>)
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	001c      	movs	r4, r3
 80097a0:	2c00      	cmp	r4, #0
 80097a2:	d12e      	bne.n	8009802 <_malloc_r+0x86>
 80097a4:	0039      	movs	r1, r7
 80097a6:	0030      	movs	r0, r6
 80097a8:	f7ff ffc6 	bl	8009738 <sbrk_aligned>
 80097ac:	0004      	movs	r4, r0
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d11e      	bne.n	80097f0 <_malloc_r+0x74>
 80097b2:	682c      	ldr	r4, [r5, #0]
 80097b4:	0025      	movs	r5, r4
 80097b6:	2d00      	cmp	r5, #0
 80097b8:	d14a      	bne.n	8009850 <_malloc_r+0xd4>
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	0029      	movs	r1, r5
 80097be:	18e3      	adds	r3, r4, r3
 80097c0:	0030      	movs	r0, r6
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	f000 f9b2 	bl	8009b2c <_sbrk_r>
 80097c8:	9b01      	ldr	r3, [sp, #4]
 80097ca:	4283      	cmp	r3, r0
 80097cc:	d143      	bne.n	8009856 <_malloc_r+0xda>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	3703      	adds	r7, #3
 80097d2:	1aff      	subs	r7, r7, r3
 80097d4:	2303      	movs	r3, #3
 80097d6:	439f      	bics	r7, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	2f0c      	cmp	r7, #12
 80097dc:	d200      	bcs.n	80097e0 <_malloc_r+0x64>
 80097de:	270c      	movs	r7, #12
 80097e0:	0039      	movs	r1, r7
 80097e2:	0030      	movs	r0, r6
 80097e4:	f7ff ffa8 	bl	8009738 <sbrk_aligned>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d034      	beq.n	8009856 <_malloc_r+0xda>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	19df      	adds	r7, r3, r7
 80097f0:	6027      	str	r7, [r4, #0]
 80097f2:	e013      	b.n	800981c <_malloc_r+0xa0>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dacb      	bge.n	8009790 <_malloc_r+0x14>
 80097f8:	230c      	movs	r3, #12
 80097fa:	2500      	movs	r5, #0
 80097fc:	6033      	str	r3, [r6, #0]
 80097fe:	0028      	movs	r0, r5
 8009800:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009802:	6822      	ldr	r2, [r4, #0]
 8009804:	1bd1      	subs	r1, r2, r7
 8009806:	d420      	bmi.n	800984a <_malloc_r+0xce>
 8009808:	290b      	cmp	r1, #11
 800980a:	d917      	bls.n	800983c <_malloc_r+0xc0>
 800980c:	19e2      	adds	r2, r4, r7
 800980e:	6027      	str	r7, [r4, #0]
 8009810:	42a3      	cmp	r3, r4
 8009812:	d111      	bne.n	8009838 <_malloc_r+0xbc>
 8009814:	602a      	str	r2, [r5, #0]
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	6011      	str	r1, [r2, #0]
 800981a:	6053      	str	r3, [r2, #4]
 800981c:	0030      	movs	r0, r6
 800981e:	0025      	movs	r5, r4
 8009820:	f000 f9f2 	bl	8009c08 <__malloc_unlock>
 8009824:	2207      	movs	r2, #7
 8009826:	350b      	adds	r5, #11
 8009828:	1d23      	adds	r3, r4, #4
 800982a:	4395      	bics	r5, r2
 800982c:	1aea      	subs	r2, r5, r3
 800982e:	429d      	cmp	r5, r3
 8009830:	d0e5      	beq.n	80097fe <_malloc_r+0x82>
 8009832:	1b5b      	subs	r3, r3, r5
 8009834:	50a3      	str	r3, [r4, r2]
 8009836:	e7e2      	b.n	80097fe <_malloc_r+0x82>
 8009838:	605a      	str	r2, [r3, #4]
 800983a:	e7ec      	b.n	8009816 <_malloc_r+0x9a>
 800983c:	6862      	ldr	r2, [r4, #4]
 800983e:	42a3      	cmp	r3, r4
 8009840:	d101      	bne.n	8009846 <_malloc_r+0xca>
 8009842:	602a      	str	r2, [r5, #0]
 8009844:	e7ea      	b.n	800981c <_malloc_r+0xa0>
 8009846:	605a      	str	r2, [r3, #4]
 8009848:	e7e8      	b.n	800981c <_malloc_r+0xa0>
 800984a:	0023      	movs	r3, r4
 800984c:	6864      	ldr	r4, [r4, #4]
 800984e:	e7a7      	b.n	80097a0 <_malloc_r+0x24>
 8009850:	002c      	movs	r4, r5
 8009852:	686d      	ldr	r5, [r5, #4]
 8009854:	e7af      	b.n	80097b6 <_malloc_r+0x3a>
 8009856:	230c      	movs	r3, #12
 8009858:	0030      	movs	r0, r6
 800985a:	6033      	str	r3, [r6, #0]
 800985c:	f000 f9d4 	bl	8009c08 <__malloc_unlock>
 8009860:	e7cd      	b.n	80097fe <_malloc_r+0x82>
 8009862:	46c0      	nop			; (mov r8, r8)
 8009864:	20000708 	.word	0x20000708

08009868 <__ssputs_r>:
 8009868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800986a:	688e      	ldr	r6, [r1, #8]
 800986c:	b085      	sub	sp, #20
 800986e:	0007      	movs	r7, r0
 8009870:	000c      	movs	r4, r1
 8009872:	9203      	str	r2, [sp, #12]
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	429e      	cmp	r6, r3
 8009878:	d83c      	bhi.n	80098f4 <__ssputs_r+0x8c>
 800987a:	2390      	movs	r3, #144	; 0x90
 800987c:	898a      	ldrh	r2, [r1, #12]
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	421a      	tst	r2, r3
 8009882:	d034      	beq.n	80098ee <__ssputs_r+0x86>
 8009884:	6909      	ldr	r1, [r1, #16]
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	6960      	ldr	r0, [r4, #20]
 800988a:	1a5b      	subs	r3, r3, r1
 800988c:	9302      	str	r3, [sp, #8]
 800988e:	2303      	movs	r3, #3
 8009890:	4343      	muls	r3, r0
 8009892:	0fdd      	lsrs	r5, r3, #31
 8009894:	18ed      	adds	r5, r5, r3
 8009896:	9b01      	ldr	r3, [sp, #4]
 8009898:	9802      	ldr	r0, [sp, #8]
 800989a:	3301      	adds	r3, #1
 800989c:	181b      	adds	r3, r3, r0
 800989e:	106d      	asrs	r5, r5, #1
 80098a0:	42ab      	cmp	r3, r5
 80098a2:	d900      	bls.n	80098a6 <__ssputs_r+0x3e>
 80098a4:	001d      	movs	r5, r3
 80098a6:	0553      	lsls	r3, r2, #21
 80098a8:	d532      	bpl.n	8009910 <__ssputs_r+0xa8>
 80098aa:	0029      	movs	r1, r5
 80098ac:	0038      	movs	r0, r7
 80098ae:	f7ff ff65 	bl	800977c <_malloc_r>
 80098b2:	1e06      	subs	r6, r0, #0
 80098b4:	d109      	bne.n	80098ca <__ssputs_r+0x62>
 80098b6:	230c      	movs	r3, #12
 80098b8:	603b      	str	r3, [r7, #0]
 80098ba:	2340      	movs	r3, #64	; 0x40
 80098bc:	2001      	movs	r0, #1
 80098be:	89a2      	ldrh	r2, [r4, #12]
 80098c0:	4240      	negs	r0, r0
 80098c2:	4313      	orrs	r3, r2
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	b005      	add	sp, #20
 80098c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ca:	9a02      	ldr	r2, [sp, #8]
 80098cc:	6921      	ldr	r1, [r4, #16]
 80098ce:	f7ff fb18 	bl	8008f02 <memcpy>
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	4a14      	ldr	r2, [pc, #80]	; (8009928 <__ssputs_r+0xc0>)
 80098d6:	401a      	ands	r2, r3
 80098d8:	2380      	movs	r3, #128	; 0x80
 80098da:	4313      	orrs	r3, r2
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	9b02      	ldr	r3, [sp, #8]
 80098e0:	6126      	str	r6, [r4, #16]
 80098e2:	18f6      	adds	r6, r6, r3
 80098e4:	6026      	str	r6, [r4, #0]
 80098e6:	6165      	str	r5, [r4, #20]
 80098e8:	9e01      	ldr	r6, [sp, #4]
 80098ea:	1aed      	subs	r5, r5, r3
 80098ec:	60a5      	str	r5, [r4, #8]
 80098ee:	9b01      	ldr	r3, [sp, #4]
 80098f0:	429e      	cmp	r6, r3
 80098f2:	d900      	bls.n	80098f6 <__ssputs_r+0x8e>
 80098f4:	9e01      	ldr	r6, [sp, #4]
 80098f6:	0032      	movs	r2, r6
 80098f8:	9903      	ldr	r1, [sp, #12]
 80098fa:	6820      	ldr	r0, [r4, #0]
 80098fc:	f000 f968 	bl	8009bd0 <memmove>
 8009900:	68a3      	ldr	r3, [r4, #8]
 8009902:	2000      	movs	r0, #0
 8009904:	1b9b      	subs	r3, r3, r6
 8009906:	60a3      	str	r3, [r4, #8]
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	199e      	adds	r6, r3, r6
 800990c:	6026      	str	r6, [r4, #0]
 800990e:	e7da      	b.n	80098c6 <__ssputs_r+0x5e>
 8009910:	002a      	movs	r2, r5
 8009912:	0038      	movs	r0, r7
 8009914:	f000 f980 	bl	8009c18 <_realloc_r>
 8009918:	1e06      	subs	r6, r0, #0
 800991a:	d1e0      	bne.n	80098de <__ssputs_r+0x76>
 800991c:	0038      	movs	r0, r7
 800991e:	6921      	ldr	r1, [r4, #16]
 8009920:	f7ff fec0 	bl	80096a4 <_free_r>
 8009924:	e7c7      	b.n	80098b6 <__ssputs_r+0x4e>
 8009926:	46c0      	nop			; (mov r8, r8)
 8009928:	fffffb7f 	.word	0xfffffb7f

0800992c <_svfiprintf_r>:
 800992c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992e:	b0a1      	sub	sp, #132	; 0x84
 8009930:	9003      	str	r0, [sp, #12]
 8009932:	001d      	movs	r5, r3
 8009934:	898b      	ldrh	r3, [r1, #12]
 8009936:	000f      	movs	r7, r1
 8009938:	0016      	movs	r6, r2
 800993a:	061b      	lsls	r3, r3, #24
 800993c:	d511      	bpl.n	8009962 <_svfiprintf_r+0x36>
 800993e:	690b      	ldr	r3, [r1, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10e      	bne.n	8009962 <_svfiprintf_r+0x36>
 8009944:	2140      	movs	r1, #64	; 0x40
 8009946:	f7ff ff19 	bl	800977c <_malloc_r>
 800994a:	6038      	str	r0, [r7, #0]
 800994c:	6138      	str	r0, [r7, #16]
 800994e:	2800      	cmp	r0, #0
 8009950:	d105      	bne.n	800995e <_svfiprintf_r+0x32>
 8009952:	230c      	movs	r3, #12
 8009954:	9a03      	ldr	r2, [sp, #12]
 8009956:	3801      	subs	r0, #1
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	b021      	add	sp, #132	; 0x84
 800995c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800995e:	2340      	movs	r3, #64	; 0x40
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	2300      	movs	r3, #0
 8009964:	ac08      	add	r4, sp, #32
 8009966:	6163      	str	r3, [r4, #20]
 8009968:	3320      	adds	r3, #32
 800996a:	7663      	strb	r3, [r4, #25]
 800996c:	3310      	adds	r3, #16
 800996e:	76a3      	strb	r3, [r4, #26]
 8009970:	9507      	str	r5, [sp, #28]
 8009972:	0035      	movs	r5, r6
 8009974:	782b      	ldrb	r3, [r5, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <_svfiprintf_r+0x52>
 800997a:	2b25      	cmp	r3, #37	; 0x25
 800997c:	d147      	bne.n	8009a0e <_svfiprintf_r+0xe2>
 800997e:	1bab      	subs	r3, r5, r6
 8009980:	9305      	str	r3, [sp, #20]
 8009982:	42b5      	cmp	r5, r6
 8009984:	d00c      	beq.n	80099a0 <_svfiprintf_r+0x74>
 8009986:	0032      	movs	r2, r6
 8009988:	0039      	movs	r1, r7
 800998a:	9803      	ldr	r0, [sp, #12]
 800998c:	f7ff ff6c 	bl	8009868 <__ssputs_r>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d100      	bne.n	8009996 <_svfiprintf_r+0x6a>
 8009994:	e0ae      	b.n	8009af4 <_svfiprintf_r+0x1c8>
 8009996:	6962      	ldr	r2, [r4, #20]
 8009998:	9b05      	ldr	r3, [sp, #20]
 800999a:	4694      	mov	ip, r2
 800999c:	4463      	add	r3, ip
 800999e:	6163      	str	r3, [r4, #20]
 80099a0:	782b      	ldrb	r3, [r5, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d100      	bne.n	80099a8 <_svfiprintf_r+0x7c>
 80099a6:	e0a5      	b.n	8009af4 <_svfiprintf_r+0x1c8>
 80099a8:	2201      	movs	r2, #1
 80099aa:	2300      	movs	r3, #0
 80099ac:	4252      	negs	r2, r2
 80099ae:	6062      	str	r2, [r4, #4]
 80099b0:	a904      	add	r1, sp, #16
 80099b2:	3254      	adds	r2, #84	; 0x54
 80099b4:	1852      	adds	r2, r2, r1
 80099b6:	1c6e      	adds	r6, r5, #1
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	60e3      	str	r3, [r4, #12]
 80099bc:	60a3      	str	r3, [r4, #8]
 80099be:	7013      	strb	r3, [r2, #0]
 80099c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80099c2:	2205      	movs	r2, #5
 80099c4:	7831      	ldrb	r1, [r6, #0]
 80099c6:	4854      	ldr	r0, [pc, #336]	; (8009b18 <_svfiprintf_r+0x1ec>)
 80099c8:	f7ff fa90 	bl	8008eec <memchr>
 80099cc:	1c75      	adds	r5, r6, #1
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d11f      	bne.n	8009a12 <_svfiprintf_r+0xe6>
 80099d2:	6822      	ldr	r2, [r4, #0]
 80099d4:	06d3      	lsls	r3, r2, #27
 80099d6:	d504      	bpl.n	80099e2 <_svfiprintf_r+0xb6>
 80099d8:	2353      	movs	r3, #83	; 0x53
 80099da:	a904      	add	r1, sp, #16
 80099dc:	185b      	adds	r3, r3, r1
 80099de:	2120      	movs	r1, #32
 80099e0:	7019      	strb	r1, [r3, #0]
 80099e2:	0713      	lsls	r3, r2, #28
 80099e4:	d504      	bpl.n	80099f0 <_svfiprintf_r+0xc4>
 80099e6:	2353      	movs	r3, #83	; 0x53
 80099e8:	a904      	add	r1, sp, #16
 80099ea:	185b      	adds	r3, r3, r1
 80099ec:	212b      	movs	r1, #43	; 0x2b
 80099ee:	7019      	strb	r1, [r3, #0]
 80099f0:	7833      	ldrb	r3, [r6, #0]
 80099f2:	2b2a      	cmp	r3, #42	; 0x2a
 80099f4:	d016      	beq.n	8009a24 <_svfiprintf_r+0xf8>
 80099f6:	0035      	movs	r5, r6
 80099f8:	2100      	movs	r1, #0
 80099fa:	200a      	movs	r0, #10
 80099fc:	68e3      	ldr	r3, [r4, #12]
 80099fe:	782a      	ldrb	r2, [r5, #0]
 8009a00:	1c6e      	adds	r6, r5, #1
 8009a02:	3a30      	subs	r2, #48	; 0x30
 8009a04:	2a09      	cmp	r2, #9
 8009a06:	d94e      	bls.n	8009aa6 <_svfiprintf_r+0x17a>
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	d111      	bne.n	8009a30 <_svfiprintf_r+0x104>
 8009a0c:	e017      	b.n	8009a3e <_svfiprintf_r+0x112>
 8009a0e:	3501      	adds	r5, #1
 8009a10:	e7b0      	b.n	8009974 <_svfiprintf_r+0x48>
 8009a12:	4b41      	ldr	r3, [pc, #260]	; (8009b18 <_svfiprintf_r+0x1ec>)
 8009a14:	6822      	ldr	r2, [r4, #0]
 8009a16:	1ac0      	subs	r0, r0, r3
 8009a18:	2301      	movs	r3, #1
 8009a1a:	4083      	lsls	r3, r0
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	002e      	movs	r6, r5
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	e7ce      	b.n	80099c2 <_svfiprintf_r+0x96>
 8009a24:	9b07      	ldr	r3, [sp, #28]
 8009a26:	1d19      	adds	r1, r3, #4
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	9107      	str	r1, [sp, #28]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	db01      	blt.n	8009a34 <_svfiprintf_r+0x108>
 8009a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a32:	e004      	b.n	8009a3e <_svfiprintf_r+0x112>
 8009a34:	425b      	negs	r3, r3
 8009a36:	60e3      	str	r3, [r4, #12]
 8009a38:	2302      	movs	r3, #2
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	782b      	ldrb	r3, [r5, #0]
 8009a40:	2b2e      	cmp	r3, #46	; 0x2e
 8009a42:	d10a      	bne.n	8009a5a <_svfiprintf_r+0x12e>
 8009a44:	786b      	ldrb	r3, [r5, #1]
 8009a46:	2b2a      	cmp	r3, #42	; 0x2a
 8009a48:	d135      	bne.n	8009ab6 <_svfiprintf_r+0x18a>
 8009a4a:	9b07      	ldr	r3, [sp, #28]
 8009a4c:	3502      	adds	r5, #2
 8009a4e:	1d1a      	adds	r2, r3, #4
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	9207      	str	r2, [sp, #28]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	db2b      	blt.n	8009ab0 <_svfiprintf_r+0x184>
 8009a58:	9309      	str	r3, [sp, #36]	; 0x24
 8009a5a:	4e30      	ldr	r6, [pc, #192]	; (8009b1c <_svfiprintf_r+0x1f0>)
 8009a5c:	2203      	movs	r2, #3
 8009a5e:	0030      	movs	r0, r6
 8009a60:	7829      	ldrb	r1, [r5, #0]
 8009a62:	f7ff fa43 	bl	8008eec <memchr>
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d006      	beq.n	8009a78 <_svfiprintf_r+0x14c>
 8009a6a:	2340      	movs	r3, #64	; 0x40
 8009a6c:	1b80      	subs	r0, r0, r6
 8009a6e:	4083      	lsls	r3, r0
 8009a70:	6822      	ldr	r2, [r4, #0]
 8009a72:	3501      	adds	r5, #1
 8009a74:	4313      	orrs	r3, r2
 8009a76:	6023      	str	r3, [r4, #0]
 8009a78:	7829      	ldrb	r1, [r5, #0]
 8009a7a:	2206      	movs	r2, #6
 8009a7c:	4828      	ldr	r0, [pc, #160]	; (8009b20 <_svfiprintf_r+0x1f4>)
 8009a7e:	1c6e      	adds	r6, r5, #1
 8009a80:	7621      	strb	r1, [r4, #24]
 8009a82:	f7ff fa33 	bl	8008eec <memchr>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d03c      	beq.n	8009b04 <_svfiprintf_r+0x1d8>
 8009a8a:	4b26      	ldr	r3, [pc, #152]	; (8009b24 <_svfiprintf_r+0x1f8>)
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d125      	bne.n	8009adc <_svfiprintf_r+0x1b0>
 8009a90:	2207      	movs	r2, #7
 8009a92:	9b07      	ldr	r3, [sp, #28]
 8009a94:	3307      	adds	r3, #7
 8009a96:	4393      	bics	r3, r2
 8009a98:	3308      	adds	r3, #8
 8009a9a:	9307      	str	r3, [sp, #28]
 8009a9c:	6963      	ldr	r3, [r4, #20]
 8009a9e:	9a04      	ldr	r2, [sp, #16]
 8009aa0:	189b      	adds	r3, r3, r2
 8009aa2:	6163      	str	r3, [r4, #20]
 8009aa4:	e765      	b.n	8009972 <_svfiprintf_r+0x46>
 8009aa6:	4343      	muls	r3, r0
 8009aa8:	0035      	movs	r5, r6
 8009aaa:	2101      	movs	r1, #1
 8009aac:	189b      	adds	r3, r3, r2
 8009aae:	e7a6      	b.n	80099fe <_svfiprintf_r+0xd2>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	425b      	negs	r3, r3
 8009ab4:	e7d0      	b.n	8009a58 <_svfiprintf_r+0x12c>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	200a      	movs	r0, #10
 8009aba:	001a      	movs	r2, r3
 8009abc:	3501      	adds	r5, #1
 8009abe:	6063      	str	r3, [r4, #4]
 8009ac0:	7829      	ldrb	r1, [r5, #0]
 8009ac2:	1c6e      	adds	r6, r5, #1
 8009ac4:	3930      	subs	r1, #48	; 0x30
 8009ac6:	2909      	cmp	r1, #9
 8009ac8:	d903      	bls.n	8009ad2 <_svfiprintf_r+0x1a6>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0c5      	beq.n	8009a5a <_svfiprintf_r+0x12e>
 8009ace:	9209      	str	r2, [sp, #36]	; 0x24
 8009ad0:	e7c3      	b.n	8009a5a <_svfiprintf_r+0x12e>
 8009ad2:	4342      	muls	r2, r0
 8009ad4:	0035      	movs	r5, r6
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	1852      	adds	r2, r2, r1
 8009ada:	e7f1      	b.n	8009ac0 <_svfiprintf_r+0x194>
 8009adc:	ab07      	add	r3, sp, #28
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	003a      	movs	r2, r7
 8009ae2:	0021      	movs	r1, r4
 8009ae4:	4b10      	ldr	r3, [pc, #64]	; (8009b28 <_svfiprintf_r+0x1fc>)
 8009ae6:	9803      	ldr	r0, [sp, #12]
 8009ae8:	f7fd ff68 	bl	80079bc <_printf_float>
 8009aec:	9004      	str	r0, [sp, #16]
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	3301      	adds	r3, #1
 8009af2:	d1d3      	bne.n	8009a9c <_svfiprintf_r+0x170>
 8009af4:	89bb      	ldrh	r3, [r7, #12]
 8009af6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009af8:	065b      	lsls	r3, r3, #25
 8009afa:	d400      	bmi.n	8009afe <_svfiprintf_r+0x1d2>
 8009afc:	e72d      	b.n	800995a <_svfiprintf_r+0x2e>
 8009afe:	2001      	movs	r0, #1
 8009b00:	4240      	negs	r0, r0
 8009b02:	e72a      	b.n	800995a <_svfiprintf_r+0x2e>
 8009b04:	ab07      	add	r3, sp, #28
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	003a      	movs	r2, r7
 8009b0a:	0021      	movs	r1, r4
 8009b0c:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <_svfiprintf_r+0x1fc>)
 8009b0e:	9803      	ldr	r0, [sp, #12]
 8009b10:	f7fe fa06 	bl	8007f20 <_printf_i>
 8009b14:	e7ea      	b.n	8009aec <_svfiprintf_r+0x1c0>
 8009b16:	46c0      	nop			; (mov r8, r8)
 8009b18:	0800ab1c 	.word	0x0800ab1c
 8009b1c:	0800ab22 	.word	0x0800ab22
 8009b20:	0800ab26 	.word	0x0800ab26
 8009b24:	080079bd 	.word	0x080079bd
 8009b28:	08009869 	.word	0x08009869

08009b2c <_sbrk_r>:
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	b570      	push	{r4, r5, r6, lr}
 8009b30:	4d06      	ldr	r5, [pc, #24]	; (8009b4c <_sbrk_r+0x20>)
 8009b32:	0004      	movs	r4, r0
 8009b34:	0008      	movs	r0, r1
 8009b36:	602b      	str	r3, [r5, #0]
 8009b38:	f7fa fbfa 	bl	8004330 <_sbrk>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d103      	bne.n	8009b48 <_sbrk_r+0x1c>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d000      	beq.n	8009b48 <_sbrk_r+0x1c>
 8009b46:	6023      	str	r3, [r4, #0]
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	20000710 	.word	0x20000710

08009b50 <__assert_func>:
 8009b50:	b530      	push	{r4, r5, lr}
 8009b52:	0014      	movs	r4, r2
 8009b54:	001a      	movs	r2, r3
 8009b56:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <__assert_func+0x2c>)
 8009b58:	0005      	movs	r5, r0
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	68d8      	ldr	r0, [r3, #12]
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <__assert_func+0x30>)
 8009b62:	2c00      	cmp	r4, #0
 8009b64:	d101      	bne.n	8009b6a <__assert_func+0x1a>
 8009b66:	4b07      	ldr	r3, [pc, #28]	; (8009b84 <__assert_func+0x34>)
 8009b68:	001c      	movs	r4, r3
 8009b6a:	9301      	str	r3, [sp, #4]
 8009b6c:	9100      	str	r1, [sp, #0]
 8009b6e:	002b      	movs	r3, r5
 8009b70:	4905      	ldr	r1, [pc, #20]	; (8009b88 <__assert_func+0x38>)
 8009b72:	9402      	str	r4, [sp, #8]
 8009b74:	f000 f80a 	bl	8009b8c <fiprintf>
 8009b78:	f000 faba 	bl	800a0f0 <abort>
 8009b7c:	2000000c 	.word	0x2000000c
 8009b80:	0800ab2d 	.word	0x0800ab2d
 8009b84:	0800ab68 	.word	0x0800ab68
 8009b88:	0800ab3a 	.word	0x0800ab3a

08009b8c <fiprintf>:
 8009b8c:	b40e      	push	{r1, r2, r3}
 8009b8e:	b503      	push	{r0, r1, lr}
 8009b90:	0001      	movs	r1, r0
 8009b92:	ab03      	add	r3, sp, #12
 8009b94:	4804      	ldr	r0, [pc, #16]	; (8009ba8 <fiprintf+0x1c>)
 8009b96:	cb04      	ldmia	r3!, {r2}
 8009b98:	6800      	ldr	r0, [r0, #0]
 8009b9a:	9301      	str	r3, [sp, #4]
 8009b9c:	f000 f892 	bl	8009cc4 <_vfiprintf_r>
 8009ba0:	b002      	add	sp, #8
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	b003      	add	sp, #12
 8009ba6:	4718      	bx	r3
 8009ba8:	2000000c 	.word	0x2000000c

08009bac <__ascii_mbtowc>:
 8009bac:	b082      	sub	sp, #8
 8009bae:	2900      	cmp	r1, #0
 8009bb0:	d100      	bne.n	8009bb4 <__ascii_mbtowc+0x8>
 8009bb2:	a901      	add	r1, sp, #4
 8009bb4:	1e10      	subs	r0, r2, #0
 8009bb6:	d006      	beq.n	8009bc6 <__ascii_mbtowc+0x1a>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d006      	beq.n	8009bca <__ascii_mbtowc+0x1e>
 8009bbc:	7813      	ldrb	r3, [r2, #0]
 8009bbe:	600b      	str	r3, [r1, #0]
 8009bc0:	7810      	ldrb	r0, [r2, #0]
 8009bc2:	1e43      	subs	r3, r0, #1
 8009bc4:	4198      	sbcs	r0, r3
 8009bc6:	b002      	add	sp, #8
 8009bc8:	4770      	bx	lr
 8009bca:	2002      	movs	r0, #2
 8009bcc:	4240      	negs	r0, r0
 8009bce:	e7fa      	b.n	8009bc6 <__ascii_mbtowc+0x1a>

08009bd0 <memmove>:
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	4288      	cmp	r0, r1
 8009bd4:	d902      	bls.n	8009bdc <memmove+0xc>
 8009bd6:	188b      	adds	r3, r1, r2
 8009bd8:	4298      	cmp	r0, r3
 8009bda:	d303      	bcc.n	8009be4 <memmove+0x14>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e007      	b.n	8009bf0 <memmove+0x20>
 8009be0:	5c8b      	ldrb	r3, [r1, r2]
 8009be2:	5483      	strb	r3, [r0, r2]
 8009be4:	3a01      	subs	r2, #1
 8009be6:	d2fb      	bcs.n	8009be0 <memmove+0x10>
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	5ccc      	ldrb	r4, [r1, r3]
 8009bec:	54c4      	strb	r4, [r0, r3]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d1fa      	bne.n	8009bea <memmove+0x1a>
 8009bf4:	e7f8      	b.n	8009be8 <memmove+0x18>
	...

08009bf8 <__malloc_lock>:
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	4802      	ldr	r0, [pc, #8]	; (8009c04 <__malloc_lock+0xc>)
 8009bfc:	f000 fc4f 	bl	800a49e <__retarget_lock_acquire_recursive>
 8009c00:	bd10      	pop	{r4, pc}
 8009c02:	46c0      	nop			; (mov r8, r8)
 8009c04:	20000714 	.word	0x20000714

08009c08 <__malloc_unlock>:
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	4802      	ldr	r0, [pc, #8]	; (8009c14 <__malloc_unlock+0xc>)
 8009c0c:	f000 fc48 	bl	800a4a0 <__retarget_lock_release_recursive>
 8009c10:	bd10      	pop	{r4, pc}
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	20000714 	.word	0x20000714

08009c18 <_realloc_r>:
 8009c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c1a:	0007      	movs	r7, r0
 8009c1c:	000e      	movs	r6, r1
 8009c1e:	0014      	movs	r4, r2
 8009c20:	2900      	cmp	r1, #0
 8009c22:	d105      	bne.n	8009c30 <_realloc_r+0x18>
 8009c24:	0011      	movs	r1, r2
 8009c26:	f7ff fda9 	bl	800977c <_malloc_r>
 8009c2a:	0005      	movs	r5, r0
 8009c2c:	0028      	movs	r0, r5
 8009c2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c30:	2a00      	cmp	r2, #0
 8009c32:	d103      	bne.n	8009c3c <_realloc_r+0x24>
 8009c34:	f7ff fd36 	bl	80096a4 <_free_r>
 8009c38:	0025      	movs	r5, r4
 8009c3a:	e7f7      	b.n	8009c2c <_realloc_r+0x14>
 8009c3c:	f000 fc9e 	bl	800a57c <_malloc_usable_size_r>
 8009c40:	9001      	str	r0, [sp, #4]
 8009c42:	4284      	cmp	r4, r0
 8009c44:	d803      	bhi.n	8009c4e <_realloc_r+0x36>
 8009c46:	0035      	movs	r5, r6
 8009c48:	0843      	lsrs	r3, r0, #1
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	d3ee      	bcc.n	8009c2c <_realloc_r+0x14>
 8009c4e:	0021      	movs	r1, r4
 8009c50:	0038      	movs	r0, r7
 8009c52:	f7ff fd93 	bl	800977c <_malloc_r>
 8009c56:	1e05      	subs	r5, r0, #0
 8009c58:	d0e8      	beq.n	8009c2c <_realloc_r+0x14>
 8009c5a:	9b01      	ldr	r3, [sp, #4]
 8009c5c:	0022      	movs	r2, r4
 8009c5e:	429c      	cmp	r4, r3
 8009c60:	d900      	bls.n	8009c64 <_realloc_r+0x4c>
 8009c62:	001a      	movs	r2, r3
 8009c64:	0031      	movs	r1, r6
 8009c66:	0028      	movs	r0, r5
 8009c68:	f7ff f94b 	bl	8008f02 <memcpy>
 8009c6c:	0031      	movs	r1, r6
 8009c6e:	0038      	movs	r0, r7
 8009c70:	f7ff fd18 	bl	80096a4 <_free_r>
 8009c74:	e7da      	b.n	8009c2c <_realloc_r+0x14>

08009c76 <__sfputc_r>:
 8009c76:	6893      	ldr	r3, [r2, #8]
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	6093      	str	r3, [r2, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	da04      	bge.n	8009c8c <__sfputc_r+0x16>
 8009c82:	6994      	ldr	r4, [r2, #24]
 8009c84:	42a3      	cmp	r3, r4
 8009c86:	db07      	blt.n	8009c98 <__sfputc_r+0x22>
 8009c88:	290a      	cmp	r1, #10
 8009c8a:	d005      	beq.n	8009c98 <__sfputc_r+0x22>
 8009c8c:	6813      	ldr	r3, [r2, #0]
 8009c8e:	1c58      	adds	r0, r3, #1
 8009c90:	6010      	str	r0, [r2, #0]
 8009c92:	7019      	strb	r1, [r3, #0]
 8009c94:	0008      	movs	r0, r1
 8009c96:	bd10      	pop	{r4, pc}
 8009c98:	f000 f94e 	bl	8009f38 <__swbuf_r>
 8009c9c:	0001      	movs	r1, r0
 8009c9e:	e7f9      	b.n	8009c94 <__sfputc_r+0x1e>

08009ca0 <__sfputs_r>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	0006      	movs	r6, r0
 8009ca4:	000f      	movs	r7, r1
 8009ca6:	0014      	movs	r4, r2
 8009ca8:	18d5      	adds	r5, r2, r3
 8009caa:	42ac      	cmp	r4, r5
 8009cac:	d101      	bne.n	8009cb2 <__sfputs_r+0x12>
 8009cae:	2000      	movs	r0, #0
 8009cb0:	e007      	b.n	8009cc2 <__sfputs_r+0x22>
 8009cb2:	7821      	ldrb	r1, [r4, #0]
 8009cb4:	003a      	movs	r2, r7
 8009cb6:	0030      	movs	r0, r6
 8009cb8:	f7ff ffdd 	bl	8009c76 <__sfputc_r>
 8009cbc:	3401      	adds	r4, #1
 8009cbe:	1c43      	adds	r3, r0, #1
 8009cc0:	d1f3      	bne.n	8009caa <__sfputs_r+0xa>
 8009cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cc4 <_vfiprintf_r>:
 8009cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc6:	b0a1      	sub	sp, #132	; 0x84
 8009cc8:	0006      	movs	r6, r0
 8009cca:	000c      	movs	r4, r1
 8009ccc:	001f      	movs	r7, r3
 8009cce:	9203      	str	r2, [sp, #12]
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d004      	beq.n	8009cde <_vfiprintf_r+0x1a>
 8009cd4:	6983      	ldr	r3, [r0, #24]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <_vfiprintf_r+0x1a>
 8009cda:	f000 fb3f 	bl	800a35c <__sinit>
 8009cde:	4b8e      	ldr	r3, [pc, #568]	; (8009f18 <_vfiprintf_r+0x254>)
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	d11c      	bne.n	8009d1e <_vfiprintf_r+0x5a>
 8009ce4:	6874      	ldr	r4, [r6, #4]
 8009ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ce8:	07db      	lsls	r3, r3, #31
 8009cea:	d405      	bmi.n	8009cf8 <_vfiprintf_r+0x34>
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	059b      	lsls	r3, r3, #22
 8009cf0:	d402      	bmi.n	8009cf8 <_vfiprintf_r+0x34>
 8009cf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cf4:	f000 fbd3 	bl	800a49e <__retarget_lock_acquire_recursive>
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	071b      	lsls	r3, r3, #28
 8009cfc:	d502      	bpl.n	8009d04 <_vfiprintf_r+0x40>
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d11d      	bne.n	8009d40 <_vfiprintf_r+0x7c>
 8009d04:	0021      	movs	r1, r4
 8009d06:	0030      	movs	r0, r6
 8009d08:	f000 f97a 	bl	800a000 <__swsetup_r>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d017      	beq.n	8009d40 <_vfiprintf_r+0x7c>
 8009d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d12:	07db      	lsls	r3, r3, #31
 8009d14:	d50d      	bpl.n	8009d32 <_vfiprintf_r+0x6e>
 8009d16:	2001      	movs	r0, #1
 8009d18:	4240      	negs	r0, r0
 8009d1a:	b021      	add	sp, #132	; 0x84
 8009d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d1e:	4b7f      	ldr	r3, [pc, #508]	; (8009f1c <_vfiprintf_r+0x258>)
 8009d20:	429c      	cmp	r4, r3
 8009d22:	d101      	bne.n	8009d28 <_vfiprintf_r+0x64>
 8009d24:	68b4      	ldr	r4, [r6, #8]
 8009d26:	e7de      	b.n	8009ce6 <_vfiprintf_r+0x22>
 8009d28:	4b7d      	ldr	r3, [pc, #500]	; (8009f20 <_vfiprintf_r+0x25c>)
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d1db      	bne.n	8009ce6 <_vfiprintf_r+0x22>
 8009d2e:	68f4      	ldr	r4, [r6, #12]
 8009d30:	e7d9      	b.n	8009ce6 <_vfiprintf_r+0x22>
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	059b      	lsls	r3, r3, #22
 8009d36:	d4ee      	bmi.n	8009d16 <_vfiprintf_r+0x52>
 8009d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d3a:	f000 fbb1 	bl	800a4a0 <__retarget_lock_release_recursive>
 8009d3e:	e7ea      	b.n	8009d16 <_vfiprintf_r+0x52>
 8009d40:	2300      	movs	r3, #0
 8009d42:	ad08      	add	r5, sp, #32
 8009d44:	616b      	str	r3, [r5, #20]
 8009d46:	3320      	adds	r3, #32
 8009d48:	766b      	strb	r3, [r5, #25]
 8009d4a:	3310      	adds	r3, #16
 8009d4c:	76ab      	strb	r3, [r5, #26]
 8009d4e:	9707      	str	r7, [sp, #28]
 8009d50:	9f03      	ldr	r7, [sp, #12]
 8009d52:	783b      	ldrb	r3, [r7, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <_vfiprintf_r+0x98>
 8009d58:	2b25      	cmp	r3, #37	; 0x25
 8009d5a:	d14e      	bne.n	8009dfa <_vfiprintf_r+0x136>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	1afb      	subs	r3, r7, r3
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	9b03      	ldr	r3, [sp, #12]
 8009d64:	429f      	cmp	r7, r3
 8009d66:	d00d      	beq.n	8009d84 <_vfiprintf_r+0xc0>
 8009d68:	9b05      	ldr	r3, [sp, #20]
 8009d6a:	0021      	movs	r1, r4
 8009d6c:	0030      	movs	r0, r6
 8009d6e:	9a03      	ldr	r2, [sp, #12]
 8009d70:	f7ff ff96 	bl	8009ca0 <__sfputs_r>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d100      	bne.n	8009d7a <_vfiprintf_r+0xb6>
 8009d78:	e0b5      	b.n	8009ee6 <_vfiprintf_r+0x222>
 8009d7a:	696a      	ldr	r2, [r5, #20]
 8009d7c:	9b05      	ldr	r3, [sp, #20]
 8009d7e:	4694      	mov	ip, r2
 8009d80:	4463      	add	r3, ip
 8009d82:	616b      	str	r3, [r5, #20]
 8009d84:	783b      	ldrb	r3, [r7, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d100      	bne.n	8009d8c <_vfiprintf_r+0xc8>
 8009d8a:	e0ac      	b.n	8009ee6 <_vfiprintf_r+0x222>
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	1c7b      	adds	r3, r7, #1
 8009d90:	9303      	str	r3, [sp, #12]
 8009d92:	2300      	movs	r3, #0
 8009d94:	4252      	negs	r2, r2
 8009d96:	606a      	str	r2, [r5, #4]
 8009d98:	a904      	add	r1, sp, #16
 8009d9a:	3254      	adds	r2, #84	; 0x54
 8009d9c:	1852      	adds	r2, r2, r1
 8009d9e:	602b      	str	r3, [r5, #0]
 8009da0:	60eb      	str	r3, [r5, #12]
 8009da2:	60ab      	str	r3, [r5, #8]
 8009da4:	7013      	strb	r3, [r2, #0]
 8009da6:	65ab      	str	r3, [r5, #88]	; 0x58
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	2205      	movs	r2, #5
 8009dac:	7819      	ldrb	r1, [r3, #0]
 8009dae:	485d      	ldr	r0, [pc, #372]	; (8009f24 <_vfiprintf_r+0x260>)
 8009db0:	f7ff f89c 	bl	8008eec <memchr>
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	1c5f      	adds	r7, r3, #1
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d120      	bne.n	8009dfe <_vfiprintf_r+0x13a>
 8009dbc:	682a      	ldr	r2, [r5, #0]
 8009dbe:	06d3      	lsls	r3, r2, #27
 8009dc0:	d504      	bpl.n	8009dcc <_vfiprintf_r+0x108>
 8009dc2:	2353      	movs	r3, #83	; 0x53
 8009dc4:	a904      	add	r1, sp, #16
 8009dc6:	185b      	adds	r3, r3, r1
 8009dc8:	2120      	movs	r1, #32
 8009dca:	7019      	strb	r1, [r3, #0]
 8009dcc:	0713      	lsls	r3, r2, #28
 8009dce:	d504      	bpl.n	8009dda <_vfiprintf_r+0x116>
 8009dd0:	2353      	movs	r3, #83	; 0x53
 8009dd2:	a904      	add	r1, sp, #16
 8009dd4:	185b      	adds	r3, r3, r1
 8009dd6:	212b      	movs	r1, #43	; 0x2b
 8009dd8:	7019      	strb	r1, [r3, #0]
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b2a      	cmp	r3, #42	; 0x2a
 8009de0:	d016      	beq.n	8009e10 <_vfiprintf_r+0x14c>
 8009de2:	2100      	movs	r1, #0
 8009de4:	68eb      	ldr	r3, [r5, #12]
 8009de6:	9f03      	ldr	r7, [sp, #12]
 8009de8:	783a      	ldrb	r2, [r7, #0]
 8009dea:	1c78      	adds	r0, r7, #1
 8009dec:	3a30      	subs	r2, #48	; 0x30
 8009dee:	4684      	mov	ip, r0
 8009df0:	2a09      	cmp	r2, #9
 8009df2:	d94f      	bls.n	8009e94 <_vfiprintf_r+0x1d0>
 8009df4:	2900      	cmp	r1, #0
 8009df6:	d111      	bne.n	8009e1c <_vfiprintf_r+0x158>
 8009df8:	e017      	b.n	8009e2a <_vfiprintf_r+0x166>
 8009dfa:	3701      	adds	r7, #1
 8009dfc:	e7a9      	b.n	8009d52 <_vfiprintf_r+0x8e>
 8009dfe:	4b49      	ldr	r3, [pc, #292]	; (8009f24 <_vfiprintf_r+0x260>)
 8009e00:	682a      	ldr	r2, [r5, #0]
 8009e02:	1ac0      	subs	r0, r0, r3
 8009e04:	2301      	movs	r3, #1
 8009e06:	4083      	lsls	r3, r0
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	602b      	str	r3, [r5, #0]
 8009e0c:	9703      	str	r7, [sp, #12]
 8009e0e:	e7cb      	b.n	8009da8 <_vfiprintf_r+0xe4>
 8009e10:	9b07      	ldr	r3, [sp, #28]
 8009e12:	1d19      	adds	r1, r3, #4
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	9107      	str	r1, [sp, #28]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	db01      	blt.n	8009e20 <_vfiprintf_r+0x15c>
 8009e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e1e:	e004      	b.n	8009e2a <_vfiprintf_r+0x166>
 8009e20:	425b      	negs	r3, r3
 8009e22:	60eb      	str	r3, [r5, #12]
 8009e24:	2302      	movs	r3, #2
 8009e26:	4313      	orrs	r3, r2
 8009e28:	602b      	str	r3, [r5, #0]
 8009e2a:	783b      	ldrb	r3, [r7, #0]
 8009e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e2e:	d10a      	bne.n	8009e46 <_vfiprintf_r+0x182>
 8009e30:	787b      	ldrb	r3, [r7, #1]
 8009e32:	2b2a      	cmp	r3, #42	; 0x2a
 8009e34:	d137      	bne.n	8009ea6 <_vfiprintf_r+0x1e2>
 8009e36:	9b07      	ldr	r3, [sp, #28]
 8009e38:	3702      	adds	r7, #2
 8009e3a:	1d1a      	adds	r2, r3, #4
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	9207      	str	r2, [sp, #28]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	db2d      	blt.n	8009ea0 <_vfiprintf_r+0x1dc>
 8009e44:	9309      	str	r3, [sp, #36]	; 0x24
 8009e46:	2203      	movs	r2, #3
 8009e48:	7839      	ldrb	r1, [r7, #0]
 8009e4a:	4837      	ldr	r0, [pc, #220]	; (8009f28 <_vfiprintf_r+0x264>)
 8009e4c:	f7ff f84e 	bl	8008eec <memchr>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d007      	beq.n	8009e64 <_vfiprintf_r+0x1a0>
 8009e54:	4b34      	ldr	r3, [pc, #208]	; (8009f28 <_vfiprintf_r+0x264>)
 8009e56:	682a      	ldr	r2, [r5, #0]
 8009e58:	1ac0      	subs	r0, r0, r3
 8009e5a:	2340      	movs	r3, #64	; 0x40
 8009e5c:	4083      	lsls	r3, r0
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	3701      	adds	r7, #1
 8009e62:	602b      	str	r3, [r5, #0]
 8009e64:	7839      	ldrb	r1, [r7, #0]
 8009e66:	1c7b      	adds	r3, r7, #1
 8009e68:	2206      	movs	r2, #6
 8009e6a:	4830      	ldr	r0, [pc, #192]	; (8009f2c <_vfiprintf_r+0x268>)
 8009e6c:	9303      	str	r3, [sp, #12]
 8009e6e:	7629      	strb	r1, [r5, #24]
 8009e70:	f7ff f83c 	bl	8008eec <memchr>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d045      	beq.n	8009f04 <_vfiprintf_r+0x240>
 8009e78:	4b2d      	ldr	r3, [pc, #180]	; (8009f30 <_vfiprintf_r+0x26c>)
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d127      	bne.n	8009ece <_vfiprintf_r+0x20a>
 8009e7e:	2207      	movs	r2, #7
 8009e80:	9b07      	ldr	r3, [sp, #28]
 8009e82:	3307      	adds	r3, #7
 8009e84:	4393      	bics	r3, r2
 8009e86:	3308      	adds	r3, #8
 8009e88:	9307      	str	r3, [sp, #28]
 8009e8a:	696b      	ldr	r3, [r5, #20]
 8009e8c:	9a04      	ldr	r2, [sp, #16]
 8009e8e:	189b      	adds	r3, r3, r2
 8009e90:	616b      	str	r3, [r5, #20]
 8009e92:	e75d      	b.n	8009d50 <_vfiprintf_r+0x8c>
 8009e94:	210a      	movs	r1, #10
 8009e96:	434b      	muls	r3, r1
 8009e98:	4667      	mov	r7, ip
 8009e9a:	189b      	adds	r3, r3, r2
 8009e9c:	3909      	subs	r1, #9
 8009e9e:	e7a3      	b.n	8009de8 <_vfiprintf_r+0x124>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	425b      	negs	r3, r3
 8009ea4:	e7ce      	b.n	8009e44 <_vfiprintf_r+0x180>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	001a      	movs	r2, r3
 8009eaa:	3701      	adds	r7, #1
 8009eac:	606b      	str	r3, [r5, #4]
 8009eae:	7839      	ldrb	r1, [r7, #0]
 8009eb0:	1c78      	adds	r0, r7, #1
 8009eb2:	3930      	subs	r1, #48	; 0x30
 8009eb4:	4684      	mov	ip, r0
 8009eb6:	2909      	cmp	r1, #9
 8009eb8:	d903      	bls.n	8009ec2 <_vfiprintf_r+0x1fe>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0c3      	beq.n	8009e46 <_vfiprintf_r+0x182>
 8009ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8009ec0:	e7c1      	b.n	8009e46 <_vfiprintf_r+0x182>
 8009ec2:	230a      	movs	r3, #10
 8009ec4:	435a      	muls	r2, r3
 8009ec6:	4667      	mov	r7, ip
 8009ec8:	1852      	adds	r2, r2, r1
 8009eca:	3b09      	subs	r3, #9
 8009ecc:	e7ef      	b.n	8009eae <_vfiprintf_r+0x1ea>
 8009ece:	ab07      	add	r3, sp, #28
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	0022      	movs	r2, r4
 8009ed4:	0029      	movs	r1, r5
 8009ed6:	0030      	movs	r0, r6
 8009ed8:	4b16      	ldr	r3, [pc, #88]	; (8009f34 <_vfiprintf_r+0x270>)
 8009eda:	f7fd fd6f 	bl	80079bc <_printf_float>
 8009ede:	9004      	str	r0, [sp, #16]
 8009ee0:	9b04      	ldr	r3, [sp, #16]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	d1d1      	bne.n	8009e8a <_vfiprintf_r+0x1c6>
 8009ee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ee8:	07db      	lsls	r3, r3, #31
 8009eea:	d405      	bmi.n	8009ef8 <_vfiprintf_r+0x234>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	059b      	lsls	r3, r3, #22
 8009ef0:	d402      	bmi.n	8009ef8 <_vfiprintf_r+0x234>
 8009ef2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ef4:	f000 fad4 	bl	800a4a0 <__retarget_lock_release_recursive>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	065b      	lsls	r3, r3, #25
 8009efc:	d500      	bpl.n	8009f00 <_vfiprintf_r+0x23c>
 8009efe:	e70a      	b.n	8009d16 <_vfiprintf_r+0x52>
 8009f00:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f02:	e70a      	b.n	8009d1a <_vfiprintf_r+0x56>
 8009f04:	ab07      	add	r3, sp, #28
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	0022      	movs	r2, r4
 8009f0a:	0029      	movs	r1, r5
 8009f0c:	0030      	movs	r0, r6
 8009f0e:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <_vfiprintf_r+0x270>)
 8009f10:	f7fe f806 	bl	8007f20 <_printf_i>
 8009f14:	e7e3      	b.n	8009ede <_vfiprintf_r+0x21a>
 8009f16:	46c0      	nop			; (mov r8, r8)
 8009f18:	0800ac94 	.word	0x0800ac94
 8009f1c:	0800acb4 	.word	0x0800acb4
 8009f20:	0800ac74 	.word	0x0800ac74
 8009f24:	0800ab1c 	.word	0x0800ab1c
 8009f28:	0800ab22 	.word	0x0800ab22
 8009f2c:	0800ab26 	.word	0x0800ab26
 8009f30:	080079bd 	.word	0x080079bd
 8009f34:	08009ca1 	.word	0x08009ca1

08009f38 <__swbuf_r>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	0005      	movs	r5, r0
 8009f3c:	000e      	movs	r6, r1
 8009f3e:	0014      	movs	r4, r2
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d004      	beq.n	8009f4e <__swbuf_r+0x16>
 8009f44:	6983      	ldr	r3, [r0, #24]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <__swbuf_r+0x16>
 8009f4a:	f000 fa07 	bl	800a35c <__sinit>
 8009f4e:	4b22      	ldr	r3, [pc, #136]	; (8009fd8 <__swbuf_r+0xa0>)
 8009f50:	429c      	cmp	r4, r3
 8009f52:	d12e      	bne.n	8009fb2 <__swbuf_r+0x7a>
 8009f54:	686c      	ldr	r4, [r5, #4]
 8009f56:	69a3      	ldr	r3, [r4, #24]
 8009f58:	60a3      	str	r3, [r4, #8]
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	071b      	lsls	r3, r3, #28
 8009f5e:	d532      	bpl.n	8009fc6 <__swbuf_r+0x8e>
 8009f60:	6923      	ldr	r3, [r4, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d02f      	beq.n	8009fc6 <__swbuf_r+0x8e>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	6922      	ldr	r2, [r4, #16]
 8009f6a:	b2f7      	uxtb	r7, r6
 8009f6c:	1a98      	subs	r0, r3, r2
 8009f6e:	6963      	ldr	r3, [r4, #20]
 8009f70:	b2f6      	uxtb	r6, r6
 8009f72:	4283      	cmp	r3, r0
 8009f74:	dc05      	bgt.n	8009f82 <__swbuf_r+0x4a>
 8009f76:	0021      	movs	r1, r4
 8009f78:	0028      	movs	r0, r5
 8009f7a:	f000 f94d 	bl	800a218 <_fflush_r>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d127      	bne.n	8009fd2 <__swbuf_r+0x9a>
 8009f82:	68a3      	ldr	r3, [r4, #8]
 8009f84:	3001      	adds	r0, #1
 8009f86:	3b01      	subs	r3, #1
 8009f88:	60a3      	str	r3, [r4, #8]
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	1c5a      	adds	r2, r3, #1
 8009f8e:	6022      	str	r2, [r4, #0]
 8009f90:	701f      	strb	r7, [r3, #0]
 8009f92:	6963      	ldr	r3, [r4, #20]
 8009f94:	4283      	cmp	r3, r0
 8009f96:	d004      	beq.n	8009fa2 <__swbuf_r+0x6a>
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	07db      	lsls	r3, r3, #31
 8009f9c:	d507      	bpl.n	8009fae <__swbuf_r+0x76>
 8009f9e:	2e0a      	cmp	r6, #10
 8009fa0:	d105      	bne.n	8009fae <__swbuf_r+0x76>
 8009fa2:	0021      	movs	r1, r4
 8009fa4:	0028      	movs	r0, r5
 8009fa6:	f000 f937 	bl	800a218 <_fflush_r>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d111      	bne.n	8009fd2 <__swbuf_r+0x9a>
 8009fae:	0030      	movs	r0, r6
 8009fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb2:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <__swbuf_r+0xa4>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	d101      	bne.n	8009fbc <__swbuf_r+0x84>
 8009fb8:	68ac      	ldr	r4, [r5, #8]
 8009fba:	e7cc      	b.n	8009f56 <__swbuf_r+0x1e>
 8009fbc:	4b08      	ldr	r3, [pc, #32]	; (8009fe0 <__swbuf_r+0xa8>)
 8009fbe:	429c      	cmp	r4, r3
 8009fc0:	d1c9      	bne.n	8009f56 <__swbuf_r+0x1e>
 8009fc2:	68ec      	ldr	r4, [r5, #12]
 8009fc4:	e7c7      	b.n	8009f56 <__swbuf_r+0x1e>
 8009fc6:	0021      	movs	r1, r4
 8009fc8:	0028      	movs	r0, r5
 8009fca:	f000 f819 	bl	800a000 <__swsetup_r>
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d0c9      	beq.n	8009f66 <__swbuf_r+0x2e>
 8009fd2:	2601      	movs	r6, #1
 8009fd4:	4276      	negs	r6, r6
 8009fd6:	e7ea      	b.n	8009fae <__swbuf_r+0x76>
 8009fd8:	0800ac94 	.word	0x0800ac94
 8009fdc:	0800acb4 	.word	0x0800acb4
 8009fe0:	0800ac74 	.word	0x0800ac74

08009fe4 <__ascii_wctomb>:
 8009fe4:	0003      	movs	r3, r0
 8009fe6:	1e08      	subs	r0, r1, #0
 8009fe8:	d005      	beq.n	8009ff6 <__ascii_wctomb+0x12>
 8009fea:	2aff      	cmp	r2, #255	; 0xff
 8009fec:	d904      	bls.n	8009ff8 <__ascii_wctomb+0x14>
 8009fee:	228a      	movs	r2, #138	; 0x8a
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	4240      	negs	r0, r0
 8009ff6:	4770      	bx	lr
 8009ff8:	2001      	movs	r0, #1
 8009ffa:	700a      	strb	r2, [r1, #0]
 8009ffc:	e7fb      	b.n	8009ff6 <__ascii_wctomb+0x12>
	...

0800a000 <__swsetup_r>:
 800a000:	4b37      	ldr	r3, [pc, #220]	; (800a0e0 <__swsetup_r+0xe0>)
 800a002:	b570      	push	{r4, r5, r6, lr}
 800a004:	681d      	ldr	r5, [r3, #0]
 800a006:	0006      	movs	r6, r0
 800a008:	000c      	movs	r4, r1
 800a00a:	2d00      	cmp	r5, #0
 800a00c:	d005      	beq.n	800a01a <__swsetup_r+0x1a>
 800a00e:	69ab      	ldr	r3, [r5, #24]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <__swsetup_r+0x1a>
 800a014:	0028      	movs	r0, r5
 800a016:	f000 f9a1 	bl	800a35c <__sinit>
 800a01a:	4b32      	ldr	r3, [pc, #200]	; (800a0e4 <__swsetup_r+0xe4>)
 800a01c:	429c      	cmp	r4, r3
 800a01e:	d10f      	bne.n	800a040 <__swsetup_r+0x40>
 800a020:	686c      	ldr	r4, [r5, #4]
 800a022:	230c      	movs	r3, #12
 800a024:	5ee2      	ldrsh	r2, [r4, r3]
 800a026:	b293      	uxth	r3, r2
 800a028:	0711      	lsls	r1, r2, #28
 800a02a:	d42d      	bmi.n	800a088 <__swsetup_r+0x88>
 800a02c:	06d9      	lsls	r1, r3, #27
 800a02e:	d411      	bmi.n	800a054 <__swsetup_r+0x54>
 800a030:	2309      	movs	r3, #9
 800a032:	2001      	movs	r0, #1
 800a034:	6033      	str	r3, [r6, #0]
 800a036:	3337      	adds	r3, #55	; 0x37
 800a038:	4313      	orrs	r3, r2
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	4240      	negs	r0, r0
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	4b29      	ldr	r3, [pc, #164]	; (800a0e8 <__swsetup_r+0xe8>)
 800a042:	429c      	cmp	r4, r3
 800a044:	d101      	bne.n	800a04a <__swsetup_r+0x4a>
 800a046:	68ac      	ldr	r4, [r5, #8]
 800a048:	e7eb      	b.n	800a022 <__swsetup_r+0x22>
 800a04a:	4b28      	ldr	r3, [pc, #160]	; (800a0ec <__swsetup_r+0xec>)
 800a04c:	429c      	cmp	r4, r3
 800a04e:	d1e8      	bne.n	800a022 <__swsetup_r+0x22>
 800a050:	68ec      	ldr	r4, [r5, #12]
 800a052:	e7e6      	b.n	800a022 <__swsetup_r+0x22>
 800a054:	075b      	lsls	r3, r3, #29
 800a056:	d513      	bpl.n	800a080 <__swsetup_r+0x80>
 800a058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a05a:	2900      	cmp	r1, #0
 800a05c:	d008      	beq.n	800a070 <__swsetup_r+0x70>
 800a05e:	0023      	movs	r3, r4
 800a060:	3344      	adds	r3, #68	; 0x44
 800a062:	4299      	cmp	r1, r3
 800a064:	d002      	beq.n	800a06c <__swsetup_r+0x6c>
 800a066:	0030      	movs	r0, r6
 800a068:	f7ff fb1c 	bl	80096a4 <_free_r>
 800a06c:	2300      	movs	r3, #0
 800a06e:	6363      	str	r3, [r4, #52]	; 0x34
 800a070:	2224      	movs	r2, #36	; 0x24
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	4393      	bics	r3, r2
 800a076:	81a3      	strh	r3, [r4, #12]
 800a078:	2300      	movs	r3, #0
 800a07a:	6063      	str	r3, [r4, #4]
 800a07c:	6923      	ldr	r3, [r4, #16]
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	2308      	movs	r3, #8
 800a082:	89a2      	ldrh	r2, [r4, #12]
 800a084:	4313      	orrs	r3, r2
 800a086:	81a3      	strh	r3, [r4, #12]
 800a088:	6923      	ldr	r3, [r4, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10b      	bne.n	800a0a6 <__swsetup_r+0xa6>
 800a08e:	21a0      	movs	r1, #160	; 0xa0
 800a090:	2280      	movs	r2, #128	; 0x80
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	0089      	lsls	r1, r1, #2
 800a096:	0092      	lsls	r2, r2, #2
 800a098:	400b      	ands	r3, r1
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d003      	beq.n	800a0a6 <__swsetup_r+0xa6>
 800a09e:	0021      	movs	r1, r4
 800a0a0:	0030      	movs	r0, r6
 800a0a2:	f000 fa27 	bl	800a4f4 <__smakebuf_r>
 800a0a6:	220c      	movs	r2, #12
 800a0a8:	5ea3      	ldrsh	r3, [r4, r2]
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	001a      	movs	r2, r3
 800a0ae:	b299      	uxth	r1, r3
 800a0b0:	4002      	ands	r2, r0
 800a0b2:	4203      	tst	r3, r0
 800a0b4:	d00f      	beq.n	800a0d6 <__swsetup_r+0xd6>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	60a2      	str	r2, [r4, #8]
 800a0ba:	6962      	ldr	r2, [r4, #20]
 800a0bc:	4252      	negs	r2, r2
 800a0be:	61a2      	str	r2, [r4, #24]
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	6922      	ldr	r2, [r4, #16]
 800a0c4:	4282      	cmp	r2, r0
 800a0c6:	d1ba      	bne.n	800a03e <__swsetup_r+0x3e>
 800a0c8:	060a      	lsls	r2, r1, #24
 800a0ca:	d5b8      	bpl.n	800a03e <__swsetup_r+0x3e>
 800a0cc:	2240      	movs	r2, #64	; 0x40
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	81a3      	strh	r3, [r4, #12]
 800a0d2:	3801      	subs	r0, #1
 800a0d4:	e7b3      	b.n	800a03e <__swsetup_r+0x3e>
 800a0d6:	0788      	lsls	r0, r1, #30
 800a0d8:	d400      	bmi.n	800a0dc <__swsetup_r+0xdc>
 800a0da:	6962      	ldr	r2, [r4, #20]
 800a0dc:	60a2      	str	r2, [r4, #8]
 800a0de:	e7ef      	b.n	800a0c0 <__swsetup_r+0xc0>
 800a0e0:	2000000c 	.word	0x2000000c
 800a0e4:	0800ac94 	.word	0x0800ac94
 800a0e8:	0800acb4 	.word	0x0800acb4
 800a0ec:	0800ac74 	.word	0x0800ac74

0800a0f0 <abort>:
 800a0f0:	2006      	movs	r0, #6
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	f000 fa74 	bl	800a5e0 <raise>
 800a0f8:	2001      	movs	r0, #1
 800a0fa:	f7fa f8a7 	bl	800424c <_exit>
	...

0800a100 <__sflush_r>:
 800a100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a102:	898b      	ldrh	r3, [r1, #12]
 800a104:	0005      	movs	r5, r0
 800a106:	000c      	movs	r4, r1
 800a108:	071a      	lsls	r2, r3, #28
 800a10a:	d45f      	bmi.n	800a1cc <__sflush_r+0xcc>
 800a10c:	684a      	ldr	r2, [r1, #4]
 800a10e:	2a00      	cmp	r2, #0
 800a110:	dc04      	bgt.n	800a11c <__sflush_r+0x1c>
 800a112:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a114:	2a00      	cmp	r2, #0
 800a116:	dc01      	bgt.n	800a11c <__sflush_r+0x1c>
 800a118:	2000      	movs	r0, #0
 800a11a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a11c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a11e:	2f00      	cmp	r7, #0
 800a120:	d0fa      	beq.n	800a118 <__sflush_r+0x18>
 800a122:	2200      	movs	r2, #0
 800a124:	2180      	movs	r1, #128	; 0x80
 800a126:	682e      	ldr	r6, [r5, #0]
 800a128:	602a      	str	r2, [r5, #0]
 800a12a:	001a      	movs	r2, r3
 800a12c:	0149      	lsls	r1, r1, #5
 800a12e:	400a      	ands	r2, r1
 800a130:	420b      	tst	r3, r1
 800a132:	d034      	beq.n	800a19e <__sflush_r+0x9e>
 800a134:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	075b      	lsls	r3, r3, #29
 800a13a:	d506      	bpl.n	800a14a <__sflush_r+0x4a>
 800a13c:	6863      	ldr	r3, [r4, #4]
 800a13e:	1ac0      	subs	r0, r0, r3
 800a140:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <__sflush_r+0x4a>
 800a146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a148:	1ac0      	subs	r0, r0, r3
 800a14a:	0002      	movs	r2, r0
 800a14c:	6a21      	ldr	r1, [r4, #32]
 800a14e:	2300      	movs	r3, #0
 800a150:	0028      	movs	r0, r5
 800a152:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a154:	47b8      	blx	r7
 800a156:	89a1      	ldrh	r1, [r4, #12]
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d106      	bne.n	800a16a <__sflush_r+0x6a>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	2b1d      	cmp	r3, #29
 800a160:	d831      	bhi.n	800a1c6 <__sflush_r+0xc6>
 800a162:	4a2c      	ldr	r2, [pc, #176]	; (800a214 <__sflush_r+0x114>)
 800a164:	40da      	lsrs	r2, r3
 800a166:	07d3      	lsls	r3, r2, #31
 800a168:	d52d      	bpl.n	800a1c6 <__sflush_r+0xc6>
 800a16a:	2300      	movs	r3, #0
 800a16c:	6063      	str	r3, [r4, #4]
 800a16e:	6923      	ldr	r3, [r4, #16]
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	04cb      	lsls	r3, r1, #19
 800a174:	d505      	bpl.n	800a182 <__sflush_r+0x82>
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	d102      	bne.n	800a180 <__sflush_r+0x80>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d100      	bne.n	800a182 <__sflush_r+0x82>
 800a180:	6560      	str	r0, [r4, #84]	; 0x54
 800a182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a184:	602e      	str	r6, [r5, #0]
 800a186:	2900      	cmp	r1, #0
 800a188:	d0c6      	beq.n	800a118 <__sflush_r+0x18>
 800a18a:	0023      	movs	r3, r4
 800a18c:	3344      	adds	r3, #68	; 0x44
 800a18e:	4299      	cmp	r1, r3
 800a190:	d002      	beq.n	800a198 <__sflush_r+0x98>
 800a192:	0028      	movs	r0, r5
 800a194:	f7ff fa86 	bl	80096a4 <_free_r>
 800a198:	2000      	movs	r0, #0
 800a19a:	6360      	str	r0, [r4, #52]	; 0x34
 800a19c:	e7bd      	b.n	800a11a <__sflush_r+0x1a>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	0028      	movs	r0, r5
 800a1a2:	6a21      	ldr	r1, [r4, #32]
 800a1a4:	47b8      	blx	r7
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	d1c5      	bne.n	800a136 <__sflush_r+0x36>
 800a1aa:	682b      	ldr	r3, [r5, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d0c2      	beq.n	800a136 <__sflush_r+0x36>
 800a1b0:	2b1d      	cmp	r3, #29
 800a1b2:	d001      	beq.n	800a1b8 <__sflush_r+0xb8>
 800a1b4:	2b16      	cmp	r3, #22
 800a1b6:	d101      	bne.n	800a1bc <__sflush_r+0xbc>
 800a1b8:	602e      	str	r6, [r5, #0]
 800a1ba:	e7ad      	b.n	800a118 <__sflush_r+0x18>
 800a1bc:	2340      	movs	r3, #64	; 0x40
 800a1be:	89a2      	ldrh	r2, [r4, #12]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	81a3      	strh	r3, [r4, #12]
 800a1c4:	e7a9      	b.n	800a11a <__sflush_r+0x1a>
 800a1c6:	2340      	movs	r3, #64	; 0x40
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	e7fa      	b.n	800a1c2 <__sflush_r+0xc2>
 800a1cc:	690f      	ldr	r7, [r1, #16]
 800a1ce:	2f00      	cmp	r7, #0
 800a1d0:	d0a2      	beq.n	800a118 <__sflush_r+0x18>
 800a1d2:	680a      	ldr	r2, [r1, #0]
 800a1d4:	600f      	str	r7, [r1, #0]
 800a1d6:	1bd2      	subs	r2, r2, r7
 800a1d8:	9201      	str	r2, [sp, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	079b      	lsls	r3, r3, #30
 800a1de:	d100      	bne.n	800a1e2 <__sflush_r+0xe2>
 800a1e0:	694a      	ldr	r2, [r1, #20]
 800a1e2:	60a2      	str	r2, [r4, #8]
 800a1e4:	9b01      	ldr	r3, [sp, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	dc00      	bgt.n	800a1ec <__sflush_r+0xec>
 800a1ea:	e795      	b.n	800a118 <__sflush_r+0x18>
 800a1ec:	003a      	movs	r2, r7
 800a1ee:	0028      	movs	r0, r5
 800a1f0:	9b01      	ldr	r3, [sp, #4]
 800a1f2:	6a21      	ldr	r1, [r4, #32]
 800a1f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1f6:	47b0      	blx	r6
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	dc06      	bgt.n	800a20a <__sflush_r+0x10a>
 800a1fc:	2340      	movs	r3, #64	; 0x40
 800a1fe:	2001      	movs	r0, #1
 800a200:	89a2      	ldrh	r2, [r4, #12]
 800a202:	4240      	negs	r0, r0
 800a204:	4313      	orrs	r3, r2
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	e787      	b.n	800a11a <__sflush_r+0x1a>
 800a20a:	9b01      	ldr	r3, [sp, #4]
 800a20c:	183f      	adds	r7, r7, r0
 800a20e:	1a1b      	subs	r3, r3, r0
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	e7e7      	b.n	800a1e4 <__sflush_r+0xe4>
 800a214:	20400001 	.word	0x20400001

0800a218 <_fflush_r>:
 800a218:	690b      	ldr	r3, [r1, #16]
 800a21a:	b570      	push	{r4, r5, r6, lr}
 800a21c:	0005      	movs	r5, r0
 800a21e:	000c      	movs	r4, r1
 800a220:	2b00      	cmp	r3, #0
 800a222:	d102      	bne.n	800a22a <_fflush_r+0x12>
 800a224:	2500      	movs	r5, #0
 800a226:	0028      	movs	r0, r5
 800a228:	bd70      	pop	{r4, r5, r6, pc}
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d004      	beq.n	800a238 <_fflush_r+0x20>
 800a22e:	6983      	ldr	r3, [r0, #24]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <_fflush_r+0x20>
 800a234:	f000 f892 	bl	800a35c <__sinit>
 800a238:	4b14      	ldr	r3, [pc, #80]	; (800a28c <_fflush_r+0x74>)
 800a23a:	429c      	cmp	r4, r3
 800a23c:	d11b      	bne.n	800a276 <_fflush_r+0x5e>
 800a23e:	686c      	ldr	r4, [r5, #4]
 800a240:	220c      	movs	r2, #12
 800a242:	5ea3      	ldrsh	r3, [r4, r2]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0ed      	beq.n	800a224 <_fflush_r+0xc>
 800a248:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a24a:	07d2      	lsls	r2, r2, #31
 800a24c:	d404      	bmi.n	800a258 <_fflush_r+0x40>
 800a24e:	059b      	lsls	r3, r3, #22
 800a250:	d402      	bmi.n	800a258 <_fflush_r+0x40>
 800a252:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a254:	f000 f923 	bl	800a49e <__retarget_lock_acquire_recursive>
 800a258:	0028      	movs	r0, r5
 800a25a:	0021      	movs	r1, r4
 800a25c:	f7ff ff50 	bl	800a100 <__sflush_r>
 800a260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a262:	0005      	movs	r5, r0
 800a264:	07db      	lsls	r3, r3, #31
 800a266:	d4de      	bmi.n	800a226 <_fflush_r+0xe>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	059b      	lsls	r3, r3, #22
 800a26c:	d4db      	bmi.n	800a226 <_fflush_r+0xe>
 800a26e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a270:	f000 f916 	bl	800a4a0 <__retarget_lock_release_recursive>
 800a274:	e7d7      	b.n	800a226 <_fflush_r+0xe>
 800a276:	4b06      	ldr	r3, [pc, #24]	; (800a290 <_fflush_r+0x78>)
 800a278:	429c      	cmp	r4, r3
 800a27a:	d101      	bne.n	800a280 <_fflush_r+0x68>
 800a27c:	68ac      	ldr	r4, [r5, #8]
 800a27e:	e7df      	b.n	800a240 <_fflush_r+0x28>
 800a280:	4b04      	ldr	r3, [pc, #16]	; (800a294 <_fflush_r+0x7c>)
 800a282:	429c      	cmp	r4, r3
 800a284:	d1dc      	bne.n	800a240 <_fflush_r+0x28>
 800a286:	68ec      	ldr	r4, [r5, #12]
 800a288:	e7da      	b.n	800a240 <_fflush_r+0x28>
 800a28a:	46c0      	nop			; (mov r8, r8)
 800a28c:	0800ac94 	.word	0x0800ac94
 800a290:	0800acb4 	.word	0x0800acb4
 800a294:	0800ac74 	.word	0x0800ac74

0800a298 <std>:
 800a298:	2300      	movs	r3, #0
 800a29a:	b510      	push	{r4, lr}
 800a29c:	0004      	movs	r4, r0
 800a29e:	6003      	str	r3, [r0, #0]
 800a2a0:	6043      	str	r3, [r0, #4]
 800a2a2:	6083      	str	r3, [r0, #8]
 800a2a4:	8181      	strh	r1, [r0, #12]
 800a2a6:	6643      	str	r3, [r0, #100]	; 0x64
 800a2a8:	0019      	movs	r1, r3
 800a2aa:	81c2      	strh	r2, [r0, #14]
 800a2ac:	6103      	str	r3, [r0, #16]
 800a2ae:	6143      	str	r3, [r0, #20]
 800a2b0:	6183      	str	r3, [r0, #24]
 800a2b2:	2208      	movs	r2, #8
 800a2b4:	305c      	adds	r0, #92	; 0x5c
 800a2b6:	f7fd facf 	bl	8007858 <memset>
 800a2ba:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <std+0x38>)
 800a2bc:	6224      	str	r4, [r4, #32]
 800a2be:	6263      	str	r3, [r4, #36]	; 0x24
 800a2c0:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <std+0x3c>)
 800a2c2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <std+0x40>)
 800a2c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2c8:	4b04      	ldr	r3, [pc, #16]	; (800a2dc <std+0x44>)
 800a2ca:	6323      	str	r3, [r4, #48]	; 0x30
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	46c0      	nop			; (mov r8, r8)
 800a2d0:	0800a621 	.word	0x0800a621
 800a2d4:	0800a649 	.word	0x0800a649
 800a2d8:	0800a681 	.word	0x0800a681
 800a2dc:	0800a6ad 	.word	0x0800a6ad

0800a2e0 <_cleanup_r>:
 800a2e0:	b510      	push	{r4, lr}
 800a2e2:	4902      	ldr	r1, [pc, #8]	; (800a2ec <_cleanup_r+0xc>)
 800a2e4:	f000 f8ba 	bl	800a45c <_fwalk_reent>
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	46c0      	nop			; (mov r8, r8)
 800a2ec:	0800a219 	.word	0x0800a219

0800a2f0 <__sfmoreglue>:
 800a2f0:	b570      	push	{r4, r5, r6, lr}
 800a2f2:	2568      	movs	r5, #104	; 0x68
 800a2f4:	1e4a      	subs	r2, r1, #1
 800a2f6:	4355      	muls	r5, r2
 800a2f8:	000e      	movs	r6, r1
 800a2fa:	0029      	movs	r1, r5
 800a2fc:	3174      	adds	r1, #116	; 0x74
 800a2fe:	f7ff fa3d 	bl	800977c <_malloc_r>
 800a302:	1e04      	subs	r4, r0, #0
 800a304:	d008      	beq.n	800a318 <__sfmoreglue+0x28>
 800a306:	2100      	movs	r1, #0
 800a308:	002a      	movs	r2, r5
 800a30a:	6001      	str	r1, [r0, #0]
 800a30c:	6046      	str	r6, [r0, #4]
 800a30e:	300c      	adds	r0, #12
 800a310:	60a0      	str	r0, [r4, #8]
 800a312:	3268      	adds	r2, #104	; 0x68
 800a314:	f7fd faa0 	bl	8007858 <memset>
 800a318:	0020      	movs	r0, r4
 800a31a:	bd70      	pop	{r4, r5, r6, pc}

0800a31c <__sfp_lock_acquire>:
 800a31c:	b510      	push	{r4, lr}
 800a31e:	4802      	ldr	r0, [pc, #8]	; (800a328 <__sfp_lock_acquire+0xc>)
 800a320:	f000 f8bd 	bl	800a49e <__retarget_lock_acquire_recursive>
 800a324:	bd10      	pop	{r4, pc}
 800a326:	46c0      	nop			; (mov r8, r8)
 800a328:	20000715 	.word	0x20000715

0800a32c <__sfp_lock_release>:
 800a32c:	b510      	push	{r4, lr}
 800a32e:	4802      	ldr	r0, [pc, #8]	; (800a338 <__sfp_lock_release+0xc>)
 800a330:	f000 f8b6 	bl	800a4a0 <__retarget_lock_release_recursive>
 800a334:	bd10      	pop	{r4, pc}
 800a336:	46c0      	nop			; (mov r8, r8)
 800a338:	20000715 	.word	0x20000715

0800a33c <__sinit_lock_acquire>:
 800a33c:	b510      	push	{r4, lr}
 800a33e:	4802      	ldr	r0, [pc, #8]	; (800a348 <__sinit_lock_acquire+0xc>)
 800a340:	f000 f8ad 	bl	800a49e <__retarget_lock_acquire_recursive>
 800a344:	bd10      	pop	{r4, pc}
 800a346:	46c0      	nop			; (mov r8, r8)
 800a348:	20000716 	.word	0x20000716

0800a34c <__sinit_lock_release>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	4802      	ldr	r0, [pc, #8]	; (800a358 <__sinit_lock_release+0xc>)
 800a350:	f000 f8a6 	bl	800a4a0 <__retarget_lock_release_recursive>
 800a354:	bd10      	pop	{r4, pc}
 800a356:	46c0      	nop			; (mov r8, r8)
 800a358:	20000716 	.word	0x20000716

0800a35c <__sinit>:
 800a35c:	b513      	push	{r0, r1, r4, lr}
 800a35e:	0004      	movs	r4, r0
 800a360:	f7ff ffec 	bl	800a33c <__sinit_lock_acquire>
 800a364:	69a3      	ldr	r3, [r4, #24]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d002      	beq.n	800a370 <__sinit+0x14>
 800a36a:	f7ff ffef 	bl	800a34c <__sinit_lock_release>
 800a36e:	bd13      	pop	{r0, r1, r4, pc}
 800a370:	64a3      	str	r3, [r4, #72]	; 0x48
 800a372:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a374:	6523      	str	r3, [r4, #80]	; 0x50
 800a376:	4b13      	ldr	r3, [pc, #76]	; (800a3c4 <__sinit+0x68>)
 800a378:	4a13      	ldr	r2, [pc, #76]	; (800a3c8 <__sinit+0x6c>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a37e:	9301      	str	r3, [sp, #4]
 800a380:	42a3      	cmp	r3, r4
 800a382:	d101      	bne.n	800a388 <__sinit+0x2c>
 800a384:	2301      	movs	r3, #1
 800a386:	61a3      	str	r3, [r4, #24]
 800a388:	0020      	movs	r0, r4
 800a38a:	f000 f81f 	bl	800a3cc <__sfp>
 800a38e:	6060      	str	r0, [r4, #4]
 800a390:	0020      	movs	r0, r4
 800a392:	f000 f81b 	bl	800a3cc <__sfp>
 800a396:	60a0      	str	r0, [r4, #8]
 800a398:	0020      	movs	r0, r4
 800a39a:	f000 f817 	bl	800a3cc <__sfp>
 800a39e:	2200      	movs	r2, #0
 800a3a0:	2104      	movs	r1, #4
 800a3a2:	60e0      	str	r0, [r4, #12]
 800a3a4:	6860      	ldr	r0, [r4, #4]
 800a3a6:	f7ff ff77 	bl	800a298 <std>
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	2109      	movs	r1, #9
 800a3ae:	68a0      	ldr	r0, [r4, #8]
 800a3b0:	f7ff ff72 	bl	800a298 <std>
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	2112      	movs	r1, #18
 800a3b8:	68e0      	ldr	r0, [r4, #12]
 800a3ba:	f7ff ff6d 	bl	800a298 <std>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	61a3      	str	r3, [r4, #24]
 800a3c2:	e7d2      	b.n	800a36a <__sinit+0xe>
 800a3c4:	0800a8fc 	.word	0x0800a8fc
 800a3c8:	0800a2e1 	.word	0x0800a2e1

0800a3cc <__sfp>:
 800a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ce:	0007      	movs	r7, r0
 800a3d0:	f7ff ffa4 	bl	800a31c <__sfp_lock_acquire>
 800a3d4:	4b1f      	ldr	r3, [pc, #124]	; (800a454 <__sfp+0x88>)
 800a3d6:	681e      	ldr	r6, [r3, #0]
 800a3d8:	69b3      	ldr	r3, [r6, #24]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d102      	bne.n	800a3e4 <__sfp+0x18>
 800a3de:	0030      	movs	r0, r6
 800a3e0:	f7ff ffbc 	bl	800a35c <__sinit>
 800a3e4:	3648      	adds	r6, #72	; 0x48
 800a3e6:	68b4      	ldr	r4, [r6, #8]
 800a3e8:	6873      	ldr	r3, [r6, #4]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	d504      	bpl.n	800a3f8 <__sfp+0x2c>
 800a3ee:	6833      	ldr	r3, [r6, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d022      	beq.n	800a43a <__sfp+0x6e>
 800a3f4:	6836      	ldr	r6, [r6, #0]
 800a3f6:	e7f6      	b.n	800a3e6 <__sfp+0x1a>
 800a3f8:	220c      	movs	r2, #12
 800a3fa:	5ea5      	ldrsh	r5, [r4, r2]
 800a3fc:	2d00      	cmp	r5, #0
 800a3fe:	d11a      	bne.n	800a436 <__sfp+0x6a>
 800a400:	0020      	movs	r0, r4
 800a402:	4b15      	ldr	r3, [pc, #84]	; (800a458 <__sfp+0x8c>)
 800a404:	3058      	adds	r0, #88	; 0x58
 800a406:	60e3      	str	r3, [r4, #12]
 800a408:	6665      	str	r5, [r4, #100]	; 0x64
 800a40a:	f000 f847 	bl	800a49c <__retarget_lock_init_recursive>
 800a40e:	f7ff ff8d 	bl	800a32c <__sfp_lock_release>
 800a412:	0020      	movs	r0, r4
 800a414:	2208      	movs	r2, #8
 800a416:	0029      	movs	r1, r5
 800a418:	6025      	str	r5, [r4, #0]
 800a41a:	60a5      	str	r5, [r4, #8]
 800a41c:	6065      	str	r5, [r4, #4]
 800a41e:	6125      	str	r5, [r4, #16]
 800a420:	6165      	str	r5, [r4, #20]
 800a422:	61a5      	str	r5, [r4, #24]
 800a424:	305c      	adds	r0, #92	; 0x5c
 800a426:	f7fd fa17 	bl	8007858 <memset>
 800a42a:	6365      	str	r5, [r4, #52]	; 0x34
 800a42c:	63a5      	str	r5, [r4, #56]	; 0x38
 800a42e:	64a5      	str	r5, [r4, #72]	; 0x48
 800a430:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a432:	0020      	movs	r0, r4
 800a434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a436:	3468      	adds	r4, #104	; 0x68
 800a438:	e7d7      	b.n	800a3ea <__sfp+0x1e>
 800a43a:	2104      	movs	r1, #4
 800a43c:	0038      	movs	r0, r7
 800a43e:	f7ff ff57 	bl	800a2f0 <__sfmoreglue>
 800a442:	1e04      	subs	r4, r0, #0
 800a444:	6030      	str	r0, [r6, #0]
 800a446:	d1d5      	bne.n	800a3f4 <__sfp+0x28>
 800a448:	f7ff ff70 	bl	800a32c <__sfp_lock_release>
 800a44c:	230c      	movs	r3, #12
 800a44e:	603b      	str	r3, [r7, #0]
 800a450:	e7ef      	b.n	800a432 <__sfp+0x66>
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	0800a8fc 	.word	0x0800a8fc
 800a458:	ffff0001 	.word	0xffff0001

0800a45c <_fwalk_reent>:
 800a45c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a45e:	0004      	movs	r4, r0
 800a460:	0006      	movs	r6, r0
 800a462:	2700      	movs	r7, #0
 800a464:	9101      	str	r1, [sp, #4]
 800a466:	3448      	adds	r4, #72	; 0x48
 800a468:	6863      	ldr	r3, [r4, #4]
 800a46a:	68a5      	ldr	r5, [r4, #8]
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	9b00      	ldr	r3, [sp, #0]
 800a470:	3b01      	subs	r3, #1
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	d504      	bpl.n	800a480 <_fwalk_reent+0x24>
 800a476:	6824      	ldr	r4, [r4, #0]
 800a478:	2c00      	cmp	r4, #0
 800a47a:	d1f5      	bne.n	800a468 <_fwalk_reent+0xc>
 800a47c:	0038      	movs	r0, r7
 800a47e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a480:	89ab      	ldrh	r3, [r5, #12]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d908      	bls.n	800a498 <_fwalk_reent+0x3c>
 800a486:	220e      	movs	r2, #14
 800a488:	5eab      	ldrsh	r3, [r5, r2]
 800a48a:	3301      	adds	r3, #1
 800a48c:	d004      	beq.n	800a498 <_fwalk_reent+0x3c>
 800a48e:	0029      	movs	r1, r5
 800a490:	0030      	movs	r0, r6
 800a492:	9b01      	ldr	r3, [sp, #4]
 800a494:	4798      	blx	r3
 800a496:	4307      	orrs	r7, r0
 800a498:	3568      	adds	r5, #104	; 0x68
 800a49a:	e7e8      	b.n	800a46e <_fwalk_reent+0x12>

0800a49c <__retarget_lock_init_recursive>:
 800a49c:	4770      	bx	lr

0800a49e <__retarget_lock_acquire_recursive>:
 800a49e:	4770      	bx	lr

0800a4a0 <__retarget_lock_release_recursive>:
 800a4a0:	4770      	bx	lr
	...

0800a4a4 <__swhatbuf_r>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	000e      	movs	r6, r1
 800a4a8:	001d      	movs	r5, r3
 800a4aa:	230e      	movs	r3, #14
 800a4ac:	5ec9      	ldrsh	r1, [r1, r3]
 800a4ae:	0014      	movs	r4, r2
 800a4b0:	b096      	sub	sp, #88	; 0x58
 800a4b2:	2900      	cmp	r1, #0
 800a4b4:	da08      	bge.n	800a4c8 <__swhatbuf_r+0x24>
 800a4b6:	220c      	movs	r2, #12
 800a4b8:	5eb3      	ldrsh	r3, [r6, r2]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	602a      	str	r2, [r5, #0]
 800a4be:	061b      	lsls	r3, r3, #24
 800a4c0:	d411      	bmi.n	800a4e6 <__swhatbuf_r+0x42>
 800a4c2:	2380      	movs	r3, #128	; 0x80
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	e00f      	b.n	800a4e8 <__swhatbuf_r+0x44>
 800a4c8:	466a      	mov	r2, sp
 800a4ca:	f000 f91b 	bl	800a704 <_fstat_r>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	dbf1      	blt.n	800a4b6 <__swhatbuf_r+0x12>
 800a4d2:	23f0      	movs	r3, #240	; 0xf0
 800a4d4:	9901      	ldr	r1, [sp, #4]
 800a4d6:	021b      	lsls	r3, r3, #8
 800a4d8:	4019      	ands	r1, r3
 800a4da:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <__swhatbuf_r+0x4c>)
 800a4dc:	18c9      	adds	r1, r1, r3
 800a4de:	424b      	negs	r3, r1
 800a4e0:	4159      	adcs	r1, r3
 800a4e2:	6029      	str	r1, [r5, #0]
 800a4e4:	e7ed      	b.n	800a4c2 <__swhatbuf_r+0x1e>
 800a4e6:	2340      	movs	r3, #64	; 0x40
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	6023      	str	r3, [r4, #0]
 800a4ec:	b016      	add	sp, #88	; 0x58
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	ffffe000 	.word	0xffffe000

0800a4f4 <__smakebuf_r>:
 800a4f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4f6:	2602      	movs	r6, #2
 800a4f8:	898b      	ldrh	r3, [r1, #12]
 800a4fa:	0005      	movs	r5, r0
 800a4fc:	000c      	movs	r4, r1
 800a4fe:	4233      	tst	r3, r6
 800a500:	d006      	beq.n	800a510 <__smakebuf_r+0x1c>
 800a502:	0023      	movs	r3, r4
 800a504:	3347      	adds	r3, #71	; 0x47
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	6123      	str	r3, [r4, #16]
 800a50a:	2301      	movs	r3, #1
 800a50c:	6163      	str	r3, [r4, #20]
 800a50e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a510:	466a      	mov	r2, sp
 800a512:	ab01      	add	r3, sp, #4
 800a514:	f7ff ffc6 	bl	800a4a4 <__swhatbuf_r>
 800a518:	9900      	ldr	r1, [sp, #0]
 800a51a:	0007      	movs	r7, r0
 800a51c:	0028      	movs	r0, r5
 800a51e:	f7ff f92d 	bl	800977c <_malloc_r>
 800a522:	2800      	cmp	r0, #0
 800a524:	d108      	bne.n	800a538 <__smakebuf_r+0x44>
 800a526:	220c      	movs	r2, #12
 800a528:	5ea3      	ldrsh	r3, [r4, r2]
 800a52a:	059a      	lsls	r2, r3, #22
 800a52c:	d4ef      	bmi.n	800a50e <__smakebuf_r+0x1a>
 800a52e:	2203      	movs	r2, #3
 800a530:	4393      	bics	r3, r2
 800a532:	431e      	orrs	r6, r3
 800a534:	81a6      	strh	r6, [r4, #12]
 800a536:	e7e4      	b.n	800a502 <__smakebuf_r+0xe>
 800a538:	4b0f      	ldr	r3, [pc, #60]	; (800a578 <__smakebuf_r+0x84>)
 800a53a:	62ab      	str	r3, [r5, #40]	; 0x28
 800a53c:	2380      	movs	r3, #128	; 0x80
 800a53e:	89a2      	ldrh	r2, [r4, #12]
 800a540:	6020      	str	r0, [r4, #0]
 800a542:	4313      	orrs	r3, r2
 800a544:	81a3      	strh	r3, [r4, #12]
 800a546:	9b00      	ldr	r3, [sp, #0]
 800a548:	6120      	str	r0, [r4, #16]
 800a54a:	6163      	str	r3, [r4, #20]
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00d      	beq.n	800a56e <__smakebuf_r+0x7a>
 800a552:	0028      	movs	r0, r5
 800a554:	230e      	movs	r3, #14
 800a556:	5ee1      	ldrsh	r1, [r4, r3]
 800a558:	f000 f8e6 	bl	800a728 <_isatty_r>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d006      	beq.n	800a56e <__smakebuf_r+0x7a>
 800a560:	2203      	movs	r2, #3
 800a562:	89a3      	ldrh	r3, [r4, #12]
 800a564:	4393      	bics	r3, r2
 800a566:	001a      	movs	r2, r3
 800a568:	2301      	movs	r3, #1
 800a56a:	4313      	orrs	r3, r2
 800a56c:	81a3      	strh	r3, [r4, #12]
 800a56e:	89a0      	ldrh	r0, [r4, #12]
 800a570:	4307      	orrs	r7, r0
 800a572:	81a7      	strh	r7, [r4, #12]
 800a574:	e7cb      	b.n	800a50e <__smakebuf_r+0x1a>
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	0800a2e1 	.word	0x0800a2e1

0800a57c <_malloc_usable_size_r>:
 800a57c:	1f0b      	subs	r3, r1, #4
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	1f18      	subs	r0, r3, #4
 800a582:	2b00      	cmp	r3, #0
 800a584:	da01      	bge.n	800a58a <_malloc_usable_size_r+0xe>
 800a586:	580b      	ldr	r3, [r1, r0]
 800a588:	18c0      	adds	r0, r0, r3
 800a58a:	4770      	bx	lr

0800a58c <_raise_r>:
 800a58c:	b570      	push	{r4, r5, r6, lr}
 800a58e:	0004      	movs	r4, r0
 800a590:	000d      	movs	r5, r1
 800a592:	291f      	cmp	r1, #31
 800a594:	d904      	bls.n	800a5a0 <_raise_r+0x14>
 800a596:	2316      	movs	r3, #22
 800a598:	6003      	str	r3, [r0, #0]
 800a59a:	2001      	movs	r0, #1
 800a59c:	4240      	negs	r0, r0
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d004      	beq.n	800a5b0 <_raise_r+0x24>
 800a5a6:	008a      	lsls	r2, r1, #2
 800a5a8:	189b      	adds	r3, r3, r2
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	d108      	bne.n	800a5c2 <_raise_r+0x36>
 800a5b0:	0020      	movs	r0, r4
 800a5b2:	f000 f831 	bl	800a618 <_getpid_r>
 800a5b6:	002a      	movs	r2, r5
 800a5b8:	0001      	movs	r1, r0
 800a5ba:	0020      	movs	r0, r4
 800a5bc:	f000 f81a 	bl	800a5f4 <_kill_r>
 800a5c0:	e7ed      	b.n	800a59e <_raise_r+0x12>
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	2a01      	cmp	r2, #1
 800a5c6:	d0ea      	beq.n	800a59e <_raise_r+0x12>
 800a5c8:	1c51      	adds	r1, r2, #1
 800a5ca:	d103      	bne.n	800a5d4 <_raise_r+0x48>
 800a5cc:	2316      	movs	r3, #22
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	e7e4      	b.n	800a59e <_raise_r+0x12>
 800a5d4:	2400      	movs	r4, #0
 800a5d6:	0028      	movs	r0, r5
 800a5d8:	601c      	str	r4, [r3, #0]
 800a5da:	4790      	blx	r2
 800a5dc:	0020      	movs	r0, r4
 800a5de:	e7de      	b.n	800a59e <_raise_r+0x12>

0800a5e0 <raise>:
 800a5e0:	b510      	push	{r4, lr}
 800a5e2:	4b03      	ldr	r3, [pc, #12]	; (800a5f0 <raise+0x10>)
 800a5e4:	0001      	movs	r1, r0
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	f7ff ffd0 	bl	800a58c <_raise_r>
 800a5ec:	bd10      	pop	{r4, pc}
 800a5ee:	46c0      	nop			; (mov r8, r8)
 800a5f0:	2000000c 	.word	0x2000000c

0800a5f4 <_kill_r>:
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	b570      	push	{r4, r5, r6, lr}
 800a5f8:	4d06      	ldr	r5, [pc, #24]	; (800a614 <_kill_r+0x20>)
 800a5fa:	0004      	movs	r4, r0
 800a5fc:	0008      	movs	r0, r1
 800a5fe:	0011      	movs	r1, r2
 800a600:	602b      	str	r3, [r5, #0]
 800a602:	f7f9 fe13 	bl	800422c <_kill>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	d103      	bne.n	800a612 <_kill_r+0x1e>
 800a60a:	682b      	ldr	r3, [r5, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d000      	beq.n	800a612 <_kill_r+0x1e>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	20000710 	.word	0x20000710

0800a618 <_getpid_r>:
 800a618:	b510      	push	{r4, lr}
 800a61a:	f7f9 fe01 	bl	8004220 <_getpid>
 800a61e:	bd10      	pop	{r4, pc}

0800a620 <__sread>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	000c      	movs	r4, r1
 800a624:	250e      	movs	r5, #14
 800a626:	5f49      	ldrsh	r1, [r1, r5]
 800a628:	f000 f8a4 	bl	800a774 <_read_r>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	db03      	blt.n	800a638 <__sread+0x18>
 800a630:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a632:	181b      	adds	r3, r3, r0
 800a634:	6563      	str	r3, [r4, #84]	; 0x54
 800a636:	bd70      	pop	{r4, r5, r6, pc}
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	4a02      	ldr	r2, [pc, #8]	; (800a644 <__sread+0x24>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	e7f9      	b.n	800a636 <__sread+0x16>
 800a642:	46c0      	nop			; (mov r8, r8)
 800a644:	ffffefff 	.word	0xffffefff

0800a648 <__swrite>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	001f      	movs	r7, r3
 800a64c:	898b      	ldrh	r3, [r1, #12]
 800a64e:	0005      	movs	r5, r0
 800a650:	000c      	movs	r4, r1
 800a652:	0016      	movs	r6, r2
 800a654:	05db      	lsls	r3, r3, #23
 800a656:	d505      	bpl.n	800a664 <__swrite+0x1c>
 800a658:	230e      	movs	r3, #14
 800a65a:	5ec9      	ldrsh	r1, [r1, r3]
 800a65c:	2200      	movs	r2, #0
 800a65e:	2302      	movs	r3, #2
 800a660:	f000 f874 	bl	800a74c <_lseek_r>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	4a05      	ldr	r2, [pc, #20]	; (800a67c <__swrite+0x34>)
 800a668:	0028      	movs	r0, r5
 800a66a:	4013      	ands	r3, r2
 800a66c:	81a3      	strh	r3, [r4, #12]
 800a66e:	0032      	movs	r2, r6
 800a670:	230e      	movs	r3, #14
 800a672:	5ee1      	ldrsh	r1, [r4, r3]
 800a674:	003b      	movs	r3, r7
 800a676:	f000 f81f 	bl	800a6b8 <_write_r>
 800a67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a67c:	ffffefff 	.word	0xffffefff

0800a680 <__sseek>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	000c      	movs	r4, r1
 800a684:	250e      	movs	r5, #14
 800a686:	5f49      	ldrsh	r1, [r1, r5]
 800a688:	f000 f860 	bl	800a74c <_lseek_r>
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	1c42      	adds	r2, r0, #1
 800a690:	d103      	bne.n	800a69a <__sseek+0x1a>
 800a692:	4a05      	ldr	r2, [pc, #20]	; (800a6a8 <__sseek+0x28>)
 800a694:	4013      	ands	r3, r2
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	bd70      	pop	{r4, r5, r6, pc}
 800a69a:	2280      	movs	r2, #128	; 0x80
 800a69c:	0152      	lsls	r2, r2, #5
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	81a3      	strh	r3, [r4, #12]
 800a6a2:	6560      	str	r0, [r4, #84]	; 0x54
 800a6a4:	e7f8      	b.n	800a698 <__sseek+0x18>
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	ffffefff 	.word	0xffffefff

0800a6ac <__sclose>:
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	230e      	movs	r3, #14
 800a6b0:	5ec9      	ldrsh	r1, [r1, r3]
 800a6b2:	f000 f815 	bl	800a6e0 <_close_r>
 800a6b6:	bd10      	pop	{r4, pc}

0800a6b8 <_write_r>:
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	0004      	movs	r4, r0
 800a6bc:	0008      	movs	r0, r1
 800a6be:	0011      	movs	r1, r2
 800a6c0:	001a      	movs	r2, r3
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4d05      	ldr	r5, [pc, #20]	; (800a6dc <_write_r+0x24>)
 800a6c6:	602b      	str	r3, [r5, #0]
 800a6c8:	f7f9 fde9 	bl	800429e <_write>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d103      	bne.n	800a6d8 <_write_r+0x20>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d000      	beq.n	800a6d8 <_write_r+0x20>
 800a6d6:	6023      	str	r3, [r4, #0]
 800a6d8:	bd70      	pop	{r4, r5, r6, pc}
 800a6da:	46c0      	nop			; (mov r8, r8)
 800a6dc:	20000710 	.word	0x20000710

0800a6e0 <_close_r>:
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	b570      	push	{r4, r5, r6, lr}
 800a6e4:	4d06      	ldr	r5, [pc, #24]	; (800a700 <_close_r+0x20>)
 800a6e6:	0004      	movs	r4, r0
 800a6e8:	0008      	movs	r0, r1
 800a6ea:	602b      	str	r3, [r5, #0]
 800a6ec:	f7f9 fdf3 	bl	80042d6 <_close>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d103      	bne.n	800a6fc <_close_r+0x1c>
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d000      	beq.n	800a6fc <_close_r+0x1c>
 800a6fa:	6023      	str	r3, [r4, #0]
 800a6fc:	bd70      	pop	{r4, r5, r6, pc}
 800a6fe:	46c0      	nop			; (mov r8, r8)
 800a700:	20000710 	.word	0x20000710

0800a704 <_fstat_r>:
 800a704:	2300      	movs	r3, #0
 800a706:	b570      	push	{r4, r5, r6, lr}
 800a708:	4d06      	ldr	r5, [pc, #24]	; (800a724 <_fstat_r+0x20>)
 800a70a:	0004      	movs	r4, r0
 800a70c:	0008      	movs	r0, r1
 800a70e:	0011      	movs	r1, r2
 800a710:	602b      	str	r3, [r5, #0]
 800a712:	f7f9 fdea 	bl	80042ea <_fstat>
 800a716:	1c43      	adds	r3, r0, #1
 800a718:	d103      	bne.n	800a722 <_fstat_r+0x1e>
 800a71a:	682b      	ldr	r3, [r5, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d000      	beq.n	800a722 <_fstat_r+0x1e>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd70      	pop	{r4, r5, r6, pc}
 800a724:	20000710 	.word	0x20000710

0800a728 <_isatty_r>:
 800a728:	2300      	movs	r3, #0
 800a72a:	b570      	push	{r4, r5, r6, lr}
 800a72c:	4d06      	ldr	r5, [pc, #24]	; (800a748 <_isatty_r+0x20>)
 800a72e:	0004      	movs	r4, r0
 800a730:	0008      	movs	r0, r1
 800a732:	602b      	str	r3, [r5, #0]
 800a734:	f7f9 fde7 	bl	8004306 <_isatty>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d103      	bne.n	800a744 <_isatty_r+0x1c>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d000      	beq.n	800a744 <_isatty_r+0x1c>
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	bd70      	pop	{r4, r5, r6, pc}
 800a746:	46c0      	nop			; (mov r8, r8)
 800a748:	20000710 	.word	0x20000710

0800a74c <_lseek_r>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	0004      	movs	r4, r0
 800a750:	0008      	movs	r0, r1
 800a752:	0011      	movs	r1, r2
 800a754:	001a      	movs	r2, r3
 800a756:	2300      	movs	r3, #0
 800a758:	4d05      	ldr	r5, [pc, #20]	; (800a770 <_lseek_r+0x24>)
 800a75a:	602b      	str	r3, [r5, #0]
 800a75c:	f7f9 fddc 	bl	8004318 <_lseek>
 800a760:	1c43      	adds	r3, r0, #1
 800a762:	d103      	bne.n	800a76c <_lseek_r+0x20>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d000      	beq.n	800a76c <_lseek_r+0x20>
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	bd70      	pop	{r4, r5, r6, pc}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	20000710 	.word	0x20000710

0800a774 <_read_r>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	0004      	movs	r4, r0
 800a778:	0008      	movs	r0, r1
 800a77a:	0011      	movs	r1, r2
 800a77c:	001a      	movs	r2, r3
 800a77e:	2300      	movs	r3, #0
 800a780:	4d05      	ldr	r5, [pc, #20]	; (800a798 <_read_r+0x24>)
 800a782:	602b      	str	r3, [r5, #0]
 800a784:	f7f9 fd6e 	bl	8004264 <_read>
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	d103      	bne.n	800a794 <_read_r+0x20>
 800a78c:	682b      	ldr	r3, [r5, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d000      	beq.n	800a794 <_read_r+0x20>
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	bd70      	pop	{r4, r5, r6, pc}
 800a796:	46c0      	nop			; (mov r8, r8)
 800a798:	20000710 	.word	0x20000710

0800a79c <_init>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	46c0      	nop			; (mov r8, r8)
 800a7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a2:	bc08      	pop	{r3}
 800a7a4:	469e      	mov	lr, r3
 800a7a6:	4770      	bx	lr

0800a7a8 <_fini>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	46c0      	nop			; (mov r8, r8)
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr
