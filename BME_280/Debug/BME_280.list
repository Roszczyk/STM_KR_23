
BME_280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dc4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08009e88  08009e88  00019e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b4  0800a3b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b4  0800a3b4  0001a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3bc  0800a3bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3c0  0800a3c0  0001a3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001e0  0800a5a0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  0800a5a0  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff07  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210c  00000000  00000000  0003010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00032218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  000330a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016570  00000000  00000000  00033e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd6a  00000000  00000000  0004a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f69  00000000  00000000  0005a152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e30bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004604  00000000  00000000  000e310c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000e7710  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003f  00000000  00000000  000e7734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009e6c 	.word	0x08009e6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	08009e6c 	.word	0x08009e6c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f827 	bl	8001490 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff77 	bl	8001340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f819 	bl	8001490 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f80f 	bl	8001490 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff9f 	bl	80013c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff95 	bl	80013c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 febe 	bl	80022e4 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 feb9 	bl	80022e4 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	000d      	movs	r5, r1
 80006e6:	0004      	movs	r4, r0
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	001f      	movs	r7, r3
 80006ec:	0011      	movs	r1, r2
 80006ee:	0328      	lsls	r0, r5, #12
 80006f0:	0f62      	lsrs	r2, r4, #29
 80006f2:	0a40      	lsrs	r0, r0, #9
 80006f4:	4310      	orrs	r0, r2
 80006f6:	007a      	lsls	r2, r7, #1
 80006f8:	0d52      	lsrs	r2, r2, #21
 80006fa:	00e3      	lsls	r3, r4, #3
 80006fc:	033c      	lsls	r4, r7, #12
 80006fe:	4691      	mov	r9, r2
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0ffa      	lsrs	r2, r7, #31
 8000704:	0f4f      	lsrs	r7, r1, #29
 8000706:	006e      	lsls	r6, r5, #1
 8000708:	4327      	orrs	r7, r4
 800070a:	4692      	mov	sl, r2
 800070c:	46b8      	mov	r8, r7
 800070e:	0d76      	lsrs	r6, r6, #21
 8000710:	0fed      	lsrs	r5, r5, #31
 8000712:	00c9      	lsls	r1, r1, #3
 8000714:	4295      	cmp	r5, r2
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3e>
 8000718:	e099      	b.n	800084e <__aeabi_dadd+0x172>
 800071a:	464c      	mov	r4, r9
 800071c:	1b34      	subs	r4, r6, r4
 800071e:	46a4      	mov	ip, r4
 8000720:	2c00      	cmp	r4, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x4a>
 8000724:	e07c      	b.n	8000820 <__aeabi_dadd+0x144>
 8000726:	464a      	mov	r2, r9
 8000728:	2a00      	cmp	r2, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e0b8      	b.n	80008a0 <__aeabi_dadd+0x1c4>
 800072e:	4ac5      	ldr	r2, [pc, #788]	; (8000a44 <__aeabi_dadd+0x368>)
 8000730:	4296      	cmp	r6, r2
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x5a>
 8000734:	e11c      	b.n	8000970 <__aeabi_dadd+0x294>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	003c      	movs	r4, r7
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	4314      	orrs	r4, r2
 800073e:	46a0      	mov	r8, r4
 8000740:	4662      	mov	r2, ip
 8000742:	2a38      	cmp	r2, #56	; 0x38
 8000744:	dd00      	ble.n	8000748 <__aeabi_dadd+0x6c>
 8000746:	e161      	b.n	8000a0c <__aeabi_dadd+0x330>
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x72>
 800074c:	e1cc      	b.n	8000ae8 <__aeabi_dadd+0x40c>
 800074e:	4664      	mov	r4, ip
 8000750:	2220      	movs	r2, #32
 8000752:	1b12      	subs	r2, r2, r4
 8000754:	4644      	mov	r4, r8
 8000756:	4094      	lsls	r4, r2
 8000758:	000f      	movs	r7, r1
 800075a:	46a1      	mov	r9, r4
 800075c:	4664      	mov	r4, ip
 800075e:	4091      	lsls	r1, r2
 8000760:	40e7      	lsrs	r7, r4
 8000762:	464c      	mov	r4, r9
 8000764:	1e4a      	subs	r2, r1, #1
 8000766:	4191      	sbcs	r1, r2
 8000768:	433c      	orrs	r4, r7
 800076a:	4642      	mov	r2, r8
 800076c:	4321      	orrs	r1, r4
 800076e:	4664      	mov	r4, ip
 8000770:	40e2      	lsrs	r2, r4
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	1a5c      	subs	r4, r3, r1
 8000776:	42a3      	cmp	r3, r4
 8000778:	419b      	sbcs	r3, r3
 800077a:	425f      	negs	r7, r3
 800077c:	1bc7      	subs	r7, r0, r7
 800077e:	023b      	lsls	r3, r7, #8
 8000780:	d400      	bmi.n	8000784 <__aeabi_dadd+0xa8>
 8000782:	e0d0      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000784:	027f      	lsls	r7, r7, #9
 8000786:	0a7f      	lsrs	r7, r7, #9
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0xb2>
 800078c:	e0ff      	b.n	800098e <__aeabi_dadd+0x2b2>
 800078e:	0038      	movs	r0, r7
 8000790:	f001 fd8a 	bl	80022a8 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	3908      	subs	r1, #8
 8000798:	2320      	movs	r3, #32
 800079a:	0022      	movs	r2, r4
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	408f      	lsls	r7, r1
 80007a0:	40da      	lsrs	r2, r3
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4317      	orrs	r7, r2
 80007a6:	42b1      	cmp	r1, r6
 80007a8:	da00      	bge.n	80007ac <__aeabi_dadd+0xd0>
 80007aa:	e0ff      	b.n	80009ac <__aeabi_dadd+0x2d0>
 80007ac:	1b89      	subs	r1, r1, r6
 80007ae:	1c4b      	adds	r3, r1, #1
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xda>
 80007b4:	e0a8      	b.n	8000908 <__aeabi_dadd+0x22c>
 80007b6:	2220      	movs	r2, #32
 80007b8:	0039      	movs	r1, r7
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	0020      	movs	r0, r4
 80007be:	4094      	lsls	r4, r2
 80007c0:	4091      	lsls	r1, r2
 80007c2:	40d8      	lsrs	r0, r3
 80007c4:	1e62      	subs	r2, r4, #1
 80007c6:	4194      	sbcs	r4, r2
 80007c8:	40df      	lsrs	r7, r3
 80007ca:	2600      	movs	r6, #0
 80007cc:	4301      	orrs	r1, r0
 80007ce:	430c      	orrs	r4, r1
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d23      	adds	r3, r4, #4
 80007de:	42a3      	cmp	r3, r4
 80007e0:	41a4      	sbcs	r4, r4
 80007e2:	4264      	negs	r4, r4
 80007e4:	193f      	adds	r7, r7, r4
 80007e6:	001c      	movs	r4, r3
 80007e8:	023b      	lsls	r3, r7, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x112>
 80007ec:	e09e      	b.n	800092c <__aeabi_dadd+0x250>
 80007ee:	4b95      	ldr	r3, [pc, #596]	; (8000a44 <__aeabi_dadd+0x368>)
 80007f0:	3601      	adds	r6, #1
 80007f2:	429e      	cmp	r6, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x11c>
 80007f6:	e0b7      	b.n	8000968 <__aeabi_dadd+0x28c>
 80007f8:	4a93      	ldr	r2, [pc, #588]	; (8000a48 <__aeabi_dadd+0x36c>)
 80007fa:	08e4      	lsrs	r4, r4, #3
 80007fc:	4017      	ands	r7, r2
 80007fe:	077b      	lsls	r3, r7, #29
 8000800:	0571      	lsls	r1, r6, #21
 8000802:	027f      	lsls	r7, r7, #9
 8000804:	4323      	orrs	r3, r4
 8000806:	0b3f      	lsrs	r7, r7, #12
 8000808:	0d4a      	lsrs	r2, r1, #21
 800080a:	0512      	lsls	r2, r2, #20
 800080c:	433a      	orrs	r2, r7
 800080e:	07ed      	lsls	r5, r5, #31
 8000810:	432a      	orrs	r2, r5
 8000812:	0018      	movs	r0, r3
 8000814:	0011      	movs	r1, r2
 8000816:	bce0      	pop	{r5, r6, r7}
 8000818:	46ba      	mov	sl, r7
 800081a:	46b1      	mov	r9, r6
 800081c:	46a8      	mov	r8, r5
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	2c00      	cmp	r4, #0
 8000822:	d04b      	beq.n	80008bc <__aeabi_dadd+0x1e0>
 8000824:	464c      	mov	r4, r9
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	46a4      	mov	ip, r4
 800082a:	2e00      	cmp	r6, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_dadd+0x154>
 800082e:	e123      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000830:	0004      	movs	r4, r0
 8000832:	431c      	orrs	r4, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x15c>
 8000836:	e1af      	b.n	8000b98 <__aeabi_dadd+0x4bc>
 8000838:	4662      	mov	r2, ip
 800083a:	1e54      	subs	r4, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x166>
 8000840:	e215      	b.n	8000c6e <__aeabi_dadd+0x592>
 8000842:	4d80      	ldr	r5, [pc, #512]	; (8000a44 <__aeabi_dadd+0x368>)
 8000844:	45ac      	cmp	ip, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x16e>
 8000848:	e1c8      	b.n	8000bdc <__aeabi_dadd+0x500>
 800084a:	46a4      	mov	ip, r4
 800084c:	e11b      	b.n	8000a86 <__aeabi_dadd+0x3aa>
 800084e:	464a      	mov	r2, r9
 8000850:	1ab2      	subs	r2, r6, r2
 8000852:	4694      	mov	ip, r2
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x17e>
 8000858:	e0ac      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 800085a:	464a      	mov	r2, r9
 800085c:	2a00      	cmp	r2, #0
 800085e:	d043      	beq.n	80008e8 <__aeabi_dadd+0x20c>
 8000860:	4a78      	ldr	r2, [pc, #480]	; (8000a44 <__aeabi_dadd+0x368>)
 8000862:	4296      	cmp	r6, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x18c>
 8000866:	e1af      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	003c      	movs	r4, r7
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	4314      	orrs	r4, r2
 8000870:	46a0      	mov	r8, r4
 8000872:	4662      	mov	r2, ip
 8000874:	2a38      	cmp	r2, #56	; 0x38
 8000876:	dc67      	bgt.n	8000948 <__aeabi_dadd+0x26c>
 8000878:	2a1f      	cmp	r2, #31
 800087a:	dc00      	bgt.n	800087e <__aeabi_dadd+0x1a2>
 800087c:	e15f      	b.n	8000b3e <__aeabi_dadd+0x462>
 800087e:	4647      	mov	r7, r8
 8000880:	3a20      	subs	r2, #32
 8000882:	40d7      	lsrs	r7, r2
 8000884:	4662      	mov	r2, ip
 8000886:	2a20      	cmp	r2, #32
 8000888:	d005      	beq.n	8000896 <__aeabi_dadd+0x1ba>
 800088a:	4664      	mov	r4, ip
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	1b12      	subs	r2, r2, r4
 8000890:	4644      	mov	r4, r8
 8000892:	4094      	lsls	r4, r2
 8000894:	4321      	orrs	r1, r4
 8000896:	1e4a      	subs	r2, r1, #1
 8000898:	4191      	sbcs	r1, r2
 800089a:	000c      	movs	r4, r1
 800089c:	433c      	orrs	r4, r7
 800089e:	e057      	b.n	8000950 <__aeabi_dadd+0x274>
 80008a0:	003a      	movs	r2, r7
 80008a2:	430a      	orrs	r2, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x1cc>
 80008a6:	e105      	b.n	8000ab4 <__aeabi_dadd+0x3d8>
 80008a8:	0022      	movs	r2, r4
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1d6>
 80008b0:	e182      	b.n	8000bb8 <__aeabi_dadd+0x4dc>
 80008b2:	4c64      	ldr	r4, [pc, #400]	; (8000a44 <__aeabi_dadd+0x368>)
 80008b4:	45a4      	cmp	ip, r4
 80008b6:	d05b      	beq.n	8000970 <__aeabi_dadd+0x294>
 80008b8:	4694      	mov	ip, r2
 80008ba:	e741      	b.n	8000740 <__aeabi_dadd+0x64>
 80008bc:	4c63      	ldr	r4, [pc, #396]	; (8000a4c <__aeabi_dadd+0x370>)
 80008be:	1c77      	adds	r7, r6, #1
 80008c0:	4227      	tst	r7, r4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1ea>
 80008c4:	e0c4      	b.n	8000a50 <__aeabi_dadd+0x374>
 80008c6:	0004      	movs	r4, r0
 80008c8:	431c      	orrs	r4, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x1f4>
 80008ce:	e169      	b.n	8000ba4 <__aeabi_dadd+0x4c8>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1fa>
 80008d4:	e1bf      	b.n	8000c56 <__aeabi_dadd+0x57a>
 80008d6:	4644      	mov	r4, r8
 80008d8:	430c      	orrs	r4, r1
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x202>
 80008dc:	e1d0      	b.n	8000c80 <__aeabi_dadd+0x5a4>
 80008de:	0742      	lsls	r2, r0, #29
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	08c0      	lsrs	r0, r0, #3
 80008e6:	e029      	b.n	800093c <__aeabi_dadd+0x260>
 80008e8:	003a      	movs	r2, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x214>
 80008ee:	e170      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x220>
 80008fa:	e0e0      	b.n	8000abe <__aeabi_dadd+0x3e2>
 80008fc:	4c51      	ldr	r4, [pc, #324]	; (8000a44 <__aeabi_dadd+0x368>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x228>
 8000902:	e161      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000904:	4694      	mov	ip, r2
 8000906:	e7b4      	b.n	8000872 <__aeabi_dadd+0x196>
 8000908:	003a      	movs	r2, r7
 800090a:	391f      	subs	r1, #31
 800090c:	40ca      	lsrs	r2, r1
 800090e:	0011      	movs	r1, r2
 8000910:	2b20      	cmp	r3, #32
 8000912:	d003      	beq.n	800091c <__aeabi_dadd+0x240>
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	409f      	lsls	r7, r3
 800091a:	433c      	orrs	r4, r7
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	2700      	movs	r7, #0
 8000922:	2600      	movs	r6, #0
 8000924:	430c      	orrs	r4, r1
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x250>
 800092a:	e753      	b.n	80007d4 <__aeabi_dadd+0xf8>
 800092c:	46b4      	mov	ip, r6
 800092e:	08e4      	lsrs	r4, r4, #3
 8000930:	077b      	lsls	r3, r7, #29
 8000932:	4323      	orrs	r3, r4
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <__aeabi_dadd+0x368>)
 8000938:	4594      	cmp	ip, r2
 800093a:	d01d      	beq.n	8000978 <__aeabi_dadd+0x29c>
 800093c:	4662      	mov	r2, ip
 800093e:	0307      	lsls	r7, r0, #12
 8000940:	0552      	lsls	r2, r2, #21
 8000942:	0b3f      	lsrs	r7, r7, #12
 8000944:	0d52      	lsrs	r2, r2, #21
 8000946:	e760      	b.n	800080a <__aeabi_dadd+0x12e>
 8000948:	4644      	mov	r4, r8
 800094a:	430c      	orrs	r4, r1
 800094c:	1e62      	subs	r2, r4, #1
 800094e:	4194      	sbcs	r4, r2
 8000950:	18e4      	adds	r4, r4, r3
 8000952:	429c      	cmp	r4, r3
 8000954:	419b      	sbcs	r3, r3
 8000956:	425f      	negs	r7, r3
 8000958:	183f      	adds	r7, r7, r0
 800095a:	023b      	lsls	r3, r7, #8
 800095c:	d5e3      	bpl.n	8000926 <__aeabi_dadd+0x24a>
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <__aeabi_dadd+0x368>)
 8000960:	3601      	adds	r6, #1
 8000962:	429e      	cmp	r6, r3
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x28c>
 8000966:	e0b5      	b.n	8000ad4 <__aeabi_dadd+0x3f8>
 8000968:	0032      	movs	r2, r6
 800096a:	2700      	movs	r7, #0
 800096c:	2300      	movs	r3, #0
 800096e:	e74c      	b.n	800080a <__aeabi_dadd+0x12e>
 8000970:	0742      	lsls	r2, r0, #29
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	4313      	orrs	r3, r2
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	001a      	movs	r2, r3
 800097a:	4302      	orrs	r2, r0
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2a4>
 800097e:	e1e1      	b.n	8000d44 <__aeabi_dadd+0x668>
 8000980:	2780      	movs	r7, #128	; 0x80
 8000982:	033f      	lsls	r7, r7, #12
 8000984:	4307      	orrs	r7, r0
 8000986:	033f      	lsls	r7, r7, #12
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <__aeabi_dadd+0x368>)
 800098a:	0b3f      	lsrs	r7, r7, #12
 800098c:	e73d      	b.n	800080a <__aeabi_dadd+0x12e>
 800098e:	0020      	movs	r0, r4
 8000990:	f001 fc8a 	bl	80022a8 <__clzsi2>
 8000994:	0001      	movs	r1, r0
 8000996:	3118      	adds	r1, #24
 8000998:	291f      	cmp	r1, #31
 800099a:	dc00      	bgt.n	800099e <__aeabi_dadd+0x2c2>
 800099c:	e6fc      	b.n	8000798 <__aeabi_dadd+0xbc>
 800099e:	3808      	subs	r0, #8
 80009a0:	4084      	lsls	r4, r0
 80009a2:	0027      	movs	r7, r4
 80009a4:	2400      	movs	r4, #0
 80009a6:	42b1      	cmp	r1, r6
 80009a8:	db00      	blt.n	80009ac <__aeabi_dadd+0x2d0>
 80009aa:	e6ff      	b.n	80007ac <__aeabi_dadd+0xd0>
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <__aeabi_dadd+0x36c>)
 80009ae:	1a76      	subs	r6, r6, r1
 80009b0:	4017      	ands	r7, r2
 80009b2:	e70d      	b.n	80007d0 <__aeabi_dadd+0xf4>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d02f      	beq.n	8000a18 <__aeabi_dadd+0x33c>
 80009b8:	464a      	mov	r2, r9
 80009ba:	1b92      	subs	r2, r2, r6
 80009bc:	4694      	mov	ip, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x2e8>
 80009c2:	e0ad      	b.n	8000b20 <__aeabi_dadd+0x444>
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <__aeabi_dadd+0x368>)
 80009c6:	4591      	cmp	r9, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x2f0>
 80009ca:	e10f      	b.n	8000bec <__aeabi_dadd+0x510>
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0412      	lsls	r2, r2, #16
 80009d0:	4310      	orrs	r0, r2
 80009d2:	4662      	mov	r2, ip
 80009d4:	2a38      	cmp	r2, #56	; 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x2fe>
 80009d8:	e10f      	b.n	8000bfa <__aeabi_dadd+0x51e>
 80009da:	2a1f      	cmp	r2, #31
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_dadd+0x304>
 80009de:	e180      	b.n	8000ce2 <__aeabi_dadd+0x606>
 80009e0:	4664      	mov	r4, ip
 80009e2:	2220      	movs	r2, #32
 80009e4:	001e      	movs	r6, r3
 80009e6:	1b12      	subs	r2, r2, r4
 80009e8:	4667      	mov	r7, ip
 80009ea:	0004      	movs	r4, r0
 80009ec:	4093      	lsls	r3, r2
 80009ee:	4094      	lsls	r4, r2
 80009f0:	40fe      	lsrs	r6, r7
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	40f8      	lsrs	r0, r7
 80009f8:	4334      	orrs	r4, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	4480      	add	r8, r0
 80009fe:	1864      	adds	r4, r4, r1
 8000a00:	428c      	cmp	r4, r1
 8000a02:	41bf      	sbcs	r7, r7
 8000a04:	427f      	negs	r7, r7
 8000a06:	464e      	mov	r6, r9
 8000a08:	4447      	add	r7, r8
 8000a0a:	e7a6      	b.n	800095a <__aeabi_dadd+0x27e>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	0011      	movs	r1, r2
 8000a12:	1e4a      	subs	r2, r1, #1
 8000a14:	4191      	sbcs	r1, r2
 8000a16:	e6ad      	b.n	8000774 <__aeabi_dadd+0x98>
 8000a18:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__aeabi_dadd+0x370>)
 8000a1a:	1c72      	adds	r2, r6, #1
 8000a1c:	4222      	tst	r2, r4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x346>
 8000a20:	e0a1      	b.n	8000b66 <__aeabi_dadd+0x48a>
 8000a22:	0002      	movs	r2, r0
 8000a24:	431a      	orrs	r2, r3
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e0fa      	b.n	8000c22 <__aeabi_dadd+0x546>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x356>
 8000a30:	e145      	b.n	8000cbe <__aeabi_dadd+0x5e2>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x35e>
 8000a38:	e146      	b.n	8000cc8 <__aeabi_dadd+0x5ec>
 8000a3a:	0742      	lsls	r2, r0, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	e77b      	b.n	800093c <__aeabi_dadd+0x260>
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4647      	mov	r7, r8
 8000a52:	1a5c      	subs	r4, r3, r1
 8000a54:	1bc2      	subs	r2, r0, r7
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	41bf      	sbcs	r7, r7
 8000a5a:	427f      	negs	r7, r7
 8000a5c:	46b9      	mov	r9, r7
 8000a5e:	0017      	movs	r7, r2
 8000a60:	464a      	mov	r2, r9
 8000a62:	1abf      	subs	r7, r7, r2
 8000a64:	023a      	lsls	r2, r7, #8
 8000a66:	d500      	bpl.n	8000a6a <__aeabi_dadd+0x38e>
 8000a68:	e08d      	b.n	8000b86 <__aeabi_dadd+0x4aa>
 8000a6a:	0023      	movs	r3, r4
 8000a6c:	433b      	orrs	r3, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x396>
 8000a70:	e68a      	b.n	8000788 <__aeabi_dadd+0xac>
 8000a72:	2000      	movs	r0, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	e761      	b.n	800093c <__aeabi_dadd+0x260>
 8000a78:	4cb4      	ldr	r4, [pc, #720]	; (8000d4c <__aeabi_dadd+0x670>)
 8000a7a:	45a1      	cmp	r9, r4
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x3a4>
 8000a7e:	e0ad      	b.n	8000bdc <__aeabi_dadd+0x500>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	0424      	lsls	r4, r4, #16
 8000a84:	4320      	orrs	r0, r4
 8000a86:	4664      	mov	r4, ip
 8000a88:	2c38      	cmp	r4, #56	; 0x38
 8000a8a:	dc3d      	bgt.n	8000b08 <__aeabi_dadd+0x42c>
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	2c1f      	cmp	r4, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3b8>
 8000a92:	e0b7      	b.n	8000c04 <__aeabi_dadd+0x528>
 8000a94:	2520      	movs	r5, #32
 8000a96:	001e      	movs	r6, r3
 8000a98:	1b2d      	subs	r5, r5, r4
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	40ab      	lsls	r3, r5
 8000a9e:	40ac      	lsls	r4, r5
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40d0      	lsrs	r0, r2
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	1e5d      	subs	r5, r3, #1
 8000aa8:	41ab      	sbcs	r3, r5
 8000aaa:	4334      	orrs	r4, r6
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	e02c      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000ab4:	0742      	lsls	r2, r0, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c0      	lsrs	r0, r0, #3
 8000abc:	e73b      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000abe:	185c      	adds	r4, r3, r1
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4440      	add	r0, r8
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	18c7      	adds	r7, r0, r3
 8000aca:	2601      	movs	r6, #1
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x3f6>
 8000ad0:	e729      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	4a9e      	ldr	r2, [pc, #632]	; (8000d50 <__aeabi_dadd+0x674>)
 8000ad6:	0863      	lsrs	r3, r4, #1
 8000ad8:	4017      	ands	r7, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	4014      	ands	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	07fb      	lsls	r3, r7, #31
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	087f      	lsrs	r7, r7, #1
 8000ae6:	e673      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ae8:	4644      	mov	r4, r8
 8000aea:	3a20      	subs	r2, #32
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a20      	cmp	r2, #32
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x424>
 8000af4:	4667      	mov	r7, ip
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4647      	mov	r7, r8
 8000afc:	4097      	lsls	r7, r2
 8000afe:	4339      	orrs	r1, r7
 8000b00:	1e4a      	subs	r2, r1, #1
 8000b02:	4191      	sbcs	r1, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	e635      	b.n	8000774 <__aeabi_dadd+0x98>
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	1acc      	subs	r4, r1, r3
 8000b10:	42a1      	cmp	r1, r4
 8000b12:	41bf      	sbcs	r7, r7
 8000b14:	4643      	mov	r3, r8
 8000b16:	427f      	negs	r7, r7
 8000b18:	4655      	mov	r5, sl
 8000b1a:	464e      	mov	r6, r9
 8000b1c:	1bdf      	subs	r7, r3, r7
 8000b1e:	e62e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000b20:	0002      	movs	r2, r0
 8000b22:	431a      	orrs	r2, r3
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x44c>
 8000b26:	e0bd      	b.n	8000ca4 <__aeabi_dadd+0x5c8>
 8000b28:	4662      	mov	r2, ip
 8000b2a:	4664      	mov	r4, ip
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2c01      	cmp	r4, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x458>
 8000b32:	e0e5      	b.n	8000d00 <__aeabi_dadd+0x624>
 8000b34:	4c85      	ldr	r4, [pc, #532]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d058      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	e749      	b.n	80009d2 <__aeabi_dadd+0x2f6>
 8000b3e:	4664      	mov	r4, ip
 8000b40:	2220      	movs	r2, #32
 8000b42:	1b12      	subs	r2, r2, r4
 8000b44:	4644      	mov	r4, r8
 8000b46:	4094      	lsls	r4, r2
 8000b48:	000f      	movs	r7, r1
 8000b4a:	46a1      	mov	r9, r4
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	40e7      	lsrs	r7, r4
 8000b52:	464c      	mov	r4, r9
 8000b54:	1e4a      	subs	r2, r1, #1
 8000b56:	4191      	sbcs	r1, r2
 8000b58:	433c      	orrs	r4, r7
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	40ca      	lsrs	r2, r1
 8000b62:	1880      	adds	r0, r0, r2
 8000b64:	e6f4      	b.n	8000950 <__aeabi_dadd+0x274>
 8000b66:	4c79      	ldr	r4, [pc, #484]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x492>
 8000b6c:	e6fd      	b.n	800096a <__aeabi_dadd+0x28e>
 8000b6e:	1859      	adds	r1, r3, r1
 8000b70:	4299      	cmp	r1, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4440      	add	r0, r8
 8000b76:	425f      	negs	r7, r3
 8000b78:	19c7      	adds	r7, r0, r7
 8000b7a:	07fc      	lsls	r4, r7, #31
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	0016      	movs	r6, r2
 8000b80:	430c      	orrs	r4, r1
 8000b82:	087f      	lsrs	r7, r7, #1
 8000b84:	e6cf      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000b86:	1acc      	subs	r4, r1, r3
 8000b88:	42a1      	cmp	r1, r4
 8000b8a:	41bf      	sbcs	r7, r7
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	427f      	negs	r7, r7
 8000b90:	1a18      	subs	r0, r3, r0
 8000b92:	4655      	mov	r5, sl
 8000b94:	1bc7      	subs	r7, r0, r7
 8000b96:	e5f7      	b.n	8000788 <__aeabi_dadd+0xac>
 8000b98:	08c9      	lsrs	r1, r1, #3
 8000b9a:	077b      	lsls	r3, r7, #29
 8000b9c:	4655      	mov	r5, sl
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	e6c8      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ce>
 8000ba8:	e081      	b.n	8000cae <__aeabi_dadd+0x5d2>
 8000baa:	4643      	mov	r3, r8
 8000bac:	430b      	orrs	r3, r1
 8000bae:	d115      	bne.n	8000bdc <__aeabi_dadd+0x500>
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	0300      	lsls	r0, r0, #12
 8000bb6:	e6e3      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000bb8:	1a5c      	subs	r4, r3, r1
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	1bc7      	subs	r7, r0, r7
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	e5da      	b.n	800077e <__aeabi_dadd+0xa2>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	e6d2      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bd2:	0742      	lsls	r2, r0, #29
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	e6ac      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000bdc:	4643      	mov	r3, r8
 8000bde:	4642      	mov	r2, r8
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	075b      	lsls	r3, r3, #29
 8000be4:	4655      	mov	r5, sl
 8000be6:	430b      	orrs	r3, r1
 8000be8:	08d0      	lsrs	r0, r2, #3
 8000bea:	e6c5      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bec:	4643      	mov	r3, r8
 8000bee:	4642      	mov	r2, r8
 8000bf0:	075b      	lsls	r3, r3, #29
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	08d0      	lsrs	r0, r2, #3
 8000bf8:	e6be      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	e6fc      	b.n	80009fe <__aeabi_dadd+0x322>
 8000c04:	0002      	movs	r2, r0
 8000c06:	3c20      	subs	r4, #32
 8000c08:	40e2      	lsrs	r2, r4
 8000c0a:	0014      	movs	r4, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	2a20      	cmp	r2, #32
 8000c10:	d003      	beq.n	8000c1a <__aeabi_dadd+0x53e>
 8000c12:	2540      	movs	r5, #64	; 0x40
 8000c14:	1aad      	subs	r5, r5, r2
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	1e58      	subs	r0, r3, #1
 8000c1c:	4183      	sbcs	r3, r0
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	e775      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d0e2      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000c26:	003a      	movs	r2, r7
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	d0cd      	beq.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000c2c:	0742      	lsls	r2, r0, #29
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	0312      	lsls	r2, r2, #12
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d006      	beq.n	8000c4a <__aeabi_dadd+0x56e>
 8000c3c:	08fc      	lsrs	r4, r7, #3
 8000c3e:	4214      	tst	r4, r2
 8000c40:	d103      	bne.n	8000c4a <__aeabi_dadd+0x56e>
 8000c42:	0020      	movs	r0, r4
 8000c44:	08cb      	lsrs	r3, r1, #3
 8000c46:	077a      	lsls	r2, r7, #29
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	0f5a      	lsrs	r2, r3, #29
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	0752      	lsls	r2, r2, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	e690      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000c56:	4643      	mov	r3, r8
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x582>
 8000c5c:	e709      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	4642      	mov	r2, r8
 8000c62:	08c9      	lsrs	r1, r1, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4655      	mov	r5, sl
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	08d0      	lsrs	r0, r2, #3
 8000c6c:	e666      	b.n	800093c <__aeabi_dadd+0x260>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	1a3f      	subs	r7, r7, r0
 8000c76:	4249      	negs	r1, r1
 8000c78:	4655      	mov	r5, sl
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e57e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000c80:	4642      	mov	r2, r8
 8000c82:	1a5c      	subs	r4, r3, r1
 8000c84:	1a87      	subs	r7, r0, r2
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	1abf      	subs	r7, r7, r2
 8000c8e:	023a      	lsls	r2, r7, #8
 8000c90:	d53d      	bpl.n	8000d0e <__aeabi_dadd+0x632>
 8000c92:	1acc      	subs	r4, r1, r3
 8000c94:	42a1      	cmp	r1, r4
 8000c96:	4189      	sbcs	r1, r1
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	1a1f      	subs	r7, r3, r0
 8000c9e:	4655      	mov	r5, sl
 8000ca0:	1a7f      	subs	r7, r7, r1
 8000ca2:	e595      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	08f8      	lsrs	r0, r7, #3
 8000cac:	e643      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000cae:	4644      	mov	r4, r8
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	d130      	bne.n	8000d18 <__aeabi_dadd+0x63c>
 8000cb6:	0742      	lsls	r2, r0, #29
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	e65c      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000cbe:	077b      	lsls	r3, r7, #29
 8000cc0:	08c9      	lsrs	r1, r1, #3
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	08f8      	lsrs	r0, r7, #3
 8000cc6:	e639      	b.n	800093c <__aeabi_dadd+0x260>
 8000cc8:	185c      	adds	r4, r3, r1
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	419b      	sbcs	r3, r3
 8000cce:	4440      	add	r0, r8
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	18c7      	adds	r7, r0, r3
 8000cd4:	023b      	lsls	r3, r7, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dadd+0x5fe>
 8000cd8:	e625      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <__aeabi_dadd+0x674>)
 8000cdc:	2601      	movs	r6, #1
 8000cde:	401f      	ands	r7, r3
 8000ce0:	e621      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	3a20      	subs	r2, #32
 8000ce6:	40d4      	lsrs	r4, r2
 8000ce8:	4662      	mov	r2, ip
 8000cea:	2a20      	cmp	r2, #32
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_dadd+0x61c>
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	1b92      	subs	r2, r2, r6
 8000cf4:	4090      	lsls	r0, r2
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4193      	sbcs	r3, r2
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	e67e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000d00:	185c      	adds	r4, r3, r1
 8000d02:	428c      	cmp	r4, r1
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4440      	add	r0, r8
 8000d08:	4249      	negs	r1, r1
 8000d0a:	1847      	adds	r7, r0, r1
 8000d0c:	e6dd      	b.n	8000aca <__aeabi_dadd+0x3ee>
 8000d0e:	0023      	movs	r3, r4
 8000d10:	433b      	orrs	r3, r7
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x63a>
 8000d14:	e6ad      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000d16:	e606      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d18:	0744      	lsls	r4, r0, #29
 8000d1a:	4323      	orrs	r3, r4
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	08c0      	lsrs	r0, r0, #3
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4220      	tst	r0, r4
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x65c>
 8000d26:	4642      	mov	r2, r8
 8000d28:	08d6      	lsrs	r6, r2, #3
 8000d2a:	4226      	tst	r6, r4
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x65c>
 8000d2e:	4655      	mov	r5, sl
 8000d30:	0030      	movs	r0, r6
 8000d32:	08cb      	lsrs	r3, r1, #3
 8000d34:	0751      	lsls	r1, r2, #29
 8000d36:	430b      	orrs	r3, r1
 8000d38:	0f5a      	lsrs	r2, r3, #29
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	0752      	lsls	r2, r2, #29
 8000d40:	4313      	orrs	r3, r2
 8000d42:	e619      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x670>)
 8000d48:	001f      	movs	r7, r3
 8000d4a:	e55e      	b.n	800080a <__aeabi_dadd+0x12e>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4681      	mov	r9, r0
 8000d62:	0005      	movs	r5, r0
 8000d64:	030c      	lsls	r4, r1, #12
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	0b24      	lsrs	r4, r4, #12
 8000d70:	0d40      	lsrs	r0, r0, #21
 8000d72:	0fce      	lsrs	r6, r1, #31
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x26>
 8000d78:	e156      	b.n	8001028 <__aeabi_ddiv+0x2d4>
 8000d7a:	4bd4      	ldr	r3, [pc, #848]	; (80010cc <__aeabi_ddiv+0x378>)
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x2e>
 8000d80:	e172      	b.n	8001068 <__aeabi_ddiv+0x314>
 8000d82:	0f6b      	lsrs	r3, r5, #29
 8000d84:	00e4      	lsls	r4, r4, #3
 8000d86:	431c      	orrs	r4, r3
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	4698      	mov	r8, r3
 8000d90:	4bcf      	ldr	r3, [pc, #828]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000d92:	00ed      	lsls	r5, r5, #3
 8000d94:	469b      	mov	fp, r3
 8000d96:	2300      	movs	r3, #0
 8000d98:	4699      	mov	r9, r3
 8000d9a:	4483      	add	fp, r0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	033c      	lsls	r4, r7, #12
 8000da0:	007b      	lsls	r3, r7, #1
 8000da2:	4650      	mov	r0, sl
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	0d5b      	lsrs	r3, r3, #21
 8000da8:	0fff      	lsrs	r7, r7, #31
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x5c>
 8000dae:	e11f      	b.n	8000ff0 <__aeabi_ddiv+0x29c>
 8000db0:	4ac6      	ldr	r2, [pc, #792]	; (80010cc <__aeabi_ddiv+0x378>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x64>
 8000db6:	e162      	b.n	800107e <__aeabi_ddiv+0x32a>
 8000db8:	49c5      	ldr	r1, [pc, #788]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	00e4      	lsls	r4, r4, #3
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	4463      	add	r3, ip
 8000dc8:	0412      	lsls	r2, r2, #16
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	4314      	orrs	r4, r2
 8000dce:	469b      	mov	fp, r3
 8000dd0:	00c2      	lsls	r2, r0, #3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	0033      	movs	r3, r6
 8000dd6:	407b      	eors	r3, r7
 8000dd8:	469a      	mov	sl, r3
 8000dda:	464b      	mov	r3, r9
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d827      	bhi.n	8000e30 <__aeabi_ddiv+0xdc>
 8000de0:	49bc      	ldr	r1, [pc, #752]	; (80010d4 <__aeabi_ddiv+0x380>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58cb      	ldr	r3, [r1, r3]
 8000de6:	469f      	mov	pc, r3
 8000de8:	46b2      	mov	sl, r6
 8000dea:	9b00      	ldr	r3, [sp, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d016      	beq.n	8000e1e <__aeabi_ddiv+0xca>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0xa2>
 8000df4:	e28e      	b.n	8001314 <__aeabi_ddiv+0x5c0>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d000      	beq.n	8000dfc <__aeabi_ddiv+0xa8>
 8000dfa:	e0d9      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2400      	movs	r4, #0
 8000e00:	2500      	movs	r5, #0
 8000e02:	4652      	mov	r2, sl
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	4323      	orrs	r3, r4
 8000e08:	07d2      	lsls	r2, r2, #31
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	0019      	movs	r1, r3
 8000e10:	b005      	add	sp, #20
 8000e12:	bcf0      	pop	{r4, r5, r6, r7}
 8000e14:	46bb      	mov	fp, r7
 8000e16:	46b2      	mov	sl, r6
 8000e18:	46a9      	mov	r9, r5
 8000e1a:	46a0      	mov	r8, r4
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2500      	movs	r5, #0
 8000e22:	4baa      	ldr	r3, [pc, #680]	; (80010cc <__aeabi_ddiv+0x378>)
 8000e24:	e7ed      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000e26:	46ba      	mov	sl, r7
 8000e28:	46a0      	mov	r8, r4
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	9000      	str	r0, [sp, #0]
 8000e2e:	e7dc      	b.n	8000dea <__aeabi_ddiv+0x96>
 8000e30:	4544      	cmp	r4, r8
 8000e32:	d200      	bcs.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e1c7      	b.n	80011c6 <__aeabi_ddiv+0x472>
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xe6>
 8000e38:	e1c2      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	469c      	mov	ip, r3
 8000e40:	002e      	movs	r6, r5
 8000e42:	4640      	mov	r0, r8
 8000e44:	2500      	movs	r5, #0
 8000e46:	44e3      	add	fp, ip
 8000e48:	0223      	lsls	r3, r4, #8
 8000e4a:	0e14      	lsrs	r4, r2, #24
 8000e4c:	431c      	orrs	r4, r3
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	4699      	mov	r9, r3
 8000e52:	0423      	lsls	r3, r4, #16
 8000e54:	0c1f      	lsrs	r7, r3, #16
 8000e56:	0212      	lsls	r2, r2, #8
 8000e58:	4649      	mov	r1, r9
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	f7ff f9f5 	bl	800024c <__aeabi_uidivmod>
 8000e62:	0002      	movs	r2, r0
 8000e64:	437a      	muls	r2, r7
 8000e66:	040b      	lsls	r3, r1, #16
 8000e68:	0c31      	lsrs	r1, r6, #16
 8000e6a:	4680      	mov	r8, r0
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d907      	bls.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	1909      	adds	r1, r1, r4
 8000e7a:	44e0      	add	r8, ip
 8000e7c:	428c      	cmp	r4, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e80:	e207      	b.n	8001292 <__aeabi_ddiv+0x53e>
 8000e82:	1a88      	subs	r0, r1, r2
 8000e84:	4649      	mov	r1, r9
 8000e86:	f7ff f9e1 	bl	800024c <__aeabi_uidivmod>
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	4666      	mov	r6, ip
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	0c09      	lsrs	r1, r1, #16
 8000e96:	4342      	muls	r2, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	4331      	orrs	r1, r6
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d904      	bls.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d800      	bhi.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea8:	e1ed      	b.n	8001286 <__aeabi_ddiv+0x532>
 8000eaa:	1a88      	subs	r0, r1, r2
 8000eac:	4642      	mov	r2, r8
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	040e      	lsls	r6, r1, #16
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	001f      	movs	r7, r3
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	9b00      	ldr	r3, [sp, #0]
 8000ec2:	0c36      	lsrs	r6, r6, #16
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	0c19      	lsrs	r1, r3, #16
 8000ec8:	000b      	movs	r3, r1
 8000eca:	4373      	muls	r3, r6
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	437e      	muls	r6, r7
 8000ed0:	9103      	str	r1, [sp, #12]
 8000ed2:	4351      	muls	r1, r2
 8000ed4:	437a      	muls	r2, r7
 8000ed6:	0c1f      	lsrs	r7, r3, #16
 8000ed8:	46bc      	mov	ip, r7
 8000eda:	1876      	adds	r6, r6, r1
 8000edc:	4466      	add	r6, ip
 8000ede:	42b1      	cmp	r1, r6
 8000ee0:	d903      	bls.n	8000eea <__aeabi_ddiv+0x196>
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	4462      	add	r2, ip
 8000eea:	0c31      	lsrs	r1, r6, #16
 8000eec:	188a      	adds	r2, r1, r2
 8000eee:	0431      	lsls	r1, r6, #16
 8000ef0:	041e      	lsls	r6, r3, #16
 8000ef2:	0c36      	lsrs	r6, r6, #16
 8000ef4:	198e      	adds	r6, r1, r6
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d302      	bcc.n	8000f00 <__aeabi_ddiv+0x1ac>
 8000efa:	d112      	bne.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000efc:	42b5      	cmp	r5, r6
 8000efe:	d210      	bcs.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000f00:	4643      	mov	r3, r8
 8000f02:	1e59      	subs	r1, r3, #1
 8000f04:	9b00      	ldr	r3, [sp, #0]
 8000f06:	469c      	mov	ip, r3
 8000f08:	4465      	add	r5, ip
 8000f0a:	001f      	movs	r7, r3
 8000f0c:	429d      	cmp	r5, r3
 8000f0e:	419b      	sbcs	r3, r3
 8000f10:	425b      	negs	r3, r3
 8000f12:	191b      	adds	r3, r3, r4
 8000f14:	18c0      	adds	r0, r0, r3
 8000f16:	4284      	cmp	r4, r0
 8000f18:	d200      	bcs.n	8000f1c <__aeabi_ddiv+0x1c8>
 8000f1a:	e1a0      	b.n	800125e <__aeabi_ddiv+0x50a>
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x1cc>
 8000f1e:	e19b      	b.n	8001258 <__aeabi_ddiv+0x504>
 8000f20:	4688      	mov	r8, r1
 8000f22:	1bae      	subs	r6, r5, r6
 8000f24:	42b5      	cmp	r5, r6
 8000f26:	41ad      	sbcs	r5, r5
 8000f28:	1a80      	subs	r0, r0, r2
 8000f2a:	426d      	negs	r5, r5
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x1e0>
 8000f32:	e1d5      	b.n	80012e0 <__aeabi_ddiv+0x58c>
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f989 	bl	800024c <__aeabi_uidivmod>
 8000f3a:	9a01      	ldr	r2, [sp, #4]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4342      	muls	r2, r0
 8000f40:	0c31      	lsrs	r1, r6, #16
 8000f42:	0005      	movs	r5, r0
 8000f44:	4319      	orrs	r1, r3
 8000f46:	428a      	cmp	r2, r1
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x1f8>
 8000f4a:	e16c      	b.n	8001226 <__aeabi_ddiv+0x4d2>
 8000f4c:	1a88      	subs	r0, r1, r2
 8000f4e:	4649      	mov	r1, r9
 8000f50:	f7ff f97c 	bl	800024c <__aeabi_uidivmod>
 8000f54:	9a01      	ldr	r2, [sp, #4]
 8000f56:	0436      	lsls	r6, r6, #16
 8000f58:	4342      	muls	r2, r0
 8000f5a:	0409      	lsls	r1, r1, #16
 8000f5c:	0c36      	lsrs	r6, r6, #16
 8000f5e:	0003      	movs	r3, r0
 8000f60:	430e      	orrs	r6, r1
 8000f62:	42b2      	cmp	r2, r6
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x214>
 8000f66:	e153      	b.n	8001210 <__aeabi_ddiv+0x4bc>
 8000f68:	9803      	ldr	r0, [sp, #12]
 8000f6a:	1ab6      	subs	r6, r6, r2
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	042d      	lsls	r5, r5, #16
 8000f70:	431d      	orrs	r5, r3
 8000f72:	9f02      	ldr	r7, [sp, #8]
 8000f74:	042b      	lsls	r3, r5, #16
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	437b      	muls	r3, r7
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	0c29      	lsrs	r1, r5, #16
 8000f80:	4348      	muls	r0, r1
 8000f82:	0c13      	lsrs	r3, r2, #16
 8000f84:	4484      	add	ip, r0
 8000f86:	4463      	add	r3, ip
 8000f88:	4379      	muls	r1, r7
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x242>
 8000f8e:	2080      	movs	r0, #128	; 0x80
 8000f90:	0240      	lsls	r0, r0, #9
 8000f92:	4684      	mov	ip, r0
 8000f94:	4461      	add	r1, ip
 8000f96:	0c18      	lsrs	r0, r3, #16
 8000f98:	0412      	lsls	r2, r2, #16
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	0c12      	lsrs	r2, r2, #16
 8000f9e:	1841      	adds	r1, r0, r1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	428e      	cmp	r6, r1
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x254>
 8000fa6:	e0ff      	b.n	80011a8 <__aeabi_ddiv+0x454>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x258>
 8000faa:	e0fa      	b.n	80011a2 <__aeabi_ddiv+0x44e>
 8000fac:	2301      	movs	r3, #1
 8000fae:	431d      	orrs	r5, r3
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <__aeabi_ddiv+0x384>)
 8000fb2:	445a      	add	r2, fp
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_ddiv+0x266>
 8000fb8:	e0aa      	b.n	8001110 <__aeabi_ddiv+0x3bc>
 8000fba:	076b      	lsls	r3, r5, #29
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0x26c>
 8000fbe:	e13d      	b.n	800123c <__aeabi_ddiv+0x4e8>
 8000fc0:	08ed      	lsrs	r5, r5, #3
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	01db      	lsls	r3, r3, #7
 8000fc6:	d506      	bpl.n	8000fd6 <__aeabi_ddiv+0x282>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <__aeabi_ddiv+0x388>)
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4690      	mov	r8, r2
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	00d2      	lsls	r2, r2, #3
 8000fd4:	445a      	add	r2, fp
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <__aeabi_ddiv+0x38c>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dd00      	ble.n	8000fde <__aeabi_ddiv+0x28a>
 8000fdc:	e71f      	b.n	8000e1e <__aeabi_ddiv+0xca>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	431d      	orrs	r5, r3
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0552      	lsls	r2, r2, #21
 8000fe8:	025c      	lsls	r4, r3, #9
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	0d53      	lsrs	r3, r2, #21
 8000fee:	e708      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	4322      	orrs	r2, r4
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_ddiv+0x2a4>
 8000ff6:	e07b      	b.n	80010f0 <__aeabi_ddiv+0x39c>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x2aa>
 8000ffc:	e0fa      	b.n	80011f4 <__aeabi_ddiv+0x4a0>
 8000ffe:	0020      	movs	r0, r4
 8001000:	f001 f952 	bl	80022a8 <__clzsi2>
 8001004:	0002      	movs	r2, r0
 8001006:	3a0b      	subs	r2, #11
 8001008:	231d      	movs	r3, #29
 800100a:	0001      	movs	r1, r0
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	4652      	mov	r2, sl
 8001010:	3908      	subs	r1, #8
 8001012:	40da      	lsrs	r2, r3
 8001014:	408c      	lsls	r4, r1
 8001016:	4314      	orrs	r4, r2
 8001018:	4652      	mov	r2, sl
 800101a:	408a      	lsls	r2, r1
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <__aeabi_ddiv+0x390>)
 800101e:	4458      	add	r0, fp
 8001020:	469b      	mov	fp, r3
 8001022:	4483      	add	fp, r0
 8001024:	2000      	movs	r0, #0
 8001026:	e6d5      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001028:	464b      	mov	r3, r9
 800102a:	4323      	orrs	r3, r4
 800102c:	4698      	mov	r8, r3
 800102e:	d044      	beq.n	80010ba <__aeabi_ddiv+0x366>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_ddiv+0x2e2>
 8001034:	e0ce      	b.n	80011d4 <__aeabi_ddiv+0x480>
 8001036:	0020      	movs	r0, r4
 8001038:	f001 f936 	bl	80022a8 <__clzsi2>
 800103c:	0001      	movs	r1, r0
 800103e:	0002      	movs	r2, r0
 8001040:	390b      	subs	r1, #11
 8001042:	231d      	movs	r3, #29
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4649      	mov	r1, r9
 8001048:	0010      	movs	r0, r2
 800104a:	40d9      	lsrs	r1, r3
 800104c:	3808      	subs	r0, #8
 800104e:	4084      	lsls	r4, r0
 8001050:	000b      	movs	r3, r1
 8001052:	464d      	mov	r5, r9
 8001054:	4323      	orrs	r3, r4
 8001056:	4698      	mov	r8, r3
 8001058:	4085      	lsls	r5, r0
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <__aeabi_ddiv+0x394>)
 800105c:	1a83      	subs	r3, r0, r2
 800105e:	469b      	mov	fp, r3
 8001060:	2300      	movs	r3, #0
 8001062:	4699      	mov	r9, r3
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	e69a      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 8001068:	464b      	mov	r3, r9
 800106a:	4323      	orrs	r3, r4
 800106c:	4698      	mov	r8, r3
 800106e:	d11d      	bne.n	80010ac <__aeabi_ddiv+0x358>
 8001070:	2308      	movs	r3, #8
 8001072:	4699      	mov	r9, r3
 8001074:	3b06      	subs	r3, #6
 8001076:	2500      	movs	r5, #0
 8001078:	4683      	mov	fp, r0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	e68f      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 800107e:	4652      	mov	r2, sl
 8001080:	4322      	orrs	r2, r4
 8001082:	d109      	bne.n	8001098 <__aeabi_ddiv+0x344>
 8001084:	2302      	movs	r3, #2
 8001086:	4649      	mov	r1, r9
 8001088:	4319      	orrs	r1, r3
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <__aeabi_ddiv+0x398>)
 800108c:	4689      	mov	r9, r1
 800108e:	469c      	mov	ip, r3
 8001090:	2400      	movs	r4, #0
 8001092:	2002      	movs	r0, #2
 8001094:	44e3      	add	fp, ip
 8001096:	e69d      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001098:	2303      	movs	r3, #3
 800109a:	464a      	mov	r2, r9
 800109c:	431a      	orrs	r2, r3
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <__aeabi_ddiv+0x398>)
 80010a0:	4691      	mov	r9, r2
 80010a2:	469c      	mov	ip, r3
 80010a4:	4652      	mov	r2, sl
 80010a6:	2003      	movs	r0, #3
 80010a8:	44e3      	add	fp, ip
 80010aa:	e693      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010ac:	230c      	movs	r3, #12
 80010ae:	4699      	mov	r9, r3
 80010b0:	3b09      	subs	r3, #9
 80010b2:	46a0      	mov	r8, r4
 80010b4:	4683      	mov	fp, r0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	e671      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ba:	2304      	movs	r3, #4
 80010bc:	4699      	mov	r9, r3
 80010be:	2300      	movs	r3, #0
 80010c0:	469b      	mov	fp, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	2500      	movs	r5, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	e669      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	000007ff 	.word	0x000007ff
 80010d0:	fffffc01 	.word	0xfffffc01
 80010d4:	08009eec 	.word	0x08009eec
 80010d8:	000003ff 	.word	0x000003ff
 80010dc:	feffffff 	.word	0xfeffffff
 80010e0:	000007fe 	.word	0x000007fe
 80010e4:	000003f3 	.word	0x000003f3
 80010e8:	fffffc0d 	.word	0xfffffc0d
 80010ec:	fffff801 	.word	0xfffff801
 80010f0:	4649      	mov	r1, r9
 80010f2:	2301      	movs	r3, #1
 80010f4:	4319      	orrs	r1, r3
 80010f6:	4689      	mov	r9, r1
 80010f8:	2400      	movs	r4, #0
 80010fa:	2001      	movs	r0, #1
 80010fc:	e66a      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010fe:	2300      	movs	r3, #0
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	469a      	mov	sl, r3
 8001104:	2500      	movs	r5, #0
 8001106:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	e67a      	b.n	8000e02 <__aeabi_ddiv+0xae>
 800110c:	2501      	movs	r5, #1
 800110e:	426d      	negs	r5, r5
 8001110:	2301      	movs	r3, #1
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	2b38      	cmp	r3, #56	; 0x38
 8001116:	dd00      	ble.n	800111a <__aeabi_ddiv+0x3c6>
 8001118:	e670      	b.n	8000dfc <__aeabi_ddiv+0xa8>
 800111a:	2b1f      	cmp	r3, #31
 800111c:	dc00      	bgt.n	8001120 <__aeabi_ddiv+0x3cc>
 800111e:	e0bf      	b.n	80012a0 <__aeabi_ddiv+0x54c>
 8001120:	211f      	movs	r1, #31
 8001122:	4249      	negs	r1, r1
 8001124:	1a8a      	subs	r2, r1, r2
 8001126:	4641      	mov	r1, r8
 8001128:	40d1      	lsrs	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	2b20      	cmp	r3, #32
 800112e:	d004      	beq.n	800113a <__aeabi_ddiv+0x3e6>
 8001130:	4641      	mov	r1, r8
 8001132:	4b80      	ldr	r3, [pc, #512]	; (8001334 <__aeabi_ddiv+0x5e0>)
 8001134:	445b      	add	r3, fp
 8001136:	4099      	lsls	r1, r3
 8001138:	430d      	orrs	r5, r1
 800113a:	1e6b      	subs	r3, r5, #1
 800113c:	419d      	sbcs	r5, r3
 800113e:	2307      	movs	r3, #7
 8001140:	432a      	orrs	r2, r5
 8001142:	001d      	movs	r5, r3
 8001144:	2400      	movs	r4, #0
 8001146:	4015      	ands	r5, r2
 8001148:	4213      	tst	r3, r2
 800114a:	d100      	bne.n	800114e <__aeabi_ddiv+0x3fa>
 800114c:	e0d4      	b.n	80012f8 <__aeabi_ddiv+0x5a4>
 800114e:	210f      	movs	r1, #15
 8001150:	2300      	movs	r3, #0
 8001152:	4011      	ands	r1, r2
 8001154:	2904      	cmp	r1, #4
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x406>
 8001158:	e0cb      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800115a:	1d11      	adds	r1, r2, #4
 800115c:	4291      	cmp	r1, r2
 800115e:	4192      	sbcs	r2, r2
 8001160:	4252      	negs	r2, r2
 8001162:	189b      	adds	r3, r3, r2
 8001164:	000a      	movs	r2, r1
 8001166:	0219      	lsls	r1, r3, #8
 8001168:	d400      	bmi.n	800116c <__aeabi_ddiv+0x418>
 800116a:	e0c2      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800116c:	2301      	movs	r3, #1
 800116e:	2400      	movs	r4, #0
 8001170:	2500      	movs	r5, #0
 8001172:	e646      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	4641      	mov	r1, r8
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	4219      	tst	r1, r3
 800117c:	d008      	beq.n	8001190 <__aeabi_ddiv+0x43c>
 800117e:	421c      	tst	r4, r3
 8001180:	d106      	bne.n	8001190 <__aeabi_ddiv+0x43c>
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	46ba      	mov	sl, r7
 8001188:	0015      	movs	r5, r2
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	e638      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001190:	2480      	movs	r4, #128	; 0x80
 8001192:	4643      	mov	r3, r8
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	46b2      	mov	sl, r6
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e62f      	b.n	8000e02 <__aeabi_ddiv+0xae>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x454>
 80011a6:	e703      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80011a8:	19a6      	adds	r6, r4, r6
 80011aa:	1e68      	subs	r0, r5, #1
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d200      	bcs.n	80011b2 <__aeabi_ddiv+0x45e>
 80011b0:	e08d      	b.n	80012ce <__aeabi_ddiv+0x57a>
 80011b2:	428e      	cmp	r6, r1
 80011b4:	d200      	bcs.n	80011b8 <__aeabi_ddiv+0x464>
 80011b6:	e0a3      	b.n	8001300 <__aeabi_ddiv+0x5ac>
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x468>
 80011ba:	e0b3      	b.n	8001324 <__aeabi_ddiv+0x5d0>
 80011bc:	0005      	movs	r5, r0
 80011be:	e6f5      	b.n	8000fac <__aeabi_ddiv+0x258>
 80011c0:	42aa      	cmp	r2, r5
 80011c2:	d900      	bls.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e639      	b.n	8000e3a <__aeabi_ddiv+0xe6>
 80011c6:	4643      	mov	r3, r8
 80011c8:	07de      	lsls	r6, r3, #31
 80011ca:	0858      	lsrs	r0, r3, #1
 80011cc:	086b      	lsrs	r3, r5, #1
 80011ce:	431e      	orrs	r6, r3
 80011d0:	07ed      	lsls	r5, r5, #31
 80011d2:	e639      	b.n	8000e48 <__aeabi_ddiv+0xf4>
 80011d4:	4648      	mov	r0, r9
 80011d6:	f001 f867 	bl	80022a8 <__clzsi2>
 80011da:	0001      	movs	r1, r0
 80011dc:	0002      	movs	r2, r0
 80011de:	3115      	adds	r1, #21
 80011e0:	3220      	adds	r2, #32
 80011e2:	291c      	cmp	r1, #28
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_ddiv+0x494>
 80011e6:	e72c      	b.n	8001042 <__aeabi_ddiv+0x2ee>
 80011e8:	464b      	mov	r3, r9
 80011ea:	3808      	subs	r0, #8
 80011ec:	4083      	lsls	r3, r0
 80011ee:	2500      	movs	r5, #0
 80011f0:	4698      	mov	r8, r3
 80011f2:	e732      	b.n	800105a <__aeabi_ddiv+0x306>
 80011f4:	f001 f858 	bl	80022a8 <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	001a      	movs	r2, r3
 80011fc:	3215      	adds	r2, #21
 80011fe:	3020      	adds	r0, #32
 8001200:	2a1c      	cmp	r2, #28
 8001202:	dc00      	bgt.n	8001206 <__aeabi_ddiv+0x4b2>
 8001204:	e700      	b.n	8001008 <__aeabi_ddiv+0x2b4>
 8001206:	4654      	mov	r4, sl
 8001208:	3b08      	subs	r3, #8
 800120a:	2200      	movs	r2, #0
 800120c:	409c      	lsls	r4, r3
 800120e:	e705      	b.n	800101c <__aeabi_ddiv+0x2c8>
 8001210:	1936      	adds	r6, r6, r4
 8001212:	3b01      	subs	r3, #1
 8001214:	42b4      	cmp	r4, r6
 8001216:	d900      	bls.n	800121a <__aeabi_ddiv+0x4c6>
 8001218:	e6a6      	b.n	8000f68 <__aeabi_ddiv+0x214>
 800121a:	42b2      	cmp	r2, r6
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x4cc>
 800121e:	e6a3      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001220:	1e83      	subs	r3, r0, #2
 8001222:	1936      	adds	r6, r6, r4
 8001224:	e6a0      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001226:	1909      	adds	r1, r1, r4
 8001228:	3d01      	subs	r5, #1
 800122a:	428c      	cmp	r4, r1
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x4dc>
 800122e:	e68d      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001230:	428a      	cmp	r2, r1
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x4e2>
 8001234:	e68a      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001236:	1e85      	subs	r5, r0, #2
 8001238:	1909      	adds	r1, r1, r4
 800123a:	e687      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 800123c:	230f      	movs	r3, #15
 800123e:	402b      	ands	r3, r5
 8001240:	2b04      	cmp	r3, #4
 8001242:	d100      	bne.n	8001246 <__aeabi_ddiv+0x4f2>
 8001244:	e6bc      	b.n	8000fc0 <__aeabi_ddiv+0x26c>
 8001246:	2305      	movs	r3, #5
 8001248:	425b      	negs	r3, r3
 800124a:	42ab      	cmp	r3, r5
 800124c:	419b      	sbcs	r3, r3
 800124e:	3504      	adds	r5, #4
 8001250:	425b      	negs	r3, r3
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	4498      	add	r8, r3
 8001256:	e6b4      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 8001258:	42af      	cmp	r7, r5
 800125a:	d900      	bls.n	800125e <__aeabi_ddiv+0x50a>
 800125c:	e660      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800125e:	4282      	cmp	r2, r0
 8001260:	d804      	bhi.n	800126c <__aeabi_ddiv+0x518>
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x512>
 8001264:	e65c      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 8001266:	42ae      	cmp	r6, r5
 8001268:	d800      	bhi.n	800126c <__aeabi_ddiv+0x518>
 800126a:	e659      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800126c:	2302      	movs	r3, #2
 800126e:	425b      	negs	r3, r3
 8001270:	469c      	mov	ip, r3
 8001272:	9b00      	ldr	r3, [sp, #0]
 8001274:	44e0      	add	r8, ip
 8001276:	469c      	mov	ip, r3
 8001278:	4465      	add	r5, ip
 800127a:	429d      	cmp	r5, r3
 800127c:	419b      	sbcs	r3, r3
 800127e:	425b      	negs	r3, r3
 8001280:	191b      	adds	r3, r3, r4
 8001282:	18c0      	adds	r0, r0, r3
 8001284:	e64d      	b.n	8000f22 <__aeabi_ddiv+0x1ce>
 8001286:	428a      	cmp	r2, r1
 8001288:	d800      	bhi.n	800128c <__aeabi_ddiv+0x538>
 800128a:	e60e      	b.n	8000eaa <__aeabi_ddiv+0x156>
 800128c:	1e83      	subs	r3, r0, #2
 800128e:	1909      	adds	r1, r1, r4
 8001290:	e60b      	b.n	8000eaa <__aeabi_ddiv+0x156>
 8001292:	428a      	cmp	r2, r1
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x544>
 8001296:	e5f4      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 8001298:	1e83      	subs	r3, r0, #2
 800129a:	4698      	mov	r8, r3
 800129c:	1909      	adds	r1, r1, r4
 800129e:	e5f0      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 80012a0:	4925      	ldr	r1, [pc, #148]	; (8001338 <__aeabi_ddiv+0x5e4>)
 80012a2:	0028      	movs	r0, r5
 80012a4:	4459      	add	r1, fp
 80012a6:	408d      	lsls	r5, r1
 80012a8:	4642      	mov	r2, r8
 80012aa:	408a      	lsls	r2, r1
 80012ac:	1e69      	subs	r1, r5, #1
 80012ae:	418d      	sbcs	r5, r1
 80012b0:	4641      	mov	r1, r8
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	40d9      	lsrs	r1, r3
 80012b6:	4302      	orrs	r2, r0
 80012b8:	432a      	orrs	r2, r5
 80012ba:	000b      	movs	r3, r1
 80012bc:	0751      	lsls	r1, r2, #29
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x56e>
 80012c0:	e751      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012c2:	210f      	movs	r1, #15
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0x578>
 80012ca:	e746      	b.n	800115a <__aeabi_ddiv+0x406>
 80012cc:	e74b      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012ce:	0005      	movs	r5, r0
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d000      	beq.n	80012d6 <__aeabi_ddiv+0x582>
 80012d4:	e66a      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012d6:	9a00      	ldr	r2, [sp, #0]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d000      	beq.n	80012de <__aeabi_ddiv+0x58a>
 80012dc:	e666      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012de:	e667      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <__aeabi_ddiv+0x5e8>)
 80012e2:	445a      	add	r2, fp
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_ddiv+0x596>
 80012e8:	e710      	b.n	800110c <__aeabi_ddiv+0x3b8>
 80012ea:	2301      	movs	r3, #1
 80012ec:	2500      	movs	r5, #0
 80012ee:	4498      	add	r8, r3
 80012f0:	e667      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 80012f2:	075d      	lsls	r5, r3, #29
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0b1c      	lsrs	r4, r3, #12
 80012f8:	08d2      	lsrs	r2, r2, #3
 80012fa:	2300      	movs	r3, #0
 80012fc:	4315      	orrs	r5, r2
 80012fe:	e580      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001300:	9800      	ldr	r0, [sp, #0]
 8001302:	3d02      	subs	r5, #2
 8001304:	0042      	lsls	r2, r0, #1
 8001306:	4282      	cmp	r2, r0
 8001308:	41bf      	sbcs	r7, r7
 800130a:	427f      	negs	r7, r7
 800130c:	193c      	adds	r4, r7, r4
 800130e:	1936      	adds	r6, r6, r4
 8001310:	9200      	str	r2, [sp, #0]
 8001312:	e7dd      	b.n	80012d0 <__aeabi_ddiv+0x57c>
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	4643      	mov	r3, r8
 8001318:	0324      	lsls	r4, r4, #12
 800131a:	431c      	orrs	r4, r3
 800131c:	0324      	lsls	r4, r4, #12
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001320:	0b24      	lsrs	r4, r4, #12
 8001322:	e56e      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001324:	9a00      	ldr	r2, [sp, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3ea      	bcc.n	8001300 <__aeabi_ddiv+0x5ac>
 800132a:	0005      	movs	r5, r0
 800132c:	e7d3      	b.n	80012d6 <__aeabi_ddiv+0x582>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000043e 	.word	0x0000043e
 8001338:	0000041e 	.word	0x0000041e
 800133c:	000003ff 	.word	0x000003ff

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	464e      	mov	r6, r9
 8001344:	4645      	mov	r5, r8
 8001346:	46de      	mov	lr, fp
 8001348:	4657      	mov	r7, sl
 800134a:	4690      	mov	r8, r2
 800134c:	b5e0      	push	{r5, r6, r7, lr}
 800134e:	0017      	movs	r7, r2
 8001350:	031a      	lsls	r2, r3, #12
 8001352:	0b12      	lsrs	r2, r2, #12
 8001354:	0005      	movs	r5, r0
 8001356:	4684      	mov	ip, r0
 8001358:	4819      	ldr	r0, [pc, #100]	; (80013c0 <__eqdf2+0x80>)
 800135a:	030e      	lsls	r6, r1, #12
 800135c:	004c      	lsls	r4, r1, #1
 800135e:	4691      	mov	r9, r2
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	0fdb      	lsrs	r3, r3, #31
 8001364:	469b      	mov	fp, r3
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d64      	lsrs	r4, r4, #21
 800136a:	0fc9      	lsrs	r1, r1, #31
 800136c:	0d52      	lsrs	r2, r2, #21
 800136e:	4284      	cmp	r4, r0
 8001370:	d019      	beq.n	80013a6 <__eqdf2+0x66>
 8001372:	4282      	cmp	r2, r0
 8001374:	d010      	beq.n	8001398 <__eqdf2+0x58>
 8001376:	2001      	movs	r0, #1
 8001378:	4294      	cmp	r4, r2
 800137a:	d10e      	bne.n	800139a <__eqdf2+0x5a>
 800137c:	454e      	cmp	r6, r9
 800137e:	d10c      	bne.n	800139a <__eqdf2+0x5a>
 8001380:	2001      	movs	r0, #1
 8001382:	45c4      	cmp	ip, r8
 8001384:	d109      	bne.n	800139a <__eqdf2+0x5a>
 8001386:	4559      	cmp	r1, fp
 8001388:	d017      	beq.n	80013ba <__eqdf2+0x7a>
 800138a:	2c00      	cmp	r4, #0
 800138c:	d105      	bne.n	800139a <__eqdf2+0x5a>
 800138e:	0030      	movs	r0, r6
 8001390:	4328      	orrs	r0, r5
 8001392:	1e43      	subs	r3, r0, #1
 8001394:	4198      	sbcs	r0, r3
 8001396:	e000      	b.n	800139a <__eqdf2+0x5a>
 8001398:	2001      	movs	r0, #1
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	46bb      	mov	fp, r7
 800139e:	46b2      	mov	sl, r6
 80013a0:	46a9      	mov	r9, r5
 80013a2:	46a0      	mov	r8, r4
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	0033      	movs	r3, r6
 80013a8:	2001      	movs	r0, #1
 80013aa:	432b      	orrs	r3, r5
 80013ac:	d1f5      	bne.n	800139a <__eqdf2+0x5a>
 80013ae:	42a2      	cmp	r2, r4
 80013b0:	d1f3      	bne.n	800139a <__eqdf2+0x5a>
 80013b2:	464b      	mov	r3, r9
 80013b4:	433b      	orrs	r3, r7
 80013b6:	d1f0      	bne.n	800139a <__eqdf2+0x5a>
 80013b8:	e7e2      	b.n	8001380 <__eqdf2+0x40>
 80013ba:	2000      	movs	r0, #0
 80013bc:	e7ed      	b.n	800139a <__eqdf2+0x5a>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	000007ff 	.word	0x000007ff

080013c4 <__gedf2>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	4647      	mov	r7, r8
 80013c8:	46ce      	mov	lr, r9
 80013ca:	0004      	movs	r4, r0
 80013cc:	0018      	movs	r0, r3
 80013ce:	0016      	movs	r6, r2
 80013d0:	031b      	lsls	r3, r3, #12
 80013d2:	0b1b      	lsrs	r3, r3, #12
 80013d4:	4d2d      	ldr	r5, [pc, #180]	; (800148c <__gedf2+0xc8>)
 80013d6:	004a      	lsls	r2, r1, #1
 80013d8:	4699      	mov	r9, r3
 80013da:	b580      	push	{r7, lr}
 80013dc:	0043      	lsls	r3, r0, #1
 80013de:	030f      	lsls	r7, r1, #12
 80013e0:	46a4      	mov	ip, r4
 80013e2:	46b0      	mov	r8, r6
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d52      	lsrs	r2, r2, #21
 80013e8:	0fc9      	lsrs	r1, r1, #31
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	0fc0      	lsrs	r0, r0, #31
 80013ee:	42aa      	cmp	r2, r5
 80013f0:	d021      	beq.n	8001436 <__gedf2+0x72>
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	d013      	beq.n	800141e <__gedf2+0x5a>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d122      	bne.n	8001440 <__gedf2+0x7c>
 80013fa:	433c      	orrs	r4, r7
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <__gedf2+0x42>
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d022      	beq.n	800144c <__gedf2+0x88>
 8001406:	2c00      	cmp	r4, #0
 8001408:	d010      	beq.n	800142c <__gedf2+0x68>
 800140a:	4281      	cmp	r1, r0
 800140c:	d022      	beq.n	8001454 <__gedf2+0x90>
 800140e:	2002      	movs	r0, #2
 8001410:	3901      	subs	r1, #1
 8001412:	4008      	ands	r0, r1
 8001414:	3801      	subs	r0, #1
 8001416:	bcc0      	pop	{r6, r7}
 8001418:	46b9      	mov	r9, r7
 800141a:	46b0      	mov	r8, r6
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	464d      	mov	r5, r9
 8001420:	432e      	orrs	r6, r5
 8001422:	d129      	bne.n	8001478 <__gedf2+0xb4>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d1f0      	bne.n	800140a <__gedf2+0x46>
 8001428:	433c      	orrs	r4, r7
 800142a:	d1ee      	bne.n	800140a <__gedf2+0x46>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f2      	bne.n	8001416 <__gedf2+0x52>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7ef      	b.n	8001416 <__gedf2+0x52>
 8001436:	003d      	movs	r5, r7
 8001438:	4325      	orrs	r5, r4
 800143a:	d11d      	bne.n	8001478 <__gedf2+0xb4>
 800143c:	4293      	cmp	r3, r2
 800143e:	d0ee      	beq.n	800141e <__gedf2+0x5a>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e2      	bne.n	800140a <__gedf2+0x46>
 8001444:	464c      	mov	r4, r9
 8001446:	4326      	orrs	r6, r4
 8001448:	d1df      	bne.n	800140a <__gedf2+0x46>
 800144a:	e7e0      	b.n	800140e <__gedf2+0x4a>
 800144c:	2000      	movs	r0, #0
 800144e:	2c00      	cmp	r4, #0
 8001450:	d0e1      	beq.n	8001416 <__gedf2+0x52>
 8001452:	e7dc      	b.n	800140e <__gedf2+0x4a>
 8001454:	429a      	cmp	r2, r3
 8001456:	dc0a      	bgt.n	800146e <__gedf2+0xaa>
 8001458:	dbe8      	blt.n	800142c <__gedf2+0x68>
 800145a:	454f      	cmp	r7, r9
 800145c:	d8d7      	bhi.n	800140e <__gedf2+0x4a>
 800145e:	d00e      	beq.n	800147e <__gedf2+0xba>
 8001460:	2000      	movs	r0, #0
 8001462:	454f      	cmp	r7, r9
 8001464:	d2d7      	bcs.n	8001416 <__gedf2+0x52>
 8001466:	2900      	cmp	r1, #0
 8001468:	d0e2      	beq.n	8001430 <__gedf2+0x6c>
 800146a:	0008      	movs	r0, r1
 800146c:	e7d3      	b.n	8001416 <__gedf2+0x52>
 800146e:	4243      	negs	r3, r0
 8001470:	4158      	adcs	r0, r3
 8001472:	0040      	lsls	r0, r0, #1
 8001474:	3801      	subs	r0, #1
 8001476:	e7ce      	b.n	8001416 <__gedf2+0x52>
 8001478:	2002      	movs	r0, #2
 800147a:	4240      	negs	r0, r0
 800147c:	e7cb      	b.n	8001416 <__gedf2+0x52>
 800147e:	45c4      	cmp	ip, r8
 8001480:	d8c5      	bhi.n	800140e <__gedf2+0x4a>
 8001482:	2000      	movs	r0, #0
 8001484:	45c4      	cmp	ip, r8
 8001486:	d2c6      	bcs.n	8001416 <__gedf2+0x52>
 8001488:	e7ed      	b.n	8001466 <__gedf2+0xa2>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff

08001490 <__ledf2>:
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	4647      	mov	r7, r8
 8001494:	46ce      	mov	lr, r9
 8001496:	0004      	movs	r4, r0
 8001498:	0018      	movs	r0, r3
 800149a:	0016      	movs	r6, r2
 800149c:	031b      	lsls	r3, r3, #12
 800149e:	0b1b      	lsrs	r3, r3, #12
 80014a0:	4d2c      	ldr	r5, [pc, #176]	; (8001554 <__ledf2+0xc4>)
 80014a2:	004a      	lsls	r2, r1, #1
 80014a4:	4699      	mov	r9, r3
 80014a6:	b580      	push	{r7, lr}
 80014a8:	0043      	lsls	r3, r0, #1
 80014aa:	030f      	lsls	r7, r1, #12
 80014ac:	46a4      	mov	ip, r4
 80014ae:	46b0      	mov	r8, r6
 80014b0:	0b3f      	lsrs	r7, r7, #12
 80014b2:	0d52      	lsrs	r2, r2, #21
 80014b4:	0fc9      	lsrs	r1, r1, #31
 80014b6:	0d5b      	lsrs	r3, r3, #21
 80014b8:	0fc0      	lsrs	r0, r0, #31
 80014ba:	42aa      	cmp	r2, r5
 80014bc:	d00d      	beq.n	80014da <__ledf2+0x4a>
 80014be:	42ab      	cmp	r3, r5
 80014c0:	d010      	beq.n	80014e4 <__ledf2+0x54>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d127      	bne.n	8001516 <__ledf2+0x86>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <__ledf2+0x60>
 80014cc:	464d      	mov	r5, r9
 80014ce:	432e      	orrs	r6, r5
 80014d0:	d10e      	bne.n	80014f0 <__ledf2+0x60>
 80014d2:	2000      	movs	r0, #0
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d015      	beq.n	8001504 <__ledf2+0x74>
 80014d8:	e00e      	b.n	80014f8 <__ledf2+0x68>
 80014da:	003d      	movs	r5, r7
 80014dc:	4325      	orrs	r5, r4
 80014de:	d110      	bne.n	8001502 <__ledf2+0x72>
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d118      	bne.n	8001516 <__ledf2+0x86>
 80014e4:	464d      	mov	r5, r9
 80014e6:	432e      	orrs	r6, r5
 80014e8:	d10b      	bne.n	8001502 <__ledf2+0x72>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <__ledf2+0x64>
 80014ee:	433c      	orrs	r4, r7
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d00b      	beq.n	800150c <__ledf2+0x7c>
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d014      	beq.n	8001522 <__ledf2+0x92>
 80014f8:	2002      	movs	r0, #2
 80014fa:	3901      	subs	r1, #1
 80014fc:	4008      	ands	r0, r1
 80014fe:	3801      	subs	r0, #1
 8001500:	e000      	b.n	8001504 <__ledf2+0x74>
 8001502:	2002      	movs	r0, #2
 8001504:	bcc0      	pop	{r6, r7}
 8001506:	46b9      	mov	r9, r7
 8001508:	46b0      	mov	r8, r6
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f9      	bne.n	8001504 <__ledf2+0x74>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f6      	b.n	8001504 <__ledf2+0x74>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ec      	bne.n	80014f4 <__ledf2+0x64>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e9      	bne.n	80014f4 <__ledf2+0x64>
 8001520:	e7ea      	b.n	80014f8 <__ledf2+0x68>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd04      	ble.n	8001530 <__ledf2+0xa0>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7e9      	b.n	8001504 <__ledf2+0x74>
 8001530:	429a      	cmp	r2, r3
 8001532:	dbeb      	blt.n	800150c <__ledf2+0x7c>
 8001534:	454f      	cmp	r7, r9
 8001536:	d8df      	bhi.n	80014f8 <__ledf2+0x68>
 8001538:	d006      	beq.n	8001548 <__ledf2+0xb8>
 800153a:	2000      	movs	r0, #0
 800153c:	454f      	cmp	r7, r9
 800153e:	d2e1      	bcs.n	8001504 <__ledf2+0x74>
 8001540:	2900      	cmp	r1, #0
 8001542:	d0e5      	beq.n	8001510 <__ledf2+0x80>
 8001544:	0008      	movs	r0, r1
 8001546:	e7dd      	b.n	8001504 <__ledf2+0x74>
 8001548:	45c4      	cmp	ip, r8
 800154a:	d8d5      	bhi.n	80014f8 <__ledf2+0x68>
 800154c:	2000      	movs	r0, #0
 800154e:	45c4      	cmp	ip, r8
 8001550:	d2d8      	bcs.n	8001504 <__ledf2+0x74>
 8001552:	e7f5      	b.n	8001540 <__ledf2+0xb0>
 8001554:	000007ff 	.word	0x000007ff

08001558 <__aeabi_dmul>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	4657      	mov	r7, sl
 800155c:	464e      	mov	r6, r9
 800155e:	4645      	mov	r5, r8
 8001560:	46de      	mov	lr, fp
 8001562:	b5e0      	push	{r5, r6, r7, lr}
 8001564:	4698      	mov	r8, r3
 8001566:	030c      	lsls	r4, r1, #12
 8001568:	004b      	lsls	r3, r1, #1
 800156a:	0006      	movs	r6, r0
 800156c:	4692      	mov	sl, r2
 800156e:	b087      	sub	sp, #28
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fcf      	lsrs	r7, r1, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <__aeabi_dmul+0x24>
 800157a:	e15c      	b.n	8001836 <__aeabi_dmul+0x2de>
 800157c:	4ad9      	ldr	r2, [pc, #868]	; (80018e4 <__aeabi_dmul+0x38c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x2c>
 8001582:	e175      	b.n	8001870 <__aeabi_dmul+0x318>
 8001584:	0f42      	lsrs	r2, r0, #29
 8001586:	00e4      	lsls	r4, r4, #3
 8001588:	4314      	orrs	r4, r2
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	4314      	orrs	r4, r2
 8001590:	4ad5      	ldr	r2, [pc, #852]	; (80018e8 <__aeabi_dmul+0x390>)
 8001592:	00c5      	lsls	r5, r0, #3
 8001594:	4694      	mov	ip, r2
 8001596:	4463      	add	r3, ip
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	4699      	mov	r9, r3
 800159e:	469b      	mov	fp, r3
 80015a0:	4643      	mov	r3, r8
 80015a2:	4642      	mov	r2, r8
 80015a4:	031e      	lsls	r6, r3, #12
 80015a6:	0fd2      	lsrs	r2, r2, #31
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4650      	mov	r0, sl
 80015ac:	4690      	mov	r8, r2
 80015ae:	0b36      	lsrs	r6, r6, #12
 80015b0:	0d5b      	lsrs	r3, r3, #21
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0x5e>
 80015b4:	e120      	b.n	80017f8 <__aeabi_dmul+0x2a0>
 80015b6:	4acb      	ldr	r2, [pc, #812]	; (80018e4 <__aeabi_dmul+0x38c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x66>
 80015bc:	e162      	b.n	8001884 <__aeabi_dmul+0x32c>
 80015be:	49ca      	ldr	r1, [pc, #808]	; (80018e8 <__aeabi_dmul+0x390>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d826      	bhi.n	800163e <__aeabi_dmul+0xe6>
 80015f0:	4bbe      	ldr	r3, [pc, #760]	; (80018ec <__aeabi_dmul+0x394>)
 80015f2:	0089      	lsls	r1, r1, #2
 80015f4:	5859      	ldr	r1, [r3, r1]
 80015f6:	468f      	mov	pc, r1
 80015f8:	4643      	mov	r3, r8
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	0034      	movs	r4, r6
 80015fe:	0015      	movs	r5, r2
 8001600:	4683      	mov	fp, r0
 8001602:	465b      	mov	r3, fp
 8001604:	2b02      	cmp	r3, #2
 8001606:	d016      	beq.n	8001636 <__aeabi_dmul+0xde>
 8001608:	2b03      	cmp	r3, #3
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0xb6>
 800160c:	e203      	b.n	8001a16 <__aeabi_dmul+0x4be>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d000      	beq.n	8001614 <__aeabi_dmul+0xbc>
 8001612:	e0cd      	b.n	80017b0 <__aeabi_dmul+0x258>
 8001614:	2200      	movs	r2, #0
 8001616:	2400      	movs	r4, #0
 8001618:	2500      	movs	r5, #0
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0512      	lsls	r2, r2, #20
 800161e:	4322      	orrs	r2, r4
 8001620:	07db      	lsls	r3, r3, #31
 8001622:	431a      	orrs	r2, r3
 8001624:	0028      	movs	r0, r5
 8001626:	0011      	movs	r1, r2
 8001628:	b007      	add	sp, #28
 800162a:	bcf0      	pop	{r4, r5, r6, r7}
 800162c:	46bb      	mov	fp, r7
 800162e:	46b2      	mov	sl, r6
 8001630:	46a9      	mov	r9, r5
 8001632:	46a0      	mov	r8, r4
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	2400      	movs	r4, #0
 8001638:	2500      	movs	r5, #0
 800163a:	4aaa      	ldr	r2, [pc, #680]	; (80018e4 <__aeabi_dmul+0x38c>)
 800163c:	e7ed      	b.n	800161a <__aeabi_dmul+0xc2>
 800163e:	0c28      	lsrs	r0, r5, #16
 8001640:	042d      	lsls	r5, r5, #16
 8001642:	0c2d      	lsrs	r5, r5, #16
 8001644:	002b      	movs	r3, r5
 8001646:	0c11      	lsrs	r1, r2, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	0c12      	lsrs	r2, r2, #16
 800164c:	4353      	muls	r3, r2
 800164e:	4698      	mov	r8, r3
 8001650:	0013      	movs	r3, r2
 8001652:	002f      	movs	r7, r5
 8001654:	4343      	muls	r3, r0
 8001656:	4699      	mov	r9, r3
 8001658:	434f      	muls	r7, r1
 800165a:	444f      	add	r7, r9
 800165c:	46bb      	mov	fp, r7
 800165e:	4647      	mov	r7, r8
 8001660:	000b      	movs	r3, r1
 8001662:	0c3f      	lsrs	r7, r7, #16
 8001664:	46ba      	mov	sl, r7
 8001666:	4343      	muls	r3, r0
 8001668:	44da      	add	sl, fp
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	45d1      	cmp	r9, sl
 800166e:	d904      	bls.n	800167a <__aeabi_dmul+0x122>
 8001670:	2780      	movs	r7, #128	; 0x80
 8001672:	027f      	lsls	r7, r7, #9
 8001674:	46b9      	mov	r9, r7
 8001676:	444b      	add	r3, r9
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	4653      	mov	r3, sl
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	469b      	mov	fp, r3
 8001680:	4653      	mov	r3, sl
 8001682:	041f      	lsls	r7, r3, #16
 8001684:	4643      	mov	r3, r8
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	4698      	mov	r8, r3
 800168c:	003b      	movs	r3, r7
 800168e:	4443      	add	r3, r8
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	0c33      	lsrs	r3, r6, #16
 8001694:	0436      	lsls	r6, r6, #16
 8001696:	0c36      	lsrs	r6, r6, #16
 8001698:	4698      	mov	r8, r3
 800169a:	0033      	movs	r3, r6
 800169c:	4343      	muls	r3, r0
 800169e:	4699      	mov	r9, r3
 80016a0:	4643      	mov	r3, r8
 80016a2:	4343      	muls	r3, r0
 80016a4:	002f      	movs	r7, r5
 80016a6:	469a      	mov	sl, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4377      	muls	r7, r6
 80016ac:	435d      	muls	r5, r3
 80016ae:	0c38      	lsrs	r0, r7, #16
 80016b0:	444d      	add	r5, r9
 80016b2:	1945      	adds	r5, r0, r5
 80016b4:	45a9      	cmp	r9, r5
 80016b6:	d903      	bls.n	80016c0 <__aeabi_dmul+0x168>
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4699      	mov	r9, r3
 80016be:	44ca      	add	sl, r9
 80016c0:	043f      	lsls	r7, r7, #16
 80016c2:	0c28      	lsrs	r0, r5, #16
 80016c4:	0c3f      	lsrs	r7, r7, #16
 80016c6:	042d      	lsls	r5, r5, #16
 80016c8:	19ed      	adds	r5, r5, r7
 80016ca:	0c27      	lsrs	r7, r4, #16
 80016cc:	0424      	lsls	r4, r4, #16
 80016ce:	0c24      	lsrs	r4, r4, #16
 80016d0:	0003      	movs	r3, r0
 80016d2:	0020      	movs	r0, r4
 80016d4:	4350      	muls	r0, r2
 80016d6:	437a      	muls	r2, r7
 80016d8:	4691      	mov	r9, r2
 80016da:	003a      	movs	r2, r7
 80016dc:	4453      	add	r3, sl
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	0c03      	lsrs	r3, r0, #16
 80016e2:	469a      	mov	sl, r3
 80016e4:	434a      	muls	r2, r1
 80016e6:	4361      	muls	r1, r4
 80016e8:	4449      	add	r1, r9
 80016ea:	4451      	add	r1, sl
 80016ec:	44ab      	add	fp, r5
 80016ee:	4589      	cmp	r9, r1
 80016f0:	d903      	bls.n	80016fa <__aeabi_dmul+0x1a2>
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	4699      	mov	r9, r3
 80016f8:	444a      	add	r2, r9
 80016fa:	0400      	lsls	r0, r0, #16
 80016fc:	0c0b      	lsrs	r3, r1, #16
 80016fe:	0c00      	lsrs	r0, r0, #16
 8001700:	0409      	lsls	r1, r1, #16
 8001702:	1809      	adds	r1, r1, r0
 8001704:	0020      	movs	r0, r4
 8001706:	4699      	mov	r9, r3
 8001708:	4643      	mov	r3, r8
 800170a:	4370      	muls	r0, r6
 800170c:	435c      	muls	r4, r3
 800170e:	437e      	muls	r6, r7
 8001710:	435f      	muls	r7, r3
 8001712:	0c03      	lsrs	r3, r0, #16
 8001714:	4698      	mov	r8, r3
 8001716:	19a4      	adds	r4, r4, r6
 8001718:	4444      	add	r4, r8
 800171a:	444a      	add	r2, r9
 800171c:	9703      	str	r7, [sp, #12]
 800171e:	42a6      	cmp	r6, r4
 8001720:	d904      	bls.n	800172c <__aeabi_dmul+0x1d4>
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	4698      	mov	r8, r3
 8001728:	4447      	add	r7, r8
 800172a:	9703      	str	r7, [sp, #12]
 800172c:	0423      	lsls	r3, r4, #16
 800172e:	9e02      	ldr	r6, [sp, #8]
 8001730:	469a      	mov	sl, r3
 8001732:	9b05      	ldr	r3, [sp, #20]
 8001734:	445e      	add	r6, fp
 8001736:	4698      	mov	r8, r3
 8001738:	42ae      	cmp	r6, r5
 800173a:	41ad      	sbcs	r5, r5
 800173c:	1876      	adds	r6, r6, r1
 800173e:	428e      	cmp	r6, r1
 8001740:	4189      	sbcs	r1, r1
 8001742:	0400      	lsls	r0, r0, #16
 8001744:	0c00      	lsrs	r0, r0, #16
 8001746:	4450      	add	r0, sl
 8001748:	4440      	add	r0, r8
 800174a:	426d      	negs	r5, r5
 800174c:	1947      	adds	r7, r0, r5
 800174e:	46b8      	mov	r8, r7
 8001750:	4693      	mov	fp, r2
 8001752:	4249      	negs	r1, r1
 8001754:	4689      	mov	r9, r1
 8001756:	44c3      	add	fp, r8
 8001758:	44d9      	add	r9, fp
 800175a:	4298      	cmp	r0, r3
 800175c:	4180      	sbcs	r0, r0
 800175e:	45a8      	cmp	r8, r5
 8001760:	41ad      	sbcs	r5, r5
 8001762:	4593      	cmp	fp, r2
 8001764:	4192      	sbcs	r2, r2
 8001766:	4589      	cmp	r9, r1
 8001768:	4189      	sbcs	r1, r1
 800176a:	426d      	negs	r5, r5
 800176c:	4240      	negs	r0, r0
 800176e:	4328      	orrs	r0, r5
 8001770:	0c24      	lsrs	r4, r4, #16
 8001772:	4252      	negs	r2, r2
 8001774:	4249      	negs	r1, r1
 8001776:	430a      	orrs	r2, r1
 8001778:	9b03      	ldr	r3, [sp, #12]
 800177a:	1900      	adds	r0, r0, r4
 800177c:	1880      	adds	r0, r0, r2
 800177e:	18c7      	adds	r7, r0, r3
 8001780:	464b      	mov	r3, r9
 8001782:	0ddc      	lsrs	r4, r3, #23
 8001784:	9b04      	ldr	r3, [sp, #16]
 8001786:	0275      	lsls	r5, r6, #9
 8001788:	431d      	orrs	r5, r3
 800178a:	1e6a      	subs	r2, r5, #1
 800178c:	4195      	sbcs	r5, r2
 800178e:	464b      	mov	r3, r9
 8001790:	0df6      	lsrs	r6, r6, #23
 8001792:	027f      	lsls	r7, r7, #9
 8001794:	4335      	orrs	r5, r6
 8001796:	025a      	lsls	r2, r3, #9
 8001798:	433c      	orrs	r4, r7
 800179a:	4315      	orrs	r5, r2
 800179c:	01fb      	lsls	r3, r7, #7
 800179e:	d400      	bmi.n	80017a2 <__aeabi_dmul+0x24a>
 80017a0:	e11c      	b.n	80019dc <__aeabi_dmul+0x484>
 80017a2:	2101      	movs	r1, #1
 80017a4:	086a      	lsrs	r2, r5, #1
 80017a6:	400d      	ands	r5, r1
 80017a8:	4315      	orrs	r5, r2
 80017aa:	07e2      	lsls	r2, r4, #31
 80017ac:	4315      	orrs	r5, r2
 80017ae:	0864      	lsrs	r4, r4, #1
 80017b0:	494f      	ldr	r1, [pc, #316]	; (80018f0 <__aeabi_dmul+0x398>)
 80017b2:	4461      	add	r1, ip
 80017b4:	2900      	cmp	r1, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_dmul+0x262>
 80017b8:	e0b0      	b.n	800191c <__aeabi_dmul+0x3c4>
 80017ba:	076b      	lsls	r3, r5, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017be:	220f      	movs	r2, #15
 80017c0:	402a      	ands	r2, r5
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017c6:	1d2a      	adds	r2, r5, #4
 80017c8:	42aa      	cmp	r2, r5
 80017ca:	41ad      	sbcs	r5, r5
 80017cc:	426d      	negs	r5, r5
 80017ce:	1964      	adds	r4, r4, r5
 80017d0:	0015      	movs	r5, r2
 80017d2:	01e3      	lsls	r3, r4, #7
 80017d4:	d504      	bpl.n	80017e0 <__aeabi_dmul+0x288>
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <__aeabi_dmul+0x39c>)
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4014      	ands	r4, r2
 80017de:	4461      	add	r1, ip
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <__aeabi_dmul+0x3a0>)
 80017e2:	4291      	cmp	r1, r2
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dmul+0x290>
 80017e6:	e726      	b.n	8001636 <__aeabi_dmul+0xde>
 80017e8:	0762      	lsls	r2, r4, #29
 80017ea:	08ed      	lsrs	r5, r5, #3
 80017ec:	0264      	lsls	r4, r4, #9
 80017ee:	0549      	lsls	r1, r1, #21
 80017f0:	4315      	orrs	r5, r2
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	0d4a      	lsrs	r2, r1, #21
 80017f6:	e710      	b.n	800161a <__aeabi_dmul+0xc2>
 80017f8:	4652      	mov	r2, sl
 80017fa:	4332      	orrs	r2, r6
 80017fc:	d100      	bne.n	8001800 <__aeabi_dmul+0x2a8>
 80017fe:	e07f      	b.n	8001900 <__aeabi_dmul+0x3a8>
 8001800:	2e00      	cmp	r6, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0x2ae>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dmul+0x468>
 8001806:	0030      	movs	r0, r6
 8001808:	f000 fd4e 	bl	80022a8 <__clzsi2>
 800180c:	0002      	movs	r2, r0
 800180e:	3a0b      	subs	r2, #11
 8001810:	231d      	movs	r3, #29
 8001812:	0001      	movs	r1, r0
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4652      	mov	r2, sl
 8001818:	3908      	subs	r1, #8
 800181a:	40da      	lsrs	r2, r3
 800181c:	408e      	lsls	r6, r1
 800181e:	4316      	orrs	r6, r2
 8001820:	4652      	mov	r2, sl
 8001822:	408a      	lsls	r2, r1
 8001824:	9b00      	ldr	r3, [sp, #0]
 8001826:	4935      	ldr	r1, [pc, #212]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001828:	1a18      	subs	r0, r3, r0
 800182a:	0003      	movs	r3, r0
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	2000      	movs	r0, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	e6d3      	b.n	80015de <__aeabi_dmul+0x86>
 8001836:	0025      	movs	r5, r4
 8001838:	4305      	orrs	r5, r0
 800183a:	d04a      	beq.n	80018d2 <__aeabi_dmul+0x37a>
 800183c:	2c00      	cmp	r4, #0
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0x2ea>
 8001840:	e0b0      	b.n	80019a4 <__aeabi_dmul+0x44c>
 8001842:	0020      	movs	r0, r4
 8001844:	f000 fd30 	bl	80022a8 <__clzsi2>
 8001848:	0001      	movs	r1, r0
 800184a:	0002      	movs	r2, r0
 800184c:	390b      	subs	r1, #11
 800184e:	231d      	movs	r3, #29
 8001850:	0010      	movs	r0, r2
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	0031      	movs	r1, r6
 8001856:	0035      	movs	r5, r6
 8001858:	3808      	subs	r0, #8
 800185a:	4084      	lsls	r4, r0
 800185c:	40d9      	lsrs	r1, r3
 800185e:	4085      	lsls	r5, r0
 8001860:	430c      	orrs	r4, r1
 8001862:	4826      	ldr	r0, [pc, #152]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001864:	1a83      	subs	r3, r0, r2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	4699      	mov	r9, r3
 800186c:	469b      	mov	fp, r3
 800186e:	e697      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001870:	0005      	movs	r5, r0
 8001872:	4325      	orrs	r5, r4
 8001874:	d126      	bne.n	80018c4 <__aeabi_dmul+0x36c>
 8001876:	2208      	movs	r2, #8
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	2400      	movs	r4, #0
 800187e:	4691      	mov	r9, r2
 8001880:	469b      	mov	fp, r3
 8001882:	e68d      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001884:	4652      	mov	r2, sl
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4332      	orrs	r2, r6
 800188a:	d110      	bne.n	80018ae <__aeabi_dmul+0x356>
 800188c:	4915      	ldr	r1, [pc, #84]	; (80018e4 <__aeabi_dmul+0x38c>)
 800188e:	2600      	movs	r6, #0
 8001890:	468c      	mov	ip, r1
 8001892:	4463      	add	r3, ip
 8001894:	4649      	mov	r1, r9
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2302      	movs	r3, #2
 800189a:	4319      	orrs	r1, r3
 800189c:	4689      	mov	r9, r1
 800189e:	2002      	movs	r0, #2
 80018a0:	e69d      	b.n	80015de <__aeabi_dmul+0x86>
 80018a2:	465b      	mov	r3, fp
 80018a4:	9701      	str	r7, [sp, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x354>
 80018aa:	e6ad      	b.n	8001608 <__aeabi_dmul+0xb0>
 80018ac:	e6c3      	b.n	8001636 <__aeabi_dmul+0xde>
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <__aeabi_dmul+0x38c>)
 80018b0:	2003      	movs	r0, #3
 80018b2:	4694      	mov	ip, r2
 80018b4:	4463      	add	r3, ip
 80018b6:	464a      	mov	r2, r9
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2303      	movs	r3, #3
 80018bc:	431a      	orrs	r2, r3
 80018be:	4691      	mov	r9, r2
 80018c0:	4652      	mov	r2, sl
 80018c2:	e68c      	b.n	80015de <__aeabi_dmul+0x86>
 80018c4:	220c      	movs	r2, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2303      	movs	r3, #3
 80018ca:	0005      	movs	r5, r0
 80018cc:	4691      	mov	r9, r2
 80018ce:	469b      	mov	fp, r3
 80018d0:	e666      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018d2:	2304      	movs	r3, #4
 80018d4:	4699      	mov	r9, r3
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	2400      	movs	r4, #0
 80018de:	469b      	mov	fp, r3
 80018e0:	e65e      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	fffffc01 	.word	0xfffffc01
 80018ec:	08009f2c 	.word	0x08009f2c
 80018f0:	000003ff 	.word	0x000003ff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	fffffc0d 	.word	0xfffffc0d
 8001900:	4649      	mov	r1, r9
 8001902:	2301      	movs	r3, #1
 8001904:	4319      	orrs	r1, r3
 8001906:	4689      	mov	r9, r1
 8001908:	2600      	movs	r6, #0
 800190a:	2001      	movs	r0, #1
 800190c:	e667      	b.n	80015de <__aeabi_dmul+0x86>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	2500      	movs	r5, #0
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e67e      	b.n	800161a <__aeabi_dmul+0xc2>
 800191c:	2001      	movs	r0, #1
 800191e:	1a40      	subs	r0, r0, r1
 8001920:	2838      	cmp	r0, #56	; 0x38
 8001922:	dd00      	ble.n	8001926 <__aeabi_dmul+0x3ce>
 8001924:	e676      	b.n	8001614 <__aeabi_dmul+0xbc>
 8001926:	281f      	cmp	r0, #31
 8001928:	dd5b      	ble.n	80019e2 <__aeabi_dmul+0x48a>
 800192a:	221f      	movs	r2, #31
 800192c:	0023      	movs	r3, r4
 800192e:	4252      	negs	r2, r2
 8001930:	1a51      	subs	r1, r2, r1
 8001932:	40cb      	lsrs	r3, r1
 8001934:	0019      	movs	r1, r3
 8001936:	2820      	cmp	r0, #32
 8001938:	d003      	beq.n	8001942 <__aeabi_dmul+0x3ea>
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <__aeabi_dmul+0x4d0>)
 800193c:	4462      	add	r2, ip
 800193e:	4094      	lsls	r4, r2
 8001940:	4325      	orrs	r5, r4
 8001942:	1e6a      	subs	r2, r5, #1
 8001944:	4195      	sbcs	r5, r2
 8001946:	002a      	movs	r2, r5
 8001948:	430a      	orrs	r2, r1
 800194a:	2107      	movs	r1, #7
 800194c:	000d      	movs	r5, r1
 800194e:	2400      	movs	r4, #0
 8001950:	4015      	ands	r5, r2
 8001952:	4211      	tst	r1, r2
 8001954:	d05b      	beq.n	8001a0e <__aeabi_dmul+0x4b6>
 8001956:	210f      	movs	r1, #15
 8001958:	2400      	movs	r4, #0
 800195a:	4011      	ands	r1, r2
 800195c:	2904      	cmp	r1, #4
 800195e:	d053      	beq.n	8001a08 <__aeabi_dmul+0x4b0>
 8001960:	1d11      	adds	r1, r2, #4
 8001962:	4291      	cmp	r1, r2
 8001964:	4192      	sbcs	r2, r2
 8001966:	4252      	negs	r2, r2
 8001968:	18a4      	adds	r4, r4, r2
 800196a:	000a      	movs	r2, r1
 800196c:	0223      	lsls	r3, r4, #8
 800196e:	d54b      	bpl.n	8001a08 <__aeabi_dmul+0x4b0>
 8001970:	2201      	movs	r2, #1
 8001972:	2400      	movs	r4, #0
 8001974:	2500      	movs	r5, #0
 8001976:	e650      	b.n	800161a <__aeabi_dmul+0xc2>
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	031b      	lsls	r3, r3, #12
 800197c:	421c      	tst	r4, r3
 800197e:	d009      	beq.n	8001994 <__aeabi_dmul+0x43c>
 8001980:	421e      	tst	r6, r3
 8001982:	d107      	bne.n	8001994 <__aeabi_dmul+0x43c>
 8001984:	4333      	orrs	r3, r6
 8001986:	031c      	lsls	r4, r3, #12
 8001988:	4643      	mov	r3, r8
 800198a:	0015      	movs	r5, r2
 800198c:	0b24      	lsrs	r4, r4, #12
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	e642      	b.n	800161a <__aeabi_dmul+0xc2>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0312      	lsls	r2, r2, #12
 8001998:	4314      	orrs	r4, r2
 800199a:	0324      	lsls	r4, r4, #12
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <__aeabi_dmul+0x4cc>)
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	9701      	str	r7, [sp, #4]
 80019a2:	e63a      	b.n	800161a <__aeabi_dmul+0xc2>
 80019a4:	f000 fc80 	bl	80022a8 <__clzsi2>
 80019a8:	0001      	movs	r1, r0
 80019aa:	0002      	movs	r2, r0
 80019ac:	3115      	adds	r1, #21
 80019ae:	3220      	adds	r2, #32
 80019b0:	291c      	cmp	r1, #28
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_dmul+0x45e>
 80019b4:	e74b      	b.n	800184e <__aeabi_dmul+0x2f6>
 80019b6:	0034      	movs	r4, r6
 80019b8:	3808      	subs	r0, #8
 80019ba:	2500      	movs	r5, #0
 80019bc:	4084      	lsls	r4, r0
 80019be:	e750      	b.n	8001862 <__aeabi_dmul+0x30a>
 80019c0:	f000 fc72 	bl	80022a8 <__clzsi2>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	3215      	adds	r2, #21
 80019ca:	3020      	adds	r0, #32
 80019cc:	2a1c      	cmp	r2, #28
 80019ce:	dc00      	bgt.n	80019d2 <__aeabi_dmul+0x47a>
 80019d0:	e71e      	b.n	8001810 <__aeabi_dmul+0x2b8>
 80019d2:	4656      	mov	r6, sl
 80019d4:	3b08      	subs	r3, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	409e      	lsls	r6, r3
 80019da:	e723      	b.n	8001824 <__aeabi_dmul+0x2cc>
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	469c      	mov	ip, r3
 80019e0:	e6e6      	b.n	80017b0 <__aeabi_dmul+0x258>
 80019e2:	4912      	ldr	r1, [pc, #72]	; (8001a2c <__aeabi_dmul+0x4d4>)
 80019e4:	0022      	movs	r2, r4
 80019e6:	4461      	add	r1, ip
 80019e8:	002e      	movs	r6, r5
 80019ea:	408d      	lsls	r5, r1
 80019ec:	408a      	lsls	r2, r1
 80019ee:	40c6      	lsrs	r6, r0
 80019f0:	1e69      	subs	r1, r5, #1
 80019f2:	418d      	sbcs	r5, r1
 80019f4:	4332      	orrs	r2, r6
 80019f6:	432a      	orrs	r2, r5
 80019f8:	40c4      	lsrs	r4, r0
 80019fa:	0753      	lsls	r3, r2, #29
 80019fc:	d0b6      	beq.n	800196c <__aeabi_dmul+0x414>
 80019fe:	210f      	movs	r1, #15
 8001a00:	4011      	ands	r1, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d1ac      	bne.n	8001960 <__aeabi_dmul+0x408>
 8001a06:	e7b1      	b.n	800196c <__aeabi_dmul+0x414>
 8001a08:	0765      	lsls	r5, r4, #29
 8001a0a:	0264      	lsls	r4, r4, #9
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	4315      	orrs	r5, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	e601      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0312      	lsls	r2, r2, #12
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	e5fa      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	0000043e 	.word	0x0000043e
 8001a2c:	0000041e 	.word	0x0000041e

08001a30 <__aeabi_dsub>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	4657      	mov	r7, sl
 8001a34:	464e      	mov	r6, r9
 8001a36:	4645      	mov	r5, r8
 8001a38:	46de      	mov	lr, fp
 8001a3a:	b5e0      	push	{r5, r6, r7, lr}
 8001a3c:	001e      	movs	r6, r3
 8001a3e:	0017      	movs	r7, r2
 8001a40:	004a      	lsls	r2, r1, #1
 8001a42:	030b      	lsls	r3, r1, #12
 8001a44:	0d52      	lsrs	r2, r2, #21
 8001a46:	0a5b      	lsrs	r3, r3, #9
 8001a48:	4690      	mov	r8, r2
 8001a4a:	0f42      	lsrs	r2, r0, #29
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0fcd      	lsrs	r5, r1, #31
 8001a50:	4ccd      	ldr	r4, [pc, #820]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a52:	0331      	lsls	r1, r6, #12
 8001a54:	00c3      	lsls	r3, r0, #3
 8001a56:	4694      	mov	ip, r2
 8001a58:	0070      	lsls	r0, r6, #1
 8001a5a:	0f7a      	lsrs	r2, r7, #29
 8001a5c:	0a49      	lsrs	r1, r1, #9
 8001a5e:	00ff      	lsls	r7, r7, #3
 8001a60:	469a      	mov	sl, r3
 8001a62:	46b9      	mov	r9, r7
 8001a64:	0d40      	lsrs	r0, r0, #21
 8001a66:	0ff6      	lsrs	r6, r6, #31
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	42a0      	cmp	r0, r4
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x40>
 8001a6e:	e0b1      	b.n	8001bd4 <__aeabi_dsub+0x1a4>
 8001a70:	2201      	movs	r2, #1
 8001a72:	4056      	eors	r6, r2
 8001a74:	46b3      	mov	fp, r6
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x4c>
 8001a7a:	e088      	b.n	8001b8e <__aeabi_dsub+0x15e>
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	1a12      	subs	r2, r2, r0
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dsub+0x56>
 8001a84:	e0ae      	b.n	8001be4 <__aeabi_dsub+0x1b4>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x5c>
 8001a8a:	e0c1      	b.n	8001c10 <__aeabi_dsub+0x1e0>
 8001a8c:	48be      	ldr	r0, [pc, #760]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a8e:	4580      	cmp	r8, r0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x64>
 8001a92:	e151      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001a94:	2080      	movs	r0, #128	; 0x80
 8001a96:	0400      	lsls	r0, r0, #16
 8001a98:	4301      	orrs	r1, r0
 8001a9a:	2a38      	cmp	r2, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x70>
 8001a9e:	e17b      	b.n	8001d98 <__aeabi_dsub+0x368>
 8001aa0:	2a1f      	cmp	r2, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x76>
 8001aa4:	e1ee      	b.n	8001e84 <__aeabi_dsub+0x454>
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	003e      	movs	r6, r7
 8001aaa:	1a80      	subs	r0, r0, r2
 8001aac:	000c      	movs	r4, r1
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	40d1      	lsrs	r1, r2
 8001ab2:	4087      	lsls	r7, r0
 8001ab4:	4662      	mov	r2, ip
 8001ab6:	4084      	lsls	r4, r0
 8001ab8:	1a52      	subs	r2, r2, r1
 8001aba:	1e78      	subs	r0, r7, #1
 8001abc:	4187      	sbcs	r7, r0
 8001abe:	4694      	mov	ip, r2
 8001ac0:	4334      	orrs	r4, r6
 8001ac2:	4327      	orrs	r7, r4
 8001ac4:	1bdc      	subs	r4, r3, r7
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	419b      	sbcs	r3, r3
 8001aca:	4662      	mov	r2, ip
 8001acc:	425b      	negs	r3, r3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	d400      	bmi.n	8001ada <__aeabi_dsub+0xaa>
 8001ad8:	e118      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001ada:	464b      	mov	r3, r9
 8001adc:	0258      	lsls	r0, r3, #9
 8001ade:	0a43      	lsrs	r3, r0, #9
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0xba>
 8001ae8:	e137      	b.n	8001d5a <__aeabi_dsub+0x32a>
 8001aea:	4648      	mov	r0, r9
 8001aec:	f000 fbdc 	bl	80022a8 <__clzsi2>
 8001af0:	0001      	movs	r1, r0
 8001af2:	3908      	subs	r1, #8
 8001af4:	2320      	movs	r3, #32
 8001af6:	0022      	movs	r2, r4
 8001af8:	4648      	mov	r0, r9
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	40da      	lsrs	r2, r3
 8001afe:	4088      	lsls	r0, r1
 8001b00:	408c      	lsls	r4, r1
 8001b02:	4643      	mov	r3, r8
 8001b04:	4310      	orrs	r0, r2
 8001b06:	4588      	cmp	r8, r1
 8001b08:	dd00      	ble.n	8001b0c <__aeabi_dsub+0xdc>
 8001b0a:	e136      	b.n	8001d7a <__aeabi_dsub+0x34a>
 8001b0c:	1ac9      	subs	r1, r1, r3
 8001b0e:	1c4b      	adds	r3, r1, #1
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe6>
 8001b14:	e0ea      	b.n	8001cec <__aeabi_dsub+0x2bc>
 8001b16:	2220      	movs	r2, #32
 8001b18:	0026      	movs	r6, r4
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	4094      	lsls	r4, r2
 8001b20:	40de      	lsrs	r6, r3
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4091      	lsls	r1, r2
 8001b28:	1e62      	subs	r2, r4, #1
 8001b2a:	4194      	sbcs	r4, r2
 8001b2c:	4681      	mov	r9, r0
 8001b2e:	4698      	mov	r8, r3
 8001b30:	4331      	orrs	r1, r6
 8001b32:	430c      	orrs	r4, r1
 8001b34:	0763      	lsls	r3, r4, #29
 8001b36:	d009      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b40:	1d23      	adds	r3, r4, #4
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	41a4      	sbcs	r4, r4
 8001b46:	4264      	negs	r4, r4
 8001b48:	44a1      	add	r9, r4
 8001b4a:	001c      	movs	r4, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d400      	bmi.n	8001b54 <__aeabi_dsub+0x124>
 8001b52:	e0de      	b.n	8001d12 <__aeabi_dsub+0x2e2>
 8001b54:	4641      	mov	r1, r8
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <__aeabi_dsub+0x358>)
 8001b58:	3101      	adds	r1, #1
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x130>
 8001b5e:	e0e7      	b.n	8001d30 <__aeabi_dsub+0x300>
 8001b60:	464b      	mov	r3, r9
 8001b62:	488a      	ldr	r0, [pc, #552]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001b64:	08e4      	lsrs	r4, r4, #3
 8001b66:	4003      	ands	r3, r0
 8001b68:	0018      	movs	r0, r3
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	0240      	lsls	r0, r0, #9
 8001b70:	4323      	orrs	r3, r4
 8001b72:	0d4a      	lsrs	r2, r1, #21
 8001b74:	0b04      	lsrs	r4, r0, #12
 8001b76:	0512      	lsls	r2, r2, #20
 8001b78:	07ed      	lsls	r5, r5, #31
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	432a      	orrs	r2, r5
 8001b7e:	0018      	movs	r0, r3
 8001b80:	0011      	movs	r1, r2
 8001b82:	bcf0      	pop	{r4, r5, r6, r7}
 8001b84:	46bb      	mov	fp, r7
 8001b86:	46b2      	mov	sl, r6
 8001b88:	46a9      	mov	r9, r5
 8001b8a:	46a0      	mov	r8, r4
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8e:	4642      	mov	r2, r8
 8001b90:	1a12      	subs	r2, r2, r0
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	dd52      	ble.n	8001c3c <__aeabi_dsub+0x20c>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x16c>
 8001b9a:	e09c      	b.n	8001cd6 <__aeabi_dsub+0x2a6>
 8001b9c:	45a0      	cmp	r8, r4
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x172>
 8001ba0:	e0ca      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001ba2:	2080      	movs	r0, #128	; 0x80
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	4301      	orrs	r1, r0
 8001ba8:	2a38      	cmp	r2, #56	; 0x38
 8001baa:	dd00      	ble.n	8001bae <__aeabi_dsub+0x17e>
 8001bac:	e149      	b.n	8001e42 <__aeabi_dsub+0x412>
 8001bae:	2a1f      	cmp	r2, #31
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dsub+0x184>
 8001bb2:	e197      	b.n	8001ee4 <__aeabi_dsub+0x4b4>
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	000e      	movs	r6, r1
 8001bb8:	3820      	subs	r0, #32
 8001bba:	40c6      	lsrs	r6, r0
 8001bbc:	2a20      	cmp	r2, #32
 8001bbe:	d004      	beq.n	8001bca <__aeabi_dsub+0x19a>
 8001bc0:	2040      	movs	r0, #64	; 0x40
 8001bc2:	1a82      	subs	r2, r0, r2
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	430f      	orrs	r7, r1
 8001bc8:	46b9      	mov	r9, r7
 8001bca:	464c      	mov	r4, r9
 8001bcc:	1e62      	subs	r2, r4, #1
 8001bce:	4194      	sbcs	r4, r2
 8001bd0:	4334      	orrs	r4, r6
 8001bd2:	e13a      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	433a      	orrs	r2, r7
 8001bd8:	d028      	beq.n	8001c2c <__aeabi_dsub+0x1fc>
 8001bda:	46b3      	mov	fp, r6
 8001bdc:	42b5      	cmp	r5, r6
 8001bde:	d02b      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <__aeabi_dsub+0x360>)
 8001be2:	4442      	add	r2, r8
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d05d      	beq.n	8001ca4 <__aeabi_dsub+0x274>
 8001be8:	4642      	mov	r2, r8
 8001bea:	4644      	mov	r4, r8
 8001bec:	1a82      	subs	r2, r0, r2
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x1c4>
 8001bf2:	e0f5      	b.n	8001de0 <__aeabi_dsub+0x3b0>
 8001bf4:	4665      	mov	r5, ip
 8001bf6:	431d      	orrs	r5, r3
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x1cc>
 8001bfa:	e19c      	b.n	8001f36 <__aeabi_dsub+0x506>
 8001bfc:	1e55      	subs	r5, r2, #1
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1d4>
 8001c02:	e1fb      	b.n	8001ffc <__aeabi_dsub+0x5cc>
 8001c04:	4c60      	ldr	r4, [pc, #384]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x1dc>
 8001c0a:	e1bd      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001c0c:	002a      	movs	r2, r5
 8001c0e:	e0f0      	b.n	8001df2 <__aeabi_dsub+0x3c2>
 8001c10:	0008      	movs	r0, r1
 8001c12:	4338      	orrs	r0, r7
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e8>
 8001c16:	e0c3      	b.n	8001da0 <__aeabi_dsub+0x370>
 8001c18:	1e50      	subs	r0, r2, #1
 8001c1a:	2a01      	cmp	r2, #1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1f0>
 8001c1e:	e1a8      	b.n	8001f72 <__aeabi_dsub+0x542>
 8001c20:	4c59      	ldr	r4, [pc, #356]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1f8>
 8001c26:	e087      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	e736      	b.n	8001a9a <__aeabi_dsub+0x6a>
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4056      	eors	r6, r2
 8001c30:	46b3      	mov	fp, r6
 8001c32:	42b5      	cmp	r5, r6
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001c36:	e721      	b.n	8001a7c <__aeabi_dsub+0x4c>
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <__aeabi_dsub+0x360>)
 8001c3a:	4442      	add	r2, r8
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x212>
 8001c40:	e0b5      	b.n	8001dae <__aeabi_dsub+0x37e>
 8001c42:	4642      	mov	r2, r8
 8001c44:	4644      	mov	r4, r8
 8001c46:	1a82      	subs	r2, r0, r2
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x21e>
 8001c4c:	e138      	b.n	8001ec0 <__aeabi_dsub+0x490>
 8001c4e:	4e4e      	ldr	r6, [pc, #312]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c50:	42b0      	cmp	r0, r6
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x226>
 8001c54:	e1de      	b.n	8002014 <__aeabi_dsub+0x5e4>
 8001c56:	2680      	movs	r6, #128	; 0x80
 8001c58:	4664      	mov	r4, ip
 8001c5a:	0436      	lsls	r6, r6, #16
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	46a4      	mov	ip, r4
 8001c60:	2a38      	cmp	r2, #56	; 0x38
 8001c62:	dd00      	ble.n	8001c66 <__aeabi_dsub+0x236>
 8001c64:	e196      	b.n	8001f94 <__aeabi_dsub+0x564>
 8001c66:	2a1f      	cmp	r2, #31
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x23c>
 8001c6a:	e224      	b.n	80020b6 <__aeabi_dsub+0x686>
 8001c6c:	2620      	movs	r6, #32
 8001c6e:	1ab4      	subs	r4, r6, r2
 8001c70:	46a2      	mov	sl, r4
 8001c72:	4664      	mov	r4, ip
 8001c74:	4656      	mov	r6, sl
 8001c76:	40b4      	lsls	r4, r6
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	40d4      	lsrs	r4, r2
 8001c80:	4326      	orrs	r6, r4
 8001c82:	0034      	movs	r4, r6
 8001c84:	4656      	mov	r6, sl
 8001c86:	40b3      	lsls	r3, r6
 8001c88:	1e5e      	subs	r6, r3, #1
 8001c8a:	41b3      	sbcs	r3, r6
 8001c8c:	431c      	orrs	r4, r3
 8001c8e:	4663      	mov	r3, ip
 8001c90:	40d3      	lsrs	r3, r2
 8001c92:	18c9      	adds	r1, r1, r3
 8001c94:	19e4      	adds	r4, r4, r7
 8001c96:	42bc      	cmp	r4, r7
 8001c98:	41bf      	sbcs	r7, r7
 8001c9a:	427f      	negs	r7, r7
 8001c9c:	46b9      	mov	r9, r7
 8001c9e:	4680      	mov	r8, r0
 8001ca0:	4489      	add	r9, r1
 8001ca2:	e0d8      	b.n	8001e56 <__aeabi_dsub+0x426>
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4c3b      	ldr	r4, [pc, #236]	; (8001d94 <__aeabi_dsub+0x364>)
 8001ca8:	3001      	adds	r0, #1
 8001caa:	4220      	tst	r0, r4
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dsub+0x280>
 8001cae:	e0b4      	b.n	8001e1a <__aeabi_dsub+0x3ea>
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x288>
 8001cb6:	e144      	b.n	8001f42 <__aeabi_dsub+0x512>
 8001cb8:	4660      	mov	r0, ip
 8001cba:	4318      	orrs	r0, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x290>
 8001cbe:	e190      	b.n	8001fe2 <__aeabi_dsub+0x5b2>
 8001cc0:	0008      	movs	r0, r1
 8001cc2:	4338      	orrs	r0, r7
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x298>
 8001cc6:	e1aa      	b.n	800201e <__aeabi_dsub+0x5ee>
 8001cc8:	4661      	mov	r1, ip
 8001cca:	08db      	lsrs	r3, r3, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	08cc      	lsrs	r4, r1, #3
 8001cd4:	e027      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	4338      	orrs	r0, r7
 8001cda:	d061      	beq.n	8001da0 <__aeabi_dsub+0x370>
 8001cdc:	1e50      	subs	r0, r2, #1
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x2b4>
 8001ce2:	e139      	b.n	8001f58 <__aeabi_dsub+0x528>
 8001ce4:	42a2      	cmp	r2, r4
 8001ce6:	d027      	beq.n	8001d38 <__aeabi_dsub+0x308>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	e75d      	b.n	8001ba8 <__aeabi_dsub+0x178>
 8001cec:	0002      	movs	r2, r0
 8001cee:	391f      	subs	r1, #31
 8001cf0:	40ca      	lsrs	r2, r1
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d003      	beq.n	8001d00 <__aeabi_dsub+0x2d0>
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4098      	lsls	r0, r3
 8001cfe:	4304      	orrs	r4, r0
 8001d00:	1e63      	subs	r3, r4, #1
 8001d02:	419c      	sbcs	r4, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	4699      	mov	r9, r3
 8001d08:	4698      	mov	r8, r3
 8001d0a:	430c      	orrs	r4, r1
 8001d0c:	0763      	lsls	r3, r4, #29
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x2e2>
 8001d10:	e712      	b.n	8001b38 <__aeabi_dsub+0x108>
 8001d12:	464b      	mov	r3, r9
 8001d14:	464a      	mov	r2, r9
 8001d16:	08e4      	lsrs	r4, r4, #3
 8001d18:	075b      	lsls	r3, r3, #29
 8001d1a:	4323      	orrs	r3, r4
 8001d1c:	08d4      	lsrs	r4, r2, #3
 8001d1e:	4642      	mov	r2, r8
 8001d20:	4919      	ldr	r1, [pc, #100]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d00e      	beq.n	8001d44 <__aeabi_dsub+0x314>
 8001d26:	0324      	lsls	r4, r4, #12
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	0d52      	lsrs	r2, r2, #21
 8001d2e:	e722      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d30:	000a      	movs	r2, r1
 8001d32:	2400      	movs	r4, #0
 8001d34:	2300      	movs	r3, #0
 8001d36:	e71e      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	4662      	mov	r2, ip
 8001d42:	08d4      	lsrs	r4, r2, #3
 8001d44:	001a      	movs	r2, r3
 8001d46:	4322      	orrs	r2, r4
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x31c>
 8001d4a:	e1fc      	b.n	8002146 <__aeabi_dsub+0x716>
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e70d      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 faa4 	bl	80022a8 <__clzsi2>
 8001d60:	0001      	movs	r1, r0
 8001d62:	3118      	adds	r1, #24
 8001d64:	291f      	cmp	r1, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x33a>
 8001d68:	e6c4      	b.n	8001af4 <__aeabi_dsub+0xc4>
 8001d6a:	3808      	subs	r0, #8
 8001d6c:	4084      	lsls	r4, r0
 8001d6e:	4643      	mov	r3, r8
 8001d70:	0020      	movs	r0, r4
 8001d72:	2400      	movs	r4, #0
 8001d74:	4588      	cmp	r8, r1
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_dsub+0x34a>
 8001d78:	e6c8      	b.n	8001b0c <__aeabi_dsub+0xdc>
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001d7c:	1a5b      	subs	r3, r3, r1
 8001d7e:	4010      	ands	r0, r2
 8001d80:	4698      	mov	r8, r3
 8001d82:	4681      	mov	r9, r0
 8001d84:	e6d6      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	ff7fffff 	.word	0xff7fffff
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	000007fe 	.word	0x000007fe
 8001d98:	430f      	orrs	r7, r1
 8001d9a:	1e7a      	subs	r2, r7, #1
 8001d9c:	4197      	sbcs	r7, r2
 8001d9e:	e691      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001da0:	4661      	mov	r1, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0749      	lsls	r1, r1, #29
 8001da6:	430b      	orrs	r3, r1
 8001da8:	4661      	mov	r1, ip
 8001daa:	08cc      	lsrs	r4, r1, #3
 8001dac:	e7b8      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001dae:	4640      	mov	r0, r8
 8001db0:	4cd3      	ldr	r4, [pc, #844]	; (8002100 <__aeabi_dsub+0x6d0>)
 8001db2:	3001      	adds	r0, #1
 8001db4:	4220      	tst	r0, r4
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x38a>
 8001db8:	e0a2      	b.n	8001f00 <__aeabi_dsub+0x4d0>
 8001dba:	4640      	mov	r0, r8
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x392>
 8001dc0:	e101      	b.n	8001fc6 <__aeabi_dsub+0x596>
 8001dc2:	4660      	mov	r0, ip
 8001dc4:	4318      	orrs	r0, r3
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x39a>
 8001dc8:	e15e      	b.n	8002088 <__aeabi_dsub+0x658>
 8001dca:	0008      	movs	r0, r1
 8001dcc:	4338      	orrs	r0, r7
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x3a2>
 8001dd0:	e15f      	b.n	8002092 <__aeabi_dsub+0x662>
 8001dd2:	4661      	mov	r1, ip
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	0749      	lsls	r1, r1, #29
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	4661      	mov	r1, ip
 8001ddc:	08cc      	lsrs	r4, r1, #3
 8001dde:	e7a2      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001de0:	4dc8      	ldr	r5, [pc, #800]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001de2:	42a8      	cmp	r0, r5
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x3b8>
 8001de6:	e0cf      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001de8:	2580      	movs	r5, #128	; 0x80
 8001dea:	4664      	mov	r4, ip
 8001dec:	042d      	lsls	r5, r5, #16
 8001dee:	432c      	orrs	r4, r5
 8001df0:	46a4      	mov	ip, r4
 8001df2:	2a38      	cmp	r2, #56	; 0x38
 8001df4:	dc56      	bgt.n	8001ea4 <__aeabi_dsub+0x474>
 8001df6:	2a1f      	cmp	r2, #31
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dsub+0x3cc>
 8001dfa:	e0d1      	b.n	8001fa0 <__aeabi_dsub+0x570>
 8001dfc:	2520      	movs	r5, #32
 8001dfe:	001e      	movs	r6, r3
 8001e00:	1aad      	subs	r5, r5, r2
 8001e02:	4664      	mov	r4, ip
 8001e04:	40ab      	lsls	r3, r5
 8001e06:	40ac      	lsls	r4, r5
 8001e08:	40d6      	lsrs	r6, r2
 8001e0a:	1e5d      	subs	r5, r3, #1
 8001e0c:	41ab      	sbcs	r3, r5
 8001e0e:	4334      	orrs	r4, r6
 8001e10:	4323      	orrs	r3, r4
 8001e12:	4664      	mov	r4, ip
 8001e14:	40d4      	lsrs	r4, r2
 8001e16:	1b09      	subs	r1, r1, r4
 8001e18:	e049      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001e1a:	4660      	mov	r0, ip
 8001e1c:	1bdc      	subs	r4, r3, r7
 8001e1e:	1a46      	subs	r6, r0, r1
 8001e20:	42a3      	cmp	r3, r4
 8001e22:	4180      	sbcs	r0, r0
 8001e24:	4240      	negs	r0, r0
 8001e26:	4681      	mov	r9, r0
 8001e28:	0030      	movs	r0, r6
 8001e2a:	464e      	mov	r6, r9
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	4681      	mov	r9, r0
 8001e30:	0200      	lsls	r0, r0, #8
 8001e32:	d476      	bmi.n	8001f22 <__aeabi_dsub+0x4f2>
 8001e34:	464b      	mov	r3, r9
 8001e36:	4323      	orrs	r3, r4
 8001e38:	d000      	beq.n	8001e3c <__aeabi_dsub+0x40c>
 8001e3a:	e652      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	2500      	movs	r5, #0
 8001e40:	e771      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001e42:	4339      	orrs	r1, r7
 8001e44:	000c      	movs	r4, r1
 8001e46:	1e62      	subs	r2, r4, #1
 8001e48:	4194      	sbcs	r4, r2
 8001e4a:	18e4      	adds	r4, r4, r3
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	419b      	sbcs	r3, r3
 8001e50:	425b      	negs	r3, r3
 8001e52:	4463      	add	r3, ip
 8001e54:	4699      	mov	r9, r3
 8001e56:	464b      	mov	r3, r9
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x42e>
 8001e5c:	e756      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	469c      	mov	ip, r3
 8001e62:	4ba8      	ldr	r3, [pc, #672]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001e64:	44e0      	add	r8, ip
 8001e66:	4598      	cmp	r8, r3
 8001e68:	d038      	beq.n	8001edc <__aeabi_dsub+0x4ac>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	48a6      	ldr	r0, [pc, #664]	; (8002108 <__aeabi_dsub+0x6d8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4003      	ands	r3, r0
 8001e72:	0018      	movs	r0, r3
 8001e74:	0863      	lsrs	r3, r4, #1
 8001e76:	4014      	ands	r4, r2
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	07c3      	lsls	r3, r0, #31
 8001e7c:	431c      	orrs	r4, r3
 8001e7e:	0843      	lsrs	r3, r0, #1
 8001e80:	4699      	mov	r9, r3
 8001e82:	e657      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001e84:	0010      	movs	r0, r2
 8001e86:	000e      	movs	r6, r1
 8001e88:	3820      	subs	r0, #32
 8001e8a:	40c6      	lsrs	r6, r0
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d004      	beq.n	8001e9a <__aeabi_dsub+0x46a>
 8001e90:	2040      	movs	r0, #64	; 0x40
 8001e92:	1a82      	subs	r2, r0, r2
 8001e94:	4091      	lsls	r1, r2
 8001e96:	430f      	orrs	r7, r1
 8001e98:	46b9      	mov	r9, r7
 8001e9a:	464f      	mov	r7, r9
 8001e9c:	1e7a      	subs	r2, r7, #1
 8001e9e:	4197      	sbcs	r7, r2
 8001ea0:	4337      	orrs	r7, r6
 8001ea2:	e60f      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001ea4:	4662      	mov	r2, ip
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	4193      	sbcs	r3, r2
 8001eae:	1afc      	subs	r4, r7, r3
 8001eb0:	42a7      	cmp	r7, r4
 8001eb2:	41bf      	sbcs	r7, r7
 8001eb4:	427f      	negs	r7, r7
 8001eb6:	1bcb      	subs	r3, r1, r7
 8001eb8:	4699      	mov	r9, r3
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	e608      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001ec0:	4666      	mov	r6, ip
 8001ec2:	431e      	orrs	r6, r3
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x498>
 8001ec6:	e0be      	b.n	8002046 <__aeabi_dsub+0x616>
 8001ec8:	1e56      	subs	r6, r2, #1
 8001eca:	2a01      	cmp	r2, #1
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x4a0>
 8001ece:	e109      	b.n	80020e4 <__aeabi_dsub+0x6b4>
 8001ed0:	4c8c      	ldr	r4, [pc, #560]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001ed2:	42a2      	cmp	r2, r4
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x4a8>
 8001ed6:	e119      	b.n	800210c <__aeabi_dsub+0x6dc>
 8001ed8:	0032      	movs	r2, r6
 8001eda:	e6c1      	b.n	8001c60 <__aeabi_dsub+0x230>
 8001edc:	4642      	mov	r2, r8
 8001ede:	2400      	movs	r4, #0
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e648      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	000c      	movs	r4, r1
 8001ee8:	1a80      	subs	r0, r0, r2
 8001eea:	003e      	movs	r6, r7
 8001eec:	4087      	lsls	r7, r0
 8001eee:	4084      	lsls	r4, r0
 8001ef0:	40d6      	lsrs	r6, r2
 8001ef2:	1e78      	subs	r0, r7, #1
 8001ef4:	4187      	sbcs	r7, r0
 8001ef6:	40d1      	lsrs	r1, r2
 8001ef8:	4334      	orrs	r4, r6
 8001efa:	433c      	orrs	r4, r7
 8001efc:	448c      	add	ip, r1
 8001efe:	e7a4      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001f00:	4a80      	ldr	r2, [pc, #512]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x4d8>
 8001f06:	e0e9      	b.n	80020dc <__aeabi_dsub+0x6ac>
 8001f08:	19df      	adds	r7, r3, r7
 8001f0a:	429f      	cmp	r7, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	4461      	add	r1, ip
 8001f10:	425b      	negs	r3, r3
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	07cc      	lsls	r4, r1, #31
 8001f16:	087f      	lsrs	r7, r7, #1
 8001f18:	084b      	lsrs	r3, r1, #1
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	e6f4      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f22:	1afc      	subs	r4, r7, r3
 8001f24:	42a7      	cmp	r7, r4
 8001f26:	41bf      	sbcs	r7, r7
 8001f28:	4663      	mov	r3, ip
 8001f2a:	427f      	negs	r7, r7
 8001f2c:	1ac9      	subs	r1, r1, r3
 8001f2e:	1bcb      	subs	r3, r1, r7
 8001f30:	4699      	mov	r9, r3
 8001f32:	465d      	mov	r5, fp
 8001f34:	e5d5      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	074b      	lsls	r3, r1, #29
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e6ee      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001f42:	4662      	mov	r2, ip
 8001f44:	431a      	orrs	r2, r3
 8001f46:	d000      	beq.n	8001f4a <__aeabi_dsub+0x51a>
 8001f48:	e082      	b.n	8002050 <__aeabi_dsub+0x620>
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	d11b      	bne.n	8001f88 <__aeabi_dsub+0x558>
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	2500      	movs	r5, #0
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	e6f9      	b.n	8001d4c <__aeabi_dsub+0x31c>
 8001f58:	19dc      	adds	r4, r3, r7
 8001f5a:	429c      	cmp	r4, r3
 8001f5c:	419b      	sbcs	r3, r3
 8001f5e:	4461      	add	r1, ip
 8001f60:	4689      	mov	r9, r1
 8001f62:	425b      	negs	r3, r3
 8001f64:	4499      	add	r9, r3
 8001f66:	464b      	mov	r3, r9
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	d444      	bmi.n	8001ff6 <__aeabi_dsub+0x5c6>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4698      	mov	r8, r3
 8001f70:	e6cc      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f72:	1bdc      	subs	r4, r3, r7
 8001f74:	4662      	mov	r2, ip
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	419b      	sbcs	r3, r3
 8001f7a:	1a51      	subs	r1, r2, r1
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	4699      	mov	r9, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	4698      	mov	r8, r3
 8001f86:	e5a4      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	465d      	mov	r5, fp
 8001f8e:	433b      	orrs	r3, r7
 8001f90:	08cc      	lsrs	r4, r1, #3
 8001f92:	e6d7      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001f94:	4662      	mov	r2, ip
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0014      	movs	r4, r2
 8001f9a:	1e63      	subs	r3, r4, #1
 8001f9c:	419c      	sbcs	r4, r3
 8001f9e:	e679      	b.n	8001c94 <__aeabi_dsub+0x264>
 8001fa0:	0015      	movs	r5, r2
 8001fa2:	4664      	mov	r4, ip
 8001fa4:	3d20      	subs	r5, #32
 8001fa6:	40ec      	lsrs	r4, r5
 8001fa8:	46a0      	mov	r8, r4
 8001faa:	2a20      	cmp	r2, #32
 8001fac:	d005      	beq.n	8001fba <__aeabi_dsub+0x58a>
 8001fae:	2540      	movs	r5, #64	; 0x40
 8001fb0:	4664      	mov	r4, ip
 8001fb2:	1aaa      	subs	r2, r5, r2
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	469a      	mov	sl, r3
 8001fba:	4654      	mov	r4, sl
 8001fbc:	1e63      	subs	r3, r4, #1
 8001fbe:	419c      	sbcs	r4, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	e773      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	d023      	beq.n	8002014 <__aeabi_dsub+0x5e4>
 8001fcc:	000a      	movs	r2, r1
 8001fce:	433a      	orrs	r2, r7
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x5a4>
 8001fd2:	e0a0      	b.n	8002116 <__aeabi_dsub+0x6e6>
 8001fd4:	4662      	mov	r2, ip
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4662      	mov	r2, ip
 8001fde:	08d4      	lsrs	r4, r2, #3
 8001fe0:	e6b0      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001fe2:	000b      	movs	r3, r1
 8001fe4:	433b      	orrs	r3, r7
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x5ba>
 8001fe8:	e728      	b.n	8001e3c <__aeabi_dsub+0x40c>
 8001fea:	08ff      	lsrs	r7, r7, #3
 8001fec:	074b      	lsls	r3, r1, #29
 8001fee:	465d      	mov	r5, fp
 8001ff0:	433b      	orrs	r3, r7
 8001ff2:	08cc      	lsrs	r4, r1, #3
 8001ff4:	e697      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	e736      	b.n	8001e6a <__aeabi_dsub+0x43a>
 8001ffc:	1afc      	subs	r4, r7, r3
 8001ffe:	42a7      	cmp	r7, r4
 8002000:	41bf      	sbcs	r7, r7
 8002002:	4663      	mov	r3, ip
 8002004:	427f      	negs	r7, r7
 8002006:	1ac9      	subs	r1, r1, r3
 8002008:	1bcb      	subs	r3, r1, r7
 800200a:	4699      	mov	r9, r3
 800200c:	2301      	movs	r3, #1
 800200e:	465d      	mov	r5, fp
 8002010:	4698      	mov	r8, r3
 8002012:	e55e      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8002014:	074b      	lsls	r3, r1, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	433b      	orrs	r3, r7
 800201a:	08cc      	lsrs	r4, r1, #3
 800201c:	e692      	b.n	8001d44 <__aeabi_dsub+0x314>
 800201e:	1bdc      	subs	r4, r3, r7
 8002020:	4660      	mov	r0, ip
 8002022:	42a3      	cmp	r3, r4
 8002024:	41b6      	sbcs	r6, r6
 8002026:	1a40      	subs	r0, r0, r1
 8002028:	4276      	negs	r6, r6
 800202a:	1b80      	subs	r0, r0, r6
 800202c:	4681      	mov	r9, r0
 800202e:	0200      	lsls	r0, r0, #8
 8002030:	d560      	bpl.n	80020f4 <__aeabi_dsub+0x6c4>
 8002032:	1afc      	subs	r4, r7, r3
 8002034:	42a7      	cmp	r7, r4
 8002036:	41bf      	sbcs	r7, r7
 8002038:	4663      	mov	r3, ip
 800203a:	427f      	negs	r7, r7
 800203c:	1ac9      	subs	r1, r1, r3
 800203e:	1bcb      	subs	r3, r1, r7
 8002040:	4699      	mov	r9, r3
 8002042:	465d      	mov	r5, fp
 8002044:	e576      	b.n	8001b34 <__aeabi_dsub+0x104>
 8002046:	08ff      	lsrs	r7, r7, #3
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	433b      	orrs	r3, r7
 800204c:	08cc      	lsrs	r4, r1, #3
 800204e:	e667      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8002050:	000a      	movs	r2, r1
 8002052:	08db      	lsrs	r3, r3, #3
 8002054:	433a      	orrs	r2, r7
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x62a>
 8002058:	e66f      	b.n	8001d3a <__aeabi_dsub+0x30a>
 800205a:	4662      	mov	r2, ip
 800205c:	0752      	lsls	r2, r2, #29
 800205e:	4313      	orrs	r3, r2
 8002060:	4662      	mov	r2, ip
 8002062:	08d4      	lsrs	r4, r2, #3
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	4214      	tst	r4, r2
 800206a:	d007      	beq.n	800207c <__aeabi_dsub+0x64c>
 800206c:	08c8      	lsrs	r0, r1, #3
 800206e:	4210      	tst	r0, r2
 8002070:	d104      	bne.n	800207c <__aeabi_dsub+0x64c>
 8002072:	465d      	mov	r5, fp
 8002074:	0004      	movs	r4, r0
 8002076:	08fb      	lsrs	r3, r7, #3
 8002078:	0749      	lsls	r1, r1, #29
 800207a:	430b      	orrs	r3, r1
 800207c:	0f5a      	lsrs	r2, r3, #29
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	0752      	lsls	r2, r2, #29
 8002084:	4313      	orrs	r3, r2
 8002086:	e65d      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	08ff      	lsrs	r7, r7, #3
 800208c:	433b      	orrs	r3, r7
 800208e:	08cc      	lsrs	r4, r1, #3
 8002090:	e649      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8002092:	19dc      	adds	r4, r3, r7
 8002094:	429c      	cmp	r4, r3
 8002096:	419b      	sbcs	r3, r3
 8002098:	4461      	add	r1, ip
 800209a:	4689      	mov	r9, r1
 800209c:	425b      	negs	r3, r3
 800209e:	4499      	add	r9, r3
 80020a0:	464b      	mov	r3, r9
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	d400      	bmi.n	80020a8 <__aeabi_dsub+0x678>
 80020a6:	e631      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020a8:	464a      	mov	r2, r9
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <__aeabi_dsub+0x6d8>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	4691      	mov	r9, r2
 80020b2:	4698      	mov	r8, r3
 80020b4:	e62a      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020b6:	0016      	movs	r6, r2
 80020b8:	4664      	mov	r4, ip
 80020ba:	3e20      	subs	r6, #32
 80020bc:	40f4      	lsrs	r4, r6
 80020be:	46a0      	mov	r8, r4
 80020c0:	2a20      	cmp	r2, #32
 80020c2:	d005      	beq.n	80020d0 <__aeabi_dsub+0x6a0>
 80020c4:	2640      	movs	r6, #64	; 0x40
 80020c6:	4664      	mov	r4, ip
 80020c8:	1ab2      	subs	r2, r6, r2
 80020ca:	4094      	lsls	r4, r2
 80020cc:	4323      	orrs	r3, r4
 80020ce:	469a      	mov	sl, r3
 80020d0:	4654      	mov	r4, sl
 80020d2:	1e63      	subs	r3, r4, #1
 80020d4:	419c      	sbcs	r4, r3
 80020d6:	4643      	mov	r3, r8
 80020d8:	431c      	orrs	r4, r3
 80020da:	e5db      	b.n	8001c94 <__aeabi_dsub+0x264>
 80020dc:	0002      	movs	r2, r0
 80020de:	2400      	movs	r4, #0
 80020e0:	2300      	movs	r3, #0
 80020e2:	e548      	b.n	8001b76 <__aeabi_dsub+0x146>
 80020e4:	19dc      	adds	r4, r3, r7
 80020e6:	42bc      	cmp	r4, r7
 80020e8:	41bf      	sbcs	r7, r7
 80020ea:	4461      	add	r1, ip
 80020ec:	4689      	mov	r9, r1
 80020ee:	427f      	negs	r7, r7
 80020f0:	44b9      	add	r9, r7
 80020f2:	e738      	b.n	8001f66 <__aeabi_dsub+0x536>
 80020f4:	464b      	mov	r3, r9
 80020f6:	4323      	orrs	r3, r4
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x6cc>
 80020fa:	e69f      	b.n	8001e3c <__aeabi_dsub+0x40c>
 80020fc:	e606      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	000007fe 	.word	0x000007fe
 8002104:	000007ff 	.word	0x000007ff
 8002108:	ff7fffff 	.word	0xff7fffff
 800210c:	08ff      	lsrs	r7, r7, #3
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	433b      	orrs	r3, r7
 8002112:	08cc      	lsrs	r4, r1, #3
 8002114:	e616      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002116:	4662      	mov	r2, ip
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	4313      	orrs	r3, r2
 800211e:	4662      	mov	r2, ip
 8002120:	08d4      	lsrs	r4, r2, #3
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0312      	lsls	r2, r2, #12
 8002126:	4214      	tst	r4, r2
 8002128:	d007      	beq.n	800213a <__aeabi_dsub+0x70a>
 800212a:	08c8      	lsrs	r0, r1, #3
 800212c:	4210      	tst	r0, r2
 800212e:	d104      	bne.n	800213a <__aeabi_dsub+0x70a>
 8002130:	465d      	mov	r5, fp
 8002132:	0004      	movs	r4, r0
 8002134:	08fb      	lsrs	r3, r7, #3
 8002136:	0749      	lsls	r1, r1, #29
 8002138:	430b      	orrs	r3, r1
 800213a:	0f5a      	lsrs	r2, r3, #29
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	0752      	lsls	r2, r2, #29
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	4313      	orrs	r3, r2
 8002144:	e5fe      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002146:	2300      	movs	r3, #0
 8002148:	4a01      	ldr	r2, [pc, #4]	; (8002150 <__aeabi_dsub+0x720>)
 800214a:	001c      	movs	r4, r3
 800214c:	e513      	b.n	8001b76 <__aeabi_dsub+0x146>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff

08002154 <__aeabi_dcmpun>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	0005      	movs	r5, r0
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <__aeabi_dcmpun+0x38>)
 800215a:	031c      	lsls	r4, r3, #12
 800215c:	0016      	movs	r6, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	030a      	lsls	r2, r1, #12
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	0b12      	lsrs	r2, r2, #12
 8002166:	0d49      	lsrs	r1, r1, #21
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d5b      	lsrs	r3, r3, #21
 800216c:	4281      	cmp	r1, r0
 800216e:	d008      	beq.n	8002182 <__aeabi_dcmpun+0x2e>
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <__aeabi_dcmpun+0x38>)
 8002172:	2000      	movs	r0, #0
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002178:	0020      	movs	r0, r4
 800217a:	4330      	orrs	r0, r6
 800217c:	1e43      	subs	r3, r0, #1
 800217e:	4198      	sbcs	r0, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2001      	movs	r0, #1
 8002184:	432a      	orrs	r2, r5
 8002186:	d1fb      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002188:	e7f2      	b.n	8002170 <__aeabi_dcmpun+0x1c>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff

08002190 <__aeabi_d2iz>:
 8002190:	000a      	movs	r2, r1
 8002192:	b530      	push	{r4, r5, lr}
 8002194:	4c13      	ldr	r4, [pc, #76]	; (80021e4 <__aeabi_d2iz+0x54>)
 8002196:	0053      	lsls	r3, r2, #1
 8002198:	0309      	lsls	r1, r1, #12
 800219a:	0005      	movs	r5, r0
 800219c:	0b09      	lsrs	r1, r1, #12
 800219e:	2000      	movs	r0, #0
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	0fd2      	lsrs	r2, r2, #31
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	dd04      	ble.n	80021b2 <__aeabi_d2iz+0x22>
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <__aeabi_d2iz+0x58>)
 80021aa:	4283      	cmp	r3, r0
 80021ac:	dd02      	ble.n	80021b4 <__aeabi_d2iz+0x24>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <__aeabi_d2iz+0x5c>)
 80021b0:	18d0      	adds	r0, r2, r3
 80021b2:	bd30      	pop	{r4, r5, pc}
 80021b4:	2080      	movs	r0, #128	; 0x80
 80021b6:	0340      	lsls	r0, r0, #13
 80021b8:	4301      	orrs	r1, r0
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <__aeabi_d2iz+0x60>)
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	281f      	cmp	r0, #31
 80021c0:	dd08      	ble.n	80021d4 <__aeabi_d2iz+0x44>
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <__aeabi_d2iz+0x64>)
 80021c4:	1ac3      	subs	r3, r0, r3
 80021c6:	40d9      	lsrs	r1, r3
 80021c8:	000b      	movs	r3, r1
 80021ca:	4258      	negs	r0, r3
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d1f0      	bne.n	80021b2 <__aeabi_d2iz+0x22>
 80021d0:	0018      	movs	r0, r3
 80021d2:	e7ee      	b.n	80021b2 <__aeabi_d2iz+0x22>
 80021d4:	4c08      	ldr	r4, [pc, #32]	; (80021f8 <__aeabi_d2iz+0x68>)
 80021d6:	40c5      	lsrs	r5, r0
 80021d8:	46a4      	mov	ip, r4
 80021da:	4463      	add	r3, ip
 80021dc:	4099      	lsls	r1, r3
 80021de:	000b      	movs	r3, r1
 80021e0:	432b      	orrs	r3, r5
 80021e2:	e7f2      	b.n	80021ca <__aeabi_d2iz+0x3a>
 80021e4:	000003fe 	.word	0x000003fe
 80021e8:	0000041d 	.word	0x0000041d
 80021ec:	7fffffff 	.word	0x7fffffff
 80021f0:	00000433 	.word	0x00000433
 80021f4:	00000413 	.word	0x00000413
 80021f8:	fffffbed 	.word	0xfffffbed

080021fc <__aeabi_i2d>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2800      	cmp	r0, #0
 8002200:	d016      	beq.n	8002230 <__aeabi_i2d+0x34>
 8002202:	17c3      	asrs	r3, r0, #31
 8002204:	18c5      	adds	r5, r0, r3
 8002206:	405d      	eors	r5, r3
 8002208:	0fc4      	lsrs	r4, r0, #31
 800220a:	0028      	movs	r0, r5
 800220c:	f000 f84c 	bl	80022a8 <__clzsi2>
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <__aeabi_i2d+0x5c>)
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	280a      	cmp	r0, #10
 8002216:	dc16      	bgt.n	8002246 <__aeabi_i2d+0x4a>
 8002218:	0003      	movs	r3, r0
 800221a:	002e      	movs	r6, r5
 800221c:	3315      	adds	r3, #21
 800221e:	409e      	lsls	r6, r3
 8002220:	230b      	movs	r3, #11
 8002222:	1a18      	subs	r0, r3, r0
 8002224:	40c5      	lsrs	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	0b2d      	lsrs	r5, r5, #12
 800222c:	0d53      	lsrs	r3, r2, #21
 800222e:	e003      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002230:	2400      	movs	r4, #0
 8002232:	2300      	movs	r3, #0
 8002234:	2500      	movs	r5, #0
 8002236:	2600      	movs	r6, #0
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	432b      	orrs	r3, r5
 800223c:	07e4      	lsls	r4, r4, #31
 800223e:	4323      	orrs	r3, r4
 8002240:	0030      	movs	r0, r6
 8002242:	0019      	movs	r1, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	380b      	subs	r0, #11
 8002248:	4085      	lsls	r5, r0
 800224a:	0552      	lsls	r2, r2, #21
 800224c:	032d      	lsls	r5, r5, #12
 800224e:	2600      	movs	r6, #0
 8002250:	0b2d      	lsrs	r5, r5, #12
 8002252:	0d53      	lsrs	r3, r2, #21
 8002254:	e7f0      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	0000041e 	.word	0x0000041e

0800225c <__aeabi_ui2d>:
 800225c:	b510      	push	{r4, lr}
 800225e:	1e04      	subs	r4, r0, #0
 8002260:	d010      	beq.n	8002284 <__aeabi_ui2d+0x28>
 8002262:	f000 f821 	bl	80022a8 <__clzsi2>
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <__aeabi_ui2d+0x48>)
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	280a      	cmp	r0, #10
 800226c:	dc11      	bgt.n	8002292 <__aeabi_ui2d+0x36>
 800226e:	220b      	movs	r2, #11
 8002270:	0021      	movs	r1, r4
 8002272:	1a12      	subs	r2, r2, r0
 8002274:	40d1      	lsrs	r1, r2
 8002276:	3015      	adds	r0, #21
 8002278:	030a      	lsls	r2, r1, #12
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4084      	lsls	r4, r0
 800227e:	0b12      	lsrs	r2, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e001      	b.n	8002288 <__aeabi_ui2d+0x2c>
 8002284:	2300      	movs	r3, #0
 8002286:	2200      	movs	r2, #0
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	4313      	orrs	r3, r2
 800228c:	0020      	movs	r0, r4
 800228e:	0019      	movs	r1, r3
 8002290:	bd10      	pop	{r4, pc}
 8002292:	0022      	movs	r2, r4
 8002294:	380b      	subs	r0, #11
 8002296:	4082      	lsls	r2, r0
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	0312      	lsls	r2, r2, #12
 800229c:	2400      	movs	r4, #0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e7f1      	b.n	8002288 <__aeabi_ui2d+0x2c>
 80022a4:	0000041e 	.word	0x0000041e

080022a8 <__clzsi2>:
 80022a8:	211c      	movs	r1, #28
 80022aa:	2301      	movs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d301      	bcc.n	80022b6 <__clzsi2+0xe>
 80022b2:	0c00      	lsrs	r0, r0, #16
 80022b4:	3910      	subs	r1, #16
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	4298      	cmp	r0, r3
 80022ba:	d301      	bcc.n	80022c0 <__clzsi2+0x18>
 80022bc:	0a00      	lsrs	r0, r0, #8
 80022be:	3908      	subs	r1, #8
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d301      	bcc.n	80022ca <__clzsi2+0x22>
 80022c6:	0900      	lsrs	r0, r0, #4
 80022c8:	3904      	subs	r1, #4
 80022ca:	a202      	add	r2, pc, #8	; (adr r2, 80022d4 <__clzsi2+0x2c>)
 80022cc:	5c10      	ldrb	r0, [r2, r0]
 80022ce:	1840      	adds	r0, r0, r1
 80022d0:	4770      	bx	lr
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	02020304 	.word	0x02020304
 80022d8:	01010101 	.word	0x01010101
	...

080022e4 <__clzdi2>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	2900      	cmp	r1, #0
 80022e8:	d103      	bne.n	80022f2 <__clzdi2+0xe>
 80022ea:	f7ff ffdd 	bl	80022a8 <__clzsi2>
 80022ee:	3020      	adds	r0, #32
 80022f0:	e002      	b.n	80022f8 <__clzdi2+0x14>
 80022f2:	0008      	movs	r0, r1
 80022f4:	f7ff ffd8 	bl	80022a8 <__clzsi2>
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)

080022fc <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80022fc:	b5b0      	push	{r4, r5, r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002304:	230f      	movs	r3, #15
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]

    /* chip id read try count */
    uint8_t try_count = 5;
 800230c:	230e      	movs	r3, #14
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2205      	movs	r2, #5
 8002312:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8002314:	230d      	movs	r3, #13
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
    //rslt = null_ptr_check(dev);

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        while (try_count)
 800231c:	e02d      	b.n	800237a <bme280_init+0x7e>
        {
            /* Read the chip-id of bme280 sensor */
        	BME280_SPI_Read(BME280_CHIP_ID_ADDR, &chip_id, 1);
 800231e:	240d      	movs	r4, #13
 8002320:	193b      	adds	r3, r7, r4
 8002322:	2201      	movs	r2, #1
 8002324:	0019      	movs	r1, r3
 8002326:	20d0      	movs	r0, #208	; 0xd0
 8002328:	f001 fa5e 	bl	80037e8 <BME280_SPI_Read>
            //rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);

            /* Check for chip id validity */
            if (chip_id == BME280_CHIP_ID) // (rslt == BME280_OK) &&
 800232c:	0022      	movs	r2, r4
 800232e:	18bb      	adds	r3, r7, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b60      	cmp	r3, #96	; 0x60
 8002334:	d118      	bne.n	8002368 <bme280_init+0x6c>
            {
                dev->chip_id = chip_id;
 8002336:	18bb      	adds	r3, r7, r2
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                //bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
                //HAL_Delay(2);
                //bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
                rslt = bme280_soft_reset(dev);
 800233e:	250f      	movs	r5, #15
 8002340:	197c      	adds	r4, r7, r5
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0018      	movs	r0, r3
 8002346:	f000 f959 	bl	80025fc <bme280_soft_reset>
 800234a:	0003      	movs	r3, r0
 800234c:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 800234e:	197b      	adds	r3, r7, r5
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b25b      	sxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d116      	bne.n	8002386 <bme280_init+0x8a>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8002358:	197c      	adds	r4, r7, r5
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0018      	movs	r0, r3
 800235e:	f000 fe55 	bl	800300c <get_calib_data>
 8002362:	0003      	movs	r3, r0
 8002364:	7023      	strb	r3, [r4, #0]
                }

                break;
 8002366:	e00e      	b.n	8002386 <bme280_init+0x8a>
            }

            /* Wait for 1 ms */
            //dev->delay_us(1000, dev->intf_ptr);
            HAL_Delay(1);
 8002368:	2001      	movs	r0, #1
 800236a:	f001 fd05 	bl	8003d78 <HAL_Delay>
            --try_count;
 800236e:	220e      	movs	r2, #14
 8002370:	18bb      	adds	r3, r7, r2
 8002372:	18ba      	adds	r2, r7, r2
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	3a01      	subs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
        while (try_count)
 800237a:	230e      	movs	r3, #14
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1cc      	bne.n	800231e <bme280_init+0x22>
 8002384:	e000      	b.n	8002388 <bme280_init+0x8c>
                break;
 8002386:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8002388:	230e      	movs	r3, #14
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <bme280_init+0x9e>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8002392:	230f      	movs	r3, #15
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	22fe      	movs	r2, #254	; 0xfe
 8002398:	701a      	strb	r2, [r3, #0]
        }
    //}

    return rslt;
 800239a:	230f      	movs	r3, #15
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b25b      	sxtb	r3, r3
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bdb0      	pop	{r4, r5, r7, pc}

080023aa <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
void bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 80023aa:	b590      	push	{r4, r7, lr}
 80023ac:	b08b      	sub	sp, #44	; 0x2c
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	701a      	strb	r2, [r3, #0]
    //int8_t rslt = 0;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b0a      	cmp	r3, #10
 80023c0:	d902      	bls.n	80023c8 <bme280_set_regs+0x1e>
    {
        len = 10;
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	220a      	movs	r2, #10
 80023c6:	701a      	strb	r2, [r3, #0]
    /* Check for arguments validity */
    //if ((reg_addr != NULL) && (reg_data != NULL)) // (rslt == BME280_OK) &&
    //{
    //    if (len != 0)
    //    {
            temp_buff[0] = reg_data[0];
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	781a      	ldrb	r2, [r3, #0]
 80023cc:	2310      	movs	r3, #16
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
//            if (dev->intf != BME280_I2C_INTF)
//            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80023d2:	2325      	movs	r3, #37	; 0x25
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	e012      	b.n	8002402 <bme280_set_regs+0x58>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80023dc:	2025      	movs	r0, #37	; 0x25
 80023de:	183b      	adds	r3, r7, r0
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	18d3      	adds	r3, r2, r3
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	183b      	adds	r3, r7, r0
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	18cb      	adds	r3, r1, r3
 80023f0:	217f      	movs	r1, #127	; 0x7f
 80023f2:	400a      	ands	r2, r1
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80023f8:	183b      	adds	r3, r7, r0
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	183b      	adds	r3, r7, r0
 80023fe:	3201      	adds	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	2325      	movs	r3, #37	; 0x25
 8002404:	18fa      	adds	r2, r7, r3
 8002406:	1dfb      	adds	r3, r7, #7
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d3e5      	bcc.n	80023dc <bme280_set_regs+0x32>
                }
 //           }

            /* Burst write mode */
            if (len > 1)
 8002410:	1dfb      	adds	r3, r7, #7
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d911      	bls.n	800243c <bme280_set_regs+0x92>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	2110      	movs	r1, #16
 8002420:	1879      	adds	r1, r7, r1
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fe2c 	bl	8003080 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8002428:	1dfb      	adds	r3, r7, #7
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	18db      	adds	r3, r3, r3
 8002430:	b29a      	uxth	r2, r3
 8002432:	2326      	movs	r3, #38	; 0x26
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	3a01      	subs	r2, #1
 8002438:	801a      	strh	r2, [r3, #0]
 800243a:	e004      	b.n	8002446 <bme280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 800243c:	2326      	movs	r3, #38	; 0x26
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	1dfa      	adds	r2, r7, #7
 8002442:	7812      	ldrb	r2, [r2, #0]
 8002444:	801a      	strh	r2, [r3, #0]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691c      	ldr	r4, [r3, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	7818      	ldrb	r0, [r3, #0]
 800244e:	2326      	movs	r3, #38	; 0x26
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	881a      	ldrh	r2, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2110      	movs	r1, #16
 800245a:	1879      	adds	r1, r7, r1
 800245c:	47a0      	blx	r4
 800245e:	0003      	movs	r3, r0
 8002460:	0019      	movs	r1, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2241      	movs	r2, #65	; 0x41
 8002466:	5499      	strb	r1, [r3, r2]
//    {
//        rslt = BME280_E_NULL_PTR;
//    }

    //return rslt;
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b00b      	add	sp, #44	; 0x2c
 800246e:	bd90      	pop	{r4, r7, pc}

08002470 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	0002      	movs	r2, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 800247e:	250f      	movs	r5, #15
 8002480:	197b      	adds	r3, r7, r5
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
    //rslt = null_ptr_check(dev);

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8002486:	197c      	adds	r4, r7, r5
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	260e      	movs	r6, #14
 800248c:	19bb      	adds	r3, r7, r6
 800248e:	0011      	movs	r1, r2
 8002490:	0018      	movs	r0, r3
 8002492:	f000 f88d 	bl	80025b0 <bme280_get_sensor_mode>
 8002496:	0003      	movs	r3, r0
 8002498:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800249a:	002a      	movs	r2, r5
 800249c:	18bb      	adds	r3, r7, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <bme280_set_sensor_settings+0x4c>
 80024a6:	19bb      	adds	r3, r7, r6
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d006      	beq.n	80024bc <bme280_set_sensor_settings+0x4c>
        {
            rslt = put_device_to_sleep(dev);
 80024ae:	18bc      	adds	r4, r7, r2
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 fb79 	bl	8002baa <put_device_to_sleep>
 80024b8:	0003      	movs	r3, r0
 80024ba:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 80024bc:	240f      	movs	r4, #15
 80024be:	193b      	adds	r3, r7, r4
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d12d      	bne.n	8002524 <bme280_set_sensor_settings+0xb4>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	0019      	movs	r1, r3
 80024ce:	2007      	movs	r0, #7
 80024d0:	f000 ff13 	bl	80032fa <are_settings_changed>
 80024d4:	1e03      	subs	r3, r0, #0
 80024d6:	d00b      	beq.n	80024f0 <bme280_set_sensor_settings+0x80>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	333c      	adds	r3, #60	; 0x3c
 80024dc:	0019      	movs	r1, r3
 80024de:	193c      	adds	r4, r7, r4
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 f99d 	bl	8002826 <set_osr_settings>
 80024ec:	0003      	movs	r3, r0
 80024ee:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80024f0:	240f      	movs	r4, #15
 80024f2:	193b      	adds	r3, r7, r4
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d113      	bne.n	8002524 <bme280_set_sensor_settings+0xb4>
 80024fc:	1dfb      	adds	r3, r7, #7
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	0019      	movs	r1, r3
 8002502:	2018      	movs	r0, #24
 8002504:	f000 fef9 	bl	80032fa <are_settings_changed>
 8002508:	1e03      	subs	r3, r0, #0
 800250a:	d00b      	beq.n	8002524 <bme280_set_sensor_settings+0xb4>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	333c      	adds	r3, #60	; 0x3c
 8002510:	0019      	movs	r1, r3
 8002512:	193c      	adds	r4, r7, r4
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	1dfb      	adds	r3, r7, #7
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fa34 	bl	8002988 <set_filter_standby_settings>
 8002520:	0003      	movs	r3, r0
 8002522:	7023      	strb	r3, [r4, #0]
            }
        }
    //}

    return rslt;
 8002524:	230f      	movs	r3, #15
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b25b      	sxtb	r3, r3
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b005      	add	sp, #20
 8002532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002534 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8002534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	0002      	movs	r2, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8002542:	250f      	movs	r5, #15
 8002544:	197b      	adds	r3, r7, r5
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
    /* Check for null pointer in the device structure*/
    //rslt = null_ptr_check(dev);

    //if (rslt == BME280_OK)
    //{
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800254a:	197c      	adds	r4, r7, r5
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	260e      	movs	r6, #14
 8002550:	19bb      	adds	r3, r7, r6
 8002552:	0011      	movs	r1, r2
 8002554:	0018      	movs	r0, r3
 8002556:	f000 f82b 	bl	80025b0 <bme280_get_sensor_mode>
 800255a:	0003      	movs	r3, r0
 800255c:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 800255e:	002a      	movs	r2, r5
 8002560:	18bb      	adds	r3, r7, r2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b25b      	sxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <bme280_set_sensor_mode+0x4c>
 800256a:	19bb      	adds	r3, r7, r6
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <bme280_set_sensor_mode+0x4c>
        {
            rslt = put_device_to_sleep(dev);
 8002572:	18bc      	adds	r4, r7, r2
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	0018      	movs	r0, r3
 8002578:	f000 fb17 	bl	8002baa <put_device_to_sleep>
 800257c:	0003      	movs	r3, r0
 800257e:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8002580:	220f      	movs	r2, #15
 8002582:	18bb      	adds	r3, r7, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b25b      	sxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <bme280_set_sensor_mode+0x6c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 800258c:	18bc      	adds	r4, r7, r2
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	1dfb      	adds	r3, r7, #7
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	0011      	movs	r1, r2
 8002596:	0018      	movs	r0, r3
 8002598:	f000 fad0 	bl	8002b3c <write_power_mode>
 800259c:	0003      	movs	r3, r0
 800259e:	7023      	strb	r3, [r4, #0]
        }
    //}

    return rslt;
 80025a0:	230f      	movs	r3, #15
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	b25b      	sxtb	r3, r3
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b005      	add	sp, #20
 80025ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025b0 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80025ba:	230f      	movs	r3, #15
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    //rslt = null_ptr_check(dev);

    if (sensor_mode != NULL) // (rslt == BME280_OK) && (
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00d      	beq.n	80025e4 <bme280_get_sensor_mode+0x34>
    {
        /* Read the power mode register */
    	BME280_SPI_Read(BME280_PWR_CTRL_ADDR, sensor_mode, 1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	0019      	movs	r1, r3
 80025ce:	20f4      	movs	r0, #244	; 0xf4
 80025d0:	f001 f90a 	bl	80037e8 <BME280_SPI_Read>
        //rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2203      	movs	r2, #3
 80025da:	4013      	ands	r3, r2
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	e003      	b.n	80025ec <bme280_get_sensor_mode+0x3c>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80025e4:	230f      	movs	r3, #15
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	22ff      	movs	r2, #255	; 0xff
 80025ea:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80025ec:	230f      	movs	r3, #15
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b25b      	sxtb	r3, r3
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b004      	add	sp, #16
 80025fa:	bd80      	pop	{r7, pc}

080025fc <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002604:	240f      	movs	r4, #15
 8002606:	193b      	adds	r3, r7, r4
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_RESET_ADDR;
 800260c:	200d      	movs	r0, #13
 800260e:	183b      	adds	r3, r7, r0
 8002610:	22e0      	movs	r2, #224	; 0xe0
 8002612:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8002614:	230c      	movs	r3, #12
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 800261c:	230e      	movs	r3, #14
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2205      	movs	r2, #5
 8002622:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8002624:	210b      	movs	r1, #11
 8002626:	187b      	adds	r3, r7, r1
 8002628:	22b6      	movs	r2, #182	; 0xb6
 800262a:	701a      	strb	r2, [r3, #0]

    /* Proceed if null check is fine */
    //if (rslt == BME280_OK)
    //{
        /* Write the soft reset command in the sensor */
         bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1879      	adds	r1, r7, r1
 8002630:	1838      	adds	r0, r7, r0
 8002632:	2201      	movs	r2, #1
 8002634:	f7ff feb9 	bl	80023aa <bme280_set_regs>

        if (rslt == BME280_OK)
 8002638:	193b      	adds	r3, r7, r4
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b25b      	sxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d122      	bne.n	8002688 <bme280_soft_reset+0x8c>
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                //dev->delay_us(2000, dev->intf_ptr);
            	HAL_Delay(2);
 8002642:	2002      	movs	r0, #2
 8002644:	f001 fb98 	bl	8003d78 <HAL_Delay>
            	BME280_SPI_Read(BME280_STATUS_REG_ADDR, &status_reg, 1);
 8002648:	240c      	movs	r4, #12
 800264a:	193b      	adds	r3, r7, r4
 800264c:	2201      	movs	r2, #1
 800264e:	0019      	movs	r1, r3
 8002650:	20f3      	movs	r0, #243	; 0xf3
 8002652:	f001 f8c9 	bl	80037e8 <BME280_SPI_Read>
                //rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);

            } while ((try_run--) && (status_reg & BME280_STATUS_IM_UPDATE)); // (rslt == BME280_OK) &&
 8002656:	220e      	movs	r2, #14
 8002658:	18bb      	adds	r3, r7, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	18ba      	adds	r2, r7, r2
 800265e:	1e59      	subs	r1, r3, #1
 8002660:	7011      	strb	r1, [r2, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <bme280_soft_reset+0x76>
 8002666:	193b      	adds	r3, r7, r4
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	001a      	movs	r2, r3
 800266c:	2301      	movs	r3, #1
 800266e:	4013      	ands	r3, r2
 8002670:	d1e7      	bne.n	8002642 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8002672:	230c      	movs	r3, #12
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	001a      	movs	r2, r3
 800267a:	2301      	movs	r3, #1
 800267c:	4013      	ands	r3, r2
 800267e:	d003      	beq.n	8002688 <bme280_soft_reset+0x8c>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8002680:	230f      	movs	r3, #15
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	22fa      	movs	r2, #250	; 0xfa
 8002686:	701a      	strb	r2, [r3, #0]
            }
        }
    //}

    return rslt;
 8002688:	230f      	movs	r3, #15
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b25b      	sxtb	r3, r3
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b005      	add	sp, #20
 8002696:	bd90      	pop	{r4, r7, pc}

08002698 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8002698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	230f      	movs	r3, #15
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	1c02      	adds	r2, r0, #0
 80026a8:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 80026aa:	221f      	movs	r2, #31
 80026ac:	18bb      	adds	r3, r7, r2
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_HUMIDITY_CALIB_DATA_LEN] = { 0 }; //BME280_P_T_H_DATA_LEN
 80026b2:	2418      	movs	r4, #24
 80026b4:	193b      	adds	r3, r7, r4
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	3304      	adds	r3, #4
 80026bc:	2203      	movs	r2, #3
 80026be:	2100      	movs	r1, #0
 80026c0:	0018      	movs	r0, r3
 80026c2:	f004 fd61 	bl	8007188 <memset>
    struct bme280_uncomp_data uncomp_data = { 0 };
 80026c6:	2610      	movs	r6, #16
 80026c8:	19bb      	adds	r3, r7, r6
 80026ca:	0018      	movs	r0, r3
 80026cc:	2308      	movs	r3, #8
 80026ce:	001a      	movs	r2, r3
 80026d0:	2100      	movs	r1, #0
 80026d2:	f004 fd59 	bl	8007188 <memset>

    /* Check for null pointer in the device structure*/
    //rslt = null_ptr_check(dev);

    if (comp_data != NULL) // (rslt == BME280_OK) && (
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01b      	beq.n	8002714 <bme280_get_sensor_data+0x7c>
    {
        /* Read the pressure and temperature data from the sensor */
    	BME280_SPI_Read(BME280_DATA_ADDR, reg_data, BME280_HUMIDITY_CALIB_DATA_LEN);
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	2207      	movs	r2, #7
 80026e0:	0019      	movs	r1, r3
 80026e2:	20f7      	movs	r0, #247	; 0xf7
 80026e4:	f001 f880 	bl	80037e8 <BME280_SPI_Read>
        //rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev); //BME280_P_T_H_DATA_LEN

        //if (rslt == BME280_OK)
        //{
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 80026e8:	19ba      	adds	r2, r7, r6
 80026ea:	193b      	adds	r3, r7, r4
 80026ec:	0011      	movs	r1, r2
 80026ee:	0018      	movs	r0, r3
 80026f0:	f000 f81c 	bl	800272c <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	001d      	movs	r5, r3
 80026f8:	3514      	adds	r5, #20
 80026fa:	221f      	movs	r2, #31
 80026fc:	18bc      	adds	r4, r7, r2
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	19b9      	adds	r1, r7, r6
 8002702:	230f      	movs	r3, #15
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	7818      	ldrb	r0, [r3, #0]
 8002708:	002b      	movs	r3, r5
 800270a:	f000 f83d 	bl	8002788 <bme280_compensate_data>
 800270e:	0003      	movs	r3, r0
 8002710:	7023      	strb	r3, [r4, #0]
 8002712:	e003      	b.n	800271c <bme280_get_sensor_data+0x84>
        //}
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002714:	231f      	movs	r3, #31
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800271c:	231f      	movs	r3, #31
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b25b      	sxtb	r3, r3
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b009      	add	sp, #36	; 0x24
 800272a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800272c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
//    data_lsb = (uint32_t)reg_data[1] << 4;
//    data_xlsb = (uint32_t)reg_data[2] >> 4;
//    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3303      	adds	r3, #3
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	031b      	lsls	r3, r3, #12
 800273e:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3304      	adds	r3, #4
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3305      	adds	r3, #5
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	b2db      	uxtb	r3, r3
 8002754:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	431a      	orrs	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	431a      	orrs	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3306      	adds	r3, #6
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3307      	adds	r3, #7
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	431a      	orrs	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	605a      	str	r2, [r3, #4]
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b006      	add	sp, #24
 8002786:	bd80      	pop	{r7, pc}

08002788 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	240f      	movs	r4, #15
 8002796:	193b      	adds	r3, r7, r4
 8002798:	1c02      	adds	r2, r0, #0
 800279a:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 800279c:	2317      	movs	r3, #23
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d031      	beq.n	800280e <bme280_compensate_data+0x86>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d02e      	beq.n	800280e <bme280_compensate_data+0x86>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d02b      	beq.n	800280e <bme280_compensate_data+0x86>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	2300      	movs	r3, #0
 80027bc:	600a      	str	r2, [r1, #0]
 80027be:	604b      	str	r3, [r1, #4]
        //comp_data->pressure = 0;
        comp_data->humidity = 0;
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	2300      	movs	r3, #0
 80027c6:	608a      	str	r2, [r1, #8]
 80027c8:	60cb      	str	r3, [r1, #12]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_TEMP | BME280_HUM)) // BME280_PRESS |
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2206      	movs	r2, #6
 80027d0:	4013      	ands	r3, r2
 80027d2:	d00a      	beq.n	80027ea <bme280_compensate_data+0x62>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	0011      	movs	r1, r2
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 fa42 	bl	8002c64 <compensate_temperature>
 80027e0:	0002      	movs	r2, r0
 80027e2:	000b      	movs	r3, r1
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	600a      	str	r2, [r1, #0]
 80027e8:	604b      	str	r3, [r1, #4]
//        {
//            /* Compensate the pressure data */
//            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
//        }

        if (sensor_comp & BME280_HUM)
 80027ea:	230f      	movs	r3, #15
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2204      	movs	r2, #4
 80027f2:	4013      	ands	r3, r2
 80027f4:	d00f      	beq.n	8002816 <bme280_compensate_data+0x8e>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	0011      	movs	r1, r2
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 faf7 	bl	8002df0 <compensate_humidity>
 8002802:	0002      	movs	r2, r0
 8002804:	000b      	movs	r3, r1
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	608a      	str	r2, [r1, #8]
 800280a:	60cb      	str	r3, [r1, #12]
        if (sensor_comp & BME280_HUM)
 800280c:	e003      	b.n	8002816 <bme280_compensate_data+0x8e>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800280e:	2317      	movs	r3, #23
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	22ff      	movs	r2, #255	; 0xff
 8002814:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002816:	2317      	movs	r3, #23
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	b25b      	sxtb	r3, r3
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b007      	add	sp, #28
 8002824:	bd90      	pop	{r4, r7, pc}

08002826 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002826:	b590      	push	{r4, r7, lr}
 8002828:	b087      	sub	sp, #28
 800282a:	af00      	add	r7, sp, #0
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	210f      	movs	r1, #15
 8002832:	187b      	adds	r3, r7, r1
 8002834:	1c02      	adds	r2, r0, #0
 8002836:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8002838:	2017      	movs	r0, #23
 800283a:	183b      	adds	r3, r7, r0
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8002840:	187b      	adds	r3, r7, r1
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2204      	movs	r2, #4
 8002846:	4013      	ands	r3, r2
 8002848:	d008      	beq.n	800285c <set_osr_settings+0x36>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 800284a:	183c      	adds	r4, r7, r0
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	0011      	movs	r1, r2
 8002852:	0018      	movs	r0, r3
 8002854:	f000 f81b 	bl	800288e <set_osr_humidity_settings>
 8002858:	0003      	movs	r3, r0
 800285a:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800285c:	200f      	movs	r0, #15
 800285e:	183b      	adds	r3, r7, r0
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2203      	movs	r2, #3
 8002864:	4013      	ands	r3, r2
 8002866:	d00a      	beq.n	800287e <set_osr_settings+0x58>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8002868:	2317      	movs	r3, #23
 800286a:	18fc      	adds	r4, r7, r3
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	183b      	adds	r3, r7, r0
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	0018      	movs	r0, r3
 8002876:	f000 f845 	bl	8002904 <set_osr_press_temp_settings>
 800287a:	0003      	movs	r3, r0
 800287c:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800287e:	2317      	movs	r3, #23
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b25b      	sxtb	r3, r3
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b007      	add	sp, #28
 800288c:	bd90      	pop	{r4, r7, pc}

0800288e <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800288e:	b5b0      	push	{r4, r5, r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002898:	250f      	movs	r5, #15
 800289a:	197b      	adds	r3, r7, r5
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80028a0:	200c      	movs	r0, #12
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	22f2      	movs	r2, #242	; 0xf2
 80028a6:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	789b      	ldrb	r3, [r3, #2]
 80028ac:	2207      	movs	r2, #7
 80028ae:	4013      	ands	r3, r2
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	210e      	movs	r1, #14
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
     bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	1879      	adds	r1, r7, r1
 80028bc:	0004      	movs	r4, r0
 80028be:	1938      	adds	r0, r7, r4
 80028c0:	2201      	movs	r2, #1
 80028c2:	f7ff fd72 	bl	80023aa <bme280_set_regs>

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 80028c6:	197b      	adds	r3, r7, r5
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b25b      	sxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d111      	bne.n	80028f4 <set_osr_humidity_settings+0x66>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	22f4      	movs	r2, #244	; 0xf4
 80028d4:	701a      	strb	r2, [r3, #0]
        BME280_SPI_Read(reg_addr, &ctrl_meas, 1);
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	0018      	movs	r0, r3
 80028dc:	250d      	movs	r5, #13
 80028de:	197b      	adds	r3, r7, r5
 80028e0:	2201      	movs	r2, #1
 80028e2:	0019      	movs	r1, r3
 80028e4:	f000 ff80 	bl	80037e8 <BME280_SPI_Read>
        //rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);

        //if (rslt == BME280_OK)
        //{
             bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	1979      	adds	r1, r7, r5
 80028ec:	1938      	adds	r0, r7, r4
 80028ee:	2201      	movs	r2, #1
 80028f0:	f7ff fd5b 	bl	80023aa <bme280_set_regs>
        //}
    }

    return rslt;
 80028f4:	230f      	movs	r3, #15
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b25b      	sxtb	r3, r3
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b004      	add	sp, #16
 8002902:	bdb0      	pop	{r4, r5, r7, pc}

08002904 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8002904:	b5b0      	push	{r4, r5, r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	240f      	movs	r4, #15
 8002910:	193b      	adds	r3, r7, r4
 8002912:	1c02      	adds	r2, r0, #0
 8002914:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8002916:	2317      	movs	r3, #23
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800291e:	2116      	movs	r1, #22
 8002920:	187b      	adds	r3, r7, r1
 8002922:	22f4      	movs	r2, #244	; 0xf4
 8002924:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    BME280_SPI_Read(reg_addr, &reg_data, 1);
 8002926:	187b      	adds	r3, r7, r1
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	2515      	movs	r5, #21
 800292e:	197b      	adds	r3, r7, r5
 8002930:	2201      	movs	r2, #1
 8002932:	0019      	movs	r1, r3
 8002934:	f000 ff58 	bl	80037e8 <BME280_SPI_Read>
    //rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);

    //if (rslt == BME280_OK)
    //{
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8002938:	193b      	adds	r3, r7, r4
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2201      	movs	r2, #1
 800293e:	4013      	ands	r3, r2
 8002940:	d005      	beq.n	800294e <set_osr_press_temp_settings+0x4a>
        {
            fill_osr_press_settings(&reg_data, settings);
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	197b      	adds	r3, r7, r5
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f000 f892 	bl	8002a72 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 800294e:	230f      	movs	r3, #15
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2202      	movs	r2, #2
 8002956:	4013      	ands	r3, r2
 8002958:	d006      	beq.n	8002968 <set_osr_press_temp_settings+0x64>
        {
            fill_osr_temp_settings(&reg_data, settings);
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	2315      	movs	r3, #21
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	0011      	movs	r1, r2
 8002962:	0018      	movs	r0, r3
 8002964:	f000 f8a0 	bl	8002aa8 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
         bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2215      	movs	r2, #21
 800296c:	18b9      	adds	r1, r7, r2
 800296e:	2216      	movs	r2, #22
 8002970:	18b8      	adds	r0, r7, r2
 8002972:	2201      	movs	r2, #1
 8002974:	f7ff fd19 	bl	80023aa <bme280_set_regs>
    //}

    return rslt;
 8002978:	2317      	movs	r3, #23
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b25b      	sxtb	r3, r3
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b006      	add	sp, #24
 8002986:	bdb0      	pop	{r4, r5, r7, pc}

08002988 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	240f      	movs	r4, #15
 8002994:	193b      	adds	r3, r7, r4
 8002996:	1c02      	adds	r2, r0, #0
 8002998:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 800299a:	2317      	movs	r3, #23
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 80029a2:	2116      	movs	r1, #22
 80029a4:	187b      	adds	r3, r7, r1
 80029a6:	22f5      	movs	r2, #245	; 0xf5
 80029a8:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    BME280_SPI_Read(reg_addr, &reg_data, 1);
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	0018      	movs	r0, r3
 80029b0:	2515      	movs	r5, #21
 80029b2:	197b      	adds	r3, r7, r5
 80029b4:	2201      	movs	r2, #1
 80029b6:	0019      	movs	r1, r3
 80029b8:	f000 ff16 	bl	80037e8 <BME280_SPI_Read>
    //rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);

    //if (rslt == BME280_OK)
    //{
        if (desired_settings & BME280_FILTER_SEL)
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2208      	movs	r2, #8
 80029c2:	4013      	ands	r3, r2
 80029c4:	d005      	beq.n	80029d2 <set_filter_standby_settings+0x4a>
        {
            fill_filter_settings(&reg_data, settings);
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	197b      	adds	r3, r7, r5
 80029ca:	0011      	movs	r1, r2
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f81d 	bl	8002a0c <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 80029d2:	230f      	movs	r3, #15
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2210      	movs	r2, #16
 80029da:	4013      	ands	r3, r2
 80029dc:	d006      	beq.n	80029ec <set_filter_standby_settings+0x64>
        {
            fill_standby_settings(&reg_data, settings);
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	2315      	movs	r3, #21
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	0011      	movs	r1, r2
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 f82b 	bl	8002a42 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
         bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2215      	movs	r2, #21
 80029f0:	18b9      	adds	r1, r7, r2
 80029f2:	2216      	movs	r2, #22
 80029f4:	18b8      	adds	r0, r7, r2
 80029f6:	2201      	movs	r2, #1
 80029f8:	f7ff fcd7 	bl	80023aa <bme280_set_regs>
    //}

    return rslt;
 80029fc:	2317      	movs	r3, #23
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b25b      	sxtb	r3, r3
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b006      	add	sp, #24
 8002a0a:	bdb0      	pop	{r4, r5, r7, pc}

08002a0c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	221c      	movs	r2, #28
 8002a1e:	4393      	bics	r3, r2
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	78db      	ldrb	r3, [r3, #3]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	b25b      	sxtb	r3, r3
 8002a2a:	211c      	movs	r1, #28
 8002a2c:	400b      	ands	r3, r1
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	4313      	orrs	r3, r2
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	701a      	strb	r2, [r3, #0]
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	221f      	movs	r2, #31
 8002a54:	4013      	ands	r3, r2
 8002a56:	b25a      	sxtb	r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	791b      	ldrb	r3, [r3, #4]
 8002a5c:	015b      	lsls	r3, r3, #5
 8002a5e:	b25b      	sxtb	r3, r3
 8002a60:	4313      	orrs	r3, r2
 8002a62:	b25b      	sxtb	r3, r3
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	701a      	strb	r2, [r3, #0]
}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b002      	add	sp, #8
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	221c      	movs	r2, #28
 8002a84:	4393      	bics	r3, r2
 8002a86:	b25a      	sxtb	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	b25b      	sxtb	r3, r3
 8002a90:	211c      	movs	r1, #28
 8002a92:	400b      	ands	r3, r1
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	701a      	strb	r2, [r3, #0]
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b25b      	sxtb	r3, r3
 8002ab8:	221f      	movs	r2, #31
 8002aba:	4013      	ands	r3, r2
 8002abc:	b25a      	sxtb	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	015b      	lsls	r3, r3, #5
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	701a      	strb	r2, [r3, #0]
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b002      	add	sp, #8
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	4013      	ands	r3, r2
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3302      	adds	r3, #2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	109b      	asrs	r3, r3, #2
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2207      	movs	r2, #7
 8002afc:	4013      	ands	r3, r2
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3302      	adds	r3, #2
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3303      	adds	r3, #3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	109b      	asrs	r3, r3, #2
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	4013      	ands	r3, r2
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3303      	adds	r3, #3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	711a      	strb	r2, [r3, #4]
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	0002      	movs	r2, r0
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	1dfb      	adds	r3, r7, #7
 8002b48:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0;
 8002b4a:	260f      	movs	r6, #15
 8002b4c:	19bb      	adds	r3, r7, r6
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8002b52:	250e      	movs	r5, #14
 8002b54:	197b      	adds	r3, r7, r5
 8002b56:	22f4      	movs	r2, #244	; 0xf4
 8002b58:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    BME280_SPI_Read(reg_addr, &sensor_mode_reg_val, 1);
 8002b5a:	197b      	adds	r3, r7, r5
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	240d      	movs	r4, #13
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	2201      	movs	r2, #1
 8002b66:	0019      	movs	r1, r3
 8002b68:	f000 fe3e 	bl	80037e8 <BME280_SPI_Read>
    //rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);

    /* Set the power mode */
    //if (rslt == BME280_OK)
    //{
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8002b6c:	0020      	movs	r0, r4
 8002b6e:	183b      	adds	r3, r7, r0
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	2203      	movs	r2, #3
 8002b76:	4393      	bics	r3, r2
 8002b78:	b25a      	sxtb	r2, r3
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b25b      	sxtb	r3, r3
 8002b80:	2103      	movs	r1, #3
 8002b82:	400b      	ands	r3, r1
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	183b      	adds	r3, r7, r0
 8002b8e:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
         bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	1839      	adds	r1, r7, r0
 8002b94:	1978      	adds	r0, r7, r5
 8002b96:	2201      	movs	r2, #1
 8002b98:	f7ff fc07 	bl	80023aa <bme280_set_regs>
    //}

    return rslt;
 8002b9c:	19bb      	adds	r3, r7, r6
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b25b      	sxtb	r3, r3
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b005      	add	sp, #20
 8002ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002baa <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8002baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bac:	b087      	sub	sp, #28
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002bb2:	2417      	movs	r4, #23
 8002bb4:	193b      	adds	r3, r7, r4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data[4];
    struct bme280_settings settings;

    BME280_SPI_Read(BME280_CTRL_HUM_ADDR, reg_data, 4);
 8002bba:	2510      	movs	r5, #16
 8002bbc:	197b      	adds	r3, r7, r5
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	20f2      	movs	r0, #242	; 0xf2
 8002bc4:	f000 fe10 	bl	80037e8 <BME280_SPI_Read>
    //rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);

    //if (rslt == BME280_OK)
    //{
        parse_device_settings(reg_data, &settings);
 8002bc8:	2608      	movs	r6, #8
 8002bca:	19ba      	adds	r2, r7, r6
 8002bcc:	197b      	adds	r3, r7, r5
 8002bce:	0011      	movs	r1, r2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7ff ff81 	bl	8002ad8 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8002bd6:	0025      	movs	r5, r4
 8002bd8:	193c      	adds	r4, r7, r4
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fd0d 	bl	80025fc <bme280_soft_reset>
 8002be2:	0003      	movs	r3, r0
 8002be4:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8002be6:	197b      	adds	r3, r7, r5
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d108      	bne.n	8002c02 <put_device_to_sleep+0x58>
        {
            rslt = reload_device_settings(&settings, dev);
 8002bf0:	197c      	adds	r4, r7, r5
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	19bb      	adds	r3, r7, r6
 8002bf6:	0011      	movs	r1, r2
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 f80a 	bl	8002c12 <reload_device_settings>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	7023      	strb	r3, [r4, #0]
        }
    //}

    return rslt;
 8002c02:	2317      	movs	r3, #23
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b25b      	sxtb	r3, r3
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b007      	add	sp, #28
 8002c10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c12 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002c12:	b5b0      	push	{r4, r5, r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002c1c:	250f      	movs	r5, #15
 8002c1e:	197b      	adds	r3, r7, r5
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8002c24:	197c      	adds	r4, r7, r5
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	201f      	movs	r0, #31
 8002c2e:	f7ff fdfa 	bl	8002826 <set_osr_settings>
 8002c32:	0003      	movs	r3, r0
 8002c34:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002c36:	197b      	adds	r3, r7, r5
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d108      	bne.n	8002c52 <reload_device_settings+0x40>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8002c40:	197c      	adds	r4, r7, r5
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	0019      	movs	r1, r3
 8002c48:	201f      	movs	r0, #31
 8002c4a:	f7ff fe9d 	bl	8002988 <set_filter_standby_settings>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002c52:	230f      	movs	r3, #15
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b25b      	sxtb	r3, r3
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c64 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8002c64:	b5b0      	push	{r4, r5, r7, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <compensate_temperature+0x174>)
 8002c72:	623a      	str	r2, [r7, #32]
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
    double temperature_max = 85;
 8002c76:	2200      	movs	r2, #0
 8002c78:	4b58      	ldr	r3, [pc, #352]	; (8002ddc <compensate_temperature+0x178>)
 8002c7a:	61ba      	str	r2, [r7, #24]
 8002c7c:	61fb      	str	r3, [r7, #28]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7ff faea 	bl	800225c <__aeabi_ui2d>
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4b55      	ldr	r3, [pc, #340]	; (8002de0 <compensate_temperature+0x17c>)
 8002c8c:	f7fe f862 	bl	8000d54 <__aeabi_ddiv>
 8002c90:	0002      	movs	r2, r0
 8002c92:	000b      	movs	r3, r1
 8002c94:	0014      	movs	r4, r2
 8002c96:	001d      	movs	r5, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff fadd 	bl	800225c <__aeabi_ui2d>
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <compensate_temperature+0x180>)
 8002ca6:	f7fe f855 	bl	8000d54 <__aeabi_ddiv>
 8002caa:	0002      	movs	r2, r0
 8002cac:	000b      	movs	r3, r1
 8002cae:	0020      	movs	r0, r4
 8002cb0:	0029      	movs	r1, r5
 8002cb2:	f7fe febd 	bl	8001a30 <__aeabi_dsub>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	000b      	movs	r3, r1
 8002cba:	613a      	str	r2, [r7, #16]
 8002cbc:	617b      	str	r3, [r7, #20]
    var1 = var1 * ((double)calib_data->dig_t2);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	5e9b      	ldrsh	r3, [r3, r2]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7ff fa99 	bl	80021fc <__aeabi_i2d>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	000b      	movs	r3, r1
 8002cce:	6938      	ldr	r0, [r7, #16]
 8002cd0:	6979      	ldr	r1, [r7, #20]
 8002cd2:	f7fe fc41 	bl	8001558 <__aeabi_dmul>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	000b      	movs	r3, r1
 8002cda:	613a      	str	r2, [r7, #16]
 8002cdc:	617b      	str	r3, [r7, #20]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f7ff faba 	bl	800225c <__aeabi_ui2d>
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2382      	movs	r3, #130	; 0x82
 8002cec:	05db      	lsls	r3, r3, #23
 8002cee:	f7fe f831 	bl	8000d54 <__aeabi_ddiv>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	000b      	movs	r3, r1
 8002cf6:	0014      	movs	r4, r2
 8002cf8:	001d      	movs	r5, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff faac 	bl	800225c <__aeabi_ui2d>
 8002d04:	2200      	movs	r2, #0
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <compensate_temperature+0x184>)
 8002d08:	f7fe f824 	bl	8000d54 <__aeabi_ddiv>
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	000b      	movs	r3, r1
 8002d10:	0020      	movs	r0, r4
 8002d12:	0029      	movs	r1, r5
 8002d14:	f7fe fe8c 	bl	8001a30 <__aeabi_dsub>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	000b      	movs	r3, r1
 8002d1c:	60ba      	str	r2, [r7, #8]
 8002d1e:	60fb      	str	r3, [r7, #12]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	68b8      	ldr	r0, [r7, #8]
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	f7fe fc16 	bl	8001558 <__aeabi_dmul>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	000b      	movs	r3, r1
 8002d30:	0014      	movs	r4, r2
 8002d32:	001d      	movs	r5, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2204      	movs	r2, #4
 8002d38:	5e9b      	ldrsh	r3, [r3, r2]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7ff fa5e 	bl	80021fc <__aeabi_i2d>
 8002d40:	0002      	movs	r2, r0
 8002d42:	000b      	movs	r3, r1
 8002d44:	0020      	movs	r0, r4
 8002d46:	0029      	movs	r1, r5
 8002d48:	f7fe fc06 	bl	8001558 <__aeabi_dmul>
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	000b      	movs	r3, r1
 8002d50:	60ba      	str	r2, [r7, #8]
 8002d52:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6938      	ldr	r0, [r7, #16]
 8002d5a:	6979      	ldr	r1, [r7, #20]
 8002d5c:	f7fd fcbe 	bl	80006dc <__aeabi_dadd>
 8002d60:	0002      	movs	r2, r0
 8002d62:	000b      	movs	r3, r1
 8002d64:	0010      	movs	r0, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	f7ff fa12 	bl	8002190 <__aeabi_d2iz>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6938      	ldr	r0, [r7, #16]
 8002d78:	6979      	ldr	r1, [r7, #20]
 8002d7a:	f7fd fcaf 	bl	80006dc <__aeabi_dadd>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	000b      	movs	r3, r1
 8002d82:	0010      	movs	r0, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	2200      	movs	r2, #0
 8002d88:	4b18      	ldr	r3, [pc, #96]	; (8002dec <compensate_temperature+0x188>)
 8002d8a:	f7fd ffe3 	bl	8000d54 <__aeabi_ddiv>
 8002d8e:	0002      	movs	r2, r0
 8002d90:	000b      	movs	r3, r1
 8002d92:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (temperature < temperature_min)
 8002d96:	6a3a      	ldr	r2, [r7, #32]
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d9e:	f7fd fb5b 	bl	8000458 <__aeabi_dcmplt>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d004      	beq.n	8002db0 <compensate_temperature+0x14c>
    {
        temperature = temperature_min;
 8002da6:	6a3a      	ldr	r2, [r7, #32]
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dae:	e00b      	b.n	8002dc8 <compensate_temperature+0x164>
    }
    else if (temperature > temperature_max)
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002db8:	f7fd fb62 	bl	8000480 <__aeabi_dcmpgt>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d003      	beq.n	8002dc8 <compensate_temperature+0x164>
    {
        temperature = temperature_max;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return temperature;
 8002dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002dcc:	0010      	movs	r0, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b00c      	add	sp, #48	; 0x30
 8002dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	c0440000 	.word	0xc0440000
 8002ddc:	40554000 	.word	0x40554000
 8002de0:	40d00000 	.word	0x40d00000
 8002de4:	40900000 	.word	0x40900000
 8002de8:	40c00000 	.word	0x40c00000
 8002dec:	40b40000 	.word	0x40b40000

08002df0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b094      	sub	sp, #80	; 0x50
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	643a      	str	r2, [r7, #64]	; 0x40
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
    double humidity_max = 100.0;
 8002e02:	2200      	movs	r2, #0
 8002e04:	4b79      	ldr	r3, [pc, #484]	; (8002fec <compensate_humidity+0x1fc>)
 8002e06:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff f9f4 	bl	80021fc <__aeabi_i2d>
 8002e14:	2200      	movs	r2, #0
 8002e16:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <compensate_humidity+0x200>)
 8002e18:	f7fe fe0a 	bl	8001a30 <__aeabi_dsub>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	000b      	movs	r3, r1
 8002e20:	633a      	str	r2, [r7, #48]	; 0x30
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	221e      	movs	r2, #30
 8002e28:	5e9b      	ldrsh	r3, [r3, r2]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f7ff f9e6 	bl	80021fc <__aeabi_i2d>
 8002e30:	2200      	movs	r2, #0
 8002e32:	4b70      	ldr	r3, [pc, #448]	; (8002ff4 <compensate_humidity+0x204>)
 8002e34:	f7fe fb90 	bl	8001558 <__aeabi_dmul>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	000b      	movs	r3, r1
 8002e3c:	0014      	movs	r4, r2
 8002e3e:	001d      	movs	r5, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2220      	movs	r2, #32
 8002e44:	5e9b      	ldrsh	r3, [r3, r2]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7ff f9d8 	bl	80021fc <__aeabi_i2d>
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4b6a      	ldr	r3, [pc, #424]	; (8002ff8 <compensate_humidity+0x208>)
 8002e50:	f7fd ff80 	bl	8000d54 <__aeabi_ddiv>
 8002e54:	0002      	movs	r2, r0
 8002e56:	000b      	movs	r3, r1
 8002e58:	0010      	movs	r0, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e60:	f7fe fb7a 	bl	8001558 <__aeabi_dmul>
 8002e64:	0002      	movs	r2, r0
 8002e66:	000b      	movs	r3, r1
 8002e68:	0020      	movs	r0, r4
 8002e6a:	0029      	movs	r1, r5
 8002e6c:	f7fd fc36 	bl	80006dc <__aeabi_dadd>
 8002e70:	0002      	movs	r2, r0
 8002e72:	000b      	movs	r3, r1
 8002e74:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    var3 = uncomp_data->humidity - var2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7ff f9ed 	bl	800225c <__aeabi_ui2d>
 8002e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	f7fe fdd3 	bl	8001a30 <__aeabi_dsub>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	000b      	movs	r3, r1
 8002e8e:	623a      	str	r2, [r7, #32]
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	221a      	movs	r2, #26
 8002e96:	5e9b      	ldrsh	r3, [r3, r2]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff f9af 	bl	80021fc <__aeabi_i2d>
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <compensate_humidity+0x20c>)
 8002ea2:	f7fd ff57 	bl	8000d54 <__aeabi_ddiv>
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	000b      	movs	r3, r1
 8002eaa:	61ba      	str	r2, [r7, #24]
 8002eac:	61fb      	str	r3, [r7, #28]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	7f1b      	ldrb	r3, [r3, #28]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff f9d2 	bl	800225c <__aeabi_ui2d>
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4b51      	ldr	r3, [pc, #324]	; (8003000 <compensate_humidity+0x210>)
 8002ebc:	f7fd ff4a 	bl	8000d54 <__aeabi_ddiv>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	000b      	movs	r3, r1
 8002ec4:	0010      	movs	r0, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	f7fe fb44 	bl	8001558 <__aeabi_dmul>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	000b      	movs	r3, r1
 8002ed4:	0010      	movs	r0, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <compensate_humidity+0x214>)
 8002edc:	f7fd fbfe 	bl	80006dc <__aeabi_dadd>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	000b      	movs	r3, r1
 8002ee4:	613a      	str	r2, [r7, #16]
 8002ee6:	617b      	str	r3, [r7, #20]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2222      	movs	r2, #34	; 0x22
 8002eec:	569b      	ldrsb	r3, [r3, r2]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7ff f984 	bl	80021fc <__aeabi_i2d>
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4b42      	ldr	r3, [pc, #264]	; (8003000 <compensate_humidity+0x210>)
 8002ef8:	f7fd ff2c 	bl	8000d54 <__aeabi_ddiv>
 8002efc:	0002      	movs	r2, r0
 8002efe:	000b      	movs	r3, r1
 8002f00:	0010      	movs	r0, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f08:	f7fe fb26 	bl	8001558 <__aeabi_dmul>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	000b      	movs	r3, r1
 8002f10:	0010      	movs	r0, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f7fe fb1e 	bl	8001558 <__aeabi_dmul>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	000b      	movs	r3, r1
 8002f20:	0010      	movs	r0, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	2200      	movs	r2, #0
 8002f26:	4b37      	ldr	r3, [pc, #220]	; (8003004 <compensate_humidity+0x214>)
 8002f28:	f7fd fbd8 	bl	80006dc <__aeabi_dadd>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	000b      	movs	r3, r1
 8002f30:	60ba      	str	r2, [r7, #8]
 8002f32:	60fb      	str	r3, [r7, #12]
    var6 = var3 * var4 * (var5 * var6);
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	6a38      	ldr	r0, [r7, #32]
 8002f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f3c:	f7fe fb0c 	bl	8001558 <__aeabi_dmul>
 8002f40:	0002      	movs	r2, r0
 8002f42:	000b      	movs	r3, r1
 8002f44:	0014      	movs	r4, r2
 8002f46:	001d      	movs	r5, r3
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6938      	ldr	r0, [r7, #16]
 8002f4e:	6979      	ldr	r1, [r7, #20]
 8002f50:	f7fe fb02 	bl	8001558 <__aeabi_dmul>
 8002f54:	0002      	movs	r2, r0
 8002f56:	000b      	movs	r3, r1
 8002f58:	0020      	movs	r0, r4
 8002f5a:	0029      	movs	r1, r5
 8002f5c:	f7fe fafc 	bl	8001558 <__aeabi_dmul>
 8002f60:	0002      	movs	r2, r0
 8002f62:	000b      	movs	r3, r1
 8002f64:	60ba      	str	r2, [r7, #8]
 8002f66:	60fb      	str	r3, [r7, #12]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	7e1b      	ldrb	r3, [r3, #24]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7ff f975 	bl	800225c <__aeabi_ui2d>
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f7fe faef 	bl	8001558 <__aeabi_dmul>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	000b      	movs	r3, r1
 8002f7e:	0010      	movs	r0, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	2200      	movs	r2, #0
 8002f84:	4b20      	ldr	r3, [pc, #128]	; (8003008 <compensate_humidity+0x218>)
 8002f86:	f7fd fee5 	bl	8000d54 <__aeabi_ddiv>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	000b      	movs	r3, r1
 8002f8e:	2000      	movs	r0, #0
 8002f90:	491c      	ldr	r1, [pc, #112]	; (8003004 <compensate_humidity+0x214>)
 8002f92:	f7fe fd4d 	bl	8001a30 <__aeabi_dsub>
 8002f96:	0002      	movs	r2, r0
 8002f98:	000b      	movs	r3, r1
 8002f9a:	68b8      	ldr	r0, [r7, #8]
 8002f9c:	68f9      	ldr	r1, [r7, #12]
 8002f9e:	f7fe fadb 	bl	8001558 <__aeabi_dmul>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	000b      	movs	r3, r1
 8002fa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fa8:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (humidity > humidity_max)
 8002faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002fb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fb2:	f7fd fa65 	bl	8000480 <__aeabi_dcmpgt>
 8002fb6:	1e03      	subs	r3, r0, #0
 8002fb8:	d004      	beq.n	8002fc4 <compensate_humidity+0x1d4>
    {
        humidity = humidity_max;
 8002fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc2:	e00b      	b.n	8002fdc <compensate_humidity+0x1ec>
    }
    else if (humidity < humidity_min)
 8002fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002fca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fcc:	f7fd fa44 	bl	8000458 <__aeabi_dcmplt>
 8002fd0:	1e03      	subs	r3, r0, #0
 8002fd2:	d003      	beq.n	8002fdc <compensate_humidity+0x1ec>
    {
        humidity = humidity_min;
 8002fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd8:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fda:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    return humidity;
 8002fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002fe0:	0010      	movs	r0, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b014      	add	sp, #80	; 0x50
 8002fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40590000 	.word	0x40590000
 8002ff0:	40f2c000 	.word	0x40f2c000
 8002ff4:	40500000 	.word	0x40500000
 8002ff8:	40d00000 	.word	0x40d00000
 8002ffc:	40f00000 	.word	0x40f00000
 8003000:	41900000 	.word	0x41900000
 8003004:	3ff00000 	.word	0x3ff00000
 8003008:	41200000 	.word	0x41200000

0800300c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300e:	b08b      	sub	sp, #44	; 0x2c
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8003014:	2627      	movs	r6, #39	; 0x27
 8003016:	19bb      	adds	r3, r7, r6
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800301c:	2526      	movs	r5, #38	; 0x26
 800301e:	197b      	adds	r3, r7, r5
 8003020:	2288      	movs	r2, #136	; 0x88
 8003022:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8003024:	240c      	movs	r4, #12
 8003026:	193b      	adds	r3, r7, r4
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	3304      	adds	r3, #4
 800302e:	2216      	movs	r2, #22
 8003030:	2100      	movs	r1, #0
 8003032:	0018      	movs	r0, r3
 8003034:	f004 f8a8 	bl	8007188 <memset>

    /* Read the calibration data from the sensor */
    BME280_SPI_Read(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN);
 8003038:	197b      	adds	r3, r7, r5
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	1939      	adds	r1, r7, r4
 800303e:	221a      	movs	r2, #26
 8003040:	0018      	movs	r0, r3
 8003042:	f000 fbd1 	bl	80037e8 <BME280_SPI_Read>
    //if (rslt == BME280_OK)
    //{
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	193b      	adds	r3, r7, r4
 800304a:	0011      	movs	r1, r2
 800304c:	0018      	movs	r0, r3
 800304e:	f000 f84f 	bl	80030f0 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8003052:	197b      	adds	r3, r7, r5
 8003054:	22e1      	movs	r2, #225	; 0xe1
 8003056:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        BME280_SPI_Read(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN);
 8003058:	197b      	adds	r3, r7, r5
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	1939      	adds	r1, r7, r4
 800305e:	2207      	movs	r2, #7
 8003060:	0018      	movs	r0, r3
 8003062:	f000 fbc1 	bl	80037e8 <BME280_SPI_Read>
        //if (rslt == BME280_OK)
        //{
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	193b      	adds	r3, r7, r4
 800306a:	0011      	movs	r1, r2
 800306c:	0018      	movs	r0, r3
 800306e:	f000 f8ec 	bl	800324a <parse_humidity_calib_data>
        //}
    //}

    return rslt;
 8003072:	19bb      	adds	r3, r7, r6
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b25b      	sxtb	r3, r3
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b00b      	add	sp, #44	; 0x2c
 800307e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003080 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	001a      	movs	r2, r3
 800308e:	1cfb      	adds	r3, r7, #3
 8003090:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 8003092:	2317      	movs	r3, #23
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e01d      	b.n	80030d8 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800309c:	2017      	movs	r0, #23
 800309e:	183b      	adds	r3, r7, r0
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	18d2      	adds	r2, r2, r3
 80030a6:	183b      	adds	r3, r7, r0
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	3b01      	subs	r3, #1
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	18cb      	adds	r3, r1, r3
 80030b2:	7812      	ldrb	r2, [r2, #0]
 80030b4:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80030b6:	183b      	adds	r3, r7, r0
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	18d2      	adds	r2, r2, r3
 80030be:	183b      	adds	r3, r7, r0
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	0019      	movs	r1, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	185b      	adds	r3, r3, r1
 80030ca:	7812      	ldrb	r2, [r2, #0]
 80030cc:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80030ce:	183b      	adds	r3, r7, r0
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	183b      	adds	r3, r7, r0
 80030d4:	3201      	adds	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	2317      	movs	r3, #23
 80030da:	18fa      	adds	r2, r7, r3
 80030dc:	1cfb      	adds	r3, r7, #3
 80030de:	7812      	ldrb	r2, [r2, #0]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d3da      	bcc.n	800309c <interleave_reg_addr+0x1c>
    }
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b006      	add	sp, #24
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	3314      	adds	r3, #20
 80030fe:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3301      	adds	r3, #1
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	b21a      	sxth	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b21b      	sxth	r3, r3
 8003110:	4313      	orrs	r3, r2
 8003112:	b21b      	sxth	r3, r3
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3303      	adds	r3, #3
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	b21a      	sxth	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3302      	adds	r3, #2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	b21b      	sxth	r3, r3
 800312c:	4313      	orrs	r3, r2
 800312e:	b21a      	sxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3305      	adds	r3, #5
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	b21a      	sxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	b21b      	sxth	r3, r3
 8003146:	4313      	orrs	r3, r2
 8003148:	b21a      	sxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3307      	adds	r3, #7
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	b21a      	sxth	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3306      	adds	r3, #6
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	b21b      	sxth	r3, r3
 8003160:	4313      	orrs	r3, r2
 8003162:	b21b      	sxth	r3, r3
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3309      	adds	r3, #9
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	b21a      	sxth	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3308      	adds	r3, #8
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b21b      	sxth	r3, r3
 800317c:	4313      	orrs	r3, r2
 800317e:	b21a      	sxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	330b      	adds	r3, #11
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	b21a      	sxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	330a      	adds	r3, #10
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b21b      	sxth	r3, r3
 8003196:	4313      	orrs	r3, r2
 8003198:	b21a      	sxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	330d      	adds	r3, #13
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	330c      	adds	r3, #12
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	4313      	orrs	r3, r2
 80031b2:	b21a      	sxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	330f      	adds	r3, #15
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	b21a      	sxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	330e      	adds	r3, #14
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	b21b      	sxth	r3, r3
 80031ca:	4313      	orrs	r3, r2
 80031cc:	b21a      	sxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3311      	adds	r3, #17
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	b21a      	sxth	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3310      	adds	r3, #16
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b21b      	sxth	r3, r3
 80031e4:	4313      	orrs	r3, r2
 80031e6:	b21a      	sxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3313      	adds	r3, #19
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	b21a      	sxth	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3312      	adds	r3, #18
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b21b      	sxth	r3, r3
 80031fe:	4313      	orrs	r3, r2
 8003200:	b21a      	sxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3315      	adds	r3, #21
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	b21a      	sxth	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3314      	adds	r3, #20
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	b21b      	sxth	r3, r3
 8003218:	4313      	orrs	r3, r2
 800321a:	b21a      	sxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3317      	adds	r3, #23
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	b21a      	sxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3316      	adds	r3, #22
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	b21b      	sxth	r3, r3
 8003232:	4313      	orrs	r3, r2
 8003234:	b21a      	sxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7e5a      	ldrb	r2, [r3, #25]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	761a      	strb	r2, [r3, #24]
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b004      	add	sp, #16
 8003248:	bd80      	pop	{r7, pc}

0800324a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800324a:	b590      	push	{r4, r7, lr}
 800324c:	b087      	sub	sp, #28
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	3314      	adds	r3, #20
 8003258:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3301      	adds	r3, #1
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	b21a      	sxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b21b      	sxth	r3, r3
 800326a:	4313      	orrs	r3, r2
 800326c:	b21a      	sxth	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	789a      	ldrb	r2, [r3, #2]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3303      	adds	r3, #3
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b25b      	sxtb	r3, r3
 8003282:	b29b      	uxth	r3, r3
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	b29a      	uxth	r2, r3
 8003288:	2012      	movs	r0, #18
 800328a:	183b      	adds	r3, r7, r0
 800328c:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	b21a      	sxth	r2, r3
 8003296:	2410      	movs	r4, #16
 8003298:	193b      	adds	r3, r7, r4
 800329a:	210f      	movs	r1, #15
 800329c:	400a      	ands	r2, r1
 800329e:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 80032a0:	183a      	adds	r2, r7, r0
 80032a2:	193b      	adds	r3, r7, r4
 80032a4:	8812      	ldrh	r2, [r2, #0]
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b21a      	sxth	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3305      	adds	r3, #5
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	b29a      	uxth	r2, r3
 80032be:	210e      	movs	r1, #14
 80032c0:	187b      	adds	r3, r7, r1
 80032c2:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	200c      	movs	r0, #12
 80032d0:	183b      	adds	r3, r7, r0
 80032d2:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80032d4:	187a      	adds	r2, r7, r1
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	8812      	ldrh	r2, [r2, #0]
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	4313      	orrs	r3, r2
 80032de:	b21a      	sxth	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3306      	adds	r3, #6
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b259      	sxtb	r1, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2222      	movs	r2, #34	; 0x22
 80032f0:	5499      	strb	r1, [r3, r2]
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b007      	add	sp, #28
 80032f8:	bd90      	pop	{r4, r7, pc}

080032fa <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	0002      	movs	r2, r0
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	1dbb      	adds	r3, r7, #6
 8003308:	1c0a      	adds	r2, r1, #0
 800330a:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 800330c:	210f      	movs	r1, #15
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	1dba      	adds	r2, r7, #6
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	7812      	ldrb	r2, [r2, #0]
 800331c:	4013      	ands	r3, r2
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <are_settings_changed+0x32>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e003      	b.n	8003334 <are_settings_changed+0x3a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800332c:	230f      	movs	r3, #15
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 8003334:	230f      	movs	r3, #15
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	781b      	ldrb	r3, [r3, #0]
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b004      	add	sp, #16
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <__io_putchar>:
/* USER CODE BEGIN 0 */
#define SENSOR_BUS hspi2;
struct bme280_dev dev;
struct bme280_data comp_data;
int __io_putchar(int ch) // UART - NOT NEEDED LATER ON
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800334c:	2301      	movs	r3, #1
 800334e:	425b      	negs	r3, r3
 8003350:	1d39      	adds	r1, r7, #4
 8003352:	4804      	ldr	r0, [pc, #16]	; (8003364 <__io_putchar+0x20>)
 8003354:	2201      	movs	r2, #1
 8003356:	f003 f985 	bl	8006664 <HAL_UART_Transmit>
	return 1;
 800335a:	2301      	movs	r3, #1
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000294 	.word	0x20000294

08003368 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ // INTERRUPT - CHANGE ITS BODY TO CHANGE A VALUE OF A FLAG -> SWITCH CASE IN MAIN
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003374:	429a      	cmp	r2, r3
 8003376:	d109      	bne.n	800338c <HAL_TIM_PeriodElapsedCallback+0x24>
		bme280_get_sensor_data(BME280_HUM, &comp_data, &dev); // BME280_ALL
 8003378:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800337c:	0019      	movs	r1, r3
 800337e:	2004      	movs	r0, #4
 8003380:	f7ff f98a 	bl	8002698 <bme280_get_sensor_data>
		print_sensor_data(&comp_data);
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003386:	0018      	movs	r0, r3
 8003388:	f000 fa16 	bl	80037b8 <print_sensor_data>
	}
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000254 	.word	0x20000254
 8003398:	2000031c 	.word	0x2000031c
 800339c:	20000360 	.word	0x20000360

080033a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033a6:	f000 fc77 	bl	8003c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033aa:	f000 f847 	bl	800343c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ae:	f000 f975 	bl	800369c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80033b2:	f000 f943 	bl	800363c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80033b6:	f000 f8b3 	bl	8003520 <MX_SPI2_Init>
  MX_TIM2_Init();
 80033ba:	f000 f8e9 	bl	8003590 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  int8_t rslt = BME280_OK;
 80033be:	1dfb      	adds	r3, r7, #7
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]

  dev.intf_ptr = &SENSOR_BUS;
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <main+0x80>)
 80033c6:	4a17      	ldr	r2, [pc, #92]	; (8003424 <main+0x84>)
 80033c8:	605a      	str	r2, [r3, #4]
  dev.intf = BME280_SPI_INTF;
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <main+0x80>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	721a      	strb	r2, [r3, #8]
  dev.read = BME280_SPI_Read;
 80033d0:	4b13      	ldr	r3, [pc, #76]	; (8003420 <main+0x80>)
 80033d2:	4a15      	ldr	r2, [pc, #84]	; (8003428 <main+0x88>)
 80033d4:	60da      	str	r2, [r3, #12]
  dev.write = BME280_SPI_Write;
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <main+0x80>)
 80033d8:	4a14      	ldr	r2, [pc, #80]	; (800342c <main+0x8c>)
 80033da:	611a      	str	r2, [r3, #16]
  //dev.delay_us = user_delay_us;

  rslt = bme280_init(&dev);
 80033dc:	1dfc      	adds	r4, r7, #7
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <main+0x80>)
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7fe ff8b 	bl	80022fc <bme280_init>
 80033e6:	0003      	movs	r3, r0
 80033e8:	7023      	strb	r3, [r4, #0]
  if (rslt != BME280_OK)
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b25b      	sxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <main+0x66>
  {
	  printf("Error - BME280 not detected %d\n", rslt);
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	2200      	movs	r2, #0
 80033f8:	569a      	ldrsb	r2, [r3, r2]
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <main+0x90>)
 80033fc:	0011      	movs	r1, r2
 80033fe:	0018      	movs	r0, r3
 8003400:	f004 fb38 	bl	8007a74 <iprintf>
	  while(1);
 8003404:	e7fe      	b.n	8003404 <main+0x64>
  }

  stream_sensor_data_normal_mode(&dev);
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <main+0x80>)
 8003408:	0018      	movs	r0, r3
 800340a:	f000 f999 	bl	8003740 <stream_sensor_data_normal_mode>

  printf("Initialization successful\n");
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <main+0x94>)
 8003410:	0018      	movs	r0, r3
 8003412:	f004 fbbb 	bl	8007b8c <puts>

  HAL_TIM_Base_Start_IT(&htim2);
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <main+0x98>)
 8003418:	0018      	movs	r0, r3
 800341a:	f002 fd4b 	bl	8005eb4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800341e:	e7fe      	b.n	800341e <main+0x7e>
 8003420:	2000031c 	.word	0x2000031c
 8003424:	200001fc 	.word	0x200001fc
 8003428:	080037e9 	.word	0x080037e9
 800342c:	08003855 	.word	0x08003855
 8003430:	08009e88 	.word	0x08009e88
 8003434:	08009ea8 	.word	0x08009ea8
 8003438:	20000254 	.word	0x20000254

0800343c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b09f      	sub	sp, #124	; 0x7c
 8003440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003442:	2440      	movs	r4, #64	; 0x40
 8003444:	193b      	adds	r3, r7, r4
 8003446:	0018      	movs	r0, r3
 8003448:	2338      	movs	r3, #56	; 0x38
 800344a:	001a      	movs	r2, r3
 800344c:	2100      	movs	r1, #0
 800344e:	f003 fe9b 	bl	8007188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003452:	232c      	movs	r3, #44	; 0x2c
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	0018      	movs	r0, r3
 8003458:	2314      	movs	r3, #20
 800345a:	001a      	movs	r2, r3
 800345c:	2100      	movs	r1, #0
 800345e:	f003 fe93 	bl	8007188 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	0018      	movs	r0, r3
 8003466:	2328      	movs	r3, #40	; 0x28
 8003468:	001a      	movs	r2, r3
 800346a:	2100      	movs	r1, #0
 800346c:	f003 fe8c 	bl	8007188 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003470:	4b29      	ldr	r3, [pc, #164]	; (8003518 <SystemClock_Config+0xdc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a29      	ldr	r2, [pc, #164]	; (800351c <SystemClock_Config+0xe0>)
 8003476:	401a      	ands	r2, r3
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <SystemClock_Config+0xdc>)
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	0109      	lsls	r1, r1, #4
 800347e:	430a      	orrs	r2, r1
 8003480:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003482:	0021      	movs	r1, r4
 8003484:	187b      	adds	r3, r7, r1
 8003486:	2202      	movs	r2, #2
 8003488:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800348a:	187b      	adds	r3, r7, r1
 800348c:	2201      	movs	r2, #1
 800348e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003490:	187b      	adds	r3, r7, r1
 8003492:	2210      	movs	r2, #16
 8003494:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003496:	187b      	adds	r3, r7, r1
 8003498:	2202      	movs	r2, #2
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800349c:	187b      	adds	r3, r7, r1
 800349e:	2200      	movs	r2, #0
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	02d2      	lsls	r2, r2, #11
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	03d2      	lsls	r2, r2, #15
 80034b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	0018      	movs	r0, r3
 80034b6:	f000 fefd 	bl	80042b4 <HAL_RCC_OscConfig>
 80034ba:	1e03      	subs	r3, r0, #0
 80034bc:	d001      	beq.n	80034c2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80034be:	f000 f9ff 	bl	80038c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	220f      	movs	r2, #15
 80034c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ca:	187b      	adds	r3, r7, r1
 80034cc:	2203      	movs	r2, #3
 80034ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034d6:	187b      	adds	r3, r7, r1
 80034d8:	2200      	movs	r2, #0
 80034da:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034dc:	187b      	adds	r3, r7, r1
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80034e2:	187b      	adds	r3, r7, r1
 80034e4:	2101      	movs	r1, #1
 80034e6:	0018      	movs	r0, r3
 80034e8:	f001 fab8 	bl	8004a5c <HAL_RCC_ClockConfig>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d001      	beq.n	80034f4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80034f0:	f000 f9e6 	bl	80038c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	2202      	movs	r2, #2
 80034f8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	0018      	movs	r0, r3
 8003504:	f001 fcce 	bl	8004ea4 <HAL_RCCEx_PeriphCLKConfig>
 8003508:	1e03      	subs	r3, r0, #0
 800350a:	d001      	beq.n	8003510 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800350c:	f000 f9d8 	bl	80038c0 <Error_Handler>
  }
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b01f      	add	sp, #124	; 0x7c
 8003516:	bd90      	pop	{r4, r7, pc}
 8003518:	40007000 	.word	0x40007000
 800351c:	ffffe7ff 	.word	0xffffe7ff

08003520 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003524:	4b18      	ldr	r3, [pc, #96]	; (8003588 <MX_SPI2_Init+0x68>)
 8003526:	4a19      	ldr	r2, [pc, #100]	; (800358c <MX_SPI2_Init+0x6c>)
 8003528:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800352a:	4b17      	ldr	r3, [pc, #92]	; (8003588 <MX_SPI2_Init+0x68>)
 800352c:	2282      	movs	r2, #130	; 0x82
 800352e:	0052      	lsls	r2, r2, #1
 8003530:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <MX_SPI2_Init+0x68>)
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <MX_SPI2_Init+0x68>)
 800353a:	2200      	movs	r2, #0
 800353c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <MX_SPI2_Init+0x68>)
 8003540:	2202      	movs	r2, #2
 8003542:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003544:	4b10      	ldr	r3, [pc, #64]	; (8003588 <MX_SPI2_Init+0x68>)
 8003546:	2201      	movs	r2, #1
 8003548:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <MX_SPI2_Init+0x68>)
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	0092      	lsls	r2, r2, #2
 8003550:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <MX_SPI2_Init+0x68>)
 8003554:	2200      	movs	r2, #0
 8003556:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <MX_SPI2_Init+0x68>)
 800355a:	2200      	movs	r2, #0
 800355c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <MX_SPI2_Init+0x68>)
 8003560:	2200      	movs	r2, #0
 8003562:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003564:	4b08      	ldr	r3, [pc, #32]	; (8003588 <MX_SPI2_Init+0x68>)
 8003566:	2200      	movs	r2, #0
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <MX_SPI2_Init+0x68>)
 800356c:	2207      	movs	r2, #7
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <MX_SPI2_Init+0x68>)
 8003572:	0018      	movs	r0, r3
 8003574:	f001 fe34 	bl	80051e0 <HAL_SPI_Init>
 8003578:	1e03      	subs	r3, r0, #0
 800357a:	d001      	beq.n	8003580 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800357c:	f000 f9a0 	bl	80038c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	200001fc 	.word	0x200001fc
 800358c:	40003800 	.word	0x40003800

08003590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003596:	2308      	movs	r3, #8
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	0018      	movs	r0, r3
 800359c:	2310      	movs	r3, #16
 800359e:	001a      	movs	r2, r3
 80035a0:	2100      	movs	r1, #0
 80035a2:	f003 fdf1 	bl	8007188 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a6:	003b      	movs	r3, r7
 80035a8:	0018      	movs	r0, r3
 80035aa:	2308      	movs	r3, #8
 80035ac:	001a      	movs	r2, r3
 80035ae:	2100      	movs	r1, #0
 80035b0:	f003 fdea 	bl	8007188 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <MX_TIM2_Init+0xa0>)
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	05d2      	lsls	r2, r2, #23
 80035ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200-1;
 80035bc:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <MX_TIM2_Init+0xa0>)
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <MX_TIM2_Init+0xa4>)
 80035c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c2:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <MX_TIM2_Init+0xa0>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <MX_TIM2_Init+0xa0>)
 80035ca:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <MX_TIM2_Init+0xa8>)
 80035cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ce:	4b18      	ldr	r3, [pc, #96]	; (8003630 <MX_TIM2_Init+0xa0>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035d4:	4b16      	ldr	r3, [pc, #88]	; (8003630 <MX_TIM2_Init+0xa0>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <MX_TIM2_Init+0xa0>)
 80035dc:	0018      	movs	r0, r3
 80035de:	f002 fc29 	bl	8005e34 <HAL_TIM_Base_Init>
 80035e2:	1e03      	subs	r3, r0, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80035e6:	f000 f96b 	bl	80038c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ea:	2108      	movs	r1, #8
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	0152      	lsls	r2, r2, #5
 80035f2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035f4:	187a      	adds	r2, r7, r1
 80035f6:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <MX_TIM2_Init+0xa0>)
 80035f8:	0011      	movs	r1, r2
 80035fa:	0018      	movs	r0, r3
 80035fc:	f002 fd94 	bl	8006128 <HAL_TIM_ConfigClockSource>
 8003600:	1e03      	subs	r3, r0, #0
 8003602:	d001      	beq.n	8003608 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003604:	f000 f95c 	bl	80038c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003608:	003b      	movs	r3, r7
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800360e:	003b      	movs	r3, r7
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003614:	003a      	movs	r2, r7
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <MX_TIM2_Init+0xa0>)
 8003618:	0011      	movs	r1, r2
 800361a:	0018      	movs	r0, r3
 800361c:	f002 ff70 	bl	8006500 <HAL_TIMEx_MasterConfigSynchronization>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003624:	f000 f94c 	bl	80038c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b006      	add	sp, #24
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000254 	.word	0x20000254
 8003634:	00000c7f 	.word	0x00000c7f
 8003638:	0000270f 	.word	0x0000270f

0800363c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <MX_USART2_UART_Init+0x58>)
 8003642:	4a15      	ldr	r2, [pc, #84]	; (8003698 <MX_USART2_UART_Init+0x5c>)
 8003644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <MX_USART2_UART_Init+0x58>)
 8003648:	22e1      	movs	r2, #225	; 0xe1
 800364a:	0252      	lsls	r2, r2, #9
 800364c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800364e:	4b11      	ldr	r3, [pc, #68]	; (8003694 <MX_USART2_UART_Init+0x58>)
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <MX_USART2_UART_Init+0x58>)
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <MX_USART2_UART_Init+0x58>)
 800365c:	2200      	movs	r2, #0
 800365e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <MX_USART2_UART_Init+0x58>)
 8003662:	220c      	movs	r2, #12
 8003664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <MX_USART2_UART_Init+0x58>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <MX_USART2_UART_Init+0x58>)
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <MX_USART2_UART_Init+0x58>)
 8003674:	2200      	movs	r2, #0
 8003676:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <MX_USART2_UART_Init+0x58>)
 800367a:	2200      	movs	r2, #0
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <MX_USART2_UART_Init+0x58>)
 8003680:	0018      	movs	r0, r3
 8003682:	f002 ff9b 	bl	80065bc <HAL_UART_Init>
 8003686:	1e03      	subs	r3, r0, #0
 8003688:	d001      	beq.n	800368e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800368a:	f000 f919 	bl	80038c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000294 	.word	0x20000294
 8003698:	40004400 	.word	0x40004400

0800369c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a2:	240c      	movs	r4, #12
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	0018      	movs	r0, r3
 80036a8:	2314      	movs	r3, #20
 80036aa:	001a      	movs	r2, r3
 80036ac:	2100      	movs	r1, #0
 80036ae:	f003 fd6b 	bl	8007188 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b2:	4b21      	ldr	r3, [pc, #132]	; (8003738 <MX_GPIO_Init+0x9c>)
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <MX_GPIO_Init+0x9c>)
 80036b8:	2104      	movs	r1, #4
 80036ba:	430a      	orrs	r2, r1
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <MX_GPIO_Init+0x9c>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	2204      	movs	r2, #4
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <MX_GPIO_Init+0x9c>)
 80036cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ce:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <MX_GPIO_Init+0x9c>)
 80036d0:	2101      	movs	r1, #1
 80036d2:	430a      	orrs	r2, r1
 80036d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80036d6:	4b18      	ldr	r3, [pc, #96]	; (8003738 <MX_GPIO_Init+0x9c>)
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	2201      	movs	r2, #1
 80036dc:	4013      	ands	r3, r2
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <MX_GPIO_Init+0x9c>)
 80036e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <MX_GPIO_Init+0x9c>)
 80036e8:	2102      	movs	r1, #2
 80036ea:	430a      	orrs	r2, r1
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <MX_GPIO_Init+0x9c>)
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	2202      	movs	r2, #2
 80036f4:	4013      	ands	r3, r2
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	480f      	ldr	r0, [pc, #60]	; (800373c <MX_GPIO_Init+0xa0>)
 8003700:	2200      	movs	r2, #0
 8003702:	0019      	movs	r1, r3
 8003704:	f000 fdb8 	bl	8004278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003708:	193b      	adds	r3, r7, r4
 800370a:	2280      	movs	r2, #128	; 0x80
 800370c:	0052      	lsls	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003710:	193b      	adds	r3, r7, r4
 8003712:	2201      	movs	r2, #1
 8003714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	193b      	adds	r3, r7, r4
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371c:	193b      	adds	r3, r7, r4
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003722:	193b      	adds	r3, r7, r4
 8003724:	4a05      	ldr	r2, [pc, #20]	; (800373c <MX_GPIO_Init+0xa0>)
 8003726:	0019      	movs	r1, r3
 8003728:	0010      	movs	r0, r2
 800372a:	f000 fc27 	bl	8003f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b009      	add	sp, #36	; 0x24
 8003734:	bd90      	pop	{r4, r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	40021000 	.word	0x40021000
 800373c:	50000400 	.word	0x50000400

08003740 <stream_sensor_data_normal_mode>:

/* USER CODE BEGIN 4 */
void stream_sensor_data_normal_mode(struct bme280_dev *dev)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	//int8_t rslt;
	uint8_t settings_sel;
	//struct bme280_data comp_data;

	/* Recommended mode of operation: Indoor navigation */
	dev->settings.osr_h = BME280_OVERSAMPLING_1X;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	223e      	movs	r2, #62	; 0x3e
 800374c:	2101      	movs	r1, #1
 800374e:	5499      	strb	r1, [r3, r2]
	dev->settings.osr_p = BME280_NO_OVERSAMPLING; // BME280_OVERSAMPLING_16X;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	223c      	movs	r2, #60	; 0x3c
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]
	dev->settings.osr_t = BME280_OVERSAMPLING_2X;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	223d      	movs	r2, #61	; 0x3d
 800375c:	2102      	movs	r1, #2
 800375e:	5499      	strb	r1, [r3, r2]
	//dev->settings.filter = BME280_FILTER_COEFF_16;
	//dev->settings.standby_time = BME280_STANDBY_TIME_62_5_MS;

	//settings_sel = BME280_OSR_PRESS_SEL;
	settings_sel = BME280_OSR_TEMP_SEL; // |= BME280_OSR_TEMP_SEL;
 8003760:	200f      	movs	r0, #15
 8003762:	183b      	adds	r3, r7, r0
 8003764:	2202      	movs	r2, #2
 8003766:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_OSR_HUM_SEL;
 8003768:	183b      	adds	r3, r7, r0
 800376a:	183a      	adds	r2, r7, r0
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	2104      	movs	r1, #4
 8003770:	430a      	orrs	r2, r1
 8003772:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_STANDBY_SEL;
 8003774:	183b      	adds	r3, r7, r0
 8003776:	183a      	adds	r2, r7, r0
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	2110      	movs	r1, #16
 800377c:	430a      	orrs	r2, r1
 800377e:	701a      	strb	r2, [r3, #0]
	settings_sel |= BME280_FILTER_SEL;
 8003780:	183b      	adds	r3, r7, r0
 8003782:	183a      	adds	r2, r7, r0
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	2108      	movs	r1, #8
 8003788:	430a      	orrs	r2, r1
 800378a:	701a      	strb	r2, [r3, #0]
	bme280_set_sensor_settings(settings_sel, dev);
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	183b      	adds	r3, r7, r0
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	0011      	movs	r1, r2
 8003794:	0018      	movs	r0, r3
 8003796:	f7fe fe6b 	bl	8002470 <bme280_set_sensor_settings>
	bme280_set_sensor_mode(BME280_NORMAL_MODE, dev);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0019      	movs	r1, r3
 800379e:	2003      	movs	r0, #3
 80037a0:	f7fe fec8 	bl	8002534 <bme280_set_sensor_mode>

	printf("Temperature, Humidity\r\n");
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <stream_sensor_data_normal_mode+0x74>)
 80037a6:	0018      	movs	r0, r3
 80037a8:	f004 f9f0 	bl	8007b8c <puts>

	//return rslt;
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b004      	add	sp, #16
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	08009ec4 	.word	0x08009ec4

080037b8 <print_sensor_data>:

void print_sensor_data(struct bme280_data *comp_data)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af02      	add	r7, sp, #8
 80037be:	6078      	str	r0, [r7, #4]
//#ifdef BME280_FLOAT_ENABLE
        printf("%0.2f, %0.2f\r\n",comp_data->temperature, comp_data->humidity); // %0.2f, comp_data->pressure, na środku
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4c05      	ldr	r4, [pc, #20]	; (80037e4 <print_sensor_data+0x2c>)
 80037ce:	9200      	str	r2, [sp, #0]
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	0002      	movs	r2, r0
 80037d4:	000b      	movs	r3, r1
 80037d6:	0020      	movs	r0, r4
 80037d8:	f004 f94c 	bl	8007a74 <iprintf>
//#else
//        printf("%ld, %ld, %ld\r\n",comp_data->temperature, comp_data->pressure, comp_data->humidity);
//#endif
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b003      	add	sp, #12
 80037e2:	bd90      	pop	{r4, r7, pc}
 80037e4:	08009edc 	.word	0x08009edc

080037e8 <BME280_SPI_Read>:
//{
//	HAL_Delay(period);
//}

void BME280_SPI_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	240f      	movs	r4, #15
 80037f4:	193b      	adds	r3, r7, r4
 80037f6:	1c02      	adds	r2, r0, #0
 80037f8:	701a      	strb	r2, [r3, #0]
    reg_addr = reg_addr | 0x80;
 80037fa:	193b      	adds	r3, r7, r4
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2280      	movs	r2, #128	; 0x80
 8003800:	4252      	negs	r2, r2
 8003802:	4313      	orrs	r3, r2
 8003804:	b2da      	uxtb	r2, r3
 8003806:	193b      	adds	r3, r7, r4
 8003808:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	480f      	ldr	r0, [pc, #60]	; (800384c <BME280_SPI_Read+0x64>)
 8003810:	2200      	movs	r2, #0
 8003812:	0019      	movs	r1, r3
 8003814:	f000 fd30 	bl	8004278 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi2, &reg_addr, 1, 1000);
 8003818:	23fa      	movs	r3, #250	; 0xfa
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	1939      	adds	r1, r7, r4
 800381e:	480c      	ldr	r0, [pc, #48]	; (8003850 <BME280_SPI_Read+0x68>)
 8003820:	2201      	movs	r2, #1
 8003822:	f001 fd71 	bl	8005308 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, reg_data, len, 1000);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	b29a      	uxth	r2, r3
 800382a:	23fa      	movs	r3, #250	; 0xfa
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	4807      	ldr	r0, [pc, #28]	; (8003850 <BME280_SPI_Read+0x68>)
 8003832:	f001 fec7 	bl	80055c4 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4804      	ldr	r0, [pc, #16]	; (800384c <BME280_SPI_Read+0x64>)
 800383c:	2201      	movs	r2, #1
 800383e:	0019      	movs	r1, r3
 8003840:	f000 fd1a 	bl	8004278 <HAL_GPIO_WritePin>

}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b005      	add	sp, #20
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	50000400 	.word	0x50000400
 8003850:	200001fc 	.word	0x200001fc

08003854 <BME280_SPI_Write>:

void BME280_SPI_Write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	240f      	movs	r4, #15
 8003860:	193b      	adds	r3, r7, r4
 8003862:	1c02      	adds	r2, r0, #0
 8003864:	701a      	strb	r2, [r3, #0]

    //int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
    reg_addr = reg_addr & 0x7F;
 8003866:	193b      	adds	r3, r7, r4
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	227f      	movs	r2, #127	; 0x7f
 800386c:	4013      	ands	r3, r2
 800386e:	b2da      	uxtb	r2, r3
 8003870:	193b      	adds	r3, r7, r4
 8003872:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	480f      	ldr	r0, [pc, #60]	; (80038b8 <BME280_SPI_Write+0x64>)
 800387a:	2200      	movs	r2, #0
 800387c:	0019      	movs	r1, r3
 800387e:	f000 fcfb 	bl	8004278 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi2, &reg_addr, 1, 1000);
 8003882:	23fa      	movs	r3, #250	; 0xfa
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	1939      	adds	r1, r7, r4
 8003888:	480c      	ldr	r0, [pc, #48]	; (80038bc <BME280_SPI_Write+0x68>)
 800388a:	2201      	movs	r2, #1
 800388c:	f001 fd3c 	bl	8005308 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, reg_data, len, 1000);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	b29a      	uxth	r2, r3
 8003894:	23fa      	movs	r3, #250	; 0xfa
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	4808      	ldr	r0, [pc, #32]	; (80038bc <BME280_SPI_Write+0x68>)
 800389c:	f001 fd34 	bl	8005308 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4804      	ldr	r0, [pc, #16]	; (80038b8 <BME280_SPI_Write+0x64>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	0019      	movs	r1, r3
 80038aa:	f000 fce5 	bl	8004278 <HAL_GPIO_WritePin>

    //return rslt;
}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b005      	add	sp, #20
 80038b4:	bd90      	pop	{r4, r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	50000400 	.word	0x50000400
 80038bc:	200001fc 	.word	0x200001fc

080038c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038c4:	b672      	cpsid	i
}
 80038c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <Error_Handler+0x8>
	...

080038cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_MspInit+0x24>)
 80038d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_MspInit+0x24>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	430a      	orrs	r2, r1
 80038da:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <HAL_MspInit+0x24>)
 80038de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_MspInit+0x24>)
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	0549      	lsls	r1, r1, #21
 80038e6:	430a      	orrs	r2, r1
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000

080038f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b08b      	sub	sp, #44	; 0x2c
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	2414      	movs	r4, #20
 80038fe:	193b      	adds	r3, r7, r4
 8003900:	0018      	movs	r0, r3
 8003902:	2314      	movs	r3, #20
 8003904:	001a      	movs	r2, r3
 8003906:	2100      	movs	r1, #0
 8003908:	f003 fc3e 	bl	8007188 <memset>
  if(hspi->Instance==SPI2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <HAL_SPI_MspInit+0xc0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d14a      	bne.n	80039ac <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003916:	4b28      	ldr	r3, [pc, #160]	; (80039b8 <HAL_SPI_MspInit+0xc4>)
 8003918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391a:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <HAL_SPI_MspInit+0xc4>)
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	01c9      	lsls	r1, r1, #7
 8003920:	430a      	orrs	r2, r1
 8003922:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003924:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <HAL_SPI_MspInit+0xc4>)
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <HAL_SPI_MspInit+0xc4>)
 800392a:	2104      	movs	r1, #4
 800392c:	430a      	orrs	r2, r1
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003930:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <HAL_SPI_MspInit+0xc4>)
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	2204      	movs	r2, #4
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <HAL_SPI_MspInit+0xc4>)
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_SPI_MspInit+0xc4>)
 8003942:	2102      	movs	r1, #2
 8003944:	430a      	orrs	r2, r1
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <HAL_SPI_MspInit+0xc4>)
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	2202      	movs	r2, #2
 800394e:	4013      	ands	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003954:	193b      	adds	r3, r7, r4
 8003956:	220c      	movs	r2, #12
 8003958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	193b      	adds	r3, r7, r4
 800395c:	2202      	movs	r2, #2
 800395e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	193b      	adds	r3, r7, r4
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003966:	193b      	adds	r3, r7, r4
 8003968:	2203      	movs	r2, #3
 800396a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI2;
 800396c:	193b      	adds	r3, r7, r4
 800396e:	2202      	movs	r2, #2
 8003970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003972:	193b      	adds	r3, r7, r4
 8003974:	4a11      	ldr	r2, [pc, #68]	; (80039bc <HAL_SPI_MspInit+0xc8>)
 8003976:	0019      	movs	r1, r3
 8003978:	0010      	movs	r0, r2
 800397a:	f000 faff 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800397e:	0021      	movs	r1, r4
 8003980:	187b      	adds	r3, r7, r1
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	00d2      	lsls	r2, r2, #3
 8003986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	187b      	adds	r3, r7, r1
 800398a:	2202      	movs	r2, #2
 800398c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	187b      	adds	r3, r7, r1
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003994:	187b      	adds	r3, r7, r1
 8003996:	2203      	movs	r2, #3
 8003998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2205      	movs	r2, #5
 800399e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <HAL_SPI_MspInit+0xcc>)
 80039a4:	0019      	movs	r1, r3
 80039a6:	0010      	movs	r0, r2
 80039a8:	f000 fae8 	bl	8003f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b00b      	add	sp, #44	; 0x2c
 80039b2:	bd90      	pop	{r4, r7, pc}
 80039b4:	40003800 	.word	0x40003800
 80039b8:	40021000 	.word	0x40021000
 80039bc:	50000800 	.word	0x50000800
 80039c0:	50000400 	.word	0x50000400

080039c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	05db      	lsls	r3, r3, #23
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d10d      	bne.n	80039f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039d8:	4b08      	ldr	r3, [pc, #32]	; (80039fc <HAL_TIM_Base_MspInit+0x38>)
 80039da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_TIM_Base_MspInit+0x38>)
 80039de:	2101      	movs	r1, #1
 80039e0:	430a      	orrs	r2, r1
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039e4:	2200      	movs	r2, #0
 80039e6:	2100      	movs	r1, #0
 80039e8:	200f      	movs	r0, #15
 80039ea:	f000 fa95 	bl	8003f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039ee:	200f      	movs	r0, #15
 80039f0:	f000 faa7 	bl	8003f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b002      	add	sp, #8
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b089      	sub	sp, #36	; 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a08:	240c      	movs	r4, #12
 8003a0a:	193b      	adds	r3, r7, r4
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	2314      	movs	r3, #20
 8003a10:	001a      	movs	r2, r3
 8003a12:	2100      	movs	r1, #0
 8003a14:	f003 fbb8 	bl	8007188 <memset>
  if(huart->Instance==USART2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_UART_MspInit+0x80>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d129      	bne.n	8003a76 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <HAL_UART_MspInit+0x84>)
 8003a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_UART_MspInit+0x84>)
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	0289      	lsls	r1, r1, #10
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_UART_MspInit+0x84>)
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <HAL_UART_MspInit+0x84>)
 8003a36:	2101      	movs	r1, #1
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_UART_MspInit+0x84>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	2201      	movs	r2, #1
 8003a42:	4013      	ands	r3, r2
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a48:	0021      	movs	r1, r4
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	220c      	movs	r2, #12
 8003a4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	2202      	movs	r2, #2
 8003a54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	2203      	movs	r2, #3
 8003a60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	2204      	movs	r2, #4
 8003a66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	187a      	adds	r2, r7, r1
 8003a6a:	23a0      	movs	r3, #160	; 0xa0
 8003a6c:	05db      	lsls	r3, r3, #23
 8003a6e:	0011      	movs	r1, r2
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 fa83 	bl	8003f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b009      	add	sp, #36	; 0x24
 8003a7c:	bd90      	pop	{r4, r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	40004400 	.word	0x40004400
 8003a84:	40021000 	.word	0x40021000

08003a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a8c:	e7fe      	b.n	8003a8c <NMI_Handler+0x4>

08003a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a92:	e7fe      	b.n	8003a92 <HardFault_Handler+0x4>

08003a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aac:	f000 f948 	bl	8003d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <TIM2_IRQHandler+0x14>)
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f002 fa4a 	bl	8005f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	20000254 	.word	0x20000254

08003ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  return 1;
 8003ad4:	2301      	movs	r3, #1
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_kill>:

int _kill(int pid, int sig)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ae6:	f003 fb25 	bl	8007134 <__errno>
 8003aea:	0003      	movs	r3, r0
 8003aec:	2216      	movs	r2, #22
 8003aee:	601a      	str	r2, [r3, #0]
  return -1;
 8003af0:	2301      	movs	r3, #1
 8003af2:	425b      	negs	r3, r3
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_exit>:

void _exit (int status)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b04:	2301      	movs	r3, #1
 8003b06:	425a      	negs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7ff ffe5 	bl	8003adc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b12:	e7fe      	b.n	8003b12 <_exit+0x16>

08003b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e00a      	b.n	8003b3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b26:	e000      	b.n	8003b2a <_read+0x16>
 8003b28:	bf00      	nop
 8003b2a:	0001      	movs	r1, r0
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	60ba      	str	r2, [r7, #8]
 8003b32:	b2ca      	uxtb	r2, r1
 8003b34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	dbf0      	blt.n	8003b26 <_read+0x12>
  }

  return len;
 8003b44:	687b      	ldr	r3, [r7, #4]
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b006      	add	sp, #24
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  //(void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e009      	b.n	8003b74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	60ba      	str	r2, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7ff fbeb 	bl	8003344 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3301      	adds	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	dbf1      	blt.n	8003b60 <_write+0x12>
  }
  return len;
 8003b7c:	687b      	ldr	r3, [r7, #4]
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b006      	add	sp, #24
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_fstat>:
//  return -1;
//}


int _fstat(int file, struct stat *st)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	0192      	lsls	r2, r2, #6
 8003b96:	605a      	str	r2, [r3, #4]
  return 0;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b002      	add	sp, #8
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_isatty>:

int _isatty(int file)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b002      	add	sp, #8
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <_sbrk>:
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <_sbrk+0x5c>)
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <_sbrk+0x60>)
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <_sbrk+0x64>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <_sbrk+0x22>
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <_sbrk+0x64>)
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <_sbrk+0x68>)
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <_sbrk+0x64>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	18d3      	adds	r3, r2, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d207      	bcs.n	8003c0c <_sbrk+0x40>
 8003bfc:	f003 fa9a 	bl	8007134 <__errno>
 8003c00:	0003      	movs	r3, r0
 8003c02:	220c      	movs	r2, #12
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	2301      	movs	r3, #1
 8003c08:	425b      	negs	r3, r3
 8003c0a:	e009      	b.n	8003c20 <_sbrk+0x54>
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <_sbrk+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <_sbrk+0x64>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	18d2      	adds	r2, r2, r3
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <_sbrk+0x64>)
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	0018      	movs	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b006      	add	sp, #24
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20005000 	.word	0x20005000
 8003c2c:	00000400 	.word	0x00000400
 8003c30:	20000370 	.word	0x20000370
 8003c34:	20000388 	.word	0x20000388

08003c38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <Reset_Handler>:
 8003c44:	480d      	ldr	r0, [pc, #52]	; (8003c7c <LoopForever+0x2>)
 8003c46:	4685      	mov	sp, r0
 8003c48:	f7ff fff6 	bl	8003c38 <SystemInit>
 8003c4c:	480c      	ldr	r0, [pc, #48]	; (8003c80 <LoopForever+0x6>)
 8003c4e:	490d      	ldr	r1, [pc, #52]	; (8003c84 <LoopForever+0xa>)
 8003c50:	4a0d      	ldr	r2, [pc, #52]	; (8003c88 <LoopForever+0xe>)
 8003c52:	2300      	movs	r3, #0
 8003c54:	e002      	b.n	8003c5c <LoopCopyDataInit>

08003c56 <CopyDataInit>:
 8003c56:	58d4      	ldr	r4, [r2, r3]
 8003c58:	50c4      	str	r4, [r0, r3]
 8003c5a:	3304      	adds	r3, #4

08003c5c <LoopCopyDataInit>:
 8003c5c:	18c4      	adds	r4, r0, r3
 8003c5e:	428c      	cmp	r4, r1
 8003c60:	d3f9      	bcc.n	8003c56 <CopyDataInit>
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <LoopForever+0x12>)
 8003c64:	4c0a      	ldr	r4, [pc, #40]	; (8003c90 <LoopForever+0x16>)
 8003c66:	2300      	movs	r3, #0
 8003c68:	e001      	b.n	8003c6e <LoopFillZerobss>

08003c6a <FillZerobss>:
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	3204      	adds	r2, #4

08003c6e <LoopFillZerobss>:
 8003c6e:	42a2      	cmp	r2, r4
 8003c70:	d3fb      	bcc.n	8003c6a <FillZerobss>
 8003c72:	f003 fa65 	bl	8007140 <__libc_init_array>
 8003c76:	f7ff fb93 	bl	80033a0 <main>

08003c7a <LoopForever>:
 8003c7a:	e7fe      	b.n	8003c7a <LoopForever>
 8003c7c:	20005000 	.word	0x20005000
 8003c80:	20000000 	.word	0x20000000
 8003c84:	200001dc 	.word	0x200001dc
 8003c88:	0800a3c4 	.word	0x0800a3c4
 8003c8c:	200001e0 	.word	0x200001e0
 8003c90:	20000388 	.word	0x20000388

08003c94 <ADC1_COMP_IRQHandler>:
 8003c94:	e7fe      	b.n	8003c94 <ADC1_COMP_IRQHandler>
	...

08003c98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c9e:	1dfb      	adds	r3, r7, #7
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_Init+0x3c>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_Init+0x3c>)
 8003caa:	2140      	movs	r1, #64	; 0x40
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	f000 f811 	bl	8003cd8 <HAL_InitTick>
 8003cb6:	1e03      	subs	r3, r0, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003cba:	1dfb      	adds	r3, r7, #7
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e001      	b.n	8003cc6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cc2:	f7ff fe03 	bl	80038cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cc6:	1dfb      	adds	r3, r7, #7
 8003cc8:	781b      	ldrb	r3, [r3, #0]
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	40022000 	.word	0x40022000

08003cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ce0:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <HAL_InitTick+0x5c>)
 8003ce2:	681c      	ldr	r4, [r3, #0]
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_InitTick+0x60>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	0019      	movs	r1, r3
 8003cea:	23fa      	movs	r3, #250	; 0xfa
 8003cec:	0098      	lsls	r0, r3, #2
 8003cee:	f7fc fa27 	bl	8000140 <__udivsi3>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	0020      	movs	r0, r4
 8003cf8:	f7fc fa22 	bl	8000140 <__udivsi3>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 f92f 	bl	8003f62 <HAL_SYSTICK_Config>
 8003d04:	1e03      	subs	r3, r0, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e00f      	b.n	8003d2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d80b      	bhi.n	8003d2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	2301      	movs	r3, #1
 8003d16:	425b      	negs	r3, r3
 8003d18:	2200      	movs	r2, #0
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f000 f8fc 	bl	8003f18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_InitTick+0x64>)
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b003      	add	sp, #12
 8003d32:	bd90      	pop	{r4, r7, pc}
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000008 	.word	0x20000008
 8003d3c:	20000004 	.word	0x20000004

08003d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_IncTick+0x1c>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	001a      	movs	r2, r3
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_IncTick+0x20>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	18d2      	adds	r2, r2, r3
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <HAL_IncTick+0x20>)
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	20000008 	.word	0x20000008
 8003d60:	20000374 	.word	0x20000374

08003d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  return uwTick;
 8003d68:	4b02      	ldr	r3, [pc, #8]	; (8003d74 <HAL_GetTick+0x10>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	20000374 	.word	0x20000374

08003d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_GetTick>
 8003d84:	0003      	movs	r3, r0
 8003d86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	d005      	beq.n	8003d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <HAL_Delay+0x44>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	001a      	movs	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	f7ff ffe0 	bl	8003d64 <HAL_GetTick>
 8003da4:	0002      	movs	r2, r0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d8f7      	bhi.n	8003da0 <HAL_Delay+0x28>
  {
  }
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	20000008 	.word	0x20000008

08003dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	1dfb      	adds	r3, r7, #7
 8003dca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8003dd2:	d809      	bhi.n	8003de8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd4:	1dfb      	adds	r3, r7, #7
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	001a      	movs	r2, r3
 8003dda:	231f      	movs	r3, #31
 8003ddc:	401a      	ands	r2, r3
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <__NVIC_EnableIRQ+0x30>)
 8003de0:	2101      	movs	r1, #1
 8003de2:	4091      	lsls	r1, r2
 8003de4:	000a      	movs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
  }
}
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b002      	add	sp, #8
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	e000e100 	.word	0xe000e100

08003df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	1dfb      	adds	r3, r7, #7
 8003e00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e02:	1dfb      	adds	r3, r7, #7
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b7f      	cmp	r3, #127	; 0x7f
 8003e08:	d828      	bhi.n	8003e5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <__NVIC_SetPriority+0xd4>)
 8003e0c:	1dfb      	adds	r3, r7, #7
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	b25b      	sxtb	r3, r3
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	33c0      	adds	r3, #192	; 0xc0
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	589b      	ldr	r3, [r3, r2]
 8003e1a:	1dfa      	adds	r2, r7, #7
 8003e1c:	7812      	ldrb	r2, [r2, #0]
 8003e1e:	0011      	movs	r1, r2
 8003e20:	2203      	movs	r2, #3
 8003e22:	400a      	ands	r2, r1
 8003e24:	00d2      	lsls	r2, r2, #3
 8003e26:	21ff      	movs	r1, #255	; 0xff
 8003e28:	4091      	lsls	r1, r2
 8003e2a:	000a      	movs	r2, r1
 8003e2c:	43d2      	mvns	r2, r2
 8003e2e:	401a      	ands	r2, r3
 8003e30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	22ff      	movs	r2, #255	; 0xff
 8003e38:	401a      	ands	r2, r3
 8003e3a:	1dfb      	adds	r3, r7, #7
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	0018      	movs	r0, r3
 8003e40:	2303      	movs	r3, #3
 8003e42:	4003      	ands	r3, r0
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e48:	481f      	ldr	r0, [pc, #124]	; (8003ec8 <__NVIC_SetPriority+0xd4>)
 8003e4a:	1dfb      	adds	r3, r7, #7
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	b25b      	sxtb	r3, r3
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	430a      	orrs	r2, r1
 8003e54:	33c0      	adds	r3, #192	; 0xc0
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e5a:	e031      	b.n	8003ec0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <__NVIC_SetPriority+0xd8>)
 8003e5e:	1dfb      	adds	r3, r7, #7
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	0019      	movs	r1, r3
 8003e64:	230f      	movs	r3, #15
 8003e66:	400b      	ands	r3, r1
 8003e68:	3b08      	subs	r3, #8
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	3306      	adds	r3, #6
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	18d3      	adds	r3, r2, r3
 8003e72:	3304      	adds	r3, #4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	1dfa      	adds	r2, r7, #7
 8003e78:	7812      	ldrb	r2, [r2, #0]
 8003e7a:	0011      	movs	r1, r2
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	400a      	ands	r2, r1
 8003e80:	00d2      	lsls	r2, r2, #3
 8003e82:	21ff      	movs	r1, #255	; 0xff
 8003e84:	4091      	lsls	r1, r2
 8003e86:	000a      	movs	r2, r1
 8003e88:	43d2      	mvns	r2, r2
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	401a      	ands	r2, r3
 8003e96:	1dfb      	adds	r3, r7, #7
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	4003      	ands	r3, r0
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ea4:	4809      	ldr	r0, [pc, #36]	; (8003ecc <__NVIC_SetPriority+0xd8>)
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	001c      	movs	r4, r3
 8003eac:	230f      	movs	r3, #15
 8003eae:	4023      	ands	r3, r4
 8003eb0:	3b08      	subs	r3, #8
 8003eb2:	089b      	lsrs	r3, r3, #2
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	3306      	adds	r3, #6
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	18c3      	adds	r3, r0, r3
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	601a      	str	r2, [r3, #0]
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b003      	add	sp, #12
 8003ec6:	bd90      	pop	{r4, r7, pc}
 8003ec8:	e000e100 	.word	0xe000e100
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	1e5a      	subs	r2, r3, #1
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	045b      	lsls	r3, r3, #17
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d301      	bcc.n	8003ee8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e010      	b.n	8003f0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <SysTick_Config+0x44>)
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	3a01      	subs	r2, #1
 8003eee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	425b      	negs	r3, r3
 8003ef4:	2103      	movs	r1, #3
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f7ff ff7c 	bl	8003df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <SysTick_Config+0x44>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f02:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <SysTick_Config+0x44>)
 8003f04:	2207      	movs	r2, #7
 8003f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	e000e010 	.word	0xe000e010

08003f18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	210f      	movs	r1, #15
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	1c02      	adds	r2, r0, #0
 8003f28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	b25b      	sxtb	r3, r3
 8003f32:	0011      	movs	r1, r2
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff ff5d 	bl	8003df4 <__NVIC_SetPriority>
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b004      	add	sp, #16
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	0002      	movs	r2, r0
 8003f4a:	1dfb      	adds	r3, r7, #7
 8003f4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f4e:	1dfb      	adds	r3, r7, #7
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	b25b      	sxtb	r3, r3
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff ff33 	bl	8003dc0 <__NVIC_EnableIRQ>
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b002      	add	sp, #8
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7ff ffaf 	bl	8003ed0 <SysTick_Config>
 8003f72:	0003      	movs	r3, r0
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b002      	add	sp, #8
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f92:	e155      	b.n	8004240 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2101      	movs	r1, #1
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4091      	lsls	r1, r2
 8003f9e:	000a      	movs	r2, r1
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d100      	bne.n	8003fac <HAL_GPIO_Init+0x30>
 8003faa:	e146      	b.n	800423a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d005      	beq.n	8003fc4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d130      	bne.n	8004026 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	2203      	movs	r2, #3
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	0013      	movs	r3, r2
 8003fd4:	43da      	mvns	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	0013      	movs	r3, r2
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	409a      	lsls	r2, r3
 8004000:	0013      	movs	r3, r2
 8004002:	43da      	mvns	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	2201      	movs	r2, #1
 8004012:	401a      	ands	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	409a      	lsls	r2, r3
 8004018:	0013      	movs	r3, r2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2203      	movs	r2, #3
 800402c:	4013      	ands	r3, r2
 800402e:	2b03      	cmp	r3, #3
 8004030:	d017      	beq.n	8004062 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	2203      	movs	r2, #3
 800403e:	409a      	lsls	r2, r3
 8004040:	0013      	movs	r3, r2
 8004042:	43da      	mvns	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	0013      	movs	r3, r2
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2203      	movs	r2, #3
 8004068:	4013      	ands	r3, r2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d123      	bne.n	80040b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	08da      	lsrs	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3208      	adds	r2, #8
 8004076:	0092      	lsls	r2, r2, #2
 8004078:	58d3      	ldr	r3, [r2, r3]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2207      	movs	r2, #7
 8004080:	4013      	ands	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	220f      	movs	r2, #15
 8004086:	409a      	lsls	r2, r3
 8004088:	0013      	movs	r3, r2
 800408a:	43da      	mvns	r2, r3
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2107      	movs	r1, #7
 800409a:	400b      	ands	r3, r1
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	409a      	lsls	r2, r3
 80040a0:	0013      	movs	r3, r2
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	08da      	lsrs	r2, r3, #3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3208      	adds	r2, #8
 80040b0:	0092      	lsls	r2, r2, #2
 80040b2:	6939      	ldr	r1, [r7, #16]
 80040b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	2203      	movs	r2, #3
 80040c2:	409a      	lsls	r2, r3
 80040c4:	0013      	movs	r3, r2
 80040c6:	43da      	mvns	r2, r3
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2203      	movs	r2, #3
 80040d4:	401a      	ands	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	409a      	lsls	r2, r3
 80040dc:	0013      	movs	r3, r2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	23c0      	movs	r3, #192	; 0xc0
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	4013      	ands	r3, r2
 80040f4:	d100      	bne.n	80040f8 <HAL_GPIO_Init+0x17c>
 80040f6:	e0a0      	b.n	800423a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f8:	4b57      	ldr	r3, [pc, #348]	; (8004258 <HAL_GPIO_Init+0x2dc>)
 80040fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040fc:	4b56      	ldr	r3, [pc, #344]	; (8004258 <HAL_GPIO_Init+0x2dc>)
 80040fe:	2101      	movs	r1, #1
 8004100:	430a      	orrs	r2, r1
 8004102:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004104:	4a55      	ldr	r2, [pc, #340]	; (800425c <HAL_GPIO_Init+0x2e0>)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	3302      	adds	r3, #2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	589b      	ldr	r3, [r3, r2]
 8004110:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2203      	movs	r2, #3
 8004116:	4013      	ands	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	220f      	movs	r2, #15
 800411c:	409a      	lsls	r2, r3
 800411e:	0013      	movs	r3, r2
 8004120:	43da      	mvns	r2, r3
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	23a0      	movs	r3, #160	; 0xa0
 800412c:	05db      	lsls	r3, r3, #23
 800412e:	429a      	cmp	r2, r3
 8004130:	d01f      	beq.n	8004172 <HAL_GPIO_Init+0x1f6>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4a      	ldr	r2, [pc, #296]	; (8004260 <HAL_GPIO_Init+0x2e4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d019      	beq.n	800416e <HAL_GPIO_Init+0x1f2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a49      	ldr	r2, [pc, #292]	; (8004264 <HAL_GPIO_Init+0x2e8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_GPIO_Init+0x1ee>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a48      	ldr	r2, [pc, #288]	; (8004268 <HAL_GPIO_Init+0x2ec>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00d      	beq.n	8004166 <HAL_GPIO_Init+0x1ea>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a47      	ldr	r2, [pc, #284]	; (800426c <HAL_GPIO_Init+0x2f0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <HAL_GPIO_Init+0x1e6>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a46      	ldr	r2, [pc, #280]	; (8004270 <HAL_GPIO_Init+0x2f4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_GPIO_Init+0x1e2>
 800415a:	2305      	movs	r3, #5
 800415c:	e00a      	b.n	8004174 <HAL_GPIO_Init+0x1f8>
 800415e:	2306      	movs	r3, #6
 8004160:	e008      	b.n	8004174 <HAL_GPIO_Init+0x1f8>
 8004162:	2304      	movs	r3, #4
 8004164:	e006      	b.n	8004174 <HAL_GPIO_Init+0x1f8>
 8004166:	2303      	movs	r3, #3
 8004168:	e004      	b.n	8004174 <HAL_GPIO_Init+0x1f8>
 800416a:	2302      	movs	r3, #2
 800416c:	e002      	b.n	8004174 <HAL_GPIO_Init+0x1f8>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_GPIO_Init+0x1f8>
 8004172:	2300      	movs	r3, #0
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	2103      	movs	r1, #3
 8004178:	400a      	ands	r2, r1
 800417a:	0092      	lsls	r2, r2, #2
 800417c:	4093      	lsls	r3, r2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004184:	4935      	ldr	r1, [pc, #212]	; (800425c <HAL_GPIO_Init+0x2e0>)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	089b      	lsrs	r3, r3, #2
 800418a:	3302      	adds	r3, #2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <HAL_GPIO_Init+0x2f8>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	43da      	mvns	r2, r3
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	035b      	lsls	r3, r3, #13
 80041aa:	4013      	ands	r3, r2
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <HAL_GPIO_Init+0x2f8>)
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80041bc:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <HAL_GPIO_Init+0x2f8>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	43da      	mvns	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	039b      	lsls	r3, r3, #14
 80041d4:	4013      	ands	r3, r2
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80041e0:	4b24      	ldr	r3, [pc, #144]	; (8004274 <HAL_GPIO_Init+0x2f8>)
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80041e6:	4b23      	ldr	r3, [pc, #140]	; (8004274 <HAL_GPIO_Init+0x2f8>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	43da      	mvns	r2, r3
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	029b      	lsls	r3, r3, #10
 80041fe:	4013      	ands	r3, r2
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800420a:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_GPIO_Init+0x2f8>)
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004210:	4b18      	ldr	r3, [pc, #96]	; (8004274 <HAL_GPIO_Init+0x2f8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	43da      	mvns	r2, r3
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4013      	ands	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	025b      	lsls	r3, r3, #9
 8004228:	4013      	ands	r3, r2
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_GPIO_Init+0x2f8>)
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	3301      	adds	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	40da      	lsrs	r2, r3
 8004248:	1e13      	subs	r3, r2, #0
 800424a:	d000      	beq.n	800424e <HAL_GPIO_Init+0x2d2>
 800424c:	e6a2      	b.n	8003f94 <HAL_GPIO_Init+0x18>
  }
}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b006      	add	sp, #24
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	40010000 	.word	0x40010000
 8004260:	50000400 	.word	0x50000400
 8004264:	50000800 	.word	0x50000800
 8004268:	50000c00 	.word	0x50000c00
 800426c:	50001000 	.word	0x50001000
 8004270:	50001c00 	.word	0x50001c00
 8004274:	40010400 	.word	0x40010400

08004278 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	0008      	movs	r0, r1
 8004282:	0011      	movs	r1, r2
 8004284:	1cbb      	adds	r3, r7, #2
 8004286:	1c02      	adds	r2, r0, #0
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	1c7b      	adds	r3, r7, #1
 800428c:	1c0a      	adds	r2, r1, #0
 800428e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004290:	1c7b      	adds	r3, r7, #1
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004298:	1cbb      	adds	r3, r7, #2
 800429a:	881a      	ldrh	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80042a0:	e003      	b.n	80042aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80042a2:	1cbb      	adds	r3, r7, #2
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b002      	add	sp, #8
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b4:	b5b0      	push	{r4, r5, r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f000 fbbf 	bl	8004a46 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c8:	4bc9      	ldr	r3, [pc, #804]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	220c      	movs	r2, #12
 80042ce:	4013      	ands	r3, r2
 80042d0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d2:	4bc7      	ldr	r3, [pc, #796]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	025b      	lsls	r3, r3, #9
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	d100      	bne.n	80042ea <HAL_RCC_OscConfig+0x36>
 80042e8:	e07e      	b.n	80043e8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d007      	beq.n	8004300 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d112      	bne.n	800431c <HAL_RCC_OscConfig+0x68>
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	025b      	lsls	r3, r3, #9
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d10d      	bne.n	800431c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004300:	4bbb      	ldr	r3, [pc, #748]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	029b      	lsls	r3, r3, #10
 8004308:	4013      	ands	r3, r2
 800430a:	d100      	bne.n	800430e <HAL_RCC_OscConfig+0x5a>
 800430c:	e06b      	b.n	80043e6 <HAL_RCC_OscConfig+0x132>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d167      	bne.n	80043e6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f000 fb95 	bl	8004a46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	025b      	lsls	r3, r3, #9
 8004324:	429a      	cmp	r2, r3
 8004326:	d107      	bne.n	8004338 <HAL_RCC_OscConfig+0x84>
 8004328:	4bb1      	ldr	r3, [pc, #708]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4bb0      	ldr	r3, [pc, #704]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800432e:	2180      	movs	r1, #128	; 0x80
 8004330:	0249      	lsls	r1, r1, #9
 8004332:	430a      	orrs	r2, r1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e027      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	23a0      	movs	r3, #160	; 0xa0
 800433e:	02db      	lsls	r3, r3, #11
 8004340:	429a      	cmp	r2, r3
 8004342:	d10e      	bne.n	8004362 <HAL_RCC_OscConfig+0xae>
 8004344:	4baa      	ldr	r3, [pc, #680]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4ba9      	ldr	r3, [pc, #676]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800434a:	2180      	movs	r1, #128	; 0x80
 800434c:	02c9      	lsls	r1, r1, #11
 800434e:	430a      	orrs	r2, r1
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	4ba7      	ldr	r3, [pc, #668]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4ba6      	ldr	r3, [pc, #664]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004358:	2180      	movs	r1, #128	; 0x80
 800435a:	0249      	lsls	r1, r1, #9
 800435c:	430a      	orrs	r2, r1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e012      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 8004362:	4ba3      	ldr	r3, [pc, #652]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4ba2      	ldr	r3, [pc, #648]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004368:	49a2      	ldr	r1, [pc, #648]	; (80045f4 <HAL_RCC_OscConfig+0x340>)
 800436a:	400a      	ands	r2, r1
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	4ba0      	ldr	r3, [pc, #640]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	025b      	lsls	r3, r3, #9
 8004376:	4013      	ands	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4b9c      	ldr	r3, [pc, #624]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b9b      	ldr	r3, [pc, #620]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004382:	499d      	ldr	r1, [pc, #628]	; (80045f8 <HAL_RCC_OscConfig+0x344>)
 8004384:	400a      	ands	r2, r1
 8004386:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d015      	beq.n	80043bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7ff fce8 	bl	8003d64 <HAL_GetTick>
 8004394:	0003      	movs	r3, r0
 8004396:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004398:	e009      	b.n	80043ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800439a:	f7ff fce3 	bl	8003d64 <HAL_GetTick>
 800439e:	0002      	movs	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b64      	cmp	r3, #100	; 0x64
 80043a6:	d902      	bls.n	80043ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	f000 fb4c 	bl	8004a46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ae:	4b90      	ldr	r3, [pc, #576]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	4013      	ands	r3, r2
 80043b8:	d0ef      	beq.n	800439a <HAL_RCC_OscConfig+0xe6>
 80043ba:	e015      	b.n	80043e8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7ff fcd2 	bl	8003d64 <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c6:	f7ff fccd 	bl	8003d64 <HAL_GetTick>
 80043ca:	0002      	movs	r2, r0
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b64      	cmp	r3, #100	; 0x64
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e336      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043d8:	4b85      	ldr	r3, [pc, #532]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	029b      	lsls	r3, r3, #10
 80043e0:	4013      	ands	r3, r2
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0x112>
 80043e4:	e000      	b.n	80043e8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2202      	movs	r2, #2
 80043ee:	4013      	ands	r3, r2
 80043f0:	d100      	bne.n	80043f4 <HAL_RCC_OscConfig+0x140>
 80043f2:	e099      	b.n	8004528 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	2220      	movs	r2, #32
 80043fe:	4013      	ands	r3, r2
 8004400:	d009      	beq.n	8004416 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004402:	4b7b      	ldr	r3, [pc, #492]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b7a      	ldr	r3, [pc, #488]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004408:	2120      	movs	r1, #32
 800440a:	430a      	orrs	r2, r1
 800440c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	2220      	movs	r2, #32
 8004412:	4393      	bics	r3, r2
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d005      	beq.n	8004428 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d13e      	bne.n	80044a0 <HAL_RCC_OscConfig+0x1ec>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d13b      	bne.n	80044a0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004428:	4b71      	ldr	r3, [pc, #452]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2204      	movs	r2, #4
 800442e:	4013      	ands	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_RCC_OscConfig+0x188>
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e304      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443c:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4a6e      	ldr	r2, [pc, #440]	; (80045fc <HAL_RCC_OscConfig+0x348>)
 8004442:	4013      	ands	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	021a      	lsls	r2, r3, #8
 800444c:	4b68      	ldr	r3, [pc, #416]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004452:	4b67      	ldr	r3, [pc, #412]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2209      	movs	r2, #9
 8004458:	4393      	bics	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	4b64      	ldr	r3, [pc, #400]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800445e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004460:	430a      	orrs	r2, r1
 8004462:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004464:	f000 fc42 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8004468:	0001      	movs	r1, r0
 800446a:	4b61      	ldr	r3, [pc, #388]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	220f      	movs	r2, #15
 8004472:	4013      	ands	r3, r2
 8004474:	4a62      	ldr	r2, [pc, #392]	; (8004600 <HAL_RCC_OscConfig+0x34c>)
 8004476:	5cd3      	ldrb	r3, [r2, r3]
 8004478:	000a      	movs	r2, r1
 800447a:	40da      	lsrs	r2, r3
 800447c:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCC_OscConfig+0x350>)
 800447e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004480:	4b61      	ldr	r3, [pc, #388]	; (8004608 <HAL_RCC_OscConfig+0x354>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2513      	movs	r5, #19
 8004486:	197c      	adds	r4, r7, r5
 8004488:	0018      	movs	r0, r3
 800448a:	f7ff fc25 	bl	8003cd8 <HAL_InitTick>
 800448e:	0003      	movs	r3, r0
 8004490:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004492:	197b      	adds	r3, r7, r5
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d046      	beq.n	8004528 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800449a:	197b      	adds	r3, r7, r5
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	e2d2      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d027      	beq.n	80044f6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80044a6:	4b52      	ldr	r3, [pc, #328]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2209      	movs	r2, #9
 80044ac:	4393      	bics	r3, r2
 80044ae:	0019      	movs	r1, r3
 80044b0:	4b4f      	ldr	r3, [pc, #316]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80044b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7ff fc54 	bl	8003d64 <HAL_GetTick>
 80044bc:	0003      	movs	r3, r0
 80044be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c2:	f7ff fc4f 	bl	8003d64 <HAL_GetTick>
 80044c6:	0002      	movs	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e2b8      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044d4:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2204      	movs	r2, #4
 80044da:	4013      	ands	r3, r2
 80044dc:	d0f1      	beq.n	80044c2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044de:	4b44      	ldr	r3, [pc, #272]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4a46      	ldr	r2, [pc, #280]	; (80045fc <HAL_RCC_OscConfig+0x348>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	0019      	movs	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	021a      	lsls	r2, r3, #8
 80044ee:	4b40      	ldr	r3, [pc, #256]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	e018      	b.n	8004528 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f6:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80044fc:	2101      	movs	r1, #1
 80044fe:	438a      	bics	r2, r1
 8004500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004502:	f7ff fc2f 	bl	8003d64 <HAL_GetTick>
 8004506:	0003      	movs	r3, r0
 8004508:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450c:	f7ff fc2a 	bl	8003d64 <HAL_GetTick>
 8004510:	0002      	movs	r2, r0
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e293      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800451e:	4b34      	ldr	r3, [pc, #208]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2204      	movs	r2, #4
 8004524:	4013      	ands	r3, r2
 8004526:	d1f1      	bne.n	800450c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2210      	movs	r2, #16
 800452e:	4013      	ands	r3, r2
 8004530:	d100      	bne.n	8004534 <HAL_RCC_OscConfig+0x280>
 8004532:	e0a2      	b.n	800467a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d140      	bne.n	80045bc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800453a:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4013      	ands	r3, r2
 8004544:	d005      	beq.n	8004552 <HAL_RCC_OscConfig+0x29e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e279      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004552:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4a2d      	ldr	r2, [pc, #180]	; (800460c <HAL_RCC_OscConfig+0x358>)
 8004558:	4013      	ands	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004560:	4b23      	ldr	r3, [pc, #140]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004566:	4b22      	ldr	r3, [pc, #136]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	0a19      	lsrs	r1, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	061a      	lsls	r2, r3, #24
 8004574:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	0b5b      	lsrs	r3, r3, #13
 8004580:	3301      	adds	r3, #1
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	0212      	lsls	r2, r2, #8
 8004586:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	210f      	movs	r1, #15
 8004590:	400b      	ands	r3, r1
 8004592:	491b      	ldr	r1, [pc, #108]	; (8004600 <HAL_RCC_OscConfig+0x34c>)
 8004594:	5ccb      	ldrb	r3, [r1, r3]
 8004596:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004598:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <HAL_RCC_OscConfig+0x350>)
 800459a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800459c:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <HAL_RCC_OscConfig+0x354>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2513      	movs	r5, #19
 80045a2:	197c      	adds	r4, r7, r5
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7ff fb97 	bl	8003cd8 <HAL_InitTick>
 80045aa:	0003      	movs	r3, r0
 80045ac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80045ae:	197b      	adds	r3, r7, r5
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d061      	beq.n	800467a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80045b6:	197b      	adds	r3, r7, r5
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	e244      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d040      	beq.n	8004646 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCC_OscConfig+0x33c>)
 80045ca:	2180      	movs	r1, #128	; 0x80
 80045cc:	0049      	lsls	r1, r1, #1
 80045ce:	430a      	orrs	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d2:	f7ff fbc7 	bl	8003d64 <HAL_GetTick>
 80045d6:	0003      	movs	r3, r0
 80045d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045da:	e019      	b.n	8004610 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045dc:	f7ff fbc2 	bl	8003d64 <HAL_GetTick>
 80045e0:	0002      	movs	r2, r0
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d912      	bls.n	8004610 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e22b      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	40021000 	.word	0x40021000
 80045f4:	fffeffff 	.word	0xfffeffff
 80045f8:	fffbffff 	.word	0xfffbffff
 80045fc:	ffffe0ff 	.word	0xffffe0ff
 8004600:	08009f6c 	.word	0x08009f6c
 8004604:	20000000 	.word	0x20000000
 8004608:	20000004 	.word	0x20000004
 800460c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004610:	4bca      	ldr	r3, [pc, #808]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4013      	ands	r3, r2
 800461a:	d0df      	beq.n	80045dc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800461c:	4bc7      	ldr	r3, [pc, #796]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4ac7      	ldr	r2, [pc, #796]	; (8004940 <HAL_RCC_OscConfig+0x68c>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800462a:	4bc4      	ldr	r3, [pc, #784]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004630:	4bc2      	ldr	r3, [pc, #776]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	0a19      	lsrs	r1, r3, #8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	061a      	lsls	r2, r3, #24
 800463e:	4bbf      	ldr	r3, [pc, #764]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	e019      	b.n	800467a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004646:	4bbd      	ldr	r3, [pc, #756]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4bbc      	ldr	r3, [pc, #752]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800464c:	49bd      	ldr	r1, [pc, #756]	; (8004944 <HAL_RCC_OscConfig+0x690>)
 800464e:	400a      	ands	r2, r1
 8004650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004652:	f7ff fb87 	bl	8003d64 <HAL_GetTick>
 8004656:	0003      	movs	r3, r0
 8004658:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800465c:	f7ff fb82 	bl	8003d64 <HAL_GetTick>
 8004660:	0002      	movs	r2, r0
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e1eb      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800466e:	4bb3      	ldr	r3, [pc, #716]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4013      	ands	r3, r2
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2208      	movs	r2, #8
 8004680:	4013      	ands	r3, r2
 8004682:	d036      	beq.n	80046f2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d019      	beq.n	80046c0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468c:	4bab      	ldr	r3, [pc, #684]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800468e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004690:	4baa      	ldr	r3, [pc, #680]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004692:	2101      	movs	r1, #1
 8004694:	430a      	orrs	r2, r1
 8004696:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004698:	f7ff fb64 	bl	8003d64 <HAL_GetTick>
 800469c:	0003      	movs	r3, r0
 800469e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a2:	f7ff fb5f 	bl	8003d64 <HAL_GetTick>
 80046a6:	0002      	movs	r2, r0
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e1c8      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046b4:	4ba1      	ldr	r3, [pc, #644]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80046b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b8:	2202      	movs	r2, #2
 80046ba:	4013      	ands	r3, r2
 80046bc:	d0f1      	beq.n	80046a2 <HAL_RCC_OscConfig+0x3ee>
 80046be:	e018      	b.n	80046f2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c0:	4b9e      	ldr	r3, [pc, #632]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80046c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046c4:	4b9d      	ldr	r3, [pc, #628]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80046c6:	2101      	movs	r1, #1
 80046c8:	438a      	bics	r2, r1
 80046ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046cc:	f7ff fb4a 	bl	8003d64 <HAL_GetTick>
 80046d0:	0003      	movs	r3, r0
 80046d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d6:	f7ff fb45 	bl	8003d64 <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e1ae      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046e8:	4b94      	ldr	r3, [pc, #592]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	2202      	movs	r2, #2
 80046ee:	4013      	ands	r3, r2
 80046f0:	d1f1      	bne.n	80046d6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2204      	movs	r2, #4
 80046f8:	4013      	ands	r3, r2
 80046fa:	d100      	bne.n	80046fe <HAL_RCC_OscConfig+0x44a>
 80046fc:	e0ae      	b.n	800485c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2023      	movs	r0, #35	; 0x23
 8004700:	183b      	adds	r3, r7, r0
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004706:	4b8d      	ldr	r3, [pc, #564]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	055b      	lsls	r3, r3, #21
 800470e:	4013      	ands	r3, r2
 8004710:	d109      	bne.n	8004726 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	4b8a      	ldr	r3, [pc, #552]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004716:	4b89      	ldr	r3, [pc, #548]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004718:	2180      	movs	r1, #128	; 0x80
 800471a:	0549      	lsls	r1, r1, #21
 800471c:	430a      	orrs	r2, r1
 800471e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004720:	183b      	adds	r3, r7, r0
 8004722:	2201      	movs	r2, #1
 8004724:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004726:	4b88      	ldr	r3, [pc, #544]	; (8004948 <HAL_RCC_OscConfig+0x694>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4013      	ands	r3, r2
 8004730:	d11a      	bne.n	8004768 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004732:	4b85      	ldr	r3, [pc, #532]	; (8004948 <HAL_RCC_OscConfig+0x694>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b84      	ldr	r3, [pc, #528]	; (8004948 <HAL_RCC_OscConfig+0x694>)
 8004738:	2180      	movs	r1, #128	; 0x80
 800473a:	0049      	lsls	r1, r1, #1
 800473c:	430a      	orrs	r2, r1
 800473e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004740:	f7ff fb10 	bl	8003d64 <HAL_GetTick>
 8004744:	0003      	movs	r3, r0
 8004746:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474a:	f7ff fb0b 	bl	8003d64 <HAL_GetTick>
 800474e:	0002      	movs	r2, r0
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b64      	cmp	r3, #100	; 0x64
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e174      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	4b7a      	ldr	r3, [pc, #488]	; (8004948 <HAL_RCC_OscConfig+0x694>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4013      	ands	r3, r2
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	429a      	cmp	r2, r3
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x4d0>
 8004774:	4b71      	ldr	r3, [pc, #452]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004778:	4b70      	ldr	r3, [pc, #448]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800477a:	2180      	movs	r1, #128	; 0x80
 800477c:	0049      	lsls	r1, r1, #1
 800477e:	430a      	orrs	r2, r1
 8004780:	651a      	str	r2, [r3, #80]	; 0x50
 8004782:	e031      	b.n	80047e8 <HAL_RCC_OscConfig+0x534>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <HAL_RCC_OscConfig+0x4f2>
 800478c:	4b6b      	ldr	r3, [pc, #428]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800478e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004790:	4b6a      	ldr	r3, [pc, #424]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004792:	496c      	ldr	r1, [pc, #432]	; (8004944 <HAL_RCC_OscConfig+0x690>)
 8004794:	400a      	ands	r2, r1
 8004796:	651a      	str	r2, [r3, #80]	; 0x50
 8004798:	4b68      	ldr	r3, [pc, #416]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800479a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800479c:	4b67      	ldr	r3, [pc, #412]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800479e:	496b      	ldr	r1, [pc, #428]	; (800494c <HAL_RCC_OscConfig+0x698>)
 80047a0:	400a      	ands	r2, r1
 80047a2:	651a      	str	r2, [r3, #80]	; 0x50
 80047a4:	e020      	b.n	80047e8 <HAL_RCC_OscConfig+0x534>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	23a0      	movs	r3, #160	; 0xa0
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d10e      	bne.n	80047d0 <HAL_RCC_OscConfig+0x51c>
 80047b2:	4b62      	ldr	r3, [pc, #392]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80047b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047b6:	4b61      	ldr	r3, [pc, #388]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80047b8:	2180      	movs	r1, #128	; 0x80
 80047ba:	00c9      	lsls	r1, r1, #3
 80047bc:	430a      	orrs	r2, r1
 80047be:	651a      	str	r2, [r3, #80]	; 0x50
 80047c0:	4b5e      	ldr	r3, [pc, #376]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80047c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047c4:	4b5d      	ldr	r3, [pc, #372]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80047c6:	2180      	movs	r1, #128	; 0x80
 80047c8:	0049      	lsls	r1, r1, #1
 80047ca:	430a      	orrs	r2, r1
 80047cc:	651a      	str	r2, [r3, #80]	; 0x50
 80047ce:	e00b      	b.n	80047e8 <HAL_RCC_OscConfig+0x534>
 80047d0:	4b5a      	ldr	r3, [pc, #360]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80047d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047d4:	4b59      	ldr	r3, [pc, #356]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80047d6:	495b      	ldr	r1, [pc, #364]	; (8004944 <HAL_RCC_OscConfig+0x690>)
 80047d8:	400a      	ands	r2, r1
 80047da:	651a      	str	r2, [r3, #80]	; 0x50
 80047dc:	4b57      	ldr	r3, [pc, #348]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80047de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047e0:	4b56      	ldr	r3, [pc, #344]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80047e2:	495a      	ldr	r1, [pc, #360]	; (800494c <HAL_RCC_OscConfig+0x698>)
 80047e4:	400a      	ands	r2, r1
 80047e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d015      	beq.n	800481c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f0:	f7ff fab8 	bl	8003d64 <HAL_GetTick>
 80047f4:	0003      	movs	r3, r0
 80047f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047f8:	e009      	b.n	800480e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f7ff fab3 	bl	8003d64 <HAL_GetTick>
 80047fe:	0002      	movs	r2, r0
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	4a52      	ldr	r2, [pc, #328]	; (8004950 <HAL_RCC_OscConfig+0x69c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e11b      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800480e:	4b4b      	ldr	r3, [pc, #300]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4013      	ands	r3, r2
 8004818:	d0ef      	beq.n	80047fa <HAL_RCC_OscConfig+0x546>
 800481a:	e014      	b.n	8004846 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481c:	f7ff faa2 	bl	8003d64 <HAL_GetTick>
 8004820:	0003      	movs	r3, r0
 8004822:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004824:	e009      	b.n	800483a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7ff fa9d 	bl	8003d64 <HAL_GetTick>
 800482a:	0002      	movs	r2, r0
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	4a47      	ldr	r2, [pc, #284]	; (8004950 <HAL_RCC_OscConfig+0x69c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e105      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800483a:	4b40      	ldr	r3, [pc, #256]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800483c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4013      	ands	r3, r2
 8004844:	d1ef      	bne.n	8004826 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004846:	2323      	movs	r3, #35	; 0x23
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d105      	bne.n	800485c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004850:	4b3a      	ldr	r3, [pc, #232]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004854:	4b39      	ldr	r3, [pc, #228]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004856:	493f      	ldr	r1, [pc, #252]	; (8004954 <HAL_RCC_OscConfig+0x6a0>)
 8004858:	400a      	ands	r2, r1
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2220      	movs	r2, #32
 8004862:	4013      	ands	r3, r2
 8004864:	d049      	beq.n	80048fa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d026      	beq.n	80048bc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800486e:	4b33      	ldr	r3, [pc, #204]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	4b32      	ldr	r3, [pc, #200]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004874:	2101      	movs	r1, #1
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	4b30      	ldr	r3, [pc, #192]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800487c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487e:	4b2f      	ldr	r3, [pc, #188]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004880:	2101      	movs	r1, #1
 8004882:	430a      	orrs	r2, r1
 8004884:	635a      	str	r2, [r3, #52]	; 0x34
 8004886:	4b34      	ldr	r3, [pc, #208]	; (8004958 <HAL_RCC_OscConfig+0x6a4>)
 8004888:	6a1a      	ldr	r2, [r3, #32]
 800488a:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCC_OscConfig+0x6a4>)
 800488c:	2180      	movs	r1, #128	; 0x80
 800488e:	0189      	lsls	r1, r1, #6
 8004890:	430a      	orrs	r2, r1
 8004892:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7ff fa66 	bl	8003d64 <HAL_GetTick>
 8004898:	0003      	movs	r3, r0
 800489a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800489e:	f7ff fa61 	bl	8003d64 <HAL_GetTick>
 80048a2:	0002      	movs	r2, r0
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e0ca      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048b0:	4b22      	ldr	r3, [pc, #136]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2202      	movs	r2, #2
 80048b6:	4013      	ands	r3, r2
 80048b8:	d0f1      	beq.n	800489e <HAL_RCC_OscConfig+0x5ea>
 80048ba:	e01e      	b.n	80048fa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80048bc:	4b1f      	ldr	r3, [pc, #124]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	4b1e      	ldr	r3, [pc, #120]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80048c2:	2101      	movs	r1, #1
 80048c4:	438a      	bics	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	4b23      	ldr	r3, [pc, #140]	; (8004958 <HAL_RCC_OscConfig+0x6a4>)
 80048ca:	6a1a      	ldr	r2, [r3, #32]
 80048cc:	4b22      	ldr	r3, [pc, #136]	; (8004958 <HAL_RCC_OscConfig+0x6a4>)
 80048ce:	4923      	ldr	r1, [pc, #140]	; (800495c <HAL_RCC_OscConfig+0x6a8>)
 80048d0:	400a      	ands	r2, r1
 80048d2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7ff fa46 	bl	8003d64 <HAL_GetTick>
 80048d8:	0003      	movs	r3, r0
 80048da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048de:	f7ff fa41 	bl	8003d64 <HAL_GetTick>
 80048e2:	0002      	movs	r2, r0
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e0aa      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048f0:	4b12      	ldr	r3, [pc, #72]	; (800493c <HAL_RCC_OscConfig+0x688>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2202      	movs	r2, #2
 80048f6:	4013      	ands	r3, r2
 80048f8:	d1f1      	bne.n	80048de <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d100      	bne.n	8004904 <HAL_RCC_OscConfig+0x650>
 8004902:	e09f      	b.n	8004a44 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d100      	bne.n	800490c <HAL_RCC_OscConfig+0x658>
 800490a:	e078      	b.n	80049fe <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	2b02      	cmp	r3, #2
 8004912:	d159      	bne.n	80049c8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004914:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_OscConfig+0x688>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4b08      	ldr	r3, [pc, #32]	; (800493c <HAL_RCC_OscConfig+0x688>)
 800491a:	4911      	ldr	r1, [pc, #68]	; (8004960 <HAL_RCC_OscConfig+0x6ac>)
 800491c:	400a      	ands	r2, r1
 800491e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7ff fa20 	bl	8003d64 <HAL_GetTick>
 8004924:	0003      	movs	r3, r0
 8004926:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004928:	e01c      	b.n	8004964 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492a:	f7ff fa1b 	bl	8003d64 <HAL_GetTick>
 800492e:	0002      	movs	r2, r0
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d915      	bls.n	8004964 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e084      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
 800493c:	40021000 	.word	0x40021000
 8004940:	ffff1fff 	.word	0xffff1fff
 8004944:	fffffeff 	.word	0xfffffeff
 8004948:	40007000 	.word	0x40007000
 800494c:	fffffbff 	.word	0xfffffbff
 8004950:	00001388 	.word	0x00001388
 8004954:	efffffff 	.word	0xefffffff
 8004958:	40010000 	.word	0x40010000
 800495c:	ffffdfff 	.word	0xffffdfff
 8004960:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004964:	4b3a      	ldr	r3, [pc, #232]	; (8004a50 <HAL_RCC_OscConfig+0x79c>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	049b      	lsls	r3, r3, #18
 800496c:	4013      	ands	r3, r2
 800496e:	d1dc      	bne.n	800492a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004970:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <HAL_RCC_OscConfig+0x79c>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a37      	ldr	r2, [pc, #220]	; (8004a54 <HAL_RCC_OscConfig+0x7a0>)
 8004976:	4013      	ands	r3, r2
 8004978:	0019      	movs	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	431a      	orrs	r2, r3
 800498a:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <HAL_RCC_OscConfig+0x79c>)
 800498c:	430a      	orrs	r2, r1
 800498e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004990:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <HAL_RCC_OscConfig+0x79c>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <HAL_RCC_OscConfig+0x79c>)
 8004996:	2180      	movs	r1, #128	; 0x80
 8004998:	0449      	lsls	r1, r1, #17
 800499a:	430a      	orrs	r2, r1
 800499c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499e:	f7ff f9e1 	bl	8003d64 <HAL_GetTick>
 80049a2:	0003      	movs	r3, r0
 80049a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a8:	f7ff f9dc 	bl	8003d64 <HAL_GetTick>
 80049ac:	0002      	movs	r2, r0
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e045      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80049ba:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <HAL_RCC_OscConfig+0x79c>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	049b      	lsls	r3, r3, #18
 80049c2:	4013      	ands	r3, r2
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x6f4>
 80049c6:	e03d      	b.n	8004a44 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c8:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <HAL_RCC_OscConfig+0x79c>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <HAL_RCC_OscConfig+0x79c>)
 80049ce:	4922      	ldr	r1, [pc, #136]	; (8004a58 <HAL_RCC_OscConfig+0x7a4>)
 80049d0:	400a      	ands	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7ff f9c6 	bl	8003d64 <HAL_GetTick>
 80049d8:	0003      	movs	r3, r0
 80049da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049de:	f7ff f9c1 	bl	8003d64 <HAL_GetTick>
 80049e2:	0002      	movs	r2, r0
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e02a      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049f0:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <HAL_RCC_OscConfig+0x79c>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	049b      	lsls	r3, r3, #18
 80049f8:	4013      	ands	r3, r2
 80049fa:	d1f0      	bne.n	80049de <HAL_RCC_OscConfig+0x72a>
 80049fc:	e022      	b.n	8004a44 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e01d      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <HAL_RCC_OscConfig+0x79c>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	025b      	lsls	r3, r3, #9
 8004a16:	401a      	ands	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d10f      	bne.n	8004a40 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	23f0      	movs	r3, #240	; 0xf0
 8004a24:	039b      	lsls	r3, r3, #14
 8004a26:	401a      	ands	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	23c0      	movs	r3, #192	; 0xc0
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	401a      	ands	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b00a      	add	sp, #40	; 0x28
 8004a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	40021000 	.word	0x40021000
 8004a54:	ff02ffff 	.word	0xff02ffff
 8004a58:	feffffff 	.word	0xfeffffff

08004a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a5c:	b5b0      	push	{r4, r5, r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e128      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a70:	4b96      	ldr	r3, [pc, #600]	; (8004ccc <HAL_RCC_ClockConfig+0x270>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2201      	movs	r2, #1
 8004a76:	4013      	ands	r3, r2
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d91e      	bls.n	8004abc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b93      	ldr	r3, [pc, #588]	; (8004ccc <HAL_RCC_ClockConfig+0x270>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	4393      	bics	r3, r2
 8004a86:	0019      	movs	r1, r3
 8004a88:	4b90      	ldr	r3, [pc, #576]	; (8004ccc <HAL_RCC_ClockConfig+0x270>)
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a90:	f7ff f968 	bl	8003d64 <HAL_GetTick>
 8004a94:	0003      	movs	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a98:	e009      	b.n	8004aae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a9a:	f7ff f963 	bl	8003d64 <HAL_GetTick>
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	4a8a      	ldr	r2, [pc, #552]	; (8004cd0 <HAL_RCC_ClockConfig+0x274>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e109      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b87      	ldr	r3, [pc, #540]	; (8004ccc <HAL_RCC_ClockConfig+0x270>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d1ee      	bne.n	8004a9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac6:	4b83      	ldr	r3, [pc, #524]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	22f0      	movs	r2, #240	; 0xf0
 8004acc:	4393      	bics	r3, r2
 8004ace:	0019      	movs	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	4b7f      	ldr	r3, [pc, #508]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d100      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x8a>
 8004ae4:	e089      	b.n	8004bfa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aee:	4b79      	ldr	r3, [pc, #484]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	2380      	movs	r3, #128	; 0x80
 8004af4:	029b      	lsls	r3, r3, #10
 8004af6:	4013      	ands	r3, r2
 8004af8:	d120      	bne.n	8004b3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e0e1      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b06:	4b73      	ldr	r3, [pc, #460]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	049b      	lsls	r3, r3, #18
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d114      	bne.n	8004b3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e0d5      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d106      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b1e:	4b6d      	ldr	r3, [pc, #436]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2204      	movs	r2, #4
 8004b24:	4013      	ands	r3, r2
 8004b26:	d109      	bne.n	8004b3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0ca      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b2c:	4b69      	ldr	r3, [pc, #420]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0c2      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b3c:	4b65      	ldr	r3, [pc, #404]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2203      	movs	r2, #3
 8004b42:	4393      	bics	r3, r2
 8004b44:	0019      	movs	r1, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	4b62      	ldr	r3, [pc, #392]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b50:	f7ff f908 	bl	8003d64 <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d111      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b60:	e009      	b.n	8004b76 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b62:	f7ff f8ff 	bl	8003d64 <HAL_GetTick>
 8004b66:	0002      	movs	r2, r0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	4a58      	ldr	r2, [pc, #352]	; (8004cd0 <HAL_RCC_ClockConfig+0x274>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0a5      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b76:	4b57      	ldr	r3, [pc, #348]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	220c      	movs	r2, #12
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d1ef      	bne.n	8004b62 <HAL_RCC_ClockConfig+0x106>
 8004b82:	e03a      	b.n	8004bfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d111      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b8c:	e009      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8e:	f7ff f8e9 	bl	8003d64 <HAL_GetTick>
 8004b92:	0002      	movs	r2, r0
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	4a4d      	ldr	r2, [pc, #308]	; (8004cd0 <HAL_RCC_ClockConfig+0x274>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e08f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ba2:	4b4c      	ldr	r3, [pc, #304]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	220c      	movs	r2, #12
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b0c      	cmp	r3, #12
 8004bac:	d1ef      	bne.n	8004b8e <HAL_RCC_ClockConfig+0x132>
 8004bae:	e024      	b.n	8004bfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb8:	e009      	b.n	8004bce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bba:	f7ff f8d3 	bl	8003d64 <HAL_GetTick>
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	4a42      	ldr	r2, [pc, #264]	; (8004cd0 <HAL_RCC_ClockConfig+0x274>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e079      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bce:	4b41      	ldr	r3, [pc, #260]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	220c      	movs	r2, #12
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d1ef      	bne.n	8004bba <HAL_RCC_ClockConfig+0x15e>
 8004bda:	e00e      	b.n	8004bfa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bdc:	f7ff f8c2 	bl	8003d64 <HAL_GetTick>
 8004be0:	0002      	movs	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	4a3a      	ldr	r2, [pc, #232]	; (8004cd0 <HAL_RCC_ClockConfig+0x274>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e068      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bf0:	4b38      	ldr	r3, [pc, #224]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	220c      	movs	r2, #12
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bfa:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <HAL_RCC_ClockConfig+0x270>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	4013      	ands	r3, r2
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d21e      	bcs.n	8004c46 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c08:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <HAL_RCC_ClockConfig+0x270>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	4393      	bics	r3, r2
 8004c10:	0019      	movs	r1, r3
 8004c12:	4b2e      	ldr	r3, [pc, #184]	; (8004ccc <HAL_RCC_ClockConfig+0x270>)
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c1a:	f7ff f8a3 	bl	8003d64 <HAL_GetTick>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	e009      	b.n	8004c38 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c24:	f7ff f89e 	bl	8003d64 <HAL_GetTick>
 8004c28:	0002      	movs	r2, r0
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <HAL_RCC_ClockConfig+0x274>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e044      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c38:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <HAL_RCC_ClockConfig+0x270>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	4013      	ands	r3, r2
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d1ee      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2204      	movs	r2, #4
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <HAL_RCC_ClockConfig+0x27c>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004c60:	430a      	orrs	r2, r1
 8004c62:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c6e:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	4a1a      	ldr	r2, [pc, #104]	; (8004cdc <HAL_RCC_ClockConfig+0x280>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	00da      	lsls	r2, r3, #3
 8004c7e:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004c80:	430a      	orrs	r2, r1
 8004c82:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c84:	f000 f832 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8004c88:	0001      	movs	r1, r0
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_RCC_ClockConfig+0x278>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	220f      	movs	r2, #15
 8004c92:	4013      	ands	r3, r2
 8004c94:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <HAL_RCC_ClockConfig+0x284>)
 8004c96:	5cd3      	ldrb	r3, [r2, r3]
 8004c98:	000a      	movs	r2, r1
 8004c9a:	40da      	lsrs	r2, r3
 8004c9c:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <HAL_RCC_ClockConfig+0x288>)
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <HAL_RCC_ClockConfig+0x28c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	250b      	movs	r5, #11
 8004ca6:	197c      	adds	r4, r7, r5
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7ff f815 	bl	8003cd8 <HAL_InitTick>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004cb2:	197b      	adds	r3, r7, r5
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004cba:	197b      	adds	r3, r7, r5
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b004      	add	sp, #16
 8004cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	40022000 	.word	0x40022000
 8004cd0:	00001388 	.word	0x00001388
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	fffff8ff 	.word	0xfffff8ff
 8004cdc:	ffffc7ff 	.word	0xffffc7ff
 8004ce0:	08009f6c 	.word	0x08009f6c
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	20000004 	.word	0x20000004

08004cec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cec:	b5b0      	push	{r4, r5, r7, lr}
 8004cee:	b08e      	sub	sp, #56	; 0x38
 8004cf0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004cf2:	4b4c      	ldr	r3, [pc, #304]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d014      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0x40>
 8004d02:	d900      	bls.n	8004d06 <HAL_RCC_GetSysClockFreq+0x1a>
 8004d04:	e07b      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0x112>
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d002      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x24>
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d00b      	beq.n	8004d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d0e:	e076      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004d10:	4b44      	ldr	r3, [pc, #272]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2210      	movs	r2, #16
 8004d16:	4013      	ands	r3, r2
 8004d18:	d002      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004d1a:	4b43      	ldr	r3, [pc, #268]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004d1e:	e07c      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004d20:	4b42      	ldr	r3, [pc, #264]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x140>)
 8004d22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d24:	e079      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d26:	4b42      	ldr	r3, [pc, #264]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x144>)
 8004d28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d2a:	e076      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	0c9a      	lsrs	r2, r3, #18
 8004d30:	230f      	movs	r3, #15
 8004d32:	401a      	ands	r2, r3
 8004d34:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x148>)
 8004d36:	5c9b      	ldrb	r3, [r3, r2]
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	0d9a      	lsrs	r2, r3, #22
 8004d3e:	2303      	movs	r3, #3
 8004d40:	4013      	ands	r3, r2
 8004d42:	3301      	adds	r3, #1
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d46:	4b37      	ldr	r3, [pc, #220]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	025b      	lsls	r3, r3, #9
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d01a      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	4a35      	ldr	r2, [pc, #212]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x144>)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	69b8      	ldr	r0, [r7, #24]
 8004d60:	69f9      	ldr	r1, [r7, #28]
 8004d62:	f7fb fbc1 	bl	80004e8 <__aeabi_lmul>
 8004d66:	0002      	movs	r2, r0
 8004d68:	000b      	movs	r3, r1
 8004d6a:	0010      	movs	r0, r2
 8004d6c:	0019      	movs	r1, r3
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f7fb fb95 	bl	80004a8 <__aeabi_uldivmod>
 8004d7e:	0002      	movs	r2, r0
 8004d80:	000b      	movs	r3, r1
 8004d82:	0013      	movs	r3, r2
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
 8004d86:	e037      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004d88:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d01a      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	68b8      	ldr	r0, [r7, #8]
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	f7fb fba1 	bl	80004e8 <__aeabi_lmul>
 8004da6:	0002      	movs	r2, r0
 8004da8:	000b      	movs	r3, r1
 8004daa:	0010      	movs	r0, r2
 8004dac:	0019      	movs	r1, r3
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f7fb fb75 	bl	80004a8 <__aeabi_uldivmod>
 8004dbe:	0002      	movs	r2, r0
 8004dc0:	000b      	movs	r3, r1
 8004dc2:	0013      	movs	r3, r2
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc6:	e017      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	0018      	movs	r0, r3
 8004dcc:	2300      	movs	r3, #0
 8004dce:	0019      	movs	r1, r3
 8004dd0:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x140>)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f7fb fb88 	bl	80004e8 <__aeabi_lmul>
 8004dd8:	0002      	movs	r2, r0
 8004dda:	000b      	movs	r3, r1
 8004ddc:	0010      	movs	r0, r2
 8004dde:	0019      	movs	r1, r3
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	001c      	movs	r4, r3
 8004de4:	2300      	movs	r3, #0
 8004de6:	001d      	movs	r5, r3
 8004de8:	0022      	movs	r2, r4
 8004dea:	002b      	movs	r3, r5
 8004dec:	f7fb fb5c 	bl	80004a8 <__aeabi_uldivmod>
 8004df0:	0002      	movs	r2, r0
 8004df2:	000b      	movs	r3, r1
 8004df4:	0013      	movs	r3, r2
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dfc:	e00d      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004dfe:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	0b5b      	lsrs	r3, r3, #13
 8004e04:	2207      	movs	r2, #7
 8004e06:	4013      	ands	r3, r2
 8004e08:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	2280      	movs	r2, #128	; 0x80
 8004e10:	0212      	lsls	r2, r2, #8
 8004e12:	409a      	lsls	r2, r3
 8004e14:	0013      	movs	r3, r2
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e18:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b00e      	add	sp, #56	; 0x38
 8004e22:	bdb0      	pop	{r4, r5, r7, pc}
 8004e24:	40021000 	.word	0x40021000
 8004e28:	003d0900 	.word	0x003d0900
 8004e2c:	00f42400 	.word	0x00f42400
 8004e30:	007a1200 	.word	0x007a1200
 8004e34:	08009f84 	.word	0x08009f84

08004e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e3c:	4b02      	ldr	r3, [pc, #8]	; (8004e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
}
 8004e40:	0018      	movs	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	20000000 	.word	0x20000000

08004e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e50:	f7ff fff2 	bl	8004e38 <HAL_RCC_GetHCLKFreq>
 8004e54:	0001      	movs	r1, r0
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	2207      	movs	r2, #7
 8004e5e:	4013      	ands	r3, r2
 8004e60:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e62:	5cd3      	ldrb	r3, [r2, r3]
 8004e64:	40d9      	lsrs	r1, r3
 8004e66:	000b      	movs	r3, r1
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	40021000 	.word	0x40021000
 8004e74:	08009f7c 	.word	0x08009f7c

08004e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e7c:	f7ff ffdc 	bl	8004e38 <HAL_RCC_GetHCLKFreq>
 8004e80:	0001      	movs	r1, r0
 8004e82:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	0adb      	lsrs	r3, r3, #11
 8004e88:	2207      	movs	r2, #7
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e8e:	5cd3      	ldrb	r3, [r2, r3]
 8004e90:	40d9      	lsrs	r1, r3
 8004e92:	000b      	movs	r3, r1
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	08009f7c 	.word	0x08009f7c

08004ea4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004eac:	2317      	movs	r3, #23
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d106      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d100      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004eca:	e104      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ecc:	4bb9      	ldr	r3, [pc, #740]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	055b      	lsls	r3, r3, #21
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d10a      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed8:	4bb6      	ldr	r3, [pc, #728]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004edc:	4bb5      	ldr	r3, [pc, #724]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	0549      	lsls	r1, r1, #21
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004ee6:	2317      	movs	r3, #23
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	2201      	movs	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eee:	4bb2      	ldr	r3, [pc, #712]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	2380      	movs	r3, #128	; 0x80
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d11a      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efa:	4baf      	ldr	r3, [pc, #700]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4bae      	ldr	r3, [pc, #696]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004f00:	2180      	movs	r1, #128	; 0x80
 8004f02:	0049      	lsls	r1, r1, #1
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f08:	f7fe ff2c 	bl	8003d64 <HAL_GetTick>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f10:	e008      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7fe ff27 	bl	8003d64 <HAL_GetTick>
 8004f16:	0002      	movs	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b64      	cmp	r3, #100	; 0x64
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e143      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f24:	4ba4      	ldr	r3, [pc, #656]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	2380      	movs	r3, #128	; 0x80
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004f30:	4ba0      	ldr	r3, [pc, #640]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	23c0      	movs	r3, #192	; 0xc0
 8004f36:	039b      	lsls	r3, r3, #14
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	23c0      	movs	r3, #192	; 0xc0
 8004f42:	039b      	lsls	r3, r3, #14
 8004f44:	4013      	ands	r3, r2
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d107      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	23c0      	movs	r3, #192	; 0xc0
 8004f52:	039b      	lsls	r3, r3, #14
 8004f54:	4013      	ands	r3, r2
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d013      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	23c0      	movs	r3, #192	; 0xc0
 8004f62:	029b      	lsls	r3, r3, #10
 8004f64:	401a      	ands	r2, r3
 8004f66:	23c0      	movs	r3, #192	; 0xc0
 8004f68:	029b      	lsls	r3, r3, #10
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d10a      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f6e:	4b91      	ldr	r3, [pc, #580]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	029b      	lsls	r3, r3, #10
 8004f76:	401a      	ands	r2, r3
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	029b      	lsls	r3, r3, #10
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e113      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004f84:	4b8b      	ldr	r3, [pc, #556]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f88:	23c0      	movs	r3, #192	; 0xc0
 8004f8a:	029b      	lsls	r3, r3, #10
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d049      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	23c0      	movs	r3, #192	; 0xc0
 8004f9c:	029b      	lsls	r3, r3, #10
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d004      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2220      	movs	r2, #32
 8004fac:	4013      	ands	r3, r2
 8004fae:	d10d      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	23c0      	movs	r3, #192	; 0xc0
 8004fb6:	029b      	lsls	r3, r3, #10
 8004fb8:	4013      	ands	r3, r2
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d034      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d02e      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004fcc:	4b79      	ldr	r3, [pc, #484]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	4a7a      	ldr	r2, [pc, #488]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fd6:	4b77      	ldr	r3, [pc, #476]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fda:	4b76      	ldr	r3, [pc, #472]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fdc:	2180      	movs	r1, #128	; 0x80
 8004fde:	0309      	lsls	r1, r1, #12
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe4:	4b73      	ldr	r3, [pc, #460]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fe8:	4b72      	ldr	r3, [pc, #456]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fea:	4975      	ldr	r1, [pc, #468]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004ff0:	4b70      	ldr	r3, [pc, #448]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d014      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005000:	f7fe feb0 	bl	8003d64 <HAL_GetTick>
 8005004:	0003      	movs	r3, r0
 8005006:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005008:	e009      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800500a:	f7fe feab 	bl	8003d64 <HAL_GetTick>
 800500e:	0002      	movs	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	4a6b      	ldr	r2, [pc, #428]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e0c6      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800501e:	4b65      	ldr	r3, [pc, #404]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4013      	ands	r3, r2
 8005028:	d0ef      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	4013      	ands	r3, r2
 8005034:	d01f      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	23c0      	movs	r3, #192	; 0xc0
 800503c:	029b      	lsls	r3, r3, #10
 800503e:	401a      	ands	r2, r3
 8005040:	23c0      	movs	r3, #192	; 0xc0
 8005042:	029b      	lsls	r3, r3, #10
 8005044:	429a      	cmp	r2, r3
 8005046:	d10c      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005048:	4b5a      	ldr	r3, [pc, #360]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a5e      	ldr	r2, [pc, #376]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800504e:	4013      	ands	r3, r2
 8005050:	0019      	movs	r1, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	23c0      	movs	r3, #192	; 0xc0
 8005058:	039b      	lsls	r3, r3, #14
 800505a:	401a      	ands	r2, r3
 800505c:	4b55      	ldr	r3, [pc, #340]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800505e:	430a      	orrs	r2, r1
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	4b54      	ldr	r3, [pc, #336]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005064:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	23c0      	movs	r3, #192	; 0xc0
 800506c:	029b      	lsls	r3, r3, #10
 800506e:	401a      	ands	r2, r3
 8005070:	4b50      	ldr	r3, [pc, #320]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005072:	430a      	orrs	r2, r1
 8005074:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2220      	movs	r2, #32
 800507c:	4013      	ands	r3, r2
 800507e:	d01f      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	23c0      	movs	r3, #192	; 0xc0
 8005086:	029b      	lsls	r3, r3, #10
 8005088:	401a      	ands	r2, r3
 800508a:	23c0      	movs	r3, #192	; 0xc0
 800508c:	029b      	lsls	r3, r3, #10
 800508e:	429a      	cmp	r2, r3
 8005090:	d10c      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005092:	4b48      	ldr	r3, [pc, #288]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a4c      	ldr	r2, [pc, #304]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005098:	4013      	ands	r3, r2
 800509a:	0019      	movs	r1, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	23c0      	movs	r3, #192	; 0xc0
 80050a2:	039b      	lsls	r3, r3, #14
 80050a4:	401a      	ands	r2, r3
 80050a6:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050a8:	430a      	orrs	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	4b41      	ldr	r3, [pc, #260]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050ae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	23c0      	movs	r3, #192	; 0xc0
 80050b6:	029b      	lsls	r3, r3, #10
 80050b8:	401a      	ands	r2, r3
 80050ba:	4b3e      	ldr	r3, [pc, #248]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050bc:	430a      	orrs	r2, r1
 80050be:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050c0:	2317      	movs	r3, #23
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d105      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ca:	4b3a      	ldr	r3, [pc, #232]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ce:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050d0:	493e      	ldr	r1, [pc, #248]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80050d2:	400a      	ands	r2, r1
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2201      	movs	r2, #1
 80050dc:	4013      	ands	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050e0:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e4:	2203      	movs	r2, #3
 80050e6:	4393      	bics	r3, r2
 80050e8:	0019      	movs	r1, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050f0:	430a      	orrs	r2, r1
 80050f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2202      	movs	r2, #2
 80050fa:	4013      	ands	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050fe:	4b2d      	ldr	r3, [pc, #180]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005102:	220c      	movs	r2, #12
 8005104:	4393      	bics	r3, r2
 8005106:	0019      	movs	r1, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	4b29      	ldr	r3, [pc, #164]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800510e:	430a      	orrs	r2, r1
 8005110:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2204      	movs	r2, #4
 8005118:	4013      	ands	r3, r2
 800511a:	d009      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800511e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005120:	4a2b      	ldr	r2, [pc, #172]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005122:	4013      	ands	r3, r2
 8005124:	0019      	movs	r1, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800512c:	430a      	orrs	r2, r1
 800512e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2208      	movs	r2, #8
 8005136:	4013      	ands	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800513c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513e:	4a25      	ldr	r2, [pc, #148]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800514a:	430a      	orrs	r2, r1
 800514c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	2380      	movs	r3, #128	; 0x80
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4013      	ands	r3, r2
 8005158:	d009      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800515c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515e:	4a17      	ldr	r2, [pc, #92]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005160:	4013      	ands	r3, r2
 8005162:	0019      	movs	r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800516a:	430a      	orrs	r2, r1
 800516c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2240      	movs	r2, #64	; 0x40
 8005174:	4013      	ands	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005178:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800517a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517c:	4a16      	ldr	r2, [pc, #88]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800517e:	4013      	ands	r3, r2
 8005180:	0019      	movs	r1, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005188:	430a      	orrs	r2, r1
 800518a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2280      	movs	r2, #128	; 0x80
 8005192:	4013      	ands	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005196:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800519c:	4013      	ands	r3, r2
 800519e:	0019      	movs	r1, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051a6:	430a      	orrs	r2, r1
 80051a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	0018      	movs	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b006      	add	sp, #24
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40007000 	.word	0x40007000
 80051bc:	fffcffff 	.word	0xfffcffff
 80051c0:	fff7ffff 	.word	0xfff7ffff
 80051c4:	00001388 	.word	0x00001388
 80051c8:	ffcfffff 	.word	0xffcfffff
 80051cc:	efffffff 	.word	0xefffffff
 80051d0:	fffff3ff 	.word	0xfffff3ff
 80051d4:	ffffcfff 	.word	0xffffcfff
 80051d8:	fbffffff 	.word	0xfbffffff
 80051dc:	fff3ffff 	.word	0xfff3ffff

080051e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e083      	b.n	80052fa <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	2382      	movs	r3, #130	; 0x82
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	429a      	cmp	r2, r3
 8005204:	d009      	beq.n	800521a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	61da      	str	r2, [r3, #28]
 800520c:	e005      	b.n	800521a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2251      	movs	r2, #81	; 0x51
 8005224:	5c9b      	ldrb	r3, [r3, r2]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d107      	bne.n	800523c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2250      	movs	r2, #80	; 0x50
 8005230:	2100      	movs	r1, #0
 8005232:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0018      	movs	r0, r3
 8005238:	f7fe fb5c 	bl	80038f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2251      	movs	r2, #81	; 0x51
 8005240:	2102      	movs	r1, #2
 8005242:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2140      	movs	r1, #64	; 0x40
 8005250:	438a      	bics	r2, r1
 8005252:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	2382      	movs	r3, #130	; 0x82
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	401a      	ands	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6899      	ldr	r1, [r3, #8]
 8005262:	2384      	movs	r3, #132	; 0x84
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	400b      	ands	r3, r1
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68d9      	ldr	r1, [r3, #12]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	400b      	ands	r3, r1
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2102      	movs	r1, #2
 800527c:	400b      	ands	r3, r1
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	2101      	movs	r1, #1
 8005286:	400b      	ands	r3, r1
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6999      	ldr	r1, [r3, #24]
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	400b      	ands	r3, r1
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	2138      	movs	r1, #56	; 0x38
 800529c:	400b      	ands	r3, r1
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	2180      	movs	r1, #128	; 0x80
 80052a6:	400b      	ands	r3, r1
 80052a8:	431a      	orrs	r2, r3
 80052aa:	0011      	movs	r1, r2
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b0:	2380      	movs	r3, #128	; 0x80
 80052b2:	019b      	lsls	r3, r3, #6
 80052b4:	401a      	ands	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	0c1b      	lsrs	r3, r3, #16
 80052c4:	2204      	movs	r2, #4
 80052c6:	4013      	ands	r3, r2
 80052c8:	0019      	movs	r1, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	2210      	movs	r2, #16
 80052d0:	401a      	ands	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4907      	ldr	r1, [pc, #28]	; (8005304 <HAL_SPI_Init+0x124>)
 80052e6:	400a      	ands	r2, r1
 80052e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2251      	movs	r2, #81	; 0x51
 80052f4:	2101      	movs	r1, #1
 80052f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	0018      	movs	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b002      	add	sp, #8
 8005300:	bd80      	pop	{r7, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	fffff7ff 	.word	0xfffff7ff

08005308 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	1dbb      	adds	r3, r7, #6
 8005316:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005318:	231f      	movs	r3, #31
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2250      	movs	r2, #80	; 0x50
 8005324:	5c9b      	ldrb	r3, [r3, r2]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_SPI_Transmit+0x26>
 800532a:	2302      	movs	r3, #2
 800532c:	e145      	b.n	80055ba <HAL_SPI_Transmit+0x2b2>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2250      	movs	r2, #80	; 0x50
 8005332:	2101      	movs	r1, #1
 8005334:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005336:	f7fe fd15 	bl	8003d64 <HAL_GetTick>
 800533a:	0003      	movs	r3, r0
 800533c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800533e:	2316      	movs	r3, #22
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	1dba      	adds	r2, r7, #6
 8005344:	8812      	ldrh	r2, [r2, #0]
 8005346:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2251      	movs	r2, #81	; 0x51
 800534c:	5c9b      	ldrb	r3, [r3, r2]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d004      	beq.n	800535e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005354:	231f      	movs	r3, #31
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	2202      	movs	r2, #2
 800535a:	701a      	strb	r2, [r3, #0]
    goto error;
 800535c:	e126      	b.n	80055ac <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_SPI_Transmit+0x64>
 8005364:	1dbb      	adds	r3, r7, #6
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800536c:	231f      	movs	r3, #31
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
    goto error;
 8005374:	e11a      	b.n	80055ac <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2251      	movs	r2, #81	; 0x51
 800537a:	2103      	movs	r1, #3
 800537c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1dba      	adds	r2, r7, #6
 800538e:	8812      	ldrh	r2, [r2, #0]
 8005390:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1dba      	adds	r2, r7, #6
 8005396:	8812      	ldrh	r2, [r2, #0]
 8005398:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d110      	bne.n	80053e6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2140      	movs	r1, #64	; 0x40
 80053d0:	438a      	bics	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2180      	movs	r1, #128	; 0x80
 80053e0:	01c9      	lsls	r1, r1, #7
 80053e2:	430a      	orrs	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2240      	movs	r2, #64	; 0x40
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	d007      	beq.n	8005404 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2140      	movs	r1, #64	; 0x40
 8005400:	430a      	orrs	r2, r1
 8005402:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	429a      	cmp	r2, r3
 800540e:	d152      	bne.n	80054b6 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HAL_SPI_Transmit+0x11a>
 8005418:	2316      	movs	r3, #22
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d143      	bne.n	80054aa <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	881a      	ldrh	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	1c9a      	adds	r2, r3, #2
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005446:	e030      	b.n	80054aa <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2202      	movs	r2, #2
 8005450:	4013      	ands	r3, r2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d112      	bne.n	800547c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	881a      	ldrh	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	1c9a      	adds	r2, r3, #2
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	86da      	strh	r2, [r3, #54]	; 0x36
 800547a:	e016      	b.n	80054aa <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800547c:	f7fe fc72 	bl	8003d64 <HAL_GetTick>
 8005480:	0002      	movs	r2, r0
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d802      	bhi.n	8005492 <HAL_SPI_Transmit+0x18a>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	3301      	adds	r3, #1
 8005490:	d102      	bne.n	8005498 <HAL_SPI_Transmit+0x190>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d108      	bne.n	80054aa <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005498:	231f      	movs	r3, #31
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	2203      	movs	r2, #3
 800549e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2251      	movs	r2, #81	; 0x51
 80054a4:	2101      	movs	r1, #1
 80054a6:	5499      	strb	r1, [r3, r2]
          goto error;
 80054a8:	e080      	b.n	80055ac <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1c9      	bne.n	8005448 <HAL_SPI_Transmit+0x140>
 80054b4:	e053      	b.n	800555e <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <HAL_SPI_Transmit+0x1c0>
 80054be:	2316      	movs	r3, #22
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d145      	bne.n	8005554 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	7812      	ldrb	r2, [r2, #0]
 80054d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054ee:	e031      	b.n	8005554 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2202      	movs	r2, #2
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d113      	bne.n	8005526 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	7812      	ldrb	r2, [r2, #0]
 800550a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	86da      	strh	r2, [r3, #54]	; 0x36
 8005524:	e016      	b.n	8005554 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005526:	f7fe fc1d 	bl	8003d64 <HAL_GetTick>
 800552a:	0002      	movs	r2, r0
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d802      	bhi.n	800553c <HAL_SPI_Transmit+0x234>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	d102      	bne.n	8005542 <HAL_SPI_Transmit+0x23a>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d108      	bne.n	8005554 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8005542:	231f      	movs	r3, #31
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	2203      	movs	r2, #3
 8005548:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2251      	movs	r2, #81	; 0x51
 800554e:	2101      	movs	r1, #1
 8005550:	5499      	strb	r1, [r3, r2]
          goto error;
 8005552:	e02b      	b.n	80055ac <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1c8      	bne.n	80054f0 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	0018      	movs	r0, r3
 8005566:	f000 fc1f 	bl	8005da8 <SPI_EndRxTxTransaction>
 800556a:	1e03      	subs	r3, r0, #0
 800556c:	d002      	beq.n	8005574 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 800559a:	231f      	movs	r3, #31
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	e003      	b.n	80055ac <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2251      	movs	r2, #81	; 0x51
 80055a8:	2101      	movs	r1, #1
 80055aa:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2250      	movs	r2, #80	; 0x50
 80055b0:	2100      	movs	r1, #0
 80055b2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80055b4:	231f      	movs	r3, #31
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	781b      	ldrb	r3, [r3, #0]
}
 80055ba:	0018      	movs	r0, r3
 80055bc:	46bd      	mov	sp, r7
 80055be:	b008      	add	sp, #32
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c4:	b590      	push	{r4, r7, lr}
 80055c6:	b089      	sub	sp, #36	; 0x24
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	1dbb      	adds	r3, r7, #6
 80055d2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055d4:	2117      	movs	r1, #23
 80055d6:	187b      	adds	r3, r7, r1
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2251      	movs	r2, #81	; 0x51
 80055e0:	5c9b      	ldrb	r3, [r3, r2]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d003      	beq.n	80055f0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80055e8:	187b      	adds	r3, r7, r1
 80055ea:	2202      	movs	r2, #2
 80055ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80055ee:	e109      	b.n	8005804 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	2382      	movs	r3, #130	; 0x82
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d113      	bne.n	8005624 <HAL_SPI_Receive+0x60>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10f      	bne.n	8005624 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2251      	movs	r2, #81	; 0x51
 8005608:	2104      	movs	r1, #4
 800560a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800560c:	1dbb      	adds	r3, r7, #6
 800560e:	881c      	ldrh	r4, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	0023      	movs	r3, r4
 800561c:	f000 f900 	bl	8005820 <HAL_SPI_TransmitReceive>
 8005620:	0003      	movs	r3, r0
 8005622:	e0f6      	b.n	8005812 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2250      	movs	r2, #80	; 0x50
 8005628:	5c9b      	ldrb	r3, [r3, r2]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_SPI_Receive+0x6e>
 800562e:	2302      	movs	r3, #2
 8005630:	e0ef      	b.n	8005812 <HAL_SPI_Receive+0x24e>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2250      	movs	r2, #80	; 0x50
 8005636:	2101      	movs	r1, #1
 8005638:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800563a:	f7fe fb93 	bl	8003d64 <HAL_GetTick>
 800563e:	0003      	movs	r3, r0
 8005640:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_SPI_Receive+0x8c>
 8005648:	1dbb      	adds	r3, r7, #6
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005650:	2317      	movs	r3, #23
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	2201      	movs	r2, #1
 8005656:	701a      	strb	r2, [r3, #0]
    goto error;
 8005658:	e0d4      	b.n	8005804 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2251      	movs	r2, #81	; 0x51
 800565e:	2104      	movs	r1, #4
 8005660:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1dba      	adds	r2, r7, #6
 8005672:	8812      	ldrh	r2, [r2, #0]
 8005674:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1dba      	adds	r2, r7, #6
 800567a:	8812      	ldrh	r2, [r2, #0]
 800567c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d10f      	bne.n	80056c8 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2140      	movs	r1, #64	; 0x40
 80056b4:	438a      	bics	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4956      	ldr	r1, [pc, #344]	; (800581c <HAL_SPI_Receive+0x258>)
 80056c4:	400a      	ands	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2240      	movs	r2, #64	; 0x40
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d007      	beq.n	80056e6 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2140      	movs	r1, #64	; 0x40
 80056e2:	430a      	orrs	r2, r1
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d000      	beq.n	80056f0 <HAL_SPI_Receive+0x12c>
 80056ee:	e06c      	b.n	80057ca <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056f0:	e033      	b.n	800575a <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2201      	movs	r2, #1
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d115      	bne.n	800572c <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	001a      	movs	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005720:	b29b      	uxth	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	87da      	strh	r2, [r3, #62]	; 0x3e
 800572a:	e016      	b.n	800575a <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800572c:	f7fe fb1a 	bl	8003d64 <HAL_GetTick>
 8005730:	0002      	movs	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d802      	bhi.n	8005742 <HAL_SPI_Receive+0x17e>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	3301      	adds	r3, #1
 8005740:	d102      	bne.n	8005748 <HAL_SPI_Receive+0x184>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d108      	bne.n	800575a <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8005748:	2317      	movs	r3, #23
 800574a:	18fb      	adds	r3, r7, r3
 800574c:	2203      	movs	r2, #3
 800574e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2251      	movs	r2, #81	; 0x51
 8005754:	2101      	movs	r1, #1
 8005756:	5499      	strb	r1, [r3, r2]
          goto error;
 8005758:	e054      	b.n	8005804 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1c6      	bne.n	80056f2 <HAL_SPI_Receive+0x12e>
 8005764:	e036      	b.n	80057d4 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2201      	movs	r2, #1
 800576e:	4013      	ands	r3, r2
 8005770:	2b01      	cmp	r3, #1
 8005772:	d113      	bne.n	800579c <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	b292      	uxth	r2, r2
 8005780:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	1c9a      	adds	r2, r3, #2
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	87da      	strh	r2, [r3, #62]	; 0x3e
 800579a:	e016      	b.n	80057ca <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579c:	f7fe fae2 	bl	8003d64 <HAL_GetTick>
 80057a0:	0002      	movs	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d802      	bhi.n	80057b2 <HAL_SPI_Receive+0x1ee>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	3301      	adds	r3, #1
 80057b0:	d102      	bne.n	80057b8 <HAL_SPI_Receive+0x1f4>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d108      	bne.n	80057ca <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 80057b8:	2317      	movs	r3, #23
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	2203      	movs	r2, #3
 80057be:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2251      	movs	r2, #81	; 0x51
 80057c4:	2101      	movs	r1, #1
 80057c6:	5499      	strb	r1, [r3, r2]
          goto error;
 80057c8:	e01c      	b.n	8005804 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1c8      	bne.n	8005766 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	0018      	movs	r0, r3
 80057dc:	f000 fa7a 	bl	8005cd4 <SPI_EndRxTransaction>
 80057e0:	1e03      	subs	r3, r0, #0
 80057e2:	d002      	beq.n	80057ea <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80057f2:	2317      	movs	r3, #23
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	2201      	movs	r2, #1
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e003      	b.n	8005804 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2251      	movs	r2, #81	; 0x51
 8005800:	2101      	movs	r1, #1
 8005802:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2250      	movs	r2, #80	; 0x50
 8005808:	2100      	movs	r1, #0
 800580a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800580c:	2317      	movs	r3, #23
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	781b      	ldrb	r3, [r3, #0]
}
 8005812:	0018      	movs	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	b007      	add	sp, #28
 8005818:	bd90      	pop	{r4, r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	ffffbfff 	.word	0xffffbfff

08005820 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	; 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	001a      	movs	r2, r3
 800582e:	1cbb      	adds	r3, r7, #2
 8005830:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005832:	2301      	movs	r3, #1
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005836:	232b      	movs	r3, #43	; 0x2b
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2250      	movs	r2, #80	; 0x50
 8005842:	5c9b      	ldrb	r3, [r3, r2]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_SPI_TransmitReceive+0x2c>
 8005848:	2302      	movs	r3, #2
 800584a:	e1b0      	b.n	8005bae <HAL_SPI_TransmitReceive+0x38e>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2250      	movs	r2, #80	; 0x50
 8005850:	2101      	movs	r1, #1
 8005852:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005854:	f7fe fa86 	bl	8003d64 <HAL_GetTick>
 8005858:	0003      	movs	r3, r0
 800585a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800585c:	2023      	movs	r0, #35	; 0x23
 800585e:	183b      	adds	r3, r7, r0
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	2151      	movs	r1, #81	; 0x51
 8005864:	5c52      	ldrb	r2, [r2, r1]
 8005866:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800586e:	231a      	movs	r3, #26
 8005870:	18fb      	adds	r3, r7, r3
 8005872:	1cba      	adds	r2, r7, #2
 8005874:	8812      	ldrh	r2, [r2, #0]
 8005876:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005878:	183b      	adds	r3, r7, r0
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d011      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x84>
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	2382      	movs	r3, #130	; 0x82
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	429a      	cmp	r2, r3
 8005888:	d107      	bne.n	800589a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <HAL_SPI_TransmitReceive+0x7a>
 8005892:	183b      	adds	r3, r7, r0
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b04      	cmp	r3, #4
 8005898:	d004      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800589a:	232b      	movs	r3, #43	; 0x2b
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	2202      	movs	r2, #2
 80058a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80058a2:	e17d      	b.n	8005ba0 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d006      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x98>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x98>
 80058b0:	1cbb      	adds	r3, r7, #2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80058b8:	232b      	movs	r3, #43	; 0x2b
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]
    goto error;
 80058c0:	e16e      	b.n	8005ba0 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2251      	movs	r2, #81	; 0x51
 80058c6:	5c9b      	ldrb	r3, [r3, r2]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d003      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2251      	movs	r2, #81	; 0x51
 80058d2:	2105      	movs	r1, #5
 80058d4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1cba      	adds	r2, r7, #2
 80058e6:	8812      	ldrh	r2, [r2, #0]
 80058e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1cba      	adds	r2, r7, #2
 80058ee:	8812      	ldrh	r2, [r2, #0]
 80058f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	1cba      	adds	r2, r7, #2
 80058fc:	8812      	ldrh	r2, [r2, #0]
 80058fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	1cba      	adds	r2, r7, #2
 8005904:	8812      	ldrh	r2, [r2, #0]
 8005906:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2240      	movs	r2, #64	; 0x40
 800591c:	4013      	ands	r3, r2
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d007      	beq.n	8005932 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2140      	movs	r1, #64	; 0x40
 800592e:	430a      	orrs	r2, r1
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	429a      	cmp	r2, r3
 800593c:	d000      	beq.n	8005940 <HAL_SPI_TransmitReceive+0x120>
 800593e:	e07f      	b.n	8005a40 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x134>
 8005948:	231a      	movs	r3, #26
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d000      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x134>
 8005952:	e06a      	b.n	8005a2a <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005978:	e057      	b.n	8005a2a <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2202      	movs	r2, #2
 8005982:	4013      	ands	r3, r2
 8005984:	2b02      	cmp	r3, #2
 8005986:	d11b      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x1a0>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x1a0>
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d113      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	881a      	ldrh	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2201      	movs	r2, #1
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d119      	bne.n	8005a02 <HAL_SPI_TransmitReceive+0x1e2>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d014      	beq.n	8005a02 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	b292      	uxth	r2, r2
 80059e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	1c9a      	adds	r2, r3, #2
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059fe:	2301      	movs	r3, #1
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a02:	f7fe f9af 	bl	8003d64 <HAL_GetTick>
 8005a06:	0002      	movs	r2, r0
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d80b      	bhi.n	8005a2a <HAL_SPI_TransmitReceive+0x20a>
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	3301      	adds	r3, #1
 8005a16:	d008      	beq.n	8005a2a <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8005a18:	232b      	movs	r3, #43	; 0x2b
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2251      	movs	r2, #81	; 0x51
 8005a24:	2101      	movs	r1, #1
 8005a26:	5499      	strb	r1, [r3, r2]
        goto error;
 8005a28:	e0ba      	b.n	8005ba0 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1a2      	bne.n	800597a <HAL_SPI_TransmitReceive+0x15a>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d19d      	bne.n	800597a <HAL_SPI_TransmitReceive+0x15a>
 8005a3e:	e083      	b.n	8005b48 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x234>
 8005a48:	231a      	movs	r3, #26
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d000      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x234>
 8005a52:	e06f      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	7812      	ldrb	r2, [r2, #0]
 8005a60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a7a:	e05b      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2202      	movs	r2, #2
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d11c      	bne.n	8005ac4 <HAL_SPI_TransmitReceive+0x2a4>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d017      	beq.n	8005ac4 <HAL_SPI_TransmitReceive+0x2a4>
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d114      	bne.n	8005ac4 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	7812      	ldrb	r2, [r2, #0]
 8005aa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2201      	movs	r2, #1
 8005acc:	4013      	ands	r3, r2
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d119      	bne.n	8005b06 <HAL_SPI_TransmitReceive+0x2e6>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d014      	beq.n	8005b06 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b02:	2301      	movs	r3, #1
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b06:	f7fe f92d 	bl	8003d64 <HAL_GetTick>
 8005b0a:	0002      	movs	r2, r0
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d802      	bhi.n	8005b1c <HAL_SPI_TransmitReceive+0x2fc>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	3301      	adds	r3, #1
 8005b1a:	d102      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x302>
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d108      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8005b22:	232b      	movs	r3, #43	; 0x2b
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	2203      	movs	r2, #3
 8005b28:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2251      	movs	r2, #81	; 0x51
 8005b2e:	2101      	movs	r1, #1
 8005b30:	5499      	strb	r1, [r3, r2]
        goto error;
 8005b32:	e035      	b.n	8005ba0 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d19e      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x25c>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d199      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f000 f92a 	bl	8005da8 <SPI_EndRxTxTransaction>
 8005b54:	1e03      	subs	r3, r0, #0
 8005b56:	d007      	beq.n	8005b68 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8005b58:	232b      	movs	r3, #43	; 0x2b
 8005b5a:	18fb      	adds	r3, r7, r3
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b66:	e01b      	b.n	8005ba0 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8005b8e:	232b      	movs	r3, #43	; 0x2b
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e003      	b.n	8005ba0 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2251      	movs	r2, #81	; 0x51
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2250      	movs	r2, #80	; 0x50
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005ba8:	232b      	movs	r3, #43	; 0x2b
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	781b      	ldrb	r3, [r3, #0]
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b00c      	add	sp, #48	; 0x30
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	1dfb      	adds	r3, r7, #7
 8005bc6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bc8:	f7fe f8cc 	bl	8003d64 <HAL_GetTick>
 8005bcc:	0002      	movs	r2, r0
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	1a9b      	subs	r3, r3, r2
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	18d3      	adds	r3, r2, r3
 8005bd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bd8:	f7fe f8c4 	bl	8003d64 <HAL_GetTick>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005be0:	4b3a      	ldr	r3, [pc, #232]	; (8005ccc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	015b      	lsls	r3, r3, #5
 8005be6:	0d1b      	lsrs	r3, r3, #20
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	4353      	muls	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bee:	e058      	b.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	d055      	beq.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bf6:	f7fe f8b5 	bl	8003d64 <HAL_GetTick>
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d902      	bls.n	8005c0c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d142      	bne.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	21e0      	movs	r1, #224	; 0xe0
 8005c18:	438a      	bics	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	2382      	movs	r3, #130	; 0x82
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d113      	bne.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d005      	beq.n	8005c40 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d107      	bne.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2140      	movs	r1, #64	; 0x40
 8005c4c:	438a      	bics	r2, r1
 8005c4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	019b      	lsls	r3, r3, #6
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d110      	bne.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	491a      	ldr	r1, [pc, #104]	; (8005cd0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005c68:	400a      	ands	r2, r1
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2180      	movs	r1, #128	; 0x80
 8005c78:	0189      	lsls	r1, r1, #6
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2251      	movs	r2, #81	; 0x51
 8005c82:	2101      	movs	r1, #1
 8005c84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2250      	movs	r2, #80	; 0x50
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e017      	b.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	4013      	ands	r3, r2
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	425a      	negs	r2, r3
 8005cb2:	4153      	adcs	r3, r2
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	001a      	movs	r2, r3
 8005cb8:	1dfb      	adds	r3, r7, #7
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d197      	bne.n	8005bf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b008      	add	sp, #32
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	20000000 	.word	0x20000000
 8005cd0:	ffffdfff 	.word	0xffffdfff

08005cd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	2382      	movs	r3, #130	; 0x82
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d113      	bne.n	8005d14 <SPI_EndRxTransaction+0x40>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d005      	beq.n	8005d04 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d107      	bne.n	8005d14 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2140      	movs	r1, #64	; 0x40
 8005d10:	438a      	bics	r2, r1
 8005d12:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	2382      	movs	r3, #130	; 0x82
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d12b      	bne.n	8005d78 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d012      	beq.n	8005d52 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	0013      	movs	r3, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	2180      	movs	r1, #128	; 0x80
 8005d3a:	f7ff ff3d 	bl	8005bb8 <SPI_WaitFlagStateUntilTimeout>
 8005d3e:	1e03      	subs	r3, r0, #0
 8005d40:	d02d      	beq.n	8005d9e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d46:	2220      	movs	r2, #32
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e026      	b.n	8005da0 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	0013      	movs	r3, r2
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2101      	movs	r1, #1
 8005d60:	f7ff ff2a 	bl	8005bb8 <SPI_WaitFlagStateUntilTimeout>
 8005d64:	1e03      	subs	r3, r0, #0
 8005d66:	d01a      	beq.n	8005d9e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e013      	b.n	8005da0 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	0013      	movs	r3, r2
 8005d82:	2200      	movs	r2, #0
 8005d84:	2101      	movs	r1, #1
 8005d86:	f7ff ff17 	bl	8005bb8 <SPI_WaitFlagStateUntilTimeout>
 8005d8a:	1e03      	subs	r3, r0, #0
 8005d8c:	d007      	beq.n	8005d9e <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d92:	2220      	movs	r2, #32
 8005d94:	431a      	orrs	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e000      	b.n	8005da0 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	0018      	movs	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b004      	add	sp, #16
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <SPI_EndRxTxTransaction+0x84>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	491d      	ldr	r1, [pc, #116]	; (8005e30 <SPI_EndRxTxTransaction+0x88>)
 8005dba:	0018      	movs	r0, r3
 8005dbc:	f7fa f9c0 	bl	8000140 <__udivsi3>
 8005dc0:	0003      	movs	r3, r0
 8005dc2:	001a      	movs	r2, r3
 8005dc4:	0013      	movs	r3, r2
 8005dc6:	015b      	lsls	r3, r3, #5
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	189b      	adds	r3, r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	2382      	movs	r3, #130	; 0x82
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d112      	bne.n	8005e04 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	0013      	movs	r3, r2
 8005de8:	2200      	movs	r2, #0
 8005dea:	2180      	movs	r1, #128	; 0x80
 8005dec:	f7ff fee4 	bl	8005bb8 <SPI_WaitFlagStateUntilTimeout>
 8005df0:	1e03      	subs	r3, r0, #0
 8005df2:	d016      	beq.n	8005e22 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df8:	2220      	movs	r2, #32
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e00f      	b.n	8005e24 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2280      	movs	r2, #128	; 0x80
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b80      	cmp	r3, #128	; 0x80
 8005e1c:	d0f2      	beq.n	8005e04 <SPI_EndRxTxTransaction+0x5c>
 8005e1e:	e000      	b.n	8005e22 <SPI_EndRxTxTransaction+0x7a>
        break;
 8005e20:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b006      	add	sp, #24
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20000000 	.word	0x20000000
 8005e30:	016e3600 	.word	0x016e3600

08005e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e032      	b.n	8005eac <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2239      	movs	r2, #57	; 0x39
 8005e4a:	5c9b      	ldrb	r3, [r3, r2]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2238      	movs	r2, #56	; 0x38
 8005e56:	2100      	movs	r1, #0
 8005e58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f7fd fdb1 	bl	80039c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2239      	movs	r2, #57	; 0x39
 8005e66:	2102      	movs	r1, #2
 8005e68:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	0019      	movs	r1, r3
 8005e74:	0010      	movs	r0, r2
 8005e76:	f000 fa4b 	bl	8006310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	223e      	movs	r2, #62	; 0x3e
 8005e7e:	2101      	movs	r1, #1
 8005e80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	223a      	movs	r2, #58	; 0x3a
 8005e86:	2101      	movs	r1, #1
 8005e88:	5499      	strb	r1, [r3, r2]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	223b      	movs	r2, #59	; 0x3b
 8005e8e:	2101      	movs	r1, #1
 8005e90:	5499      	strb	r1, [r3, r2]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	223c      	movs	r2, #60	; 0x3c
 8005e96:	2101      	movs	r1, #1
 8005e98:	5499      	strb	r1, [r3, r2]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	223d      	movs	r2, #61	; 0x3d
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2239      	movs	r2, #57	; 0x39
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	0018      	movs	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b002      	add	sp, #8
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2239      	movs	r2, #57	; 0x39
 8005ec0:	5c9b      	ldrb	r3, [r3, r2]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d001      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e03b      	b.n	8005f44 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2239      	movs	r2, #57	; 0x39
 8005ed0:	2102      	movs	r1, #2
 8005ed2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2101      	movs	r1, #1
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	05db      	lsls	r3, r3, #23
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d00e      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x5a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <HAL_TIM_Base_Start_IT+0x98>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x5a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <HAL_TIM_Base_Start_IT+0x9c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x5a>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <HAL_TIM_Base_Start_IT+0xa0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d111      	bne.n	8005f32 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2207      	movs	r2, #7
 8005f16:	4013      	ands	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b06      	cmp	r3, #6
 8005f1e:	d010      	beq.n	8005f42 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f30:	e007      	b.n	8005f42 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	0018      	movs	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b004      	add	sp, #16
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40010800 	.word	0x40010800
 8005f54:	40011400 	.word	0x40011400

08005f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2202      	movs	r2, #2
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d124      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2202      	movs	r2, #2
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d11d      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2203      	movs	r2, #3
 8005f82:	4252      	negs	r2, r2
 8005f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	2203      	movs	r2, #3
 8005f94:	4013      	ands	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f000 f9a0 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e007      	b.n	8005fb2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f000 f993 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	0018      	movs	r0, r3
 8005fae:	f000 f99f 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d125      	bne.n	8006012 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d11e      	bne.n	8006012 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2205      	movs	r2, #5
 8005fda:	4252      	negs	r2, r2
 8005fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	23c0      	movs	r3, #192	; 0xc0
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f000 f973 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 8005ffa:	e007      	b.n	800600c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	0018      	movs	r0, r3
 8006000:	f000 f966 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	0018      	movs	r0, r3
 8006008:	f000 f972 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2208      	movs	r2, #8
 800601a:	4013      	ands	r3, r2
 800601c:	2b08      	cmp	r3, #8
 800601e:	d124      	bne.n	800606a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	2208      	movs	r2, #8
 8006028:	4013      	ands	r3, r2
 800602a:	2b08      	cmp	r3, #8
 800602c:	d11d      	bne.n	800606a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2209      	movs	r2, #9
 8006034:	4252      	negs	r2, r2
 8006036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2204      	movs	r2, #4
 800603c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	2203      	movs	r2, #3
 8006046:	4013      	ands	r3, r2
 8006048:	d004      	beq.n	8006054 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	0018      	movs	r0, r3
 800604e:	f000 f947 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 8006052:	e007      	b.n	8006064 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	0018      	movs	r0, r3
 8006058:	f000 f93a 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	0018      	movs	r0, r3
 8006060:	f000 f946 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2210      	movs	r2, #16
 8006072:	4013      	ands	r3, r2
 8006074:	2b10      	cmp	r3, #16
 8006076:	d125      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	2210      	movs	r2, #16
 8006080:	4013      	ands	r3, r2
 8006082:	2b10      	cmp	r3, #16
 8006084:	d11e      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2211      	movs	r2, #17
 800608c:	4252      	negs	r2, r2
 800608e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2208      	movs	r2, #8
 8006094:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	23c0      	movs	r3, #192	; 0xc0
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4013      	ands	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	0018      	movs	r0, r3
 80060a8:	f000 f91a 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 80060ac:	e007      	b.n	80060be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f000 f90d 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	0018      	movs	r0, r3
 80060ba:	f000 f919 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2201      	movs	r2, #1
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d10f      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	4013      	ands	r3, r2
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d108      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2202      	movs	r2, #2
 80060e6:	4252      	negs	r2, r2
 80060e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	0018      	movs	r0, r3
 80060ee:	f7fd f93b 	bl	8003368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2240      	movs	r2, #64	; 0x40
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b40      	cmp	r3, #64	; 0x40
 80060fe:	d10f      	bne.n	8006120 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2240      	movs	r2, #64	; 0x40
 8006108:	4013      	ands	r3, r2
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d108      	bne.n	8006120 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2241      	movs	r2, #65	; 0x41
 8006114:	4252      	negs	r2, r2
 8006116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	0018      	movs	r0, r3
 800611c:	f000 f8f0 	bl	8006300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006120:	46c0      	nop			; (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b002      	add	sp, #8
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006132:	230f      	movs	r3, #15
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2238      	movs	r2, #56	; 0x38
 800613e:	5c9b      	ldrb	r3, [r3, r2]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_TIM_ConfigClockSource+0x20>
 8006144:	2302      	movs	r3, #2
 8006146:	e0bc      	b.n	80062c2 <HAL_TIM_ConfigClockSource+0x19a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2238      	movs	r2, #56	; 0x38
 800614c:	2101      	movs	r1, #1
 800614e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2239      	movs	r2, #57	; 0x39
 8006154:	2102      	movs	r1, #2
 8006156:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2277      	movs	r2, #119	; 0x77
 8006164:	4393      	bics	r3, r2
 8006166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4a58      	ldr	r2, [pc, #352]	; (80062cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800616c:	4013      	ands	r3, r2
 800616e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2280      	movs	r2, #128	; 0x80
 800617e:	0192      	lsls	r2, r2, #6
 8006180:	4293      	cmp	r3, r2
 8006182:	d040      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0xde>
 8006184:	2280      	movs	r2, #128	; 0x80
 8006186:	0192      	lsls	r2, r2, #6
 8006188:	4293      	cmp	r3, r2
 800618a:	d900      	bls.n	800618e <HAL_TIM_ConfigClockSource+0x66>
 800618c:	e088      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x178>
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	0152      	lsls	r2, r2, #5
 8006192:	4293      	cmp	r3, r2
 8006194:	d100      	bne.n	8006198 <HAL_TIM_ConfigClockSource+0x70>
 8006196:	e088      	b.n	80062aa <HAL_TIM_ConfigClockSource+0x182>
 8006198:	2280      	movs	r2, #128	; 0x80
 800619a:	0152      	lsls	r2, r2, #5
 800619c:	4293      	cmp	r3, r2
 800619e:	d900      	bls.n	80061a2 <HAL_TIM_ConfigClockSource+0x7a>
 80061a0:	e07e      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x178>
 80061a2:	2b70      	cmp	r3, #112	; 0x70
 80061a4:	d018      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0xb0>
 80061a6:	d900      	bls.n	80061aa <HAL_TIM_ConfigClockSource+0x82>
 80061a8:	e07a      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x178>
 80061aa:	2b60      	cmp	r3, #96	; 0x60
 80061ac:	d04f      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x126>
 80061ae:	d900      	bls.n	80061b2 <HAL_TIM_ConfigClockSource+0x8a>
 80061b0:	e076      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x178>
 80061b2:	2b50      	cmp	r3, #80	; 0x50
 80061b4:	d03b      	beq.n	800622e <HAL_TIM_ConfigClockSource+0x106>
 80061b6:	d900      	bls.n	80061ba <HAL_TIM_ConfigClockSource+0x92>
 80061b8:	e072      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x178>
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	d057      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x146>
 80061be:	d900      	bls.n	80061c2 <HAL_TIM_ConfigClockSource+0x9a>
 80061c0:	e06e      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x178>
 80061c2:	2b30      	cmp	r3, #48	; 0x30
 80061c4:	d063      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x166>
 80061c6:	d86b      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x178>
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d060      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x166>
 80061cc:	d868      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x178>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d05d      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x166>
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d05b      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x166>
 80061d6:	e063      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6899      	ldr	r1, [r3, #8]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f000 f96a 	bl	80064c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2277      	movs	r2, #119	; 0x77
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	609a      	str	r2, [r3, #8]
      break;
 8006204:	e052      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	6899      	ldr	r1, [r3, #8]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f000 f953 	bl	80064c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2180      	movs	r1, #128	; 0x80
 8006226:	01c9      	lsls	r1, r1, #7
 8006228:	430a      	orrs	r2, r1
 800622a:	609a      	str	r2, [r3, #8]
      break;
 800622c:	e03e      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	001a      	movs	r2, r3
 800623c:	f000 f8c6 	bl	80063cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2150      	movs	r1, #80	; 0x50
 8006246:	0018      	movs	r0, r3
 8006248:	f000 f920 	bl	800648c <TIM_ITRx_SetConfig>
      break;
 800624c:	e02e      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	6859      	ldr	r1, [r3, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	001a      	movs	r2, r3
 800625c:	f000 f8e4 	bl	8006428 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2160      	movs	r1, #96	; 0x60
 8006266:	0018      	movs	r0, r3
 8006268:	f000 f910 	bl	800648c <TIM_ITRx_SetConfig>
      break;
 800626c:	e01e      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6859      	ldr	r1, [r3, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	001a      	movs	r2, r3
 800627c:	f000 f8a6 	bl	80063cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2140      	movs	r1, #64	; 0x40
 8006286:	0018      	movs	r0, r3
 8006288:	f000 f900 	bl	800648c <TIM_ITRx_SetConfig>
      break;
 800628c:	e00e      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	0019      	movs	r1, r3
 8006298:	0010      	movs	r0, r2
 800629a:	f000 f8f7 	bl	800648c <TIM_ITRx_SetConfig>
      break;
 800629e:	e005      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80062a0:	230f      	movs	r3, #15
 80062a2:	18fb      	adds	r3, r7, r3
 80062a4:	2201      	movs	r2, #1
 80062a6:	701a      	strb	r2, [r3, #0]
      break;
 80062a8:	e000      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80062aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2239      	movs	r2, #57	; 0x39
 80062b0:	2101      	movs	r1, #1
 80062b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2238      	movs	r2, #56	; 0x38
 80062b8:	2100      	movs	r1, #0
 80062ba:	5499      	strb	r1, [r3, r2]

  return status;
 80062bc:	230f      	movs	r3, #15
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	781b      	ldrb	r3, [r3, #0]
}
 80062c2:	0018      	movs	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b004      	add	sp, #16
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	ffff00ff 	.word	0xffff00ff

080062d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062d8:	46c0      	nop			; (mov r8, r8)
 80062da:	46bd      	mov	sp, r7
 80062dc:	b002      	add	sp, #8
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062e8:	46c0      	nop			; (mov r8, r8)
 80062ea:	46bd      	mov	sp, r7
 80062ec:	b002      	add	sp, #8
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b002      	add	sp, #8
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b002      	add	sp, #8
 800630e:	bd80      	pop	{r7, pc}

08006310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	2380      	movs	r3, #128	; 0x80
 8006324:	05db      	lsls	r3, r3, #23
 8006326:	429a      	cmp	r2, r3
 8006328:	d00b      	beq.n	8006342 <TIM_Base_SetConfig+0x32>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a23      	ldr	r2, [pc, #140]	; (80063bc <TIM_Base_SetConfig+0xac>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d007      	beq.n	8006342 <TIM_Base_SetConfig+0x32>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <TIM_Base_SetConfig+0xb0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_Base_SetConfig+0x32>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <TIM_Base_SetConfig+0xb4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d108      	bne.n	8006354 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2270      	movs	r2, #112	; 0x70
 8006346:	4393      	bics	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	2380      	movs	r3, #128	; 0x80
 8006358:	05db      	lsls	r3, r3, #23
 800635a:	429a      	cmp	r2, r3
 800635c:	d00b      	beq.n	8006376 <TIM_Base_SetConfig+0x66>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a16      	ldr	r2, [pc, #88]	; (80063bc <TIM_Base_SetConfig+0xac>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d007      	beq.n	8006376 <TIM_Base_SetConfig+0x66>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <TIM_Base_SetConfig+0xb0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d003      	beq.n	8006376 <TIM_Base_SetConfig+0x66>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <TIM_Base_SetConfig+0xb4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d108      	bne.n	8006388 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <TIM_Base_SetConfig+0xb8>)
 800637a:	4013      	ands	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2280      	movs	r2, #128	; 0x80
 800638c:	4393      	bics	r3, r2
 800638e:	001a      	movs	r2, r3
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	615a      	str	r2, [r3, #20]
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b004      	add	sp, #16
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40010800 	.word	0x40010800
 80063c4:	40011400 	.word	0x40011400
 80063c8:	fffffcff 	.word	0xfffffcff

080063cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	2201      	movs	r2, #1
 80063e4:	4393      	bics	r3, r2
 80063e6:	001a      	movs	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	22f0      	movs	r2, #240	; 0xf0
 80063f6:	4393      	bics	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	220a      	movs	r2, #10
 8006408:	4393      	bics	r3, r2
 800640a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	621a      	str	r2, [r3, #32]
}
 8006420:	46c0      	nop			; (mov r8, r8)
 8006422:	46bd      	mov	sp, r7
 8006424:	b006      	add	sp, #24
 8006426:	bd80      	pop	{r7, pc}

08006428 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	2210      	movs	r2, #16
 800643a:	4393      	bics	r3, r2
 800643c:	001a      	movs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	4a0d      	ldr	r2, [pc, #52]	; (8006488 <TIM_TI2_ConfigInputStage+0x60>)
 8006452:	4013      	ands	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	031b      	lsls	r3, r3, #12
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	22a0      	movs	r2, #160	; 0xa0
 8006464:	4393      	bics	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	46bd      	mov	sp, r7
 8006482:	b006      	add	sp, #24
 8006484:	bd80      	pop	{r7, pc}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	ffff0fff 	.word	0xffff0fff

0800648c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2270      	movs	r2, #112	; 0x70
 80064a0:	4393      	bics	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	2207      	movs	r2, #7
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	609a      	str	r2, [r3, #8]
}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b004      	add	sp, #16
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	4a09      	ldr	r2, [pc, #36]	; (80064fc <TIM_ETR_SetConfig+0x3c>)
 80064d8:	4013      	ands	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	021a      	lsls	r2, r3, #8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	609a      	str	r2, [r3, #8]
}
 80064f4:	46c0      	nop			; (mov r8, r8)
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b006      	add	sp, #24
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	ffff00ff 	.word	0xffff00ff

08006500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2238      	movs	r2, #56	; 0x38
 800650e:	5c9b      	ldrb	r3, [r3, r2]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006514:	2302      	movs	r3, #2
 8006516:	e047      	b.n	80065a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2238      	movs	r2, #56	; 0x38
 800651c:	2101      	movs	r1, #1
 800651e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2239      	movs	r2, #57	; 0x39
 8006524:	2102      	movs	r1, #2
 8006526:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2270      	movs	r2, #112	; 0x70
 800653c:	4393      	bics	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	2380      	movs	r3, #128	; 0x80
 8006558:	05db      	lsls	r3, r3, #23
 800655a:	429a      	cmp	r2, r3
 800655c:	d00e      	beq.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d009      	beq.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a11      	ldr	r2, [pc, #68]	; (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d004      	beq.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a10      	ldr	r2, [pc, #64]	; (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d10c      	bne.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2280      	movs	r2, #128	; 0x80
 8006580:	4393      	bics	r3, r2
 8006582:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	4313      	orrs	r3, r2
 800658c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2239      	movs	r2, #57	; 0x39
 800659a:	2101      	movs	r1, #1
 800659c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2238      	movs	r2, #56	; 0x38
 80065a2:	2100      	movs	r1, #0
 80065a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	0018      	movs	r0, r3
 80065aa:	46bd      	mov	sp, r7
 80065ac:	b004      	add	sp, #16
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40010800 	.word	0x40010800
 80065b8:	40011400 	.word	0x40011400

080065bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e044      	b.n	8006658 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d107      	bne.n	80065e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2278      	movs	r2, #120	; 0x78
 80065da:	2100      	movs	r1, #0
 80065dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7fd fa0d 	bl	8003a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2224      	movs	r2, #36	; 0x24
 80065ea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2101      	movs	r1, #1
 80065f8:	438a      	bics	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	0018      	movs	r0, r3
 8006600:	f000 f8d0 	bl	80067a4 <UART_SetConfig>
 8006604:	0003      	movs	r3, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e024      	b.n	8006658 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	0018      	movs	r0, r3
 800661a:	f000 fb61 	bl	8006ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	490d      	ldr	r1, [pc, #52]	; (8006660 <HAL_UART_Init+0xa4>)
 800662a:	400a      	ands	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	212a      	movs	r1, #42	; 0x2a
 800663a:	438a      	bics	r2, r1
 800663c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2101      	movs	r1, #1
 800664a:	430a      	orrs	r2, r1
 800664c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f000 fbf9 	bl	8006e48 <UART_CheckIdleState>
 8006656:	0003      	movs	r3, r0
}
 8006658:	0018      	movs	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	b002      	add	sp, #8
 800665e:	bd80      	pop	{r7, pc}
 8006660:	ffffb7ff 	.word	0xffffb7ff

08006664 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	1dbb      	adds	r3, r7, #6
 8006672:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006678:	2b20      	cmp	r3, #32
 800667a:	d000      	beq.n	800667e <HAL_UART_Transmit+0x1a>
 800667c:	e08c      	b.n	8006798 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <HAL_UART_Transmit+0x28>
 8006684:	1dbb      	adds	r3, r7, #6
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e084      	b.n	800679a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	2380      	movs	r3, #128	; 0x80
 8006696:	015b      	lsls	r3, r3, #5
 8006698:	429a      	cmp	r2, r3
 800669a:	d109      	bne.n	80066b0 <HAL_UART_Transmit+0x4c>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d105      	bne.n	80066b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2201      	movs	r2, #1
 80066a8:	4013      	ands	r3, r2
 80066aa:	d001      	beq.n	80066b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e074      	b.n	800679a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2284      	movs	r2, #132	; 0x84
 80066b4:	2100      	movs	r1, #0
 80066b6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2221      	movs	r2, #33	; 0x21
 80066bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066be:	f7fd fb51 	bl	8003d64 <HAL_GetTick>
 80066c2:	0003      	movs	r3, r0
 80066c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1dba      	adds	r2, r7, #6
 80066ca:	2150      	movs	r1, #80	; 0x50
 80066cc:	8812      	ldrh	r2, [r2, #0]
 80066ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	1dba      	adds	r2, r7, #6
 80066d4:	2152      	movs	r1, #82	; 0x52
 80066d6:	8812      	ldrh	r2, [r2, #0]
 80066d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	2380      	movs	r3, #128	; 0x80
 80066e0:	015b      	lsls	r3, r3, #5
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d108      	bne.n	80066f8 <HAL_UART_Transmit+0x94>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	61bb      	str	r3, [r7, #24]
 80066f6:	e003      	b.n	8006700 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006700:	e02f      	b.n	8006762 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	0013      	movs	r3, r2
 800670c:	2200      	movs	r2, #0
 800670e:	2180      	movs	r1, #128	; 0x80
 8006710:	f000 fc42 	bl	8006f98 <UART_WaitOnFlagUntilTimeout>
 8006714:	1e03      	subs	r3, r0, #0
 8006716:	d004      	beq.n	8006722 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e03b      	b.n	800679a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	001a      	movs	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	05d2      	lsls	r2, r2, #23
 8006734:	0dd2      	lsrs	r2, r2, #23
 8006736:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	3302      	adds	r3, #2
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	e007      	b.n	8006750 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2252      	movs	r2, #82	; 0x52
 8006754:	5a9b      	ldrh	r3, [r3, r2]
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b299      	uxth	r1, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2252      	movs	r2, #82	; 0x52
 8006760:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2252      	movs	r2, #82	; 0x52
 8006766:	5a9b      	ldrh	r3, [r3, r2]
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1c9      	bne.n	8006702 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	0013      	movs	r3, r2
 8006778:	2200      	movs	r2, #0
 800677a:	2140      	movs	r1, #64	; 0x40
 800677c:	f000 fc0c 	bl	8006f98 <UART_WaitOnFlagUntilTimeout>
 8006780:	1e03      	subs	r3, r0, #0
 8006782:	d004      	beq.n	800678e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e005      	b.n	800679a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	e000      	b.n	800679a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006798:	2302      	movs	r3, #2
  }
}
 800679a:	0018      	movs	r0, r3
 800679c:	46bd      	mov	sp, r7
 800679e:	b008      	add	sp, #32
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a4:	b5b0      	push	{r4, r5, r7, lr}
 80067a6:	b08e      	sub	sp, #56	; 0x38
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067ac:	231a      	movs	r3, #26
 80067ae:	2218      	movs	r2, #24
 80067b0:	189b      	adds	r3, r3, r2
 80067b2:	19db      	adds	r3, r3, r7
 80067b4:	2200      	movs	r2, #0
 80067b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	431a      	orrs	r2, r3
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4ac3      	ldr	r2, [pc, #780]	; (8006ae4 <UART_SetConfig+0x340>)
 80067d8:	4013      	ands	r3, r2
 80067da:	0019      	movs	r1, r3
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e2:	430a      	orrs	r2, r1
 80067e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	4abe      	ldr	r2, [pc, #760]	; (8006ae8 <UART_SetConfig+0x344>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	0019      	movs	r1, r3
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4ab8      	ldr	r2, [pc, #736]	; (8006aec <UART_SetConfig+0x348>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006814:	4313      	orrs	r3, r2
 8006816:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	4ab4      	ldr	r2, [pc, #720]	; (8006af0 <UART_SetConfig+0x34c>)
 8006820:	4013      	ands	r3, r2
 8006822:	0019      	movs	r1, r3
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682a:	430a      	orrs	r2, r1
 800682c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4ab0      	ldr	r2, [pc, #704]	; (8006af4 <UART_SetConfig+0x350>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d131      	bne.n	800689c <UART_SetConfig+0xf8>
 8006838:	4baf      	ldr	r3, [pc, #700]	; (8006af8 <UART_SetConfig+0x354>)
 800683a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683c:	2203      	movs	r2, #3
 800683e:	4013      	ands	r3, r2
 8006840:	2b03      	cmp	r3, #3
 8006842:	d01d      	beq.n	8006880 <UART_SetConfig+0xdc>
 8006844:	d823      	bhi.n	800688e <UART_SetConfig+0xea>
 8006846:	2b02      	cmp	r3, #2
 8006848:	d00c      	beq.n	8006864 <UART_SetConfig+0xc0>
 800684a:	d820      	bhi.n	800688e <UART_SetConfig+0xea>
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <UART_SetConfig+0xb2>
 8006850:	2b01      	cmp	r3, #1
 8006852:	d00e      	beq.n	8006872 <UART_SetConfig+0xce>
 8006854:	e01b      	b.n	800688e <UART_SetConfig+0xea>
 8006856:	231b      	movs	r3, #27
 8006858:	2218      	movs	r2, #24
 800685a:	189b      	adds	r3, r3, r2
 800685c:	19db      	adds	r3, r3, r7
 800685e:	2201      	movs	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	e0b4      	b.n	80069ce <UART_SetConfig+0x22a>
 8006864:	231b      	movs	r3, #27
 8006866:	2218      	movs	r2, #24
 8006868:	189b      	adds	r3, r3, r2
 800686a:	19db      	adds	r3, r3, r7
 800686c:	2202      	movs	r2, #2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	e0ad      	b.n	80069ce <UART_SetConfig+0x22a>
 8006872:	231b      	movs	r3, #27
 8006874:	2218      	movs	r2, #24
 8006876:	189b      	adds	r3, r3, r2
 8006878:	19db      	adds	r3, r3, r7
 800687a:	2204      	movs	r2, #4
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e0a6      	b.n	80069ce <UART_SetConfig+0x22a>
 8006880:	231b      	movs	r3, #27
 8006882:	2218      	movs	r2, #24
 8006884:	189b      	adds	r3, r3, r2
 8006886:	19db      	adds	r3, r3, r7
 8006888:	2208      	movs	r2, #8
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	e09f      	b.n	80069ce <UART_SetConfig+0x22a>
 800688e:	231b      	movs	r3, #27
 8006890:	2218      	movs	r2, #24
 8006892:	189b      	adds	r3, r3, r2
 8006894:	19db      	adds	r3, r3, r7
 8006896:	2210      	movs	r2, #16
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	e098      	b.n	80069ce <UART_SetConfig+0x22a>
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a96      	ldr	r2, [pc, #600]	; (8006afc <UART_SetConfig+0x358>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d131      	bne.n	800690a <UART_SetConfig+0x166>
 80068a6:	4b94      	ldr	r3, [pc, #592]	; (8006af8 <UART_SetConfig+0x354>)
 80068a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068aa:	220c      	movs	r2, #12
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b0c      	cmp	r3, #12
 80068b0:	d01d      	beq.n	80068ee <UART_SetConfig+0x14a>
 80068b2:	d823      	bhi.n	80068fc <UART_SetConfig+0x158>
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d00c      	beq.n	80068d2 <UART_SetConfig+0x12e>
 80068b8:	d820      	bhi.n	80068fc <UART_SetConfig+0x158>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <UART_SetConfig+0x120>
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d00e      	beq.n	80068e0 <UART_SetConfig+0x13c>
 80068c2:	e01b      	b.n	80068fc <UART_SetConfig+0x158>
 80068c4:	231b      	movs	r3, #27
 80068c6:	2218      	movs	r2, #24
 80068c8:	189b      	adds	r3, r3, r2
 80068ca:	19db      	adds	r3, r3, r7
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e07d      	b.n	80069ce <UART_SetConfig+0x22a>
 80068d2:	231b      	movs	r3, #27
 80068d4:	2218      	movs	r2, #24
 80068d6:	189b      	adds	r3, r3, r2
 80068d8:	19db      	adds	r3, r3, r7
 80068da:	2202      	movs	r2, #2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	e076      	b.n	80069ce <UART_SetConfig+0x22a>
 80068e0:	231b      	movs	r3, #27
 80068e2:	2218      	movs	r2, #24
 80068e4:	189b      	adds	r3, r3, r2
 80068e6:	19db      	adds	r3, r3, r7
 80068e8:	2204      	movs	r2, #4
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	e06f      	b.n	80069ce <UART_SetConfig+0x22a>
 80068ee:	231b      	movs	r3, #27
 80068f0:	2218      	movs	r2, #24
 80068f2:	189b      	adds	r3, r3, r2
 80068f4:	19db      	adds	r3, r3, r7
 80068f6:	2208      	movs	r2, #8
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	e068      	b.n	80069ce <UART_SetConfig+0x22a>
 80068fc:	231b      	movs	r3, #27
 80068fe:	2218      	movs	r2, #24
 8006900:	189b      	adds	r3, r3, r2
 8006902:	19db      	adds	r3, r3, r7
 8006904:	2210      	movs	r2, #16
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	e061      	b.n	80069ce <UART_SetConfig+0x22a>
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a7c      	ldr	r2, [pc, #496]	; (8006b00 <UART_SetConfig+0x35c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d106      	bne.n	8006922 <UART_SetConfig+0x17e>
 8006914:	231b      	movs	r3, #27
 8006916:	2218      	movs	r2, #24
 8006918:	189b      	adds	r3, r3, r2
 800691a:	19db      	adds	r3, r3, r7
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	e055      	b.n	80069ce <UART_SetConfig+0x22a>
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a77      	ldr	r2, [pc, #476]	; (8006b04 <UART_SetConfig+0x360>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d106      	bne.n	800693a <UART_SetConfig+0x196>
 800692c:	231b      	movs	r3, #27
 800692e:	2218      	movs	r2, #24
 8006930:	189b      	adds	r3, r3, r2
 8006932:	19db      	adds	r3, r3, r7
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e049      	b.n	80069ce <UART_SetConfig+0x22a>
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a6b      	ldr	r2, [pc, #428]	; (8006aec <UART_SetConfig+0x348>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d13e      	bne.n	80069c2 <UART_SetConfig+0x21e>
 8006944:	4b6c      	ldr	r3, [pc, #432]	; (8006af8 <UART_SetConfig+0x354>)
 8006946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006948:	23c0      	movs	r3, #192	; 0xc0
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	4013      	ands	r3, r2
 800694e:	22c0      	movs	r2, #192	; 0xc0
 8006950:	0112      	lsls	r2, r2, #4
 8006952:	4293      	cmp	r3, r2
 8006954:	d027      	beq.n	80069a6 <UART_SetConfig+0x202>
 8006956:	22c0      	movs	r2, #192	; 0xc0
 8006958:	0112      	lsls	r2, r2, #4
 800695a:	4293      	cmp	r3, r2
 800695c:	d82a      	bhi.n	80069b4 <UART_SetConfig+0x210>
 800695e:	2280      	movs	r2, #128	; 0x80
 8006960:	0112      	lsls	r2, r2, #4
 8006962:	4293      	cmp	r3, r2
 8006964:	d011      	beq.n	800698a <UART_SetConfig+0x1e6>
 8006966:	2280      	movs	r2, #128	; 0x80
 8006968:	0112      	lsls	r2, r2, #4
 800696a:	4293      	cmp	r3, r2
 800696c:	d822      	bhi.n	80069b4 <UART_SetConfig+0x210>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <UART_SetConfig+0x1d8>
 8006972:	2280      	movs	r2, #128	; 0x80
 8006974:	00d2      	lsls	r2, r2, #3
 8006976:	4293      	cmp	r3, r2
 8006978:	d00e      	beq.n	8006998 <UART_SetConfig+0x1f4>
 800697a:	e01b      	b.n	80069b4 <UART_SetConfig+0x210>
 800697c:	231b      	movs	r3, #27
 800697e:	2218      	movs	r2, #24
 8006980:	189b      	adds	r3, r3, r2
 8006982:	19db      	adds	r3, r3, r7
 8006984:	2200      	movs	r2, #0
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	e021      	b.n	80069ce <UART_SetConfig+0x22a>
 800698a:	231b      	movs	r3, #27
 800698c:	2218      	movs	r2, #24
 800698e:	189b      	adds	r3, r3, r2
 8006990:	19db      	adds	r3, r3, r7
 8006992:	2202      	movs	r2, #2
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	e01a      	b.n	80069ce <UART_SetConfig+0x22a>
 8006998:	231b      	movs	r3, #27
 800699a:	2218      	movs	r2, #24
 800699c:	189b      	adds	r3, r3, r2
 800699e:	19db      	adds	r3, r3, r7
 80069a0:	2204      	movs	r2, #4
 80069a2:	701a      	strb	r2, [r3, #0]
 80069a4:	e013      	b.n	80069ce <UART_SetConfig+0x22a>
 80069a6:	231b      	movs	r3, #27
 80069a8:	2218      	movs	r2, #24
 80069aa:	189b      	adds	r3, r3, r2
 80069ac:	19db      	adds	r3, r3, r7
 80069ae:	2208      	movs	r2, #8
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	e00c      	b.n	80069ce <UART_SetConfig+0x22a>
 80069b4:	231b      	movs	r3, #27
 80069b6:	2218      	movs	r2, #24
 80069b8:	189b      	adds	r3, r3, r2
 80069ba:	19db      	adds	r3, r3, r7
 80069bc:	2210      	movs	r2, #16
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e005      	b.n	80069ce <UART_SetConfig+0x22a>
 80069c2:	231b      	movs	r3, #27
 80069c4:	2218      	movs	r2, #24
 80069c6:	189b      	adds	r3, r3, r2
 80069c8:	19db      	adds	r3, r3, r7
 80069ca:	2210      	movs	r2, #16
 80069cc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a46      	ldr	r2, [pc, #280]	; (8006aec <UART_SetConfig+0x348>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d000      	beq.n	80069da <UART_SetConfig+0x236>
 80069d8:	e09a      	b.n	8006b10 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069da:	231b      	movs	r3, #27
 80069dc:	2218      	movs	r2, #24
 80069de:	189b      	adds	r3, r3, r2
 80069e0:	19db      	adds	r3, r3, r7
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d01d      	beq.n	8006a24 <UART_SetConfig+0x280>
 80069e8:	dc20      	bgt.n	8006a2c <UART_SetConfig+0x288>
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d015      	beq.n	8006a1a <UART_SetConfig+0x276>
 80069ee:	dc1d      	bgt.n	8006a2c <UART_SetConfig+0x288>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <UART_SetConfig+0x256>
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d005      	beq.n	8006a04 <UART_SetConfig+0x260>
 80069f8:	e018      	b.n	8006a2c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069fa:	f7fe fa27 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
 80069fe:	0003      	movs	r3, r0
 8006a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a02:	e01c      	b.n	8006a3e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a04:	4b3c      	ldr	r3, [pc, #240]	; (8006af8 <UART_SetConfig+0x354>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2210      	movs	r2, #16
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	d002      	beq.n	8006a14 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006a0e:	4b3e      	ldr	r3, [pc, #248]	; (8006b08 <UART_SetConfig+0x364>)
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a12:	e014      	b.n	8006a3e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006a14:	4b3d      	ldr	r3, [pc, #244]	; (8006b0c <UART_SetConfig+0x368>)
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a18:	e011      	b.n	8006a3e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a1a:	f7fe f967 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a22:	e00c      	b.n	8006a3e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a2a:	e008      	b.n	8006a3e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a30:	231a      	movs	r3, #26
 8006a32:	2218      	movs	r2, #24
 8006a34:	189b      	adds	r3, r3, r2
 8006a36:	19db      	adds	r3, r3, r7
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
        break;
 8006a3c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d100      	bne.n	8006a46 <UART_SetConfig+0x2a2>
 8006a44:	e133      	b.n	8006cae <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	0013      	movs	r3, r2
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d305      	bcc.n	8006a62 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d906      	bls.n	8006a70 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006a62:	231a      	movs	r3, #26
 8006a64:	2218      	movs	r2, #24
 8006a66:	189b      	adds	r3, r3, r2
 8006a68:	19db      	adds	r3, r3, r7
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	e11e      	b.n	8006cae <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	6939      	ldr	r1, [r7, #16]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	000b      	movs	r3, r1
 8006a7e:	0e1b      	lsrs	r3, r3, #24
 8006a80:	0010      	movs	r0, r2
 8006a82:	0205      	lsls	r5, r0, #8
 8006a84:	431d      	orrs	r5, r3
 8006a86:	000b      	movs	r3, r1
 8006a88:	021c      	lsls	r4, r3, #8
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	68b8      	ldr	r0, [r7, #8]
 8006a98:	68f9      	ldr	r1, [r7, #12]
 8006a9a:	1900      	adds	r0, r0, r4
 8006a9c:	4169      	adcs	r1, r5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f7f9 fcfc 	bl	80004a8 <__aeabi_uldivmod>
 8006ab0:	0002      	movs	r2, r0
 8006ab2:	000b      	movs	r3, r1
 8006ab4:	0013      	movs	r3, r2
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aba:	23c0      	movs	r3, #192	; 0xc0
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d309      	bcc.n	8006ad6 <UART_SetConfig+0x332>
 8006ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac4:	2380      	movs	r3, #128	; 0x80
 8006ac6:	035b      	lsls	r3, r3, #13
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d204      	bcs.n	8006ad6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad2:	60da      	str	r2, [r3, #12]
 8006ad4:	e0eb      	b.n	8006cae <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006ad6:	231a      	movs	r3, #26
 8006ad8:	2218      	movs	r2, #24
 8006ada:	189b      	adds	r3, r3, r2
 8006adc:	19db      	adds	r3, r3, r7
 8006ade:	2201      	movs	r2, #1
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	e0e4      	b.n	8006cae <UART_SetConfig+0x50a>
 8006ae4:	efff69f3 	.word	0xefff69f3
 8006ae8:	ffffcfff 	.word	0xffffcfff
 8006aec:	40004800 	.word	0x40004800
 8006af0:	fffff4ff 	.word	0xfffff4ff
 8006af4:	40013800 	.word	0x40013800
 8006af8:	40021000 	.word	0x40021000
 8006afc:	40004400 	.word	0x40004400
 8006b00:	40004c00 	.word	0x40004c00
 8006b04:	40005000 	.word	0x40005000
 8006b08:	003d0900 	.word	0x003d0900
 8006b0c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	021b      	lsls	r3, r3, #8
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d000      	beq.n	8006b1e <UART_SetConfig+0x37a>
 8006b1c:	e070      	b.n	8006c00 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006b1e:	231b      	movs	r3, #27
 8006b20:	2218      	movs	r2, #24
 8006b22:	189b      	adds	r3, r3, r2
 8006b24:	19db      	adds	r3, r3, r7
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d822      	bhi.n	8006b72 <UART_SetConfig+0x3ce>
 8006b2c:	009a      	lsls	r2, r3, #2
 8006b2e:	4b67      	ldr	r3, [pc, #412]	; (8006ccc <UART_SetConfig+0x528>)
 8006b30:	18d3      	adds	r3, r2, r3
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b36:	f7fe f989 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
 8006b3a:	0003      	movs	r3, r0
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b3e:	e021      	b.n	8006b84 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b40:	f7fe f99a 	bl	8004e78 <HAL_RCC_GetPCLK2Freq>
 8006b44:	0003      	movs	r3, r0
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b48:	e01c      	b.n	8006b84 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b4a:	4b61      	ldr	r3, [pc, #388]	; (8006cd0 <UART_SetConfig+0x52c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2210      	movs	r2, #16
 8006b50:	4013      	ands	r3, r2
 8006b52:	d002      	beq.n	8006b5a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b54:	4b5f      	ldr	r3, [pc, #380]	; (8006cd4 <UART_SetConfig+0x530>)
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b58:	e014      	b.n	8006b84 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006b5a:	4b5f      	ldr	r3, [pc, #380]	; (8006cd8 <UART_SetConfig+0x534>)
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b5e:	e011      	b.n	8006b84 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b60:	f7fe f8c4 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8006b64:	0003      	movs	r3, r0
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b68:	e00c      	b.n	8006b84 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b6a:	2380      	movs	r3, #128	; 0x80
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b70:	e008      	b.n	8006b84 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b76:	231a      	movs	r3, #26
 8006b78:	2218      	movs	r2, #24
 8006b7a:	189b      	adds	r3, r3, r2
 8006b7c:	19db      	adds	r3, r3, r7
 8006b7e:	2201      	movs	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
        break;
 8006b82:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d100      	bne.n	8006b8c <UART_SetConfig+0x3e8>
 8006b8a:	e090      	b.n	8006cae <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	005a      	lsls	r2, r3, #1
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	18d2      	adds	r2, r2, r3
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	0019      	movs	r1, r3
 8006b9e:	0010      	movs	r0, r2
 8006ba0:	f7f9 face 	bl	8000140 <__udivsi3>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	2b0f      	cmp	r3, #15
 8006bac:	d921      	bls.n	8006bf2 <UART_SetConfig+0x44e>
 8006bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	025b      	lsls	r3, r3, #9
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d21c      	bcs.n	8006bf2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	200e      	movs	r0, #14
 8006bbe:	2418      	movs	r4, #24
 8006bc0:	1903      	adds	r3, r0, r4
 8006bc2:	19db      	adds	r3, r3, r7
 8006bc4:	210f      	movs	r1, #15
 8006bc6:	438a      	bics	r2, r1
 8006bc8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	085b      	lsrs	r3, r3, #1
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2207      	movs	r2, #7
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	b299      	uxth	r1, r3
 8006bd6:	1903      	adds	r3, r0, r4
 8006bd8:	19db      	adds	r3, r3, r7
 8006bda:	1902      	adds	r2, r0, r4
 8006bdc:	19d2      	adds	r2, r2, r7
 8006bde:	8812      	ldrh	r2, [r2, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	1902      	adds	r2, r0, r4
 8006bea:	19d2      	adds	r2, r2, r7
 8006bec:	8812      	ldrh	r2, [r2, #0]
 8006bee:	60da      	str	r2, [r3, #12]
 8006bf0:	e05d      	b.n	8006cae <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf2:	231a      	movs	r3, #26
 8006bf4:	2218      	movs	r2, #24
 8006bf6:	189b      	adds	r3, r3, r2
 8006bf8:	19db      	adds	r3, r3, r7
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	e056      	b.n	8006cae <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c00:	231b      	movs	r3, #27
 8006c02:	2218      	movs	r2, #24
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	19db      	adds	r3, r3, r7
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d822      	bhi.n	8006c54 <UART_SetConfig+0x4b0>
 8006c0e:	009a      	lsls	r2, r3, #2
 8006c10:	4b32      	ldr	r3, [pc, #200]	; (8006cdc <UART_SetConfig+0x538>)
 8006c12:	18d3      	adds	r3, r2, r3
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c18:	f7fe f918 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
 8006c1c:	0003      	movs	r3, r0
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c20:	e021      	b.n	8006c66 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c22:	f7fe f929 	bl	8004e78 <HAL_RCC_GetPCLK2Freq>
 8006c26:	0003      	movs	r3, r0
 8006c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c2a:	e01c      	b.n	8006c66 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c2c:	4b28      	ldr	r3, [pc, #160]	; (8006cd0 <UART_SetConfig+0x52c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2210      	movs	r2, #16
 8006c32:	4013      	ands	r3, r2
 8006c34:	d002      	beq.n	8006c3c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006c36:	4b27      	ldr	r3, [pc, #156]	; (8006cd4 <UART_SetConfig+0x530>)
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c3a:	e014      	b.n	8006c66 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006c3c:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <UART_SetConfig+0x534>)
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c40:	e011      	b.n	8006c66 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c42:	f7fe f853 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8006c46:	0003      	movs	r3, r0
 8006c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c4a:	e00c      	b.n	8006c66 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c52:	e008      	b.n	8006c66 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c58:	231a      	movs	r3, #26
 8006c5a:	2218      	movs	r2, #24
 8006c5c:	189b      	adds	r3, r3, r2
 8006c5e:	19db      	adds	r3, r3, r7
 8006c60:	2201      	movs	r2, #1
 8006c62:	701a      	strb	r2, [r3, #0]
        break;
 8006c64:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d020      	beq.n	8006cae <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	085a      	lsrs	r2, r3, #1
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	18d2      	adds	r2, r2, r3
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	0019      	movs	r1, r3
 8006c7c:	0010      	movs	r0, r2
 8006c7e:	f7f9 fa5f 	bl	8000140 <__udivsi3>
 8006c82:	0003      	movs	r3, r0
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	2b0f      	cmp	r3, #15
 8006c8a:	d90a      	bls.n	8006ca2 <UART_SetConfig+0x4fe>
 8006c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c8e:	2380      	movs	r3, #128	; 0x80
 8006c90:	025b      	lsls	r3, r3, #9
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d205      	bcs.n	8006ca2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60da      	str	r2, [r3, #12]
 8006ca0:	e005      	b.n	8006cae <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006ca2:	231a      	movs	r3, #26
 8006ca4:	2218      	movs	r2, #24
 8006ca6:	189b      	adds	r3, r3, r2
 8006ca8:	19db      	adds	r3, r3, r7
 8006caa:	2201      	movs	r2, #1
 8006cac:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006cba:	231a      	movs	r3, #26
 8006cbc:	2218      	movs	r2, #24
 8006cbe:	189b      	adds	r3, r3, r2
 8006cc0:	19db      	adds	r3, r3, r7
 8006cc2:	781b      	ldrb	r3, [r3, #0]
}
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b00e      	add	sp, #56	; 0x38
 8006cca:	bdb0      	pop	{r4, r5, r7, pc}
 8006ccc:	08009f90 	.word	0x08009f90
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	003d0900 	.word	0x003d0900
 8006cd8:	00f42400 	.word	0x00f42400
 8006cdc:	08009fb4 	.word	0x08009fb4

08006ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	2201      	movs	r2, #1
 8006cee:	4013      	ands	r3, r2
 8006cf0:	d00b      	beq.n	8006d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	4a4a      	ldr	r2, [pc, #296]	; (8006e24 <UART_AdvFeatureConfig+0x144>)
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	0019      	movs	r1, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	2202      	movs	r2, #2
 8006d10:	4013      	ands	r3, r2
 8006d12:	d00b      	beq.n	8006d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	4a43      	ldr	r2, [pc, #268]	; (8006e28 <UART_AdvFeatureConfig+0x148>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	0019      	movs	r1, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	2204      	movs	r2, #4
 8006d32:	4013      	ands	r3, r2
 8006d34:	d00b      	beq.n	8006d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4a3b      	ldr	r2, [pc, #236]	; (8006e2c <UART_AdvFeatureConfig+0x14c>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	0019      	movs	r1, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	2208      	movs	r2, #8
 8006d54:	4013      	ands	r3, r2
 8006d56:	d00b      	beq.n	8006d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	4a34      	ldr	r2, [pc, #208]	; (8006e30 <UART_AdvFeatureConfig+0x150>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	0019      	movs	r1, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	2210      	movs	r2, #16
 8006d76:	4013      	ands	r3, r2
 8006d78:	d00b      	beq.n	8006d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	4a2c      	ldr	r2, [pc, #176]	; (8006e34 <UART_AdvFeatureConfig+0x154>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	0019      	movs	r1, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	2220      	movs	r2, #32
 8006d98:	4013      	ands	r3, r2
 8006d9a:	d00b      	beq.n	8006db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	4a25      	ldr	r2, [pc, #148]	; (8006e38 <UART_AdvFeatureConfig+0x158>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	0019      	movs	r1, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	2240      	movs	r2, #64	; 0x40
 8006dba:	4013      	ands	r3, r2
 8006dbc:	d01d      	beq.n	8006dfa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a1d      	ldr	r2, [pc, #116]	; (8006e3c <UART_AdvFeatureConfig+0x15c>)
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	0019      	movs	r1, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	035b      	lsls	r3, r3, #13
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d10b      	bne.n	8006dfa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <UART_AdvFeatureConfig+0x160>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	0019      	movs	r1, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	2280      	movs	r2, #128	; 0x80
 8006e00:	4013      	ands	r3, r2
 8006e02:	d00b      	beq.n	8006e1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	4a0e      	ldr	r2, [pc, #56]	; (8006e44 <UART_AdvFeatureConfig+0x164>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	0019      	movs	r1, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }
}
 8006e1c:	46c0      	nop			; (mov r8, r8)
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	b002      	add	sp, #8
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	fffdffff 	.word	0xfffdffff
 8006e28:	fffeffff 	.word	0xfffeffff
 8006e2c:	fffbffff 	.word	0xfffbffff
 8006e30:	ffff7fff 	.word	0xffff7fff
 8006e34:	ffffefff 	.word	0xffffefff
 8006e38:	ffffdfff 	.word	0xffffdfff
 8006e3c:	ffefffff 	.word	0xffefffff
 8006e40:	ff9fffff 	.word	0xff9fffff
 8006e44:	fff7ffff 	.word	0xfff7ffff

08006e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b092      	sub	sp, #72	; 0x48
 8006e4c:	af02      	add	r7, sp, #8
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2284      	movs	r2, #132	; 0x84
 8006e54:	2100      	movs	r1, #0
 8006e56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e58:	f7fc ff84 	bl	8003d64 <HAL_GetTick>
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2208      	movs	r2, #8
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b08      	cmp	r3, #8
 8006e6c:	d12c      	bne.n	8006ec8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e70:	2280      	movs	r2, #128	; 0x80
 8006e72:	0391      	lsls	r1, r2, #14
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4a46      	ldr	r2, [pc, #280]	; (8006f90 <UART_CheckIdleState+0x148>)
 8006e78:	9200      	str	r2, [sp, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f000 f88c 	bl	8006f98 <UART_WaitOnFlagUntilTimeout>
 8006e80:	1e03      	subs	r3, r0, #0
 8006e82:	d021      	beq.n	8006ec8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e84:	f3ef 8310 	mrs	r3, PRIMASK
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e8e:	2301      	movs	r3, #1
 8006e90:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	f383 8810 	msr	PRIMASK, r3
}
 8006e98:	46c0      	nop			; (mov r8, r8)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2180      	movs	r1, #128	; 0x80
 8006ea6:	438a      	bics	r2, r1
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	f383 8810 	msr	PRIMASK, r3
}
 8006eb4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2278      	movs	r2, #120	; 0x78
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e05f      	b.n	8006f88 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2204      	movs	r2, #4
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d146      	bne.n	8006f64 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed8:	2280      	movs	r2, #128	; 0x80
 8006eda:	03d1      	lsls	r1, r2, #15
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4a2c      	ldr	r2, [pc, #176]	; (8006f90 <UART_CheckIdleState+0x148>)
 8006ee0:	9200      	str	r2, [sp, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f000 f858 	bl	8006f98 <UART_WaitOnFlagUntilTimeout>
 8006ee8:	1e03      	subs	r3, r0, #0
 8006eea:	d03b      	beq.n	8006f64 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eec:	f3ef 8310 	mrs	r3, PRIMASK
 8006ef0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f383 8810 	msr	PRIMASK, r3
}
 8006f00:	46c0      	nop			; (mov r8, r8)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4921      	ldr	r1, [pc, #132]	; (8006f94 <UART_CheckIdleState+0x14c>)
 8006f0e:	400a      	ands	r2, r1
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f383 8810 	msr	PRIMASK, r3
}
 8006f1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f22:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f24:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f26:	633b      	str	r3, [r7, #48]	; 0x30
 8006f28:	2301      	movs	r3, #1
 8006f2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f383 8810 	msr	PRIMASK, r3
}
 8006f32:	46c0      	nop			; (mov r8, r8)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2101      	movs	r1, #1
 8006f40:	438a      	bics	r2, r1
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	f383 8810 	msr	PRIMASK, r3
}
 8006f4e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2280      	movs	r2, #128	; 0x80
 8006f54:	2120      	movs	r1, #32
 8006f56:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2278      	movs	r2, #120	; 0x78
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e011      	b.n	8006f88 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2280      	movs	r2, #128	; 0x80
 8006f6e:	2120      	movs	r1, #32
 8006f70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2278      	movs	r2, #120	; 0x78
 8006f82:	2100      	movs	r1, #0
 8006f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	0018      	movs	r0, r3
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	b010      	add	sp, #64	; 0x40
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	01ffffff 	.word	0x01ffffff
 8006f94:	fffffedf 	.word	0xfffffedf

08006f98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	1dfb      	adds	r3, r7, #7
 8006fa6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa8:	e04b      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	3301      	adds	r3, #1
 8006fae:	d048      	beq.n	8007042 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fb0:	f7fc fed8 	bl	8003d64 <HAL_GetTick>
 8006fb4:	0002      	movs	r2, r0
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d302      	bcc.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e04b      	b.n	8007062 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d035      	beq.n	8007042 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	4013      	ands	r3, r2
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d111      	bne.n	8007008 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f000 f83c 	bl	800706c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2284      	movs	r2, #132	; 0x84
 8006ff8:	2108      	movs	r1, #8
 8006ffa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2278      	movs	r2, #120	; 0x78
 8007000:	2100      	movs	r1, #0
 8007002:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e02c      	b.n	8007062 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	69da      	ldr	r2, [r3, #28]
 800700e:	2380      	movs	r3, #128	; 0x80
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	401a      	ands	r2, r3
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	429a      	cmp	r2, r3
 800701a:	d112      	bne.n	8007042 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2280      	movs	r2, #128	; 0x80
 8007022:	0112      	lsls	r2, r2, #4
 8007024:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	0018      	movs	r0, r3
 800702a:	f000 f81f 	bl	800706c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2284      	movs	r2, #132	; 0x84
 8007032:	2120      	movs	r1, #32
 8007034:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2278      	movs	r2, #120	; 0x78
 800703a:	2100      	movs	r1, #0
 800703c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e00f      	b.n	8007062 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	4013      	ands	r3, r2
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	425a      	negs	r2, r3
 8007052:	4153      	adcs	r3, r2
 8007054:	b2db      	uxtb	r3, r3
 8007056:	001a      	movs	r2, r3
 8007058:	1dfb      	adds	r3, r7, #7
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d0a4      	beq.n	8006faa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	0018      	movs	r0, r3
 8007064:	46bd      	mov	sp, r7
 8007066:	b004      	add	sp, #16
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08e      	sub	sp, #56	; 0x38
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007074:	f3ef 8310 	mrs	r3, PRIMASK
 8007078:	617b      	str	r3, [r7, #20]
  return(result);
 800707a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
 800707e:	2301      	movs	r3, #1
 8007080:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	f383 8810 	msr	PRIMASK, r3
}
 8007088:	46c0      	nop			; (mov r8, r8)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4926      	ldr	r1, [pc, #152]	; (8007130 <UART_EndRxTransfer+0xc4>)
 8007096:	400a      	ands	r2, r1
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	f383 8810 	msr	PRIMASK, r3
}
 80070a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a6:	f3ef 8310 	mrs	r3, PRIMASK
 80070aa:	623b      	str	r3, [r7, #32]
  return(result);
 80070ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ae:	633b      	str	r3, [r7, #48]	; 0x30
 80070b0:	2301      	movs	r3, #1
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	f383 8810 	msr	PRIMASK, r3
}
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2101      	movs	r1, #1
 80070c8:	438a      	bics	r2, r1
 80070ca:	609a      	str	r2, [r3, #8]
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	f383 8810 	msr	PRIMASK, r3
}
 80070d6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d118      	bne.n	8007112 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e0:	f3ef 8310 	mrs	r3, PRIMASK
 80070e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80070e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ea:	2301      	movs	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f383 8810 	msr	PRIMASK, r3
}
 80070f4:	46c0      	nop			; (mov r8, r8)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2110      	movs	r1, #16
 8007102:	438a      	bics	r2, r1
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f383 8810 	msr	PRIMASK, r3
}
 8007110:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2280      	movs	r2, #128	; 0x80
 8007116:	2120      	movs	r1, #32
 8007118:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	46bd      	mov	sp, r7
 800712a:	b00e      	add	sp, #56	; 0x38
 800712c:	bd80      	pop	{r7, pc}
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	fffffedf 	.word	0xfffffedf

08007134 <__errno>:
 8007134:	4b01      	ldr	r3, [pc, #4]	; (800713c <__errno+0x8>)
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	4770      	bx	lr
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	2000000c 	.word	0x2000000c

08007140 <__libc_init_array>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	2600      	movs	r6, #0
 8007144:	4d0c      	ldr	r5, [pc, #48]	; (8007178 <__libc_init_array+0x38>)
 8007146:	4c0d      	ldr	r4, [pc, #52]	; (800717c <__libc_init_array+0x3c>)
 8007148:	1b64      	subs	r4, r4, r5
 800714a:	10a4      	asrs	r4, r4, #2
 800714c:	42a6      	cmp	r6, r4
 800714e:	d109      	bne.n	8007164 <__libc_init_array+0x24>
 8007150:	2600      	movs	r6, #0
 8007152:	f002 fe8b 	bl	8009e6c <_init>
 8007156:	4d0a      	ldr	r5, [pc, #40]	; (8007180 <__libc_init_array+0x40>)
 8007158:	4c0a      	ldr	r4, [pc, #40]	; (8007184 <__libc_init_array+0x44>)
 800715a:	1b64      	subs	r4, r4, r5
 800715c:	10a4      	asrs	r4, r4, #2
 800715e:	42a6      	cmp	r6, r4
 8007160:	d105      	bne.n	800716e <__libc_init_array+0x2e>
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	00b3      	lsls	r3, r6, #2
 8007166:	58eb      	ldr	r3, [r5, r3]
 8007168:	4798      	blx	r3
 800716a:	3601      	adds	r6, #1
 800716c:	e7ee      	b.n	800714c <__libc_init_array+0xc>
 800716e:	00b3      	lsls	r3, r6, #2
 8007170:	58eb      	ldr	r3, [r5, r3]
 8007172:	4798      	blx	r3
 8007174:	3601      	adds	r6, #1
 8007176:	e7f2      	b.n	800715e <__libc_init_array+0x1e>
 8007178:	0800a3bc 	.word	0x0800a3bc
 800717c:	0800a3bc 	.word	0x0800a3bc
 8007180:	0800a3bc 	.word	0x0800a3bc
 8007184:	0800a3c0 	.word	0x0800a3c0

08007188 <memset>:
 8007188:	0003      	movs	r3, r0
 800718a:	1882      	adds	r2, r0, r2
 800718c:	4293      	cmp	r3, r2
 800718e:	d100      	bne.n	8007192 <memset+0xa>
 8007190:	4770      	bx	lr
 8007192:	7019      	strb	r1, [r3, #0]
 8007194:	3301      	adds	r3, #1
 8007196:	e7f9      	b.n	800718c <memset+0x4>

08007198 <__cvt>:
 8007198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800719a:	001e      	movs	r6, r3
 800719c:	2300      	movs	r3, #0
 800719e:	0014      	movs	r4, r2
 80071a0:	b08b      	sub	sp, #44	; 0x2c
 80071a2:	429e      	cmp	r6, r3
 80071a4:	da04      	bge.n	80071b0 <__cvt+0x18>
 80071a6:	2180      	movs	r1, #128	; 0x80
 80071a8:	0609      	lsls	r1, r1, #24
 80071aa:	1873      	adds	r3, r6, r1
 80071ac:	001e      	movs	r6, r3
 80071ae:	232d      	movs	r3, #45	; 0x2d
 80071b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80071b4:	7013      	strb	r3, [r2, #0]
 80071b6:	2320      	movs	r3, #32
 80071b8:	2203      	movs	r2, #3
 80071ba:	439f      	bics	r7, r3
 80071bc:	2f46      	cmp	r7, #70	; 0x46
 80071be:	d007      	beq.n	80071d0 <__cvt+0x38>
 80071c0:	003b      	movs	r3, r7
 80071c2:	3b45      	subs	r3, #69	; 0x45
 80071c4:	4259      	negs	r1, r3
 80071c6:	414b      	adcs	r3, r1
 80071c8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80071ca:	3a01      	subs	r2, #1
 80071cc:	18cb      	adds	r3, r1, r3
 80071ce:	9310      	str	r3, [sp, #64]	; 0x40
 80071d0:	ab09      	add	r3, sp, #36	; 0x24
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	ab08      	add	r3, sp, #32
 80071d6:	9303      	str	r3, [sp, #12]
 80071d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071da:	9200      	str	r2, [sp, #0]
 80071dc:	9302      	str	r3, [sp, #8]
 80071de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071e0:	0022      	movs	r2, r4
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	0033      	movs	r3, r6
 80071e6:	f000 fe35 	bl	8007e54 <_dtoa_r>
 80071ea:	0005      	movs	r5, r0
 80071ec:	2f47      	cmp	r7, #71	; 0x47
 80071ee:	d102      	bne.n	80071f6 <__cvt+0x5e>
 80071f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071f2:	07db      	lsls	r3, r3, #31
 80071f4:	d528      	bpl.n	8007248 <__cvt+0xb0>
 80071f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071f8:	18eb      	adds	r3, r5, r3
 80071fa:	9307      	str	r3, [sp, #28]
 80071fc:	2f46      	cmp	r7, #70	; 0x46
 80071fe:	d114      	bne.n	800722a <__cvt+0x92>
 8007200:	782b      	ldrb	r3, [r5, #0]
 8007202:	2b30      	cmp	r3, #48	; 0x30
 8007204:	d10c      	bne.n	8007220 <__cvt+0x88>
 8007206:	2200      	movs	r2, #0
 8007208:	2300      	movs	r3, #0
 800720a:	0020      	movs	r0, r4
 800720c:	0031      	movs	r1, r6
 800720e:	f7f9 f91d 	bl	800044c <__aeabi_dcmpeq>
 8007212:	2800      	cmp	r0, #0
 8007214:	d104      	bne.n	8007220 <__cvt+0x88>
 8007216:	2301      	movs	r3, #1
 8007218:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007222:	9a07      	ldr	r2, [sp, #28]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	18d3      	adds	r3, r2, r3
 8007228:	9307      	str	r3, [sp, #28]
 800722a:	2200      	movs	r2, #0
 800722c:	2300      	movs	r3, #0
 800722e:	0020      	movs	r0, r4
 8007230:	0031      	movs	r1, r6
 8007232:	f7f9 f90b 	bl	800044c <__aeabi_dcmpeq>
 8007236:	2800      	cmp	r0, #0
 8007238:	d001      	beq.n	800723e <__cvt+0xa6>
 800723a:	9b07      	ldr	r3, [sp, #28]
 800723c:	9309      	str	r3, [sp, #36]	; 0x24
 800723e:	2230      	movs	r2, #48	; 0x30
 8007240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007242:	9907      	ldr	r1, [sp, #28]
 8007244:	428b      	cmp	r3, r1
 8007246:	d306      	bcc.n	8007256 <__cvt+0xbe>
 8007248:	0028      	movs	r0, r5
 800724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800724e:	1b5b      	subs	r3, r3, r5
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	b00b      	add	sp, #44	; 0x2c
 8007254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007256:	1c59      	adds	r1, r3, #1
 8007258:	9109      	str	r1, [sp, #36]	; 0x24
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	e7f0      	b.n	8007240 <__cvt+0xa8>

0800725e <__exponent>:
 800725e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007260:	1c83      	adds	r3, r0, #2
 8007262:	b087      	sub	sp, #28
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	0005      	movs	r5, r0
 8007268:	000c      	movs	r4, r1
 800726a:	232b      	movs	r3, #43	; 0x2b
 800726c:	7002      	strb	r2, [r0, #0]
 800726e:	2900      	cmp	r1, #0
 8007270:	da01      	bge.n	8007276 <__exponent+0x18>
 8007272:	424c      	negs	r4, r1
 8007274:	3302      	adds	r3, #2
 8007276:	706b      	strb	r3, [r5, #1]
 8007278:	2c09      	cmp	r4, #9
 800727a:	dd31      	ble.n	80072e0 <__exponent+0x82>
 800727c:	270a      	movs	r7, #10
 800727e:	ab04      	add	r3, sp, #16
 8007280:	1dde      	adds	r6, r3, #7
 8007282:	0020      	movs	r0, r4
 8007284:	0039      	movs	r1, r7
 8007286:	9601      	str	r6, [sp, #4]
 8007288:	f7f9 f8ca 	bl	8000420 <__aeabi_idivmod>
 800728c:	3e01      	subs	r6, #1
 800728e:	3130      	adds	r1, #48	; 0x30
 8007290:	0020      	movs	r0, r4
 8007292:	7031      	strb	r1, [r6, #0]
 8007294:	0039      	movs	r1, r7
 8007296:	9402      	str	r4, [sp, #8]
 8007298:	f7f8 ffdc 	bl	8000254 <__divsi3>
 800729c:	9b02      	ldr	r3, [sp, #8]
 800729e:	0004      	movs	r4, r0
 80072a0:	2b63      	cmp	r3, #99	; 0x63
 80072a2:	dcee      	bgt.n	8007282 <__exponent+0x24>
 80072a4:	9b01      	ldr	r3, [sp, #4]
 80072a6:	3430      	adds	r4, #48	; 0x30
 80072a8:	1e9a      	subs	r2, r3, #2
 80072aa:	0013      	movs	r3, r2
 80072ac:	9903      	ldr	r1, [sp, #12]
 80072ae:	7014      	strb	r4, [r2, #0]
 80072b0:	a804      	add	r0, sp, #16
 80072b2:	3007      	adds	r0, #7
 80072b4:	4298      	cmp	r0, r3
 80072b6:	d80e      	bhi.n	80072d6 <__exponent+0x78>
 80072b8:	ab04      	add	r3, sp, #16
 80072ba:	3307      	adds	r3, #7
 80072bc:	2000      	movs	r0, #0
 80072be:	429a      	cmp	r2, r3
 80072c0:	d804      	bhi.n	80072cc <__exponent+0x6e>
 80072c2:	ab04      	add	r3, sp, #16
 80072c4:	3009      	adds	r0, #9
 80072c6:	18c0      	adds	r0, r0, r3
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	1ac0      	subs	r0, r0, r3
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	1818      	adds	r0, r3, r0
 80072d0:	1b40      	subs	r0, r0, r5
 80072d2:	b007      	add	sp, #28
 80072d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d6:	7818      	ldrb	r0, [r3, #0]
 80072d8:	3301      	adds	r3, #1
 80072da:	7008      	strb	r0, [r1, #0]
 80072dc:	3101      	adds	r1, #1
 80072de:	e7e7      	b.n	80072b0 <__exponent+0x52>
 80072e0:	2330      	movs	r3, #48	; 0x30
 80072e2:	18e4      	adds	r4, r4, r3
 80072e4:	70ab      	strb	r3, [r5, #2]
 80072e6:	1d28      	adds	r0, r5, #4
 80072e8:	70ec      	strb	r4, [r5, #3]
 80072ea:	e7f1      	b.n	80072d0 <__exponent+0x72>

080072ec <_printf_float>:
 80072ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ee:	b095      	sub	sp, #84	; 0x54
 80072f0:	000c      	movs	r4, r1
 80072f2:	9209      	str	r2, [sp, #36]	; 0x24
 80072f4:	001e      	movs	r6, r3
 80072f6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80072f8:	0007      	movs	r7, r0
 80072fa:	f001 fd93 	bl	8008e24 <_localeconv_r>
 80072fe:	6803      	ldr	r3, [r0, #0]
 8007300:	0018      	movs	r0, r3
 8007302:	930c      	str	r3, [sp, #48]	; 0x30
 8007304:	f7f8 ff00 	bl	8000108 <strlen>
 8007308:	2300      	movs	r3, #0
 800730a:	9312      	str	r3, [sp, #72]	; 0x48
 800730c:	7e23      	ldrb	r3, [r4, #24]
 800730e:	2207      	movs	r2, #7
 8007310:	930a      	str	r3, [sp, #40]	; 0x28
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	900e      	str	r0, [sp, #56]	; 0x38
 8007316:	930d      	str	r3, [sp, #52]	; 0x34
 8007318:	990d      	ldr	r1, [sp, #52]	; 0x34
 800731a:	682b      	ldr	r3, [r5, #0]
 800731c:	05c9      	lsls	r1, r1, #23
 800731e:	d547      	bpl.n	80073b0 <_printf_float+0xc4>
 8007320:	189b      	adds	r3, r3, r2
 8007322:	4393      	bics	r3, r2
 8007324:	001a      	movs	r2, r3
 8007326:	3208      	adds	r2, #8
 8007328:	602a      	str	r2, [r5, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	64a2      	str	r2, [r4, #72]	; 0x48
 8007330:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007332:	2201      	movs	r2, #1
 8007334:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007336:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007338:	930b      	str	r3, [sp, #44]	; 0x2c
 800733a:	006b      	lsls	r3, r5, #1
 800733c:	085b      	lsrs	r3, r3, #1
 800733e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007340:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007342:	4ba7      	ldr	r3, [pc, #668]	; (80075e0 <_printf_float+0x2f4>)
 8007344:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007346:	4252      	negs	r2, r2
 8007348:	f7fa ff04 	bl	8002154 <__aeabi_dcmpun>
 800734c:	2800      	cmp	r0, #0
 800734e:	d131      	bne.n	80073b4 <_printf_float+0xc8>
 8007350:	2201      	movs	r2, #1
 8007352:	4ba3      	ldr	r3, [pc, #652]	; (80075e0 <_printf_float+0x2f4>)
 8007354:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007356:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007358:	4252      	negs	r2, r2
 800735a:	f7f9 f887 	bl	800046c <__aeabi_dcmple>
 800735e:	2800      	cmp	r0, #0
 8007360:	d128      	bne.n	80073b4 <_printf_float+0xc8>
 8007362:	2200      	movs	r2, #0
 8007364:	2300      	movs	r3, #0
 8007366:	0029      	movs	r1, r5
 8007368:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800736a:	f7f9 f875 	bl	8000458 <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	d003      	beq.n	800737a <_printf_float+0x8e>
 8007372:	0023      	movs	r3, r4
 8007374:	222d      	movs	r2, #45	; 0x2d
 8007376:	3343      	adds	r3, #67	; 0x43
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800737c:	4d99      	ldr	r5, [pc, #612]	; (80075e4 <_printf_float+0x2f8>)
 800737e:	2b47      	cmp	r3, #71	; 0x47
 8007380:	d900      	bls.n	8007384 <_printf_float+0x98>
 8007382:	4d99      	ldr	r5, [pc, #612]	; (80075e8 <_printf_float+0x2fc>)
 8007384:	2303      	movs	r3, #3
 8007386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007388:	6123      	str	r3, [r4, #16]
 800738a:	3301      	adds	r3, #1
 800738c:	439a      	bics	r2, r3
 800738e:	2300      	movs	r3, #0
 8007390:	6022      	str	r2, [r4, #0]
 8007392:	930b      	str	r3, [sp, #44]	; 0x2c
 8007394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007396:	0021      	movs	r1, r4
 8007398:	0038      	movs	r0, r7
 800739a:	9600      	str	r6, [sp, #0]
 800739c:	aa13      	add	r2, sp, #76	; 0x4c
 800739e:	f000 f9e7 	bl	8007770 <_printf_common>
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	d000      	beq.n	80073a8 <_printf_float+0xbc>
 80073a6:	e0a2      	b.n	80074ee <_printf_float+0x202>
 80073a8:	2001      	movs	r0, #1
 80073aa:	4240      	negs	r0, r0
 80073ac:	b015      	add	sp, #84	; 0x54
 80073ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b0:	3307      	adds	r3, #7
 80073b2:	e7b6      	b.n	8007322 <_printf_float+0x36>
 80073b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073b6:	002b      	movs	r3, r5
 80073b8:	0010      	movs	r0, r2
 80073ba:	0029      	movs	r1, r5
 80073bc:	f7fa feca 	bl	8002154 <__aeabi_dcmpun>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d00b      	beq.n	80073dc <_printf_float+0xf0>
 80073c4:	2d00      	cmp	r5, #0
 80073c6:	da03      	bge.n	80073d0 <_printf_float+0xe4>
 80073c8:	0023      	movs	r3, r4
 80073ca:	222d      	movs	r2, #45	; 0x2d
 80073cc:	3343      	adds	r3, #67	; 0x43
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d2:	4d86      	ldr	r5, [pc, #536]	; (80075ec <_printf_float+0x300>)
 80073d4:	2b47      	cmp	r3, #71	; 0x47
 80073d6:	d9d5      	bls.n	8007384 <_printf_float+0x98>
 80073d8:	4d85      	ldr	r5, [pc, #532]	; (80075f0 <_printf_float+0x304>)
 80073da:	e7d3      	b.n	8007384 <_printf_float+0x98>
 80073dc:	2220      	movs	r2, #32
 80073de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	4391      	bics	r1, r2
 80073e4:	910f      	str	r1, [sp, #60]	; 0x3c
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	d149      	bne.n	800747e <_printf_float+0x192>
 80073ea:	3307      	adds	r3, #7
 80073ec:	6063      	str	r3, [r4, #4]
 80073ee:	2380      	movs	r3, #128	; 0x80
 80073f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	2200      	movs	r2, #0
 80073f8:	9206      	str	r2, [sp, #24]
 80073fa:	aa12      	add	r2, sp, #72	; 0x48
 80073fc:	9205      	str	r2, [sp, #20]
 80073fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007400:	a908      	add	r1, sp, #32
 8007402:	9204      	str	r2, [sp, #16]
 8007404:	aa11      	add	r2, sp, #68	; 0x44
 8007406:	9203      	str	r2, [sp, #12]
 8007408:	2223      	movs	r2, #35	; 0x23
 800740a:	6023      	str	r3, [r4, #0]
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	6863      	ldr	r3, [r4, #4]
 8007410:	1852      	adds	r2, r2, r1
 8007412:	9202      	str	r2, [sp, #8]
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	0038      	movs	r0, r7
 8007418:	002b      	movs	r3, r5
 800741a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800741c:	f7ff febc 	bl	8007198 <__cvt>
 8007420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007422:	0005      	movs	r5, r0
 8007424:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007426:	2b47      	cmp	r3, #71	; 0x47
 8007428:	d108      	bne.n	800743c <_printf_float+0x150>
 800742a:	1ccb      	adds	r3, r1, #3
 800742c:	db02      	blt.n	8007434 <_printf_float+0x148>
 800742e:	6863      	ldr	r3, [r4, #4]
 8007430:	4299      	cmp	r1, r3
 8007432:	dd48      	ble.n	80074c6 <_printf_float+0x1da>
 8007434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007436:	3b02      	subs	r3, #2
 8007438:	b2db      	uxtb	r3, r3
 800743a:	930a      	str	r3, [sp, #40]	; 0x28
 800743c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800743e:	2b65      	cmp	r3, #101	; 0x65
 8007440:	d824      	bhi.n	800748c <_printf_float+0x1a0>
 8007442:	0020      	movs	r0, r4
 8007444:	001a      	movs	r2, r3
 8007446:	3901      	subs	r1, #1
 8007448:	3050      	adds	r0, #80	; 0x50
 800744a:	9111      	str	r1, [sp, #68]	; 0x44
 800744c:	f7ff ff07 	bl	800725e <__exponent>
 8007450:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007452:	900b      	str	r0, [sp, #44]	; 0x2c
 8007454:	1813      	adds	r3, r2, r0
 8007456:	6123      	str	r3, [r4, #16]
 8007458:	2a01      	cmp	r2, #1
 800745a:	dc02      	bgt.n	8007462 <_printf_float+0x176>
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	07d2      	lsls	r2, r2, #31
 8007460:	d501      	bpl.n	8007466 <_printf_float+0x17a>
 8007462:	3301      	adds	r3, #1
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	2323      	movs	r3, #35	; 0x23
 8007468:	aa08      	add	r2, sp, #32
 800746a:	189b      	adds	r3, r3, r2
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d100      	bne.n	8007474 <_printf_float+0x188>
 8007472:	e78f      	b.n	8007394 <_printf_float+0xa8>
 8007474:	0023      	movs	r3, r4
 8007476:	222d      	movs	r2, #45	; 0x2d
 8007478:	3343      	adds	r3, #67	; 0x43
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e78a      	b.n	8007394 <_printf_float+0xa8>
 800747e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007480:	2a47      	cmp	r2, #71	; 0x47
 8007482:	d1b4      	bne.n	80073ee <_printf_float+0x102>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1b2      	bne.n	80073ee <_printf_float+0x102>
 8007488:	3301      	adds	r3, #1
 800748a:	e7af      	b.n	80073ec <_printf_float+0x100>
 800748c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800748e:	2b66      	cmp	r3, #102	; 0x66
 8007490:	d11b      	bne.n	80074ca <_printf_float+0x1de>
 8007492:	6863      	ldr	r3, [r4, #4]
 8007494:	2900      	cmp	r1, #0
 8007496:	dd0d      	ble.n	80074b4 <_printf_float+0x1c8>
 8007498:	6121      	str	r1, [r4, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d102      	bne.n	80074a4 <_printf_float+0x1b8>
 800749e:	6822      	ldr	r2, [r4, #0]
 80074a0:	07d2      	lsls	r2, r2, #31
 80074a2:	d502      	bpl.n	80074aa <_printf_float+0x1be>
 80074a4:	3301      	adds	r3, #1
 80074a6:	1859      	adds	r1, r3, r1
 80074a8:	6121      	str	r1, [r4, #16]
 80074aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80074ae:	2300      	movs	r3, #0
 80074b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b2:	e7d8      	b.n	8007466 <_printf_float+0x17a>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d103      	bne.n	80074c0 <_printf_float+0x1d4>
 80074b8:	2201      	movs	r2, #1
 80074ba:	6821      	ldr	r1, [r4, #0]
 80074bc:	4211      	tst	r1, r2
 80074be:	d000      	beq.n	80074c2 <_printf_float+0x1d6>
 80074c0:	1c9a      	adds	r2, r3, #2
 80074c2:	6122      	str	r2, [r4, #16]
 80074c4:	e7f1      	b.n	80074aa <_printf_float+0x1be>
 80074c6:	2367      	movs	r3, #103	; 0x67
 80074c8:	930a      	str	r3, [sp, #40]	; 0x28
 80074ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074ce:	4293      	cmp	r3, r2
 80074d0:	db06      	blt.n	80074e0 <_printf_float+0x1f4>
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	6123      	str	r3, [r4, #16]
 80074d6:	07d2      	lsls	r2, r2, #31
 80074d8:	d5e7      	bpl.n	80074aa <_printf_float+0x1be>
 80074da:	3301      	adds	r3, #1
 80074dc:	6123      	str	r3, [r4, #16]
 80074de:	e7e4      	b.n	80074aa <_printf_float+0x1be>
 80074e0:	2101      	movs	r1, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	dc01      	bgt.n	80074ea <_printf_float+0x1fe>
 80074e6:	1849      	adds	r1, r1, r1
 80074e8:	1ac9      	subs	r1, r1, r3
 80074ea:	1852      	adds	r2, r2, r1
 80074ec:	e7e9      	b.n	80074c2 <_printf_float+0x1d6>
 80074ee:	6822      	ldr	r2, [r4, #0]
 80074f0:	0553      	lsls	r3, r2, #21
 80074f2:	d407      	bmi.n	8007504 <_printf_float+0x218>
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	002a      	movs	r2, r5
 80074f8:	0038      	movs	r0, r7
 80074fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074fc:	47b0      	blx	r6
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d128      	bne.n	8007554 <_printf_float+0x268>
 8007502:	e751      	b.n	80073a8 <_printf_float+0xbc>
 8007504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007506:	2b65      	cmp	r3, #101	; 0x65
 8007508:	d800      	bhi.n	800750c <_printf_float+0x220>
 800750a:	e0e1      	b.n	80076d0 <_printf_float+0x3e4>
 800750c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800750e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007510:	2200      	movs	r2, #0
 8007512:	2300      	movs	r3, #0
 8007514:	f7f8 ff9a 	bl	800044c <__aeabi_dcmpeq>
 8007518:	2800      	cmp	r0, #0
 800751a:	d031      	beq.n	8007580 <_printf_float+0x294>
 800751c:	2301      	movs	r3, #1
 800751e:	0038      	movs	r0, r7
 8007520:	4a34      	ldr	r2, [pc, #208]	; (80075f4 <_printf_float+0x308>)
 8007522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007524:	47b0      	blx	r6
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	d100      	bne.n	800752c <_printf_float+0x240>
 800752a:	e73d      	b.n	80073a8 <_printf_float+0xbc>
 800752c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800752e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007530:	4293      	cmp	r3, r2
 8007532:	db02      	blt.n	800753a <_printf_float+0x24e>
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	07db      	lsls	r3, r3, #31
 8007538:	d50c      	bpl.n	8007554 <_printf_float+0x268>
 800753a:	0038      	movs	r0, r7
 800753c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800753e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007540:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007542:	47b0      	blx	r6
 8007544:	2500      	movs	r5, #0
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	d100      	bne.n	800754c <_printf_float+0x260>
 800754a:	e72d      	b.n	80073a8 <_printf_float+0xbc>
 800754c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800754e:	3b01      	subs	r3, #1
 8007550:	42ab      	cmp	r3, r5
 8007552:	dc0a      	bgt.n	800756a <_printf_float+0x27e>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	079b      	lsls	r3, r3, #30
 8007558:	d500      	bpl.n	800755c <_printf_float+0x270>
 800755a:	e106      	b.n	800776a <_printf_float+0x47e>
 800755c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800755e:	68e0      	ldr	r0, [r4, #12]
 8007560:	4298      	cmp	r0, r3
 8007562:	db00      	blt.n	8007566 <_printf_float+0x27a>
 8007564:	e722      	b.n	80073ac <_printf_float+0xc0>
 8007566:	0018      	movs	r0, r3
 8007568:	e720      	b.n	80073ac <_printf_float+0xc0>
 800756a:	0022      	movs	r2, r4
 800756c:	2301      	movs	r3, #1
 800756e:	0038      	movs	r0, r7
 8007570:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007572:	321a      	adds	r2, #26
 8007574:	47b0      	blx	r6
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	d100      	bne.n	800757c <_printf_float+0x290>
 800757a:	e715      	b.n	80073a8 <_printf_float+0xbc>
 800757c:	3501      	adds	r5, #1
 800757e:	e7e5      	b.n	800754c <_printf_float+0x260>
 8007580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007582:	2b00      	cmp	r3, #0
 8007584:	dc38      	bgt.n	80075f8 <_printf_float+0x30c>
 8007586:	2301      	movs	r3, #1
 8007588:	0038      	movs	r0, r7
 800758a:	4a1a      	ldr	r2, [pc, #104]	; (80075f4 <_printf_float+0x308>)
 800758c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800758e:	47b0      	blx	r6
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d100      	bne.n	8007596 <_printf_float+0x2aa>
 8007594:	e708      	b.n	80073a8 <_printf_float+0xbc>
 8007596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007598:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800759a:	4313      	orrs	r3, r2
 800759c:	d102      	bne.n	80075a4 <_printf_float+0x2b8>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	07db      	lsls	r3, r3, #31
 80075a2:	d5d7      	bpl.n	8007554 <_printf_float+0x268>
 80075a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075a6:	0038      	movs	r0, r7
 80075a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ac:	47b0      	blx	r6
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	d100      	bne.n	80075b4 <_printf_float+0x2c8>
 80075b2:	e6f9      	b.n	80073a8 <_printf_float+0xbc>
 80075b4:	2300      	movs	r3, #0
 80075b6:	930a      	str	r3, [sp, #40]	; 0x28
 80075b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075bc:	425b      	negs	r3, r3
 80075be:	4293      	cmp	r3, r2
 80075c0:	dc01      	bgt.n	80075c6 <_printf_float+0x2da>
 80075c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075c4:	e797      	b.n	80074f6 <_printf_float+0x20a>
 80075c6:	0022      	movs	r2, r4
 80075c8:	2301      	movs	r3, #1
 80075ca:	0038      	movs	r0, r7
 80075cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ce:	321a      	adds	r2, #26
 80075d0:	47b0      	blx	r6
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	d100      	bne.n	80075d8 <_printf_float+0x2ec>
 80075d6:	e6e7      	b.n	80073a8 <_printf_float+0xbc>
 80075d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075da:	3301      	adds	r3, #1
 80075dc:	e7eb      	b.n	80075b6 <_printf_float+0x2ca>
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	7fefffff 	.word	0x7fefffff
 80075e4:	08009fdc 	.word	0x08009fdc
 80075e8:	08009fe0 	.word	0x08009fe0
 80075ec:	08009fe4 	.word	0x08009fe4
 80075f0:	08009fe8 	.word	0x08009fe8
 80075f4:	08009fec 	.word	0x08009fec
 80075f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075fc:	920a      	str	r2, [sp, #40]	; 0x28
 80075fe:	429a      	cmp	r2, r3
 8007600:	dd00      	ble.n	8007604 <_printf_float+0x318>
 8007602:	930a      	str	r3, [sp, #40]	; 0x28
 8007604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007606:	2b00      	cmp	r3, #0
 8007608:	dc3c      	bgt.n	8007684 <_printf_float+0x398>
 800760a:	2300      	movs	r3, #0
 800760c:	930d      	str	r3, [sp, #52]	; 0x34
 800760e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007610:	43db      	mvns	r3, r3
 8007612:	17db      	asrs	r3, r3, #31
 8007614:	930f      	str	r3, [sp, #60]	; 0x3c
 8007616:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800761a:	930b      	str	r3, [sp, #44]	; 0x2c
 800761c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800761e:	4013      	ands	r3, r2
 8007620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007626:	4293      	cmp	r3, r2
 8007628:	dc34      	bgt.n	8007694 <_printf_float+0x3a8>
 800762a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800762c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800762e:	4293      	cmp	r3, r2
 8007630:	db3d      	blt.n	80076ae <_printf_float+0x3c2>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	07db      	lsls	r3, r3, #31
 8007636:	d43a      	bmi.n	80076ae <_printf_float+0x3c2>
 8007638:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800763a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800763c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	1a52      	subs	r2, r2, r1
 8007642:	920a      	str	r2, [sp, #40]	; 0x28
 8007644:	429a      	cmp	r2, r3
 8007646:	dd00      	ble.n	800764a <_printf_float+0x35e>
 8007648:	930a      	str	r3, [sp, #40]	; 0x28
 800764a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc36      	bgt.n	80076be <_printf_float+0x3d2>
 8007650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007652:	2500      	movs	r5, #0
 8007654:	43db      	mvns	r3, r3
 8007656:	17db      	asrs	r3, r3, #31
 8007658:	930b      	str	r3, [sp, #44]	; 0x2c
 800765a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800765c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800765e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007660:	1a9b      	subs	r3, r3, r2
 8007662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007664:	400a      	ands	r2, r1
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	42ab      	cmp	r3, r5
 800766a:	dc00      	bgt.n	800766e <_printf_float+0x382>
 800766c:	e772      	b.n	8007554 <_printf_float+0x268>
 800766e:	0022      	movs	r2, r4
 8007670:	2301      	movs	r3, #1
 8007672:	0038      	movs	r0, r7
 8007674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007676:	321a      	adds	r2, #26
 8007678:	47b0      	blx	r6
 800767a:	1c43      	adds	r3, r0, #1
 800767c:	d100      	bne.n	8007680 <_printf_float+0x394>
 800767e:	e693      	b.n	80073a8 <_printf_float+0xbc>
 8007680:	3501      	adds	r5, #1
 8007682:	e7ea      	b.n	800765a <_printf_float+0x36e>
 8007684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007686:	002a      	movs	r2, r5
 8007688:	0038      	movs	r0, r7
 800768a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800768c:	47b0      	blx	r6
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	d1bb      	bne.n	800760a <_printf_float+0x31e>
 8007692:	e689      	b.n	80073a8 <_printf_float+0xbc>
 8007694:	0022      	movs	r2, r4
 8007696:	2301      	movs	r3, #1
 8007698:	0038      	movs	r0, r7
 800769a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800769c:	321a      	adds	r2, #26
 800769e:	47b0      	blx	r6
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d100      	bne.n	80076a6 <_printf_float+0x3ba>
 80076a4:	e680      	b.n	80073a8 <_printf_float+0xbc>
 80076a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a8:	3301      	adds	r3, #1
 80076aa:	930d      	str	r3, [sp, #52]	; 0x34
 80076ac:	e7b3      	b.n	8007616 <_printf_float+0x32a>
 80076ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076b0:	0038      	movs	r0, r7
 80076b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076b6:	47b0      	blx	r6
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d1bd      	bne.n	8007638 <_printf_float+0x34c>
 80076bc:	e674      	b.n	80073a8 <_printf_float+0xbc>
 80076be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076c0:	0038      	movs	r0, r7
 80076c2:	18ea      	adds	r2, r5, r3
 80076c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c8:	47b0      	blx	r6
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	d1c0      	bne.n	8007650 <_printf_float+0x364>
 80076ce:	e66b      	b.n	80073a8 <_printf_float+0xbc>
 80076d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	dc02      	bgt.n	80076dc <_printf_float+0x3f0>
 80076d6:	2301      	movs	r3, #1
 80076d8:	421a      	tst	r2, r3
 80076da:	d034      	beq.n	8007746 <_printf_float+0x45a>
 80076dc:	2301      	movs	r3, #1
 80076de:	002a      	movs	r2, r5
 80076e0:	0038      	movs	r0, r7
 80076e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076e4:	47b0      	blx	r6
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d100      	bne.n	80076ec <_printf_float+0x400>
 80076ea:	e65d      	b.n	80073a8 <_printf_float+0xbc>
 80076ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076ee:	0038      	movs	r0, r7
 80076f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076f4:	47b0      	blx	r6
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	d100      	bne.n	80076fc <_printf_float+0x410>
 80076fa:	e655      	b.n	80073a8 <_printf_float+0xbc>
 80076fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80076fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007700:	2200      	movs	r2, #0
 8007702:	2300      	movs	r3, #0
 8007704:	f7f8 fea2 	bl	800044c <__aeabi_dcmpeq>
 8007708:	2800      	cmp	r0, #0
 800770a:	d11a      	bne.n	8007742 <_printf_float+0x456>
 800770c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800770e:	1c6a      	adds	r2, r5, #1
 8007710:	3b01      	subs	r3, #1
 8007712:	0038      	movs	r0, r7
 8007714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007716:	47b0      	blx	r6
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d10e      	bne.n	800773a <_printf_float+0x44e>
 800771c:	e644      	b.n	80073a8 <_printf_float+0xbc>
 800771e:	0022      	movs	r2, r4
 8007720:	2301      	movs	r3, #1
 8007722:	0038      	movs	r0, r7
 8007724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007726:	321a      	adds	r2, #26
 8007728:	47b0      	blx	r6
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	d100      	bne.n	8007730 <_printf_float+0x444>
 800772e:	e63b      	b.n	80073a8 <_printf_float+0xbc>
 8007730:	3501      	adds	r5, #1
 8007732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007734:	3b01      	subs	r3, #1
 8007736:	42ab      	cmp	r3, r5
 8007738:	dcf1      	bgt.n	800771e <_printf_float+0x432>
 800773a:	0022      	movs	r2, r4
 800773c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800773e:	3250      	adds	r2, #80	; 0x50
 8007740:	e6da      	b.n	80074f8 <_printf_float+0x20c>
 8007742:	2500      	movs	r5, #0
 8007744:	e7f5      	b.n	8007732 <_printf_float+0x446>
 8007746:	002a      	movs	r2, r5
 8007748:	e7e3      	b.n	8007712 <_printf_float+0x426>
 800774a:	0022      	movs	r2, r4
 800774c:	2301      	movs	r3, #1
 800774e:	0038      	movs	r0, r7
 8007750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007752:	3219      	adds	r2, #25
 8007754:	47b0      	blx	r6
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	d100      	bne.n	800775c <_printf_float+0x470>
 800775a:	e625      	b.n	80073a8 <_printf_float+0xbc>
 800775c:	3501      	adds	r5, #1
 800775e:	68e3      	ldr	r3, [r4, #12]
 8007760:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007762:	1a9b      	subs	r3, r3, r2
 8007764:	42ab      	cmp	r3, r5
 8007766:	dcf0      	bgt.n	800774a <_printf_float+0x45e>
 8007768:	e6f8      	b.n	800755c <_printf_float+0x270>
 800776a:	2500      	movs	r5, #0
 800776c:	e7f7      	b.n	800775e <_printf_float+0x472>
 800776e:	46c0      	nop			; (mov r8, r8)

08007770 <_printf_common>:
 8007770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007772:	0015      	movs	r5, r2
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	688a      	ldr	r2, [r1, #8]
 8007778:	690b      	ldr	r3, [r1, #16]
 800777a:	000c      	movs	r4, r1
 800777c:	9000      	str	r0, [sp, #0]
 800777e:	4293      	cmp	r3, r2
 8007780:	da00      	bge.n	8007784 <_printf_common+0x14>
 8007782:	0013      	movs	r3, r2
 8007784:	0022      	movs	r2, r4
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	3243      	adds	r2, #67	; 0x43
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	2a00      	cmp	r2, #0
 800778e:	d001      	beq.n	8007794 <_printf_common+0x24>
 8007790:	3301      	adds	r3, #1
 8007792:	602b      	str	r3, [r5, #0]
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	069b      	lsls	r3, r3, #26
 8007798:	d502      	bpl.n	80077a0 <_printf_common+0x30>
 800779a:	682b      	ldr	r3, [r5, #0]
 800779c:	3302      	adds	r3, #2
 800779e:	602b      	str	r3, [r5, #0]
 80077a0:	6822      	ldr	r2, [r4, #0]
 80077a2:	2306      	movs	r3, #6
 80077a4:	0017      	movs	r7, r2
 80077a6:	401f      	ands	r7, r3
 80077a8:	421a      	tst	r2, r3
 80077aa:	d027      	beq.n	80077fc <_printf_common+0x8c>
 80077ac:	0023      	movs	r3, r4
 80077ae:	3343      	adds	r3, #67	; 0x43
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	1e5a      	subs	r2, r3, #1
 80077b4:	4193      	sbcs	r3, r2
 80077b6:	6822      	ldr	r2, [r4, #0]
 80077b8:	0692      	lsls	r2, r2, #26
 80077ba:	d430      	bmi.n	800781e <_printf_common+0xae>
 80077bc:	0022      	movs	r2, r4
 80077be:	9901      	ldr	r1, [sp, #4]
 80077c0:	9800      	ldr	r0, [sp, #0]
 80077c2:	9e08      	ldr	r6, [sp, #32]
 80077c4:	3243      	adds	r2, #67	; 0x43
 80077c6:	47b0      	blx	r6
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d025      	beq.n	8007818 <_printf_common+0xa8>
 80077cc:	2306      	movs	r3, #6
 80077ce:	6820      	ldr	r0, [r4, #0]
 80077d0:	682a      	ldr	r2, [r5, #0]
 80077d2:	68e1      	ldr	r1, [r4, #12]
 80077d4:	2500      	movs	r5, #0
 80077d6:	4003      	ands	r3, r0
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d103      	bne.n	80077e4 <_printf_common+0x74>
 80077dc:	1a8d      	subs	r5, r1, r2
 80077de:	43eb      	mvns	r3, r5
 80077e0:	17db      	asrs	r3, r3, #31
 80077e2:	401d      	ands	r5, r3
 80077e4:	68a3      	ldr	r3, [r4, #8]
 80077e6:	6922      	ldr	r2, [r4, #16]
 80077e8:	4293      	cmp	r3, r2
 80077ea:	dd01      	ble.n	80077f0 <_printf_common+0x80>
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	18ed      	adds	r5, r5, r3
 80077f0:	2700      	movs	r7, #0
 80077f2:	42bd      	cmp	r5, r7
 80077f4:	d120      	bne.n	8007838 <_printf_common+0xc8>
 80077f6:	2000      	movs	r0, #0
 80077f8:	e010      	b.n	800781c <_printf_common+0xac>
 80077fa:	3701      	adds	r7, #1
 80077fc:	68e3      	ldr	r3, [r4, #12]
 80077fe:	682a      	ldr	r2, [r5, #0]
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	42bb      	cmp	r3, r7
 8007804:	ddd2      	ble.n	80077ac <_printf_common+0x3c>
 8007806:	0022      	movs	r2, r4
 8007808:	2301      	movs	r3, #1
 800780a:	9901      	ldr	r1, [sp, #4]
 800780c:	9800      	ldr	r0, [sp, #0]
 800780e:	9e08      	ldr	r6, [sp, #32]
 8007810:	3219      	adds	r2, #25
 8007812:	47b0      	blx	r6
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d1f0      	bne.n	80077fa <_printf_common+0x8a>
 8007818:	2001      	movs	r0, #1
 800781a:	4240      	negs	r0, r0
 800781c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800781e:	2030      	movs	r0, #48	; 0x30
 8007820:	18e1      	adds	r1, r4, r3
 8007822:	3143      	adds	r1, #67	; 0x43
 8007824:	7008      	strb	r0, [r1, #0]
 8007826:	0021      	movs	r1, r4
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	3145      	adds	r1, #69	; 0x45
 800782c:	7809      	ldrb	r1, [r1, #0]
 800782e:	18a2      	adds	r2, r4, r2
 8007830:	3243      	adds	r2, #67	; 0x43
 8007832:	3302      	adds	r3, #2
 8007834:	7011      	strb	r1, [r2, #0]
 8007836:	e7c1      	b.n	80077bc <_printf_common+0x4c>
 8007838:	0022      	movs	r2, r4
 800783a:	2301      	movs	r3, #1
 800783c:	9901      	ldr	r1, [sp, #4]
 800783e:	9800      	ldr	r0, [sp, #0]
 8007840:	9e08      	ldr	r6, [sp, #32]
 8007842:	321a      	adds	r2, #26
 8007844:	47b0      	blx	r6
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d0e6      	beq.n	8007818 <_printf_common+0xa8>
 800784a:	3701      	adds	r7, #1
 800784c:	e7d1      	b.n	80077f2 <_printf_common+0x82>
	...

08007850 <_printf_i>:
 8007850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007852:	b08b      	sub	sp, #44	; 0x2c
 8007854:	9206      	str	r2, [sp, #24]
 8007856:	000a      	movs	r2, r1
 8007858:	3243      	adds	r2, #67	; 0x43
 800785a:	9307      	str	r3, [sp, #28]
 800785c:	9005      	str	r0, [sp, #20]
 800785e:	9204      	str	r2, [sp, #16]
 8007860:	7e0a      	ldrb	r2, [r1, #24]
 8007862:	000c      	movs	r4, r1
 8007864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007866:	2a78      	cmp	r2, #120	; 0x78
 8007868:	d807      	bhi.n	800787a <_printf_i+0x2a>
 800786a:	2a62      	cmp	r2, #98	; 0x62
 800786c:	d809      	bhi.n	8007882 <_printf_i+0x32>
 800786e:	2a00      	cmp	r2, #0
 8007870:	d100      	bne.n	8007874 <_printf_i+0x24>
 8007872:	e0c1      	b.n	80079f8 <_printf_i+0x1a8>
 8007874:	2a58      	cmp	r2, #88	; 0x58
 8007876:	d100      	bne.n	800787a <_printf_i+0x2a>
 8007878:	e08c      	b.n	8007994 <_printf_i+0x144>
 800787a:	0026      	movs	r6, r4
 800787c:	3642      	adds	r6, #66	; 0x42
 800787e:	7032      	strb	r2, [r6, #0]
 8007880:	e022      	b.n	80078c8 <_printf_i+0x78>
 8007882:	0010      	movs	r0, r2
 8007884:	3863      	subs	r0, #99	; 0x63
 8007886:	2815      	cmp	r0, #21
 8007888:	d8f7      	bhi.n	800787a <_printf_i+0x2a>
 800788a:	f7f8 fc4f 	bl	800012c <__gnu_thumb1_case_shi>
 800788e:	0016      	.short	0x0016
 8007890:	fff6001f 	.word	0xfff6001f
 8007894:	fff6fff6 	.word	0xfff6fff6
 8007898:	001ffff6 	.word	0x001ffff6
 800789c:	fff6fff6 	.word	0xfff6fff6
 80078a0:	fff6fff6 	.word	0xfff6fff6
 80078a4:	003600a8 	.word	0x003600a8
 80078a8:	fff6009a 	.word	0xfff6009a
 80078ac:	00b9fff6 	.word	0x00b9fff6
 80078b0:	0036fff6 	.word	0x0036fff6
 80078b4:	fff6fff6 	.word	0xfff6fff6
 80078b8:	009e      	.short	0x009e
 80078ba:	0026      	movs	r6, r4
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	3642      	adds	r6, #66	; 0x42
 80078c0:	1d11      	adds	r1, r2, #4
 80078c2:	6019      	str	r1, [r3, #0]
 80078c4:	6813      	ldr	r3, [r2, #0]
 80078c6:	7033      	strb	r3, [r6, #0]
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0a7      	b.n	8007a1c <_printf_i+0x1cc>
 80078cc:	6808      	ldr	r0, [r1, #0]
 80078ce:	6819      	ldr	r1, [r3, #0]
 80078d0:	1d0a      	adds	r2, r1, #4
 80078d2:	0605      	lsls	r5, r0, #24
 80078d4:	d50b      	bpl.n	80078ee <_printf_i+0x9e>
 80078d6:	680d      	ldr	r5, [r1, #0]
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	2d00      	cmp	r5, #0
 80078dc:	da03      	bge.n	80078e6 <_printf_i+0x96>
 80078de:	232d      	movs	r3, #45	; 0x2d
 80078e0:	9a04      	ldr	r2, [sp, #16]
 80078e2:	426d      	negs	r5, r5
 80078e4:	7013      	strb	r3, [r2, #0]
 80078e6:	4b61      	ldr	r3, [pc, #388]	; (8007a6c <_printf_i+0x21c>)
 80078e8:	270a      	movs	r7, #10
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	e01b      	b.n	8007926 <_printf_i+0xd6>
 80078ee:	680d      	ldr	r5, [r1, #0]
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	0641      	lsls	r1, r0, #25
 80078f4:	d5f1      	bpl.n	80078da <_printf_i+0x8a>
 80078f6:	b22d      	sxth	r5, r5
 80078f8:	e7ef      	b.n	80078da <_printf_i+0x8a>
 80078fa:	680d      	ldr	r5, [r1, #0]
 80078fc:	6819      	ldr	r1, [r3, #0]
 80078fe:	1d08      	adds	r0, r1, #4
 8007900:	6018      	str	r0, [r3, #0]
 8007902:	062e      	lsls	r6, r5, #24
 8007904:	d501      	bpl.n	800790a <_printf_i+0xba>
 8007906:	680d      	ldr	r5, [r1, #0]
 8007908:	e003      	b.n	8007912 <_printf_i+0xc2>
 800790a:	066d      	lsls	r5, r5, #25
 800790c:	d5fb      	bpl.n	8007906 <_printf_i+0xb6>
 800790e:	680d      	ldr	r5, [r1, #0]
 8007910:	b2ad      	uxth	r5, r5
 8007912:	4b56      	ldr	r3, [pc, #344]	; (8007a6c <_printf_i+0x21c>)
 8007914:	2708      	movs	r7, #8
 8007916:	9303      	str	r3, [sp, #12]
 8007918:	2a6f      	cmp	r2, #111	; 0x6f
 800791a:	d000      	beq.n	800791e <_printf_i+0xce>
 800791c:	3702      	adds	r7, #2
 800791e:	0023      	movs	r3, r4
 8007920:	2200      	movs	r2, #0
 8007922:	3343      	adds	r3, #67	; 0x43
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	6863      	ldr	r3, [r4, #4]
 8007928:	60a3      	str	r3, [r4, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	db03      	blt.n	8007936 <_printf_i+0xe6>
 800792e:	2204      	movs	r2, #4
 8007930:	6821      	ldr	r1, [r4, #0]
 8007932:	4391      	bics	r1, r2
 8007934:	6021      	str	r1, [r4, #0]
 8007936:	2d00      	cmp	r5, #0
 8007938:	d102      	bne.n	8007940 <_printf_i+0xf0>
 800793a:	9e04      	ldr	r6, [sp, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00c      	beq.n	800795a <_printf_i+0x10a>
 8007940:	9e04      	ldr	r6, [sp, #16]
 8007942:	0028      	movs	r0, r5
 8007944:	0039      	movs	r1, r7
 8007946:	f7f8 fc81 	bl	800024c <__aeabi_uidivmod>
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	3e01      	subs	r6, #1
 800794e:	5c5b      	ldrb	r3, [r3, r1]
 8007950:	7033      	strb	r3, [r6, #0]
 8007952:	002b      	movs	r3, r5
 8007954:	0005      	movs	r5, r0
 8007956:	429f      	cmp	r7, r3
 8007958:	d9f3      	bls.n	8007942 <_printf_i+0xf2>
 800795a:	2f08      	cmp	r7, #8
 800795c:	d109      	bne.n	8007972 <_printf_i+0x122>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	07db      	lsls	r3, r3, #31
 8007962:	d506      	bpl.n	8007972 <_printf_i+0x122>
 8007964:	6863      	ldr	r3, [r4, #4]
 8007966:	6922      	ldr	r2, [r4, #16]
 8007968:	4293      	cmp	r3, r2
 800796a:	dc02      	bgt.n	8007972 <_printf_i+0x122>
 800796c:	2330      	movs	r3, #48	; 0x30
 800796e:	3e01      	subs	r6, #1
 8007970:	7033      	strb	r3, [r6, #0]
 8007972:	9b04      	ldr	r3, [sp, #16]
 8007974:	1b9b      	subs	r3, r3, r6
 8007976:	6123      	str	r3, [r4, #16]
 8007978:	9b07      	ldr	r3, [sp, #28]
 800797a:	0021      	movs	r1, r4
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	9805      	ldr	r0, [sp, #20]
 8007980:	9b06      	ldr	r3, [sp, #24]
 8007982:	aa09      	add	r2, sp, #36	; 0x24
 8007984:	f7ff fef4 	bl	8007770 <_printf_common>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d14c      	bne.n	8007a26 <_printf_i+0x1d6>
 800798c:	2001      	movs	r0, #1
 800798e:	4240      	negs	r0, r0
 8007990:	b00b      	add	sp, #44	; 0x2c
 8007992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007994:	3145      	adds	r1, #69	; 0x45
 8007996:	700a      	strb	r2, [r1, #0]
 8007998:	4a34      	ldr	r2, [pc, #208]	; (8007a6c <_printf_i+0x21c>)
 800799a:	9203      	str	r2, [sp, #12]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	6821      	ldr	r1, [r4, #0]
 80079a0:	ca20      	ldmia	r2!, {r5}
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	0608      	lsls	r0, r1, #24
 80079a6:	d516      	bpl.n	80079d6 <_printf_i+0x186>
 80079a8:	07cb      	lsls	r3, r1, #31
 80079aa:	d502      	bpl.n	80079b2 <_printf_i+0x162>
 80079ac:	2320      	movs	r3, #32
 80079ae:	4319      	orrs	r1, r3
 80079b0:	6021      	str	r1, [r4, #0]
 80079b2:	2710      	movs	r7, #16
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	d1b2      	bne.n	800791e <_printf_i+0xce>
 80079b8:	2320      	movs	r3, #32
 80079ba:	6822      	ldr	r2, [r4, #0]
 80079bc:	439a      	bics	r2, r3
 80079be:	6022      	str	r2, [r4, #0]
 80079c0:	e7ad      	b.n	800791e <_printf_i+0xce>
 80079c2:	2220      	movs	r2, #32
 80079c4:	6809      	ldr	r1, [r1, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	6022      	str	r2, [r4, #0]
 80079ca:	0022      	movs	r2, r4
 80079cc:	2178      	movs	r1, #120	; 0x78
 80079ce:	3245      	adds	r2, #69	; 0x45
 80079d0:	7011      	strb	r1, [r2, #0]
 80079d2:	4a27      	ldr	r2, [pc, #156]	; (8007a70 <_printf_i+0x220>)
 80079d4:	e7e1      	b.n	800799a <_printf_i+0x14a>
 80079d6:	0648      	lsls	r0, r1, #25
 80079d8:	d5e6      	bpl.n	80079a8 <_printf_i+0x158>
 80079da:	b2ad      	uxth	r5, r5
 80079dc:	e7e4      	b.n	80079a8 <_printf_i+0x158>
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	680d      	ldr	r5, [r1, #0]
 80079e2:	1d10      	adds	r0, r2, #4
 80079e4:	6949      	ldr	r1, [r1, #20]
 80079e6:	6018      	str	r0, [r3, #0]
 80079e8:	6813      	ldr	r3, [r2, #0]
 80079ea:	062e      	lsls	r6, r5, #24
 80079ec:	d501      	bpl.n	80079f2 <_printf_i+0x1a2>
 80079ee:	6019      	str	r1, [r3, #0]
 80079f0:	e002      	b.n	80079f8 <_printf_i+0x1a8>
 80079f2:	066d      	lsls	r5, r5, #25
 80079f4:	d5fb      	bpl.n	80079ee <_printf_i+0x19e>
 80079f6:	8019      	strh	r1, [r3, #0]
 80079f8:	2300      	movs	r3, #0
 80079fa:	9e04      	ldr	r6, [sp, #16]
 80079fc:	6123      	str	r3, [r4, #16]
 80079fe:	e7bb      	b.n	8007978 <_printf_i+0x128>
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	1d11      	adds	r1, r2, #4
 8007a04:	6019      	str	r1, [r3, #0]
 8007a06:	6816      	ldr	r6, [r2, #0]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	0030      	movs	r0, r6
 8007a0c:	6862      	ldr	r2, [r4, #4]
 8007a0e:	f001 fa87 	bl	8008f20 <memchr>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d001      	beq.n	8007a1a <_printf_i+0x1ca>
 8007a16:	1b80      	subs	r0, r0, r6
 8007a18:	6060      	str	r0, [r4, #4]
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	6123      	str	r3, [r4, #16]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9a04      	ldr	r2, [sp, #16]
 8007a22:	7013      	strb	r3, [r2, #0]
 8007a24:	e7a8      	b.n	8007978 <_printf_i+0x128>
 8007a26:	6923      	ldr	r3, [r4, #16]
 8007a28:	0032      	movs	r2, r6
 8007a2a:	9906      	ldr	r1, [sp, #24]
 8007a2c:	9805      	ldr	r0, [sp, #20]
 8007a2e:	9d07      	ldr	r5, [sp, #28]
 8007a30:	47a8      	blx	r5
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d0aa      	beq.n	800798c <_printf_i+0x13c>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	079b      	lsls	r3, r3, #30
 8007a3a:	d415      	bmi.n	8007a68 <_printf_i+0x218>
 8007a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3e:	68e0      	ldr	r0, [r4, #12]
 8007a40:	4298      	cmp	r0, r3
 8007a42:	daa5      	bge.n	8007990 <_printf_i+0x140>
 8007a44:	0018      	movs	r0, r3
 8007a46:	e7a3      	b.n	8007990 <_printf_i+0x140>
 8007a48:	0022      	movs	r2, r4
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	9906      	ldr	r1, [sp, #24]
 8007a4e:	9805      	ldr	r0, [sp, #20]
 8007a50:	9e07      	ldr	r6, [sp, #28]
 8007a52:	3219      	adds	r2, #25
 8007a54:	47b0      	blx	r6
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d098      	beq.n	800798c <_printf_i+0x13c>
 8007a5a:	3501      	adds	r5, #1
 8007a5c:	68e3      	ldr	r3, [r4, #12]
 8007a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	42ab      	cmp	r3, r5
 8007a64:	dcf0      	bgt.n	8007a48 <_printf_i+0x1f8>
 8007a66:	e7e9      	b.n	8007a3c <_printf_i+0x1ec>
 8007a68:	2500      	movs	r5, #0
 8007a6a:	e7f7      	b.n	8007a5c <_printf_i+0x20c>
 8007a6c:	08009fee 	.word	0x08009fee
 8007a70:	08009fff 	.word	0x08009fff

08007a74 <iprintf>:
 8007a74:	b40f      	push	{r0, r1, r2, r3}
 8007a76:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <iprintf+0x30>)
 8007a78:	b513      	push	{r0, r1, r4, lr}
 8007a7a:	681c      	ldr	r4, [r3, #0]
 8007a7c:	2c00      	cmp	r4, #0
 8007a7e:	d005      	beq.n	8007a8c <iprintf+0x18>
 8007a80:	69a3      	ldr	r3, [r4, #24]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d102      	bne.n	8007a8c <iprintf+0x18>
 8007a86:	0020      	movs	r0, r4
 8007a88:	f001 f92c 	bl	8008ce4 <__sinit>
 8007a8c:	ab05      	add	r3, sp, #20
 8007a8e:	0020      	movs	r0, r4
 8007a90:	9a04      	ldr	r2, [sp, #16]
 8007a92:	68a1      	ldr	r1, [r4, #8]
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	f001 ff29 	bl	80098ec <_vfiprintf_r>
 8007a9a:	bc16      	pop	{r1, r2, r4}
 8007a9c:	bc08      	pop	{r3}
 8007a9e:	b004      	add	sp, #16
 8007aa0:	4718      	bx	r3
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	2000000c 	.word	0x2000000c

08007aa8 <_puts_r>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	0005      	movs	r5, r0
 8007aac:	000e      	movs	r6, r1
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d004      	beq.n	8007abc <_puts_r+0x14>
 8007ab2:	6983      	ldr	r3, [r0, #24]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <_puts_r+0x14>
 8007ab8:	f001 f914 	bl	8008ce4 <__sinit>
 8007abc:	69ab      	ldr	r3, [r5, #24]
 8007abe:	68ac      	ldr	r4, [r5, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <_puts_r+0x22>
 8007ac4:	0028      	movs	r0, r5
 8007ac6:	f001 f90d 	bl	8008ce4 <__sinit>
 8007aca:	4b2d      	ldr	r3, [pc, #180]	; (8007b80 <_puts_r+0xd8>)
 8007acc:	429c      	cmp	r4, r3
 8007ace:	d122      	bne.n	8007b16 <_puts_r+0x6e>
 8007ad0:	686c      	ldr	r4, [r5, #4]
 8007ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ad4:	07db      	lsls	r3, r3, #31
 8007ad6:	d405      	bmi.n	8007ae4 <_puts_r+0x3c>
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	059b      	lsls	r3, r3, #22
 8007adc:	d402      	bmi.n	8007ae4 <_puts_r+0x3c>
 8007ade:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ae0:	f001 f9a5 	bl	8008e2e <__retarget_lock_acquire_recursive>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	071b      	lsls	r3, r3, #28
 8007ae8:	d502      	bpl.n	8007af0 <_puts_r+0x48>
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d129      	bne.n	8007b44 <_puts_r+0x9c>
 8007af0:	0021      	movs	r1, r4
 8007af2:	0028      	movs	r0, r5
 8007af4:	f000 f8aa 	bl	8007c4c <__swsetup_r>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d023      	beq.n	8007b44 <_puts_r+0x9c>
 8007afc:	2501      	movs	r5, #1
 8007afe:	426d      	negs	r5, r5
 8007b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b02:	07db      	lsls	r3, r3, #31
 8007b04:	d405      	bmi.n	8007b12 <_puts_r+0x6a>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	059b      	lsls	r3, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_puts_r+0x6a>
 8007b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b0e:	f001 f98f 	bl	8008e30 <__retarget_lock_release_recursive>
 8007b12:	0028      	movs	r0, r5
 8007b14:	bd70      	pop	{r4, r5, r6, pc}
 8007b16:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <_puts_r+0xdc>)
 8007b18:	429c      	cmp	r4, r3
 8007b1a:	d101      	bne.n	8007b20 <_puts_r+0x78>
 8007b1c:	68ac      	ldr	r4, [r5, #8]
 8007b1e:	e7d8      	b.n	8007ad2 <_puts_r+0x2a>
 8007b20:	4b19      	ldr	r3, [pc, #100]	; (8007b88 <_puts_r+0xe0>)
 8007b22:	429c      	cmp	r4, r3
 8007b24:	d1d5      	bne.n	8007ad2 <_puts_r+0x2a>
 8007b26:	68ec      	ldr	r4, [r5, #12]
 8007b28:	e7d3      	b.n	8007ad2 <_puts_r+0x2a>
 8007b2a:	3601      	adds	r6, #1
 8007b2c:	60a3      	str	r3, [r4, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da04      	bge.n	8007b3c <_puts_r+0x94>
 8007b32:	69a2      	ldr	r2, [r4, #24]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	dc16      	bgt.n	8007b66 <_puts_r+0xbe>
 8007b38:	290a      	cmp	r1, #10
 8007b3a:	d014      	beq.n	8007b66 <_puts_r+0xbe>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	6022      	str	r2, [r4, #0]
 8007b42:	7019      	strb	r1, [r3, #0]
 8007b44:	68a3      	ldr	r3, [r4, #8]
 8007b46:	7831      	ldrb	r1, [r6, #0]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	2900      	cmp	r1, #0
 8007b4c:	d1ed      	bne.n	8007b2a <_puts_r+0x82>
 8007b4e:	60a3      	str	r3, [r4, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	da0f      	bge.n	8007b74 <_puts_r+0xcc>
 8007b54:	0028      	movs	r0, r5
 8007b56:	0022      	movs	r2, r4
 8007b58:	310a      	adds	r1, #10
 8007b5a:	f000 f821 	bl	8007ba0 <__swbuf_r>
 8007b5e:	250a      	movs	r5, #10
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d1cd      	bne.n	8007b00 <_puts_r+0x58>
 8007b64:	e7ca      	b.n	8007afc <_puts_r+0x54>
 8007b66:	0022      	movs	r2, r4
 8007b68:	0028      	movs	r0, r5
 8007b6a:	f000 f819 	bl	8007ba0 <__swbuf_r>
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	d1e8      	bne.n	8007b44 <_puts_r+0x9c>
 8007b72:	e7c3      	b.n	8007afc <_puts_r+0x54>
 8007b74:	250a      	movs	r5, #10
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	6022      	str	r2, [r4, #0]
 8007b7c:	701d      	strb	r5, [r3, #0]
 8007b7e:	e7bf      	b.n	8007b00 <_puts_r+0x58>
 8007b80:	0800a0c0 	.word	0x0800a0c0
 8007b84:	0800a0e0 	.word	0x0800a0e0
 8007b88:	0800a0a0 	.word	0x0800a0a0

08007b8c <puts>:
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	4b03      	ldr	r3, [pc, #12]	; (8007b9c <puts+0x10>)
 8007b90:	0001      	movs	r1, r0
 8007b92:	6818      	ldr	r0, [r3, #0]
 8007b94:	f7ff ff88 	bl	8007aa8 <_puts_r>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	2000000c 	.word	0x2000000c

08007ba0 <__swbuf_r>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	0005      	movs	r5, r0
 8007ba4:	000e      	movs	r6, r1
 8007ba6:	0014      	movs	r4, r2
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d004      	beq.n	8007bb6 <__swbuf_r+0x16>
 8007bac:	6983      	ldr	r3, [r0, #24]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <__swbuf_r+0x16>
 8007bb2:	f001 f897 	bl	8008ce4 <__sinit>
 8007bb6:	4b22      	ldr	r3, [pc, #136]	; (8007c40 <__swbuf_r+0xa0>)
 8007bb8:	429c      	cmp	r4, r3
 8007bba:	d12e      	bne.n	8007c1a <__swbuf_r+0x7a>
 8007bbc:	686c      	ldr	r4, [r5, #4]
 8007bbe:	69a3      	ldr	r3, [r4, #24]
 8007bc0:	60a3      	str	r3, [r4, #8]
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	071b      	lsls	r3, r3, #28
 8007bc6:	d532      	bpl.n	8007c2e <__swbuf_r+0x8e>
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d02f      	beq.n	8007c2e <__swbuf_r+0x8e>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	b2f7      	uxtb	r7, r6
 8007bd4:	1a98      	subs	r0, r3, r2
 8007bd6:	6963      	ldr	r3, [r4, #20]
 8007bd8:	b2f6      	uxtb	r6, r6
 8007bda:	4283      	cmp	r3, r0
 8007bdc:	dc05      	bgt.n	8007bea <__swbuf_r+0x4a>
 8007bde:	0021      	movs	r1, r4
 8007be0:	0028      	movs	r0, r5
 8007be2:	f000 ffdd 	bl	8008ba0 <_fflush_r>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d127      	bne.n	8007c3a <__swbuf_r+0x9a>
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	3001      	adds	r0, #1
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	60a3      	str	r3, [r4, #8]
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	6022      	str	r2, [r4, #0]
 8007bf8:	701f      	strb	r7, [r3, #0]
 8007bfa:	6963      	ldr	r3, [r4, #20]
 8007bfc:	4283      	cmp	r3, r0
 8007bfe:	d004      	beq.n	8007c0a <__swbuf_r+0x6a>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	07db      	lsls	r3, r3, #31
 8007c04:	d507      	bpl.n	8007c16 <__swbuf_r+0x76>
 8007c06:	2e0a      	cmp	r6, #10
 8007c08:	d105      	bne.n	8007c16 <__swbuf_r+0x76>
 8007c0a:	0021      	movs	r1, r4
 8007c0c:	0028      	movs	r0, r5
 8007c0e:	f000 ffc7 	bl	8008ba0 <_fflush_r>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d111      	bne.n	8007c3a <__swbuf_r+0x9a>
 8007c16:	0030      	movs	r0, r6
 8007c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <__swbuf_r+0xa4>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	d101      	bne.n	8007c24 <__swbuf_r+0x84>
 8007c20:	68ac      	ldr	r4, [r5, #8]
 8007c22:	e7cc      	b.n	8007bbe <__swbuf_r+0x1e>
 8007c24:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <__swbuf_r+0xa8>)
 8007c26:	429c      	cmp	r4, r3
 8007c28:	d1c9      	bne.n	8007bbe <__swbuf_r+0x1e>
 8007c2a:	68ec      	ldr	r4, [r5, #12]
 8007c2c:	e7c7      	b.n	8007bbe <__swbuf_r+0x1e>
 8007c2e:	0021      	movs	r1, r4
 8007c30:	0028      	movs	r0, r5
 8007c32:	f000 f80b 	bl	8007c4c <__swsetup_r>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0c9      	beq.n	8007bce <__swbuf_r+0x2e>
 8007c3a:	2601      	movs	r6, #1
 8007c3c:	4276      	negs	r6, r6
 8007c3e:	e7ea      	b.n	8007c16 <__swbuf_r+0x76>
 8007c40:	0800a0c0 	.word	0x0800a0c0
 8007c44:	0800a0e0 	.word	0x0800a0e0
 8007c48:	0800a0a0 	.word	0x0800a0a0

08007c4c <__swsetup_r>:
 8007c4c:	4b37      	ldr	r3, [pc, #220]	; (8007d2c <__swsetup_r+0xe0>)
 8007c4e:	b570      	push	{r4, r5, r6, lr}
 8007c50:	681d      	ldr	r5, [r3, #0]
 8007c52:	0006      	movs	r6, r0
 8007c54:	000c      	movs	r4, r1
 8007c56:	2d00      	cmp	r5, #0
 8007c58:	d005      	beq.n	8007c66 <__swsetup_r+0x1a>
 8007c5a:	69ab      	ldr	r3, [r5, #24]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <__swsetup_r+0x1a>
 8007c60:	0028      	movs	r0, r5
 8007c62:	f001 f83f 	bl	8008ce4 <__sinit>
 8007c66:	4b32      	ldr	r3, [pc, #200]	; (8007d30 <__swsetup_r+0xe4>)
 8007c68:	429c      	cmp	r4, r3
 8007c6a:	d10f      	bne.n	8007c8c <__swsetup_r+0x40>
 8007c6c:	686c      	ldr	r4, [r5, #4]
 8007c6e:	230c      	movs	r3, #12
 8007c70:	5ee2      	ldrsh	r2, [r4, r3]
 8007c72:	b293      	uxth	r3, r2
 8007c74:	0711      	lsls	r1, r2, #28
 8007c76:	d42d      	bmi.n	8007cd4 <__swsetup_r+0x88>
 8007c78:	06d9      	lsls	r1, r3, #27
 8007c7a:	d411      	bmi.n	8007ca0 <__swsetup_r+0x54>
 8007c7c:	2309      	movs	r3, #9
 8007c7e:	2001      	movs	r0, #1
 8007c80:	6033      	str	r3, [r6, #0]
 8007c82:	3337      	adds	r3, #55	; 0x37
 8007c84:	4313      	orrs	r3, r2
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	4240      	negs	r0, r0
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	4b29      	ldr	r3, [pc, #164]	; (8007d34 <__swsetup_r+0xe8>)
 8007c8e:	429c      	cmp	r4, r3
 8007c90:	d101      	bne.n	8007c96 <__swsetup_r+0x4a>
 8007c92:	68ac      	ldr	r4, [r5, #8]
 8007c94:	e7eb      	b.n	8007c6e <__swsetup_r+0x22>
 8007c96:	4b28      	ldr	r3, [pc, #160]	; (8007d38 <__swsetup_r+0xec>)
 8007c98:	429c      	cmp	r4, r3
 8007c9a:	d1e8      	bne.n	8007c6e <__swsetup_r+0x22>
 8007c9c:	68ec      	ldr	r4, [r5, #12]
 8007c9e:	e7e6      	b.n	8007c6e <__swsetup_r+0x22>
 8007ca0:	075b      	lsls	r3, r3, #29
 8007ca2:	d513      	bpl.n	8007ccc <__swsetup_r+0x80>
 8007ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ca6:	2900      	cmp	r1, #0
 8007ca8:	d008      	beq.n	8007cbc <__swsetup_r+0x70>
 8007caa:	0023      	movs	r3, r4
 8007cac:	3344      	adds	r3, #68	; 0x44
 8007cae:	4299      	cmp	r1, r3
 8007cb0:	d002      	beq.n	8007cb8 <__swsetup_r+0x6c>
 8007cb2:	0030      	movs	r0, r6
 8007cb4:	f001 fd10 	bl	80096d8 <_free_r>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6363      	str	r3, [r4, #52]	; 0x34
 8007cbc:	2224      	movs	r2, #36	; 0x24
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	4393      	bics	r3, r2
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	6063      	str	r3, [r4, #4]
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	2308      	movs	r3, #8
 8007cce:	89a2      	ldrh	r2, [r4, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	81a3      	strh	r3, [r4, #12]
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10b      	bne.n	8007cf2 <__swsetup_r+0xa6>
 8007cda:	21a0      	movs	r1, #160	; 0xa0
 8007cdc:	2280      	movs	r2, #128	; 0x80
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	0089      	lsls	r1, r1, #2
 8007ce2:	0092      	lsls	r2, r2, #2
 8007ce4:	400b      	ands	r3, r1
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d003      	beq.n	8007cf2 <__swsetup_r+0xa6>
 8007cea:	0021      	movs	r1, r4
 8007cec:	0030      	movs	r0, r6
 8007cee:	f001 f8c9 	bl	8008e84 <__smakebuf_r>
 8007cf2:	220c      	movs	r2, #12
 8007cf4:	5ea3      	ldrsh	r3, [r4, r2]
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	001a      	movs	r2, r3
 8007cfa:	b299      	uxth	r1, r3
 8007cfc:	4002      	ands	r2, r0
 8007cfe:	4203      	tst	r3, r0
 8007d00:	d00f      	beq.n	8007d22 <__swsetup_r+0xd6>
 8007d02:	2200      	movs	r2, #0
 8007d04:	60a2      	str	r2, [r4, #8]
 8007d06:	6962      	ldr	r2, [r4, #20]
 8007d08:	4252      	negs	r2, r2
 8007d0a:	61a2      	str	r2, [r4, #24]
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	6922      	ldr	r2, [r4, #16]
 8007d10:	4282      	cmp	r2, r0
 8007d12:	d1ba      	bne.n	8007c8a <__swsetup_r+0x3e>
 8007d14:	060a      	lsls	r2, r1, #24
 8007d16:	d5b8      	bpl.n	8007c8a <__swsetup_r+0x3e>
 8007d18:	2240      	movs	r2, #64	; 0x40
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	3801      	subs	r0, #1
 8007d20:	e7b3      	b.n	8007c8a <__swsetup_r+0x3e>
 8007d22:	0788      	lsls	r0, r1, #30
 8007d24:	d400      	bmi.n	8007d28 <__swsetup_r+0xdc>
 8007d26:	6962      	ldr	r2, [r4, #20]
 8007d28:	60a2      	str	r2, [r4, #8]
 8007d2a:	e7ef      	b.n	8007d0c <__swsetup_r+0xc0>
 8007d2c:	2000000c 	.word	0x2000000c
 8007d30:	0800a0c0 	.word	0x0800a0c0
 8007d34:	0800a0e0 	.word	0x0800a0e0
 8007d38:	0800a0a0 	.word	0x0800a0a0

08007d3c <quorem>:
 8007d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d3e:	0006      	movs	r6, r0
 8007d40:	690b      	ldr	r3, [r1, #16]
 8007d42:	6932      	ldr	r2, [r6, #16]
 8007d44:	b087      	sub	sp, #28
 8007d46:	2000      	movs	r0, #0
 8007d48:	9103      	str	r1, [sp, #12]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	db65      	blt.n	8007e1a <quorem+0xde>
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	009c      	lsls	r4, r3, #2
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	000b      	movs	r3, r1
 8007d56:	3314      	adds	r3, #20
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	191b      	adds	r3, r3, r4
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	0033      	movs	r3, r6
 8007d60:	3314      	adds	r3, #20
 8007d62:	9302      	str	r3, [sp, #8]
 8007d64:	191c      	adds	r4, r3, r4
 8007d66:	9b04      	ldr	r3, [sp, #16]
 8007d68:	6827      	ldr	r7, [r4, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	0038      	movs	r0, r7
 8007d6e:	1c5d      	adds	r5, r3, #1
 8007d70:	0029      	movs	r1, r5
 8007d72:	9301      	str	r3, [sp, #4]
 8007d74:	f7f8 f9e4 	bl	8000140 <__udivsi3>
 8007d78:	9001      	str	r0, [sp, #4]
 8007d7a:	42af      	cmp	r7, r5
 8007d7c:	d324      	bcc.n	8007dc8 <quorem+0x8c>
 8007d7e:	2500      	movs	r5, #0
 8007d80:	46ac      	mov	ip, r5
 8007d82:	9802      	ldr	r0, [sp, #8]
 8007d84:	9f05      	ldr	r7, [sp, #20]
 8007d86:	cf08      	ldmia	r7!, {r3}
 8007d88:	9a01      	ldr	r2, [sp, #4]
 8007d8a:	b299      	uxth	r1, r3
 8007d8c:	4351      	muls	r1, r2
 8007d8e:	0c1b      	lsrs	r3, r3, #16
 8007d90:	4353      	muls	r3, r2
 8007d92:	1949      	adds	r1, r1, r5
 8007d94:	0c0a      	lsrs	r2, r1, #16
 8007d96:	189b      	adds	r3, r3, r2
 8007d98:	6802      	ldr	r2, [r0, #0]
 8007d9a:	b289      	uxth	r1, r1
 8007d9c:	b292      	uxth	r2, r2
 8007d9e:	4462      	add	r2, ip
 8007da0:	1a52      	subs	r2, r2, r1
 8007da2:	6801      	ldr	r1, [r0, #0]
 8007da4:	0c1d      	lsrs	r5, r3, #16
 8007da6:	0c09      	lsrs	r1, r1, #16
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	1acb      	subs	r3, r1, r3
 8007dac:	1411      	asrs	r1, r2, #16
 8007dae:	185b      	adds	r3, r3, r1
 8007db0:	1419      	asrs	r1, r3, #16
 8007db2:	b292      	uxth	r2, r2
 8007db4:	041b      	lsls	r3, r3, #16
 8007db6:	431a      	orrs	r2, r3
 8007db8:	9b04      	ldr	r3, [sp, #16]
 8007dba:	468c      	mov	ip, r1
 8007dbc:	c004      	stmia	r0!, {r2}
 8007dbe:	42bb      	cmp	r3, r7
 8007dc0:	d2e1      	bcs.n	8007d86 <quorem+0x4a>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d030      	beq.n	8007e2a <quorem+0xee>
 8007dc8:	0030      	movs	r0, r6
 8007dca:	9903      	ldr	r1, [sp, #12]
 8007dcc:	f001 fb40 	bl	8009450 <__mcmp>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	db21      	blt.n	8007e18 <quorem+0xdc>
 8007dd4:	0030      	movs	r0, r6
 8007dd6:	2400      	movs	r4, #0
 8007dd8:	9b01      	ldr	r3, [sp, #4]
 8007dda:	9903      	ldr	r1, [sp, #12]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	3014      	adds	r0, #20
 8007de2:	3114      	adds	r1, #20
 8007de4:	6803      	ldr	r3, [r0, #0]
 8007de6:	c920      	ldmia	r1!, {r5}
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	1914      	adds	r4, r2, r4
 8007dec:	b2aa      	uxth	r2, r5
 8007dee:	1aa2      	subs	r2, r4, r2
 8007df0:	0c1b      	lsrs	r3, r3, #16
 8007df2:	0c2d      	lsrs	r5, r5, #16
 8007df4:	1414      	asrs	r4, r2, #16
 8007df6:	1b5b      	subs	r3, r3, r5
 8007df8:	191b      	adds	r3, r3, r4
 8007dfa:	141c      	asrs	r4, r3, #16
 8007dfc:	b292      	uxth	r2, r2
 8007dfe:	041b      	lsls	r3, r3, #16
 8007e00:	4313      	orrs	r3, r2
 8007e02:	c008      	stmia	r0!, {r3}
 8007e04:	9b04      	ldr	r3, [sp, #16]
 8007e06:	428b      	cmp	r3, r1
 8007e08:	d2ec      	bcs.n	8007de4 <quorem+0xa8>
 8007e0a:	9b00      	ldr	r3, [sp, #0]
 8007e0c:	9a02      	ldr	r2, [sp, #8]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	18d3      	adds	r3, r2, r3
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	2a00      	cmp	r2, #0
 8007e16:	d015      	beq.n	8007e44 <quorem+0x108>
 8007e18:	9801      	ldr	r0, [sp, #4]
 8007e1a:	b007      	add	sp, #28
 8007e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d106      	bne.n	8007e32 <quorem+0xf6>
 8007e24:	9b00      	ldr	r3, [sp, #0]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	9b02      	ldr	r3, [sp, #8]
 8007e2c:	3c04      	subs	r4, #4
 8007e2e:	42a3      	cmp	r3, r4
 8007e30:	d3f5      	bcc.n	8007e1e <quorem+0xe2>
 8007e32:	9b00      	ldr	r3, [sp, #0]
 8007e34:	6133      	str	r3, [r6, #16]
 8007e36:	e7c7      	b.n	8007dc8 <quorem+0x8c>
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	2a00      	cmp	r2, #0
 8007e3c:	d106      	bne.n	8007e4c <quorem+0x110>
 8007e3e:	9a00      	ldr	r2, [sp, #0]
 8007e40:	3a01      	subs	r2, #1
 8007e42:	9200      	str	r2, [sp, #0]
 8007e44:	9a02      	ldr	r2, [sp, #8]
 8007e46:	3b04      	subs	r3, #4
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d3f5      	bcc.n	8007e38 <quorem+0xfc>
 8007e4c:	9b00      	ldr	r3, [sp, #0]
 8007e4e:	6133      	str	r3, [r6, #16]
 8007e50:	e7e2      	b.n	8007e18 <quorem+0xdc>
	...

08007e54 <_dtoa_r>:
 8007e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e56:	b09d      	sub	sp, #116	; 0x74
 8007e58:	9202      	str	r2, [sp, #8]
 8007e5a:	9303      	str	r3, [sp, #12]
 8007e5c:	9b02      	ldr	r3, [sp, #8]
 8007e5e:	9c03      	ldr	r4, [sp, #12]
 8007e60:	9308      	str	r3, [sp, #32]
 8007e62:	9409      	str	r4, [sp, #36]	; 0x24
 8007e64:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e66:	0007      	movs	r7, r0
 8007e68:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007e6a:	2c00      	cmp	r4, #0
 8007e6c:	d10e      	bne.n	8007e8c <_dtoa_r+0x38>
 8007e6e:	2010      	movs	r0, #16
 8007e70:	f001 f84c 	bl	8008f0c <malloc>
 8007e74:	1e02      	subs	r2, r0, #0
 8007e76:	6278      	str	r0, [r7, #36]	; 0x24
 8007e78:	d104      	bne.n	8007e84 <_dtoa_r+0x30>
 8007e7a:	21ea      	movs	r1, #234	; 0xea
 8007e7c:	4bc7      	ldr	r3, [pc, #796]	; (800819c <_dtoa_r+0x348>)
 8007e7e:	48c8      	ldr	r0, [pc, #800]	; (80081a0 <_dtoa_r+0x34c>)
 8007e80:	f001 fee0 	bl	8009c44 <__assert_func>
 8007e84:	6044      	str	r4, [r0, #4]
 8007e86:	6084      	str	r4, [r0, #8]
 8007e88:	6004      	str	r4, [r0, #0]
 8007e8a:	60c4      	str	r4, [r0, #12]
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	6819      	ldr	r1, [r3, #0]
 8007e90:	2900      	cmp	r1, #0
 8007e92:	d00a      	beq.n	8007eaa <_dtoa_r+0x56>
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	2301      	movs	r3, #1
 8007e98:	4093      	lsls	r3, r2
 8007e9a:	604a      	str	r2, [r1, #4]
 8007e9c:	608b      	str	r3, [r1, #8]
 8007e9e:	0038      	movs	r0, r7
 8007ea0:	f001 f896 	bl	8008fd0 <_Bfree>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	9b03      	ldr	r3, [sp, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	da20      	bge.n	8007ef2 <_dtoa_r+0x9e>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	9309      	str	r3, [sp, #36]	; 0x24
 8007ebc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ebe:	4bb9      	ldr	r3, [pc, #740]	; (80081a4 <_dtoa_r+0x350>)
 8007ec0:	4ab8      	ldr	r2, [pc, #736]	; (80081a4 <_dtoa_r+0x350>)
 8007ec2:	402b      	ands	r3, r5
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d117      	bne.n	8007ef8 <_dtoa_r+0xa4>
 8007ec8:	4bb7      	ldr	r3, [pc, #732]	; (80081a8 <_dtoa_r+0x354>)
 8007eca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ecc:	0328      	lsls	r0, r5, #12
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	9b02      	ldr	r3, [sp, #8]
 8007ed2:	0b00      	lsrs	r0, r0, #12
 8007ed4:	4318      	orrs	r0, r3
 8007ed6:	d101      	bne.n	8007edc <_dtoa_r+0x88>
 8007ed8:	f000 fdbf 	bl	8008a5a <_dtoa_r+0xc06>
 8007edc:	48b3      	ldr	r0, [pc, #716]	; (80081ac <_dtoa_r+0x358>)
 8007ede:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ee0:	9006      	str	r0, [sp, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <_dtoa_r+0x98>
 8007ee6:	4bb2      	ldr	r3, [pc, #712]	; (80081b0 <_dtoa_r+0x35c>)
 8007ee8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	9806      	ldr	r0, [sp, #24]
 8007eee:	b01d      	add	sp, #116	; 0x74
 8007ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	602b      	str	r3, [r5, #0]
 8007ef6:	e7e1      	b.n	8007ebc <_dtoa_r+0x68>
 8007ef8:	9b08      	ldr	r3, [sp, #32]
 8007efa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007efc:	9312      	str	r3, [sp, #72]	; 0x48
 8007efe:	9413      	str	r4, [sp, #76]	; 0x4c
 8007f00:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f02:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f04:	2200      	movs	r2, #0
 8007f06:	2300      	movs	r3, #0
 8007f08:	f7f8 faa0 	bl	800044c <__aeabi_dcmpeq>
 8007f0c:	1e04      	subs	r4, r0, #0
 8007f0e:	d009      	beq.n	8007f24 <_dtoa_r+0xd0>
 8007f10:	2301      	movs	r3, #1
 8007f12:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	4ba7      	ldr	r3, [pc, #668]	; (80081b4 <_dtoa_r+0x360>)
 8007f18:	9306      	str	r3, [sp, #24]
 8007f1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0e5      	beq.n	8007eec <_dtoa_r+0x98>
 8007f20:	4ba5      	ldr	r3, [pc, #660]	; (80081b8 <_dtoa_r+0x364>)
 8007f22:	e7e1      	b.n	8007ee8 <_dtoa_r+0x94>
 8007f24:	ab1a      	add	r3, sp, #104	; 0x68
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	0038      	movs	r0, r7
 8007f2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f32:	f001 fb41 	bl	80095b8 <__d2b>
 8007f36:	006e      	lsls	r6, r5, #1
 8007f38:	9005      	str	r0, [sp, #20]
 8007f3a:	0d76      	lsrs	r6, r6, #21
 8007f3c:	d100      	bne.n	8007f40 <_dtoa_r+0xec>
 8007f3e:	e07c      	b.n	800803a <_dtoa_r+0x1e6>
 8007f40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f46:	4a9d      	ldr	r2, [pc, #628]	; (80081bc <_dtoa_r+0x368>)
 8007f48:	031b      	lsls	r3, r3, #12
 8007f4a:	0b1b      	lsrs	r3, r3, #12
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	0011      	movs	r1, r2
 8007f50:	4b9b      	ldr	r3, [pc, #620]	; (80081c0 <_dtoa_r+0x36c>)
 8007f52:	9418      	str	r4, [sp, #96]	; 0x60
 8007f54:	18f6      	adds	r6, r6, r3
 8007f56:	2200      	movs	r2, #0
 8007f58:	4b9a      	ldr	r3, [pc, #616]	; (80081c4 <_dtoa_r+0x370>)
 8007f5a:	f7f9 fd69 	bl	8001a30 <__aeabi_dsub>
 8007f5e:	4a9a      	ldr	r2, [pc, #616]	; (80081c8 <_dtoa_r+0x374>)
 8007f60:	4b9a      	ldr	r3, [pc, #616]	; (80081cc <_dtoa_r+0x378>)
 8007f62:	f7f9 faf9 	bl	8001558 <__aeabi_dmul>
 8007f66:	4a9a      	ldr	r2, [pc, #616]	; (80081d0 <_dtoa_r+0x37c>)
 8007f68:	4b9a      	ldr	r3, [pc, #616]	; (80081d4 <_dtoa_r+0x380>)
 8007f6a:	f7f8 fbb7 	bl	80006dc <__aeabi_dadd>
 8007f6e:	0004      	movs	r4, r0
 8007f70:	0030      	movs	r0, r6
 8007f72:	000d      	movs	r5, r1
 8007f74:	f7fa f942 	bl	80021fc <__aeabi_i2d>
 8007f78:	4a97      	ldr	r2, [pc, #604]	; (80081d8 <_dtoa_r+0x384>)
 8007f7a:	4b98      	ldr	r3, [pc, #608]	; (80081dc <_dtoa_r+0x388>)
 8007f7c:	f7f9 faec 	bl	8001558 <__aeabi_dmul>
 8007f80:	0002      	movs	r2, r0
 8007f82:	000b      	movs	r3, r1
 8007f84:	0020      	movs	r0, r4
 8007f86:	0029      	movs	r1, r5
 8007f88:	f7f8 fba8 	bl	80006dc <__aeabi_dadd>
 8007f8c:	0004      	movs	r4, r0
 8007f8e:	000d      	movs	r5, r1
 8007f90:	f7fa f8fe 	bl	8002190 <__aeabi_d2iz>
 8007f94:	2200      	movs	r2, #0
 8007f96:	9002      	str	r0, [sp, #8]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	0020      	movs	r0, r4
 8007f9c:	0029      	movs	r1, r5
 8007f9e:	f7f8 fa5b 	bl	8000458 <__aeabi_dcmplt>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d00b      	beq.n	8007fbe <_dtoa_r+0x16a>
 8007fa6:	9802      	ldr	r0, [sp, #8]
 8007fa8:	f7fa f928 	bl	80021fc <__aeabi_i2d>
 8007fac:	002b      	movs	r3, r5
 8007fae:	0022      	movs	r2, r4
 8007fb0:	f7f8 fa4c 	bl	800044c <__aeabi_dcmpeq>
 8007fb4:	4243      	negs	r3, r0
 8007fb6:	4158      	adcs	r0, r3
 8007fb8:	9b02      	ldr	r3, [sp, #8]
 8007fba:	1a1b      	subs	r3, r3, r0
 8007fbc:	9302      	str	r3, [sp, #8]
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	9316      	str	r3, [sp, #88]	; 0x58
 8007fc2:	9b02      	ldr	r3, [sp, #8]
 8007fc4:	2b16      	cmp	r3, #22
 8007fc6:	d80f      	bhi.n	8007fe8 <_dtoa_r+0x194>
 8007fc8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007fca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fcc:	00da      	lsls	r2, r3, #3
 8007fce:	4b84      	ldr	r3, [pc, #528]	; (80081e0 <_dtoa_r+0x38c>)
 8007fd0:	189b      	adds	r3, r3, r2
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f7f8 fa3f 	bl	8000458 <__aeabi_dcmplt>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d049      	beq.n	8008072 <_dtoa_r+0x21e>
 8007fde:	9b02      	ldr	r3, [sp, #8]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	9302      	str	r3, [sp, #8]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9316      	str	r3, [sp, #88]	; 0x58
 8007fe8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007fea:	1b9e      	subs	r6, r3, r6
 8007fec:	2300      	movs	r3, #0
 8007fee:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff0:	0033      	movs	r3, r6
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ff6:	d504      	bpl.n	8008002 <_dtoa_r+0x1ae>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	1b9b      	subs	r3, r3, r6
 8007ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8007ffe:	2300      	movs	r3, #0
 8008000:	930d      	str	r3, [sp, #52]	; 0x34
 8008002:	9b02      	ldr	r3, [sp, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	db36      	blt.n	8008076 <_dtoa_r+0x222>
 8008008:	9a02      	ldr	r2, [sp, #8]
 800800a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800800c:	4694      	mov	ip, r2
 800800e:	4463      	add	r3, ip
 8008010:	930d      	str	r3, [sp, #52]	; 0x34
 8008012:	2300      	movs	r3, #0
 8008014:	9215      	str	r2, [sp, #84]	; 0x54
 8008016:	930e      	str	r3, [sp, #56]	; 0x38
 8008018:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800801a:	2401      	movs	r4, #1
 800801c:	2b09      	cmp	r3, #9
 800801e:	d864      	bhi.n	80080ea <_dtoa_r+0x296>
 8008020:	2b05      	cmp	r3, #5
 8008022:	dd02      	ble.n	800802a <_dtoa_r+0x1d6>
 8008024:	2400      	movs	r4, #0
 8008026:	3b04      	subs	r3, #4
 8008028:	9322      	str	r3, [sp, #136]	; 0x88
 800802a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800802c:	1e98      	subs	r0, r3, #2
 800802e:	2803      	cmp	r0, #3
 8008030:	d864      	bhi.n	80080fc <_dtoa_r+0x2a8>
 8008032:	f7f8 f871 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008036:	3829      	.short	0x3829
 8008038:	5836      	.short	0x5836
 800803a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800803c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800803e:	189e      	adds	r6, r3, r2
 8008040:	4b68      	ldr	r3, [pc, #416]	; (80081e4 <_dtoa_r+0x390>)
 8008042:	18f2      	adds	r2, r6, r3
 8008044:	2a20      	cmp	r2, #32
 8008046:	dd0f      	ble.n	8008068 <_dtoa_r+0x214>
 8008048:	2340      	movs	r3, #64	; 0x40
 800804a:	1a9b      	subs	r3, r3, r2
 800804c:	409d      	lsls	r5, r3
 800804e:	4b66      	ldr	r3, [pc, #408]	; (80081e8 <_dtoa_r+0x394>)
 8008050:	9802      	ldr	r0, [sp, #8]
 8008052:	18f3      	adds	r3, r6, r3
 8008054:	40d8      	lsrs	r0, r3
 8008056:	4328      	orrs	r0, r5
 8008058:	f7fa f900 	bl	800225c <__aeabi_ui2d>
 800805c:	2301      	movs	r3, #1
 800805e:	4c63      	ldr	r4, [pc, #396]	; (80081ec <_dtoa_r+0x398>)
 8008060:	3e01      	subs	r6, #1
 8008062:	1909      	adds	r1, r1, r4
 8008064:	9318      	str	r3, [sp, #96]	; 0x60
 8008066:	e776      	b.n	8007f56 <_dtoa_r+0x102>
 8008068:	2320      	movs	r3, #32
 800806a:	9802      	ldr	r0, [sp, #8]
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	4098      	lsls	r0, r3
 8008070:	e7f2      	b.n	8008058 <_dtoa_r+0x204>
 8008072:	9016      	str	r0, [sp, #88]	; 0x58
 8008074:	e7b8      	b.n	8007fe8 <_dtoa_r+0x194>
 8008076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008078:	9a02      	ldr	r2, [sp, #8]
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	930a      	str	r3, [sp, #40]	; 0x28
 800807e:	4253      	negs	r3, r2
 8008080:	930e      	str	r3, [sp, #56]	; 0x38
 8008082:	2300      	movs	r3, #0
 8008084:	9315      	str	r3, [sp, #84]	; 0x54
 8008086:	e7c7      	b.n	8008018 <_dtoa_r+0x1c4>
 8008088:	2300      	movs	r3, #0
 800808a:	930f      	str	r3, [sp, #60]	; 0x3c
 800808c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800808e:	930c      	str	r3, [sp, #48]	; 0x30
 8008090:	9307      	str	r3, [sp, #28]
 8008092:	2b00      	cmp	r3, #0
 8008094:	dc13      	bgt.n	80080be <_dtoa_r+0x26a>
 8008096:	2301      	movs	r3, #1
 8008098:	001a      	movs	r2, r3
 800809a:	930c      	str	r3, [sp, #48]	; 0x30
 800809c:	9307      	str	r3, [sp, #28]
 800809e:	9223      	str	r2, [sp, #140]	; 0x8c
 80080a0:	e00d      	b.n	80080be <_dtoa_r+0x26a>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e7f1      	b.n	800808a <_dtoa_r+0x236>
 80080a6:	2300      	movs	r3, #0
 80080a8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80080aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80080ac:	4694      	mov	ip, r2
 80080ae:	9b02      	ldr	r3, [sp, #8]
 80080b0:	4463      	add	r3, ip
 80080b2:	930c      	str	r3, [sp, #48]	; 0x30
 80080b4:	3301      	adds	r3, #1
 80080b6:	9307      	str	r3, [sp, #28]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	dc00      	bgt.n	80080be <_dtoa_r+0x26a>
 80080bc:	2301      	movs	r3, #1
 80080be:	2200      	movs	r2, #0
 80080c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080c2:	6042      	str	r2, [r0, #4]
 80080c4:	3204      	adds	r2, #4
 80080c6:	0015      	movs	r5, r2
 80080c8:	3514      	adds	r5, #20
 80080ca:	6841      	ldr	r1, [r0, #4]
 80080cc:	429d      	cmp	r5, r3
 80080ce:	d919      	bls.n	8008104 <_dtoa_r+0x2b0>
 80080d0:	0038      	movs	r0, r7
 80080d2:	f000 ff39 	bl	8008f48 <_Balloc>
 80080d6:	9006      	str	r0, [sp, #24]
 80080d8:	2800      	cmp	r0, #0
 80080da:	d117      	bne.n	800810c <_dtoa_r+0x2b8>
 80080dc:	21d5      	movs	r1, #213	; 0xd5
 80080de:	0002      	movs	r2, r0
 80080e0:	4b43      	ldr	r3, [pc, #268]	; (80081f0 <_dtoa_r+0x39c>)
 80080e2:	0049      	lsls	r1, r1, #1
 80080e4:	e6cb      	b.n	8007e7e <_dtoa_r+0x2a>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e7de      	b.n	80080a8 <_dtoa_r+0x254>
 80080ea:	2300      	movs	r3, #0
 80080ec:	940f      	str	r4, [sp, #60]	; 0x3c
 80080ee:	9322      	str	r3, [sp, #136]	; 0x88
 80080f0:	3b01      	subs	r3, #1
 80080f2:	930c      	str	r3, [sp, #48]	; 0x30
 80080f4:	9307      	str	r3, [sp, #28]
 80080f6:	2200      	movs	r2, #0
 80080f8:	3313      	adds	r3, #19
 80080fa:	e7d0      	b.n	800809e <_dtoa_r+0x24a>
 80080fc:	2301      	movs	r3, #1
 80080fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008100:	3b02      	subs	r3, #2
 8008102:	e7f6      	b.n	80080f2 <_dtoa_r+0x29e>
 8008104:	3101      	adds	r1, #1
 8008106:	6041      	str	r1, [r0, #4]
 8008108:	0052      	lsls	r2, r2, #1
 800810a:	e7dc      	b.n	80080c6 <_dtoa_r+0x272>
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	9a06      	ldr	r2, [sp, #24]
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	9b07      	ldr	r3, [sp, #28]
 8008114:	2b0e      	cmp	r3, #14
 8008116:	d900      	bls.n	800811a <_dtoa_r+0x2c6>
 8008118:	e0eb      	b.n	80082f2 <_dtoa_r+0x49e>
 800811a:	2c00      	cmp	r4, #0
 800811c:	d100      	bne.n	8008120 <_dtoa_r+0x2cc>
 800811e:	e0e8      	b.n	80082f2 <_dtoa_r+0x49e>
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	dd68      	ble.n	80081f8 <_dtoa_r+0x3a4>
 8008126:	001a      	movs	r2, r3
 8008128:	210f      	movs	r1, #15
 800812a:	4b2d      	ldr	r3, [pc, #180]	; (80081e0 <_dtoa_r+0x38c>)
 800812c:	400a      	ands	r2, r1
 800812e:	00d2      	lsls	r2, r2, #3
 8008130:	189b      	adds	r3, r3, r2
 8008132:	681d      	ldr	r5, [r3, #0]
 8008134:	685e      	ldr	r6, [r3, #4]
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	111c      	asrs	r4, r3, #4
 800813a:	2302      	movs	r3, #2
 800813c:	9310      	str	r3, [sp, #64]	; 0x40
 800813e:	9b02      	ldr	r3, [sp, #8]
 8008140:	05db      	lsls	r3, r3, #23
 8008142:	d50b      	bpl.n	800815c <_dtoa_r+0x308>
 8008144:	4b2b      	ldr	r3, [pc, #172]	; (80081f4 <_dtoa_r+0x3a0>)
 8008146:	400c      	ands	r4, r1
 8008148:	6a1a      	ldr	r2, [r3, #32]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800814e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008150:	f7f8 fe00 	bl	8000d54 <__aeabi_ddiv>
 8008154:	2303      	movs	r3, #3
 8008156:	9008      	str	r0, [sp, #32]
 8008158:	9109      	str	r1, [sp, #36]	; 0x24
 800815a:	9310      	str	r3, [sp, #64]	; 0x40
 800815c:	4b25      	ldr	r3, [pc, #148]	; (80081f4 <_dtoa_r+0x3a0>)
 800815e:	9314      	str	r3, [sp, #80]	; 0x50
 8008160:	2c00      	cmp	r4, #0
 8008162:	d108      	bne.n	8008176 <_dtoa_r+0x322>
 8008164:	9808      	ldr	r0, [sp, #32]
 8008166:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008168:	002a      	movs	r2, r5
 800816a:	0033      	movs	r3, r6
 800816c:	f7f8 fdf2 	bl	8000d54 <__aeabi_ddiv>
 8008170:	9008      	str	r0, [sp, #32]
 8008172:	9109      	str	r1, [sp, #36]	; 0x24
 8008174:	e05c      	b.n	8008230 <_dtoa_r+0x3dc>
 8008176:	2301      	movs	r3, #1
 8008178:	421c      	tst	r4, r3
 800817a:	d00b      	beq.n	8008194 <_dtoa_r+0x340>
 800817c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800817e:	0028      	movs	r0, r5
 8008180:	3301      	adds	r3, #1
 8008182:	9310      	str	r3, [sp, #64]	; 0x40
 8008184:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008186:	0031      	movs	r1, r6
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f7f9 f9e4 	bl	8001558 <__aeabi_dmul>
 8008190:	0005      	movs	r5, r0
 8008192:	000e      	movs	r6, r1
 8008194:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008196:	1064      	asrs	r4, r4, #1
 8008198:	3308      	adds	r3, #8
 800819a:	e7e0      	b.n	800815e <_dtoa_r+0x30a>
 800819c:	0800a01d 	.word	0x0800a01d
 80081a0:	0800a034 	.word	0x0800a034
 80081a4:	7ff00000 	.word	0x7ff00000
 80081a8:	0000270f 	.word	0x0000270f
 80081ac:	0800a019 	.word	0x0800a019
 80081b0:	0800a01c 	.word	0x0800a01c
 80081b4:	08009fec 	.word	0x08009fec
 80081b8:	08009fed 	.word	0x08009fed
 80081bc:	3ff00000 	.word	0x3ff00000
 80081c0:	fffffc01 	.word	0xfffffc01
 80081c4:	3ff80000 	.word	0x3ff80000
 80081c8:	636f4361 	.word	0x636f4361
 80081cc:	3fd287a7 	.word	0x3fd287a7
 80081d0:	8b60c8b3 	.word	0x8b60c8b3
 80081d4:	3fc68a28 	.word	0x3fc68a28
 80081d8:	509f79fb 	.word	0x509f79fb
 80081dc:	3fd34413 	.word	0x3fd34413
 80081e0:	0800a188 	.word	0x0800a188
 80081e4:	00000432 	.word	0x00000432
 80081e8:	00000412 	.word	0x00000412
 80081ec:	fe100000 	.word	0xfe100000
 80081f0:	0800a08f 	.word	0x0800a08f
 80081f4:	0800a160 	.word	0x0800a160
 80081f8:	2302      	movs	r3, #2
 80081fa:	9310      	str	r3, [sp, #64]	; 0x40
 80081fc:	9b02      	ldr	r3, [sp, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d016      	beq.n	8008230 <_dtoa_r+0x3dc>
 8008202:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008204:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008206:	425c      	negs	r4, r3
 8008208:	230f      	movs	r3, #15
 800820a:	4ab6      	ldr	r2, [pc, #728]	; (80084e4 <_dtoa_r+0x690>)
 800820c:	4023      	ands	r3, r4
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	18d3      	adds	r3, r2, r3
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f7f9 f99f 	bl	8001558 <__aeabi_dmul>
 800821a:	2601      	movs	r6, #1
 800821c:	2300      	movs	r3, #0
 800821e:	9008      	str	r0, [sp, #32]
 8008220:	9109      	str	r1, [sp, #36]	; 0x24
 8008222:	4db1      	ldr	r5, [pc, #708]	; (80084e8 <_dtoa_r+0x694>)
 8008224:	1124      	asrs	r4, r4, #4
 8008226:	2c00      	cmp	r4, #0
 8008228:	d000      	beq.n	800822c <_dtoa_r+0x3d8>
 800822a:	e094      	b.n	8008356 <_dtoa_r+0x502>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d19f      	bne.n	8008170 <_dtoa_r+0x31c>
 8008230:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008232:	2b00      	cmp	r3, #0
 8008234:	d100      	bne.n	8008238 <_dtoa_r+0x3e4>
 8008236:	e09b      	b.n	8008370 <_dtoa_r+0x51c>
 8008238:	9c08      	ldr	r4, [sp, #32]
 800823a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800823c:	2200      	movs	r2, #0
 800823e:	0020      	movs	r0, r4
 8008240:	0029      	movs	r1, r5
 8008242:	4baa      	ldr	r3, [pc, #680]	; (80084ec <_dtoa_r+0x698>)
 8008244:	f7f8 f908 	bl	8000458 <__aeabi_dcmplt>
 8008248:	2800      	cmp	r0, #0
 800824a:	d100      	bne.n	800824e <_dtoa_r+0x3fa>
 800824c:	e090      	b.n	8008370 <_dtoa_r+0x51c>
 800824e:	9b07      	ldr	r3, [sp, #28]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d100      	bne.n	8008256 <_dtoa_r+0x402>
 8008254:	e08c      	b.n	8008370 <_dtoa_r+0x51c>
 8008256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008258:	2b00      	cmp	r3, #0
 800825a:	dd46      	ble.n	80082ea <_dtoa_r+0x496>
 800825c:	9b02      	ldr	r3, [sp, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	0020      	movs	r0, r4
 8008262:	0029      	movs	r1, r5
 8008264:	1e5e      	subs	r6, r3, #1
 8008266:	4ba2      	ldr	r3, [pc, #648]	; (80084f0 <_dtoa_r+0x69c>)
 8008268:	f7f9 f976 	bl	8001558 <__aeabi_dmul>
 800826c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800826e:	9008      	str	r0, [sp, #32]
 8008270:	9109      	str	r1, [sp, #36]	; 0x24
 8008272:	3301      	adds	r3, #1
 8008274:	9310      	str	r3, [sp, #64]	; 0x40
 8008276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008278:	9810      	ldr	r0, [sp, #64]	; 0x40
 800827a:	9c08      	ldr	r4, [sp, #32]
 800827c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800827e:	9314      	str	r3, [sp, #80]	; 0x50
 8008280:	f7f9 ffbc 	bl	80021fc <__aeabi_i2d>
 8008284:	0022      	movs	r2, r4
 8008286:	002b      	movs	r3, r5
 8008288:	f7f9 f966 	bl	8001558 <__aeabi_dmul>
 800828c:	2200      	movs	r2, #0
 800828e:	4b99      	ldr	r3, [pc, #612]	; (80084f4 <_dtoa_r+0x6a0>)
 8008290:	f7f8 fa24 	bl	80006dc <__aeabi_dadd>
 8008294:	9010      	str	r0, [sp, #64]	; 0x40
 8008296:	9111      	str	r1, [sp, #68]	; 0x44
 8008298:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800829a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800829c:	9208      	str	r2, [sp, #32]
 800829e:	9309      	str	r3, [sp, #36]	; 0x24
 80082a0:	4a95      	ldr	r2, [pc, #596]	; (80084f8 <_dtoa_r+0x6a4>)
 80082a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082a4:	4694      	mov	ip, r2
 80082a6:	4463      	add	r3, ip
 80082a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80082aa:	9309      	str	r3, [sp, #36]	; 0x24
 80082ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d161      	bne.n	8008376 <_dtoa_r+0x522>
 80082b2:	2200      	movs	r2, #0
 80082b4:	0020      	movs	r0, r4
 80082b6:	0029      	movs	r1, r5
 80082b8:	4b90      	ldr	r3, [pc, #576]	; (80084fc <_dtoa_r+0x6a8>)
 80082ba:	f7f9 fbb9 	bl	8001a30 <__aeabi_dsub>
 80082be:	9a08      	ldr	r2, [sp, #32]
 80082c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082c2:	0004      	movs	r4, r0
 80082c4:	000d      	movs	r5, r1
 80082c6:	f7f8 f8db 	bl	8000480 <__aeabi_dcmpgt>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d000      	beq.n	80082d0 <_dtoa_r+0x47c>
 80082ce:	e2af      	b.n	8008830 <_dtoa_r+0x9dc>
 80082d0:	488b      	ldr	r0, [pc, #556]	; (8008500 <_dtoa_r+0x6ac>)
 80082d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082d4:	4684      	mov	ip, r0
 80082d6:	4461      	add	r1, ip
 80082d8:	000b      	movs	r3, r1
 80082da:	0020      	movs	r0, r4
 80082dc:	0029      	movs	r1, r5
 80082de:	9a08      	ldr	r2, [sp, #32]
 80082e0:	f7f8 f8ba 	bl	8000458 <__aeabi_dcmplt>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d000      	beq.n	80082ea <_dtoa_r+0x496>
 80082e8:	e29f      	b.n	800882a <_dtoa_r+0x9d6>
 80082ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80082ee:	9308      	str	r3, [sp, #32]
 80082f0:	9409      	str	r4, [sp, #36]	; 0x24
 80082f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	da00      	bge.n	80082fa <_dtoa_r+0x4a6>
 80082f8:	e172      	b.n	80085e0 <_dtoa_r+0x78c>
 80082fa:	9a02      	ldr	r2, [sp, #8]
 80082fc:	2a0e      	cmp	r2, #14
 80082fe:	dd00      	ble.n	8008302 <_dtoa_r+0x4ae>
 8008300:	e16e      	b.n	80085e0 <_dtoa_r+0x78c>
 8008302:	4b78      	ldr	r3, [pc, #480]	; (80084e4 <_dtoa_r+0x690>)
 8008304:	00d2      	lsls	r2, r2, #3
 8008306:	189b      	adds	r3, r3, r2
 8008308:	685c      	ldr	r4, [r3, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	930a      	str	r3, [sp, #40]	; 0x28
 800830e:	940b      	str	r4, [sp, #44]	; 0x2c
 8008310:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008312:	2b00      	cmp	r3, #0
 8008314:	db00      	blt.n	8008318 <_dtoa_r+0x4c4>
 8008316:	e0f7      	b.n	8008508 <_dtoa_r+0x6b4>
 8008318:	9b07      	ldr	r3, [sp, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	dd00      	ble.n	8008320 <_dtoa_r+0x4cc>
 800831e:	e0f3      	b.n	8008508 <_dtoa_r+0x6b4>
 8008320:	d000      	beq.n	8008324 <_dtoa_r+0x4d0>
 8008322:	e282      	b.n	800882a <_dtoa_r+0x9d6>
 8008324:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008326:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008328:	2200      	movs	r2, #0
 800832a:	4b74      	ldr	r3, [pc, #464]	; (80084fc <_dtoa_r+0x6a8>)
 800832c:	f7f9 f914 	bl	8001558 <__aeabi_dmul>
 8008330:	9a08      	ldr	r2, [sp, #32]
 8008332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008334:	f7f8 f8ae 	bl	8000494 <__aeabi_dcmpge>
 8008338:	9e07      	ldr	r6, [sp, #28]
 800833a:	0035      	movs	r5, r6
 800833c:	2800      	cmp	r0, #0
 800833e:	d000      	beq.n	8008342 <_dtoa_r+0x4ee>
 8008340:	e259      	b.n	80087f6 <_dtoa_r+0x9a2>
 8008342:	9b06      	ldr	r3, [sp, #24]
 8008344:	9a06      	ldr	r2, [sp, #24]
 8008346:	3301      	adds	r3, #1
 8008348:	9308      	str	r3, [sp, #32]
 800834a:	2331      	movs	r3, #49	; 0x31
 800834c:	7013      	strb	r3, [r2, #0]
 800834e:	9b02      	ldr	r3, [sp, #8]
 8008350:	3301      	adds	r3, #1
 8008352:	9302      	str	r3, [sp, #8]
 8008354:	e254      	b.n	8008800 <_dtoa_r+0x9ac>
 8008356:	4234      	tst	r4, r6
 8008358:	d007      	beq.n	800836a <_dtoa_r+0x516>
 800835a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800835c:	3301      	adds	r3, #1
 800835e:	9310      	str	r3, [sp, #64]	; 0x40
 8008360:	682a      	ldr	r2, [r5, #0]
 8008362:	686b      	ldr	r3, [r5, #4]
 8008364:	f7f9 f8f8 	bl	8001558 <__aeabi_dmul>
 8008368:	0033      	movs	r3, r6
 800836a:	1064      	asrs	r4, r4, #1
 800836c:	3508      	adds	r5, #8
 800836e:	e75a      	b.n	8008226 <_dtoa_r+0x3d2>
 8008370:	9e02      	ldr	r6, [sp, #8]
 8008372:	9b07      	ldr	r3, [sp, #28]
 8008374:	e780      	b.n	8008278 <_dtoa_r+0x424>
 8008376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008378:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800837a:	1e5a      	subs	r2, r3, #1
 800837c:	4b59      	ldr	r3, [pc, #356]	; (80084e4 <_dtoa_r+0x690>)
 800837e:	00d2      	lsls	r2, r2, #3
 8008380:	189b      	adds	r3, r3, r2
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	2900      	cmp	r1, #0
 8008388:	d051      	beq.n	800842e <_dtoa_r+0x5da>
 800838a:	2000      	movs	r0, #0
 800838c:	495d      	ldr	r1, [pc, #372]	; (8008504 <_dtoa_r+0x6b0>)
 800838e:	f7f8 fce1 	bl	8000d54 <__aeabi_ddiv>
 8008392:	9a08      	ldr	r2, [sp, #32]
 8008394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008396:	f7f9 fb4b 	bl	8001a30 <__aeabi_dsub>
 800839a:	9a06      	ldr	r2, [sp, #24]
 800839c:	9b06      	ldr	r3, [sp, #24]
 800839e:	4694      	mov	ip, r2
 80083a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80083a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083a4:	9010      	str	r0, [sp, #64]	; 0x40
 80083a6:	9111      	str	r1, [sp, #68]	; 0x44
 80083a8:	4463      	add	r3, ip
 80083aa:	9319      	str	r3, [sp, #100]	; 0x64
 80083ac:	0029      	movs	r1, r5
 80083ae:	0020      	movs	r0, r4
 80083b0:	f7f9 feee 	bl	8002190 <__aeabi_d2iz>
 80083b4:	9014      	str	r0, [sp, #80]	; 0x50
 80083b6:	f7f9 ff21 	bl	80021fc <__aeabi_i2d>
 80083ba:	0002      	movs	r2, r0
 80083bc:	000b      	movs	r3, r1
 80083be:	0020      	movs	r0, r4
 80083c0:	0029      	movs	r1, r5
 80083c2:	f7f9 fb35 	bl	8001a30 <__aeabi_dsub>
 80083c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083ca:	3301      	adds	r3, #1
 80083cc:	9308      	str	r3, [sp, #32]
 80083ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083d0:	0004      	movs	r4, r0
 80083d2:	3330      	adds	r3, #48	; 0x30
 80083d4:	7013      	strb	r3, [r2, #0]
 80083d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083da:	000d      	movs	r5, r1
 80083dc:	f7f8 f83c 	bl	8000458 <__aeabi_dcmplt>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d175      	bne.n	80084d0 <_dtoa_r+0x67c>
 80083e4:	0022      	movs	r2, r4
 80083e6:	002b      	movs	r3, r5
 80083e8:	2000      	movs	r0, #0
 80083ea:	4940      	ldr	r1, [pc, #256]	; (80084ec <_dtoa_r+0x698>)
 80083ec:	f7f9 fb20 	bl	8001a30 <__aeabi_dsub>
 80083f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083f4:	f7f8 f830 	bl	8000458 <__aeabi_dcmplt>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d000      	beq.n	80083fe <_dtoa_r+0x5aa>
 80083fc:	e0d2      	b.n	80085a4 <_dtoa_r+0x750>
 80083fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008400:	9a08      	ldr	r2, [sp, #32]
 8008402:	4293      	cmp	r3, r2
 8008404:	d100      	bne.n	8008408 <_dtoa_r+0x5b4>
 8008406:	e770      	b.n	80082ea <_dtoa_r+0x496>
 8008408:	9810      	ldr	r0, [sp, #64]	; 0x40
 800840a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800840c:	2200      	movs	r2, #0
 800840e:	4b38      	ldr	r3, [pc, #224]	; (80084f0 <_dtoa_r+0x69c>)
 8008410:	f7f9 f8a2 	bl	8001558 <__aeabi_dmul>
 8008414:	4b36      	ldr	r3, [pc, #216]	; (80084f0 <_dtoa_r+0x69c>)
 8008416:	9010      	str	r0, [sp, #64]	; 0x40
 8008418:	9111      	str	r1, [sp, #68]	; 0x44
 800841a:	2200      	movs	r2, #0
 800841c:	0020      	movs	r0, r4
 800841e:	0029      	movs	r1, r5
 8008420:	f7f9 f89a 	bl	8001558 <__aeabi_dmul>
 8008424:	9b08      	ldr	r3, [sp, #32]
 8008426:	0004      	movs	r4, r0
 8008428:	000d      	movs	r5, r1
 800842a:	9317      	str	r3, [sp, #92]	; 0x5c
 800842c:	e7be      	b.n	80083ac <_dtoa_r+0x558>
 800842e:	9808      	ldr	r0, [sp, #32]
 8008430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008432:	f7f9 f891 	bl	8001558 <__aeabi_dmul>
 8008436:	9a06      	ldr	r2, [sp, #24]
 8008438:	9b06      	ldr	r3, [sp, #24]
 800843a:	4694      	mov	ip, r2
 800843c:	9308      	str	r3, [sp, #32]
 800843e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008440:	9010      	str	r0, [sp, #64]	; 0x40
 8008442:	9111      	str	r1, [sp, #68]	; 0x44
 8008444:	4463      	add	r3, ip
 8008446:	9319      	str	r3, [sp, #100]	; 0x64
 8008448:	0029      	movs	r1, r5
 800844a:	0020      	movs	r0, r4
 800844c:	f7f9 fea0 	bl	8002190 <__aeabi_d2iz>
 8008450:	9017      	str	r0, [sp, #92]	; 0x5c
 8008452:	f7f9 fed3 	bl	80021fc <__aeabi_i2d>
 8008456:	0002      	movs	r2, r0
 8008458:	000b      	movs	r3, r1
 800845a:	0020      	movs	r0, r4
 800845c:	0029      	movs	r1, r5
 800845e:	f7f9 fae7 	bl	8001a30 <__aeabi_dsub>
 8008462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008464:	9a08      	ldr	r2, [sp, #32]
 8008466:	3330      	adds	r3, #48	; 0x30
 8008468:	7013      	strb	r3, [r2, #0]
 800846a:	0013      	movs	r3, r2
 800846c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800846e:	3301      	adds	r3, #1
 8008470:	0004      	movs	r4, r0
 8008472:	000d      	movs	r5, r1
 8008474:	9308      	str	r3, [sp, #32]
 8008476:	4293      	cmp	r3, r2
 8008478:	d12c      	bne.n	80084d4 <_dtoa_r+0x680>
 800847a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800847c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800847e:	9a06      	ldr	r2, [sp, #24]
 8008480:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008482:	4694      	mov	ip, r2
 8008484:	4463      	add	r3, ip
 8008486:	2200      	movs	r2, #0
 8008488:	9308      	str	r3, [sp, #32]
 800848a:	4b1e      	ldr	r3, [pc, #120]	; (8008504 <_dtoa_r+0x6b0>)
 800848c:	f7f8 f926 	bl	80006dc <__aeabi_dadd>
 8008490:	0002      	movs	r2, r0
 8008492:	000b      	movs	r3, r1
 8008494:	0020      	movs	r0, r4
 8008496:	0029      	movs	r1, r5
 8008498:	f7f7 fff2 	bl	8000480 <__aeabi_dcmpgt>
 800849c:	2800      	cmp	r0, #0
 800849e:	d000      	beq.n	80084a2 <_dtoa_r+0x64e>
 80084a0:	e080      	b.n	80085a4 <_dtoa_r+0x750>
 80084a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084a6:	2000      	movs	r0, #0
 80084a8:	4916      	ldr	r1, [pc, #88]	; (8008504 <_dtoa_r+0x6b0>)
 80084aa:	f7f9 fac1 	bl	8001a30 <__aeabi_dsub>
 80084ae:	0002      	movs	r2, r0
 80084b0:	000b      	movs	r3, r1
 80084b2:	0020      	movs	r0, r4
 80084b4:	0029      	movs	r1, r5
 80084b6:	f7f7 ffcf 	bl	8000458 <__aeabi_dcmplt>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d100      	bne.n	80084c0 <_dtoa_r+0x66c>
 80084be:	e714      	b.n	80082ea <_dtoa_r+0x496>
 80084c0:	9b08      	ldr	r3, [sp, #32]
 80084c2:	001a      	movs	r2, r3
 80084c4:	3a01      	subs	r2, #1
 80084c6:	9208      	str	r2, [sp, #32]
 80084c8:	7812      	ldrb	r2, [r2, #0]
 80084ca:	2a30      	cmp	r2, #48	; 0x30
 80084cc:	d0f8      	beq.n	80084c0 <_dtoa_r+0x66c>
 80084ce:	9308      	str	r3, [sp, #32]
 80084d0:	9602      	str	r6, [sp, #8]
 80084d2:	e055      	b.n	8008580 <_dtoa_r+0x72c>
 80084d4:	2200      	movs	r2, #0
 80084d6:	4b06      	ldr	r3, [pc, #24]	; (80084f0 <_dtoa_r+0x69c>)
 80084d8:	f7f9 f83e 	bl	8001558 <__aeabi_dmul>
 80084dc:	0004      	movs	r4, r0
 80084de:	000d      	movs	r5, r1
 80084e0:	e7b2      	b.n	8008448 <_dtoa_r+0x5f4>
 80084e2:	46c0      	nop			; (mov r8, r8)
 80084e4:	0800a188 	.word	0x0800a188
 80084e8:	0800a160 	.word	0x0800a160
 80084ec:	3ff00000 	.word	0x3ff00000
 80084f0:	40240000 	.word	0x40240000
 80084f4:	401c0000 	.word	0x401c0000
 80084f8:	fcc00000 	.word	0xfcc00000
 80084fc:	40140000 	.word	0x40140000
 8008500:	7cc00000 	.word	0x7cc00000
 8008504:	3fe00000 	.word	0x3fe00000
 8008508:	9b07      	ldr	r3, [sp, #28]
 800850a:	9e06      	ldr	r6, [sp, #24]
 800850c:	3b01      	subs	r3, #1
 800850e:	199b      	adds	r3, r3, r6
 8008510:	930c      	str	r3, [sp, #48]	; 0x30
 8008512:	9c08      	ldr	r4, [sp, #32]
 8008514:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800851a:	0020      	movs	r0, r4
 800851c:	0029      	movs	r1, r5
 800851e:	f7f8 fc19 	bl	8000d54 <__aeabi_ddiv>
 8008522:	f7f9 fe35 	bl	8002190 <__aeabi_d2iz>
 8008526:	9007      	str	r0, [sp, #28]
 8008528:	f7f9 fe68 	bl	80021fc <__aeabi_i2d>
 800852c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800852e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008530:	f7f9 f812 	bl	8001558 <__aeabi_dmul>
 8008534:	0002      	movs	r2, r0
 8008536:	000b      	movs	r3, r1
 8008538:	0020      	movs	r0, r4
 800853a:	0029      	movs	r1, r5
 800853c:	f7f9 fa78 	bl	8001a30 <__aeabi_dsub>
 8008540:	0033      	movs	r3, r6
 8008542:	9a07      	ldr	r2, [sp, #28]
 8008544:	3601      	adds	r6, #1
 8008546:	3230      	adds	r2, #48	; 0x30
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800854c:	9608      	str	r6, [sp, #32]
 800854e:	429a      	cmp	r2, r3
 8008550:	d139      	bne.n	80085c6 <_dtoa_r+0x772>
 8008552:	0002      	movs	r2, r0
 8008554:	000b      	movs	r3, r1
 8008556:	f7f8 f8c1 	bl	80006dc <__aeabi_dadd>
 800855a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800855c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800855e:	0004      	movs	r4, r0
 8008560:	000d      	movs	r5, r1
 8008562:	f7f7 ff8d 	bl	8000480 <__aeabi_dcmpgt>
 8008566:	2800      	cmp	r0, #0
 8008568:	d11b      	bne.n	80085a2 <_dtoa_r+0x74e>
 800856a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800856c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800856e:	0020      	movs	r0, r4
 8008570:	0029      	movs	r1, r5
 8008572:	f7f7 ff6b 	bl	800044c <__aeabi_dcmpeq>
 8008576:	2800      	cmp	r0, #0
 8008578:	d002      	beq.n	8008580 <_dtoa_r+0x72c>
 800857a:	9b07      	ldr	r3, [sp, #28]
 800857c:	07db      	lsls	r3, r3, #31
 800857e:	d410      	bmi.n	80085a2 <_dtoa_r+0x74e>
 8008580:	0038      	movs	r0, r7
 8008582:	9905      	ldr	r1, [sp, #20]
 8008584:	f000 fd24 	bl	8008fd0 <_Bfree>
 8008588:	2300      	movs	r3, #0
 800858a:	9a08      	ldr	r2, [sp, #32]
 800858c:	9802      	ldr	r0, [sp, #8]
 800858e:	7013      	strb	r3, [r2, #0]
 8008590:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008592:	3001      	adds	r0, #1
 8008594:	6018      	str	r0, [r3, #0]
 8008596:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008598:	2b00      	cmp	r3, #0
 800859a:	d100      	bne.n	800859e <_dtoa_r+0x74a>
 800859c:	e4a6      	b.n	8007eec <_dtoa_r+0x98>
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	e4a4      	b.n	8007eec <_dtoa_r+0x98>
 80085a2:	9e02      	ldr	r6, [sp, #8]
 80085a4:	9b08      	ldr	r3, [sp, #32]
 80085a6:	9308      	str	r3, [sp, #32]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	781a      	ldrb	r2, [r3, #0]
 80085ac:	2a39      	cmp	r2, #57	; 0x39
 80085ae:	d106      	bne.n	80085be <_dtoa_r+0x76a>
 80085b0:	9a06      	ldr	r2, [sp, #24]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d1f7      	bne.n	80085a6 <_dtoa_r+0x752>
 80085b6:	2230      	movs	r2, #48	; 0x30
 80085b8:	9906      	ldr	r1, [sp, #24]
 80085ba:	3601      	adds	r6, #1
 80085bc:	700a      	strb	r2, [r1, #0]
 80085be:	781a      	ldrb	r2, [r3, #0]
 80085c0:	3201      	adds	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	e784      	b.n	80084d0 <_dtoa_r+0x67c>
 80085c6:	2200      	movs	r2, #0
 80085c8:	4baa      	ldr	r3, [pc, #680]	; (8008874 <_dtoa_r+0xa20>)
 80085ca:	f7f8 ffc5 	bl	8001558 <__aeabi_dmul>
 80085ce:	2200      	movs	r2, #0
 80085d0:	2300      	movs	r3, #0
 80085d2:	0004      	movs	r4, r0
 80085d4:	000d      	movs	r5, r1
 80085d6:	f7f7 ff39 	bl	800044c <__aeabi_dcmpeq>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d09b      	beq.n	8008516 <_dtoa_r+0x6c2>
 80085de:	e7cf      	b.n	8008580 <_dtoa_r+0x72c>
 80085e0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80085e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	d012      	beq.n	8008610 <_dtoa_r+0x7bc>
 80085ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80085ec:	2a01      	cmp	r2, #1
 80085ee:	dc66      	bgt.n	80086be <_dtoa_r+0x86a>
 80085f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80085f2:	2a00      	cmp	r2, #0
 80085f4:	d05d      	beq.n	80086b2 <_dtoa_r+0x85e>
 80085f6:	4aa0      	ldr	r2, [pc, #640]	; (8008878 <_dtoa_r+0xa24>)
 80085f8:	189b      	adds	r3, r3, r2
 80085fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085fc:	2101      	movs	r1, #1
 80085fe:	18d2      	adds	r2, r2, r3
 8008600:	920a      	str	r2, [sp, #40]	; 0x28
 8008602:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008604:	0038      	movs	r0, r7
 8008606:	18d3      	adds	r3, r2, r3
 8008608:	930d      	str	r3, [sp, #52]	; 0x34
 800860a:	f000 fd91 	bl	8009130 <__i2b>
 800860e:	0005      	movs	r5, r0
 8008610:	2c00      	cmp	r4, #0
 8008612:	dd0e      	ble.n	8008632 <_dtoa_r+0x7de>
 8008614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008616:	2b00      	cmp	r3, #0
 8008618:	dd0b      	ble.n	8008632 <_dtoa_r+0x7de>
 800861a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800861c:	0023      	movs	r3, r4
 800861e:	4294      	cmp	r4, r2
 8008620:	dd00      	ble.n	8008624 <_dtoa_r+0x7d0>
 8008622:	0013      	movs	r3, r2
 8008624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008626:	1ae4      	subs	r4, r4, r3
 8008628:	1ad2      	subs	r2, r2, r3
 800862a:	920a      	str	r2, [sp, #40]	; 0x28
 800862c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	930d      	str	r3, [sp, #52]	; 0x34
 8008632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01f      	beq.n	8008678 <_dtoa_r+0x824>
 8008638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800863a:	2b00      	cmp	r3, #0
 800863c:	d054      	beq.n	80086e8 <_dtoa_r+0x894>
 800863e:	2e00      	cmp	r6, #0
 8008640:	dd11      	ble.n	8008666 <_dtoa_r+0x812>
 8008642:	0029      	movs	r1, r5
 8008644:	0032      	movs	r2, r6
 8008646:	0038      	movs	r0, r7
 8008648:	f000 fe38 	bl	80092bc <__pow5mult>
 800864c:	9a05      	ldr	r2, [sp, #20]
 800864e:	0001      	movs	r1, r0
 8008650:	0005      	movs	r5, r0
 8008652:	0038      	movs	r0, r7
 8008654:	f000 fd82 	bl	800915c <__multiply>
 8008658:	9905      	ldr	r1, [sp, #20]
 800865a:	9014      	str	r0, [sp, #80]	; 0x50
 800865c:	0038      	movs	r0, r7
 800865e:	f000 fcb7 	bl	8008fd0 <_Bfree>
 8008662:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008664:	9305      	str	r3, [sp, #20]
 8008666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008668:	1b9a      	subs	r2, r3, r6
 800866a:	42b3      	cmp	r3, r6
 800866c:	d004      	beq.n	8008678 <_dtoa_r+0x824>
 800866e:	0038      	movs	r0, r7
 8008670:	9905      	ldr	r1, [sp, #20]
 8008672:	f000 fe23 	bl	80092bc <__pow5mult>
 8008676:	9005      	str	r0, [sp, #20]
 8008678:	2101      	movs	r1, #1
 800867a:	0038      	movs	r0, r7
 800867c:	f000 fd58 	bl	8009130 <__i2b>
 8008680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008682:	0006      	movs	r6, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	dd31      	ble.n	80086ec <_dtoa_r+0x898>
 8008688:	001a      	movs	r2, r3
 800868a:	0001      	movs	r1, r0
 800868c:	0038      	movs	r0, r7
 800868e:	f000 fe15 	bl	80092bc <__pow5mult>
 8008692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008694:	0006      	movs	r6, r0
 8008696:	2b01      	cmp	r3, #1
 8008698:	dd2d      	ble.n	80086f6 <_dtoa_r+0x8a2>
 800869a:	2300      	movs	r3, #0
 800869c:	930e      	str	r3, [sp, #56]	; 0x38
 800869e:	6933      	ldr	r3, [r6, #16]
 80086a0:	3303      	adds	r3, #3
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	18f3      	adds	r3, r6, r3
 80086a6:	6858      	ldr	r0, [r3, #4]
 80086a8:	f000 fcfa 	bl	80090a0 <__hi0bits>
 80086ac:	2320      	movs	r3, #32
 80086ae:	1a18      	subs	r0, r3, r0
 80086b0:	e039      	b.n	8008726 <_dtoa_r+0x8d2>
 80086b2:	2336      	movs	r3, #54	; 0x36
 80086b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80086b6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80086b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086ba:	1a9b      	subs	r3, r3, r2
 80086bc:	e79d      	b.n	80085fa <_dtoa_r+0x7a6>
 80086be:	9b07      	ldr	r3, [sp, #28]
 80086c0:	1e5e      	subs	r6, r3, #1
 80086c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086c4:	42b3      	cmp	r3, r6
 80086c6:	db07      	blt.n	80086d8 <_dtoa_r+0x884>
 80086c8:	1b9e      	subs	r6, r3, r6
 80086ca:	9b07      	ldr	r3, [sp, #28]
 80086cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da93      	bge.n	80085fa <_dtoa_r+0x7a6>
 80086d2:	1ae4      	subs	r4, r4, r3
 80086d4:	2300      	movs	r3, #0
 80086d6:	e790      	b.n	80085fa <_dtoa_r+0x7a6>
 80086d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086dc:	1af3      	subs	r3, r6, r3
 80086de:	18d3      	adds	r3, r2, r3
 80086e0:	960e      	str	r6, [sp, #56]	; 0x38
 80086e2:	9315      	str	r3, [sp, #84]	; 0x54
 80086e4:	2600      	movs	r6, #0
 80086e6:	e7f0      	b.n	80086ca <_dtoa_r+0x876>
 80086e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ea:	e7c0      	b.n	800866e <_dtoa_r+0x81a>
 80086ec:	2300      	movs	r3, #0
 80086ee:	930e      	str	r3, [sp, #56]	; 0x38
 80086f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	dc13      	bgt.n	800871e <_dtoa_r+0x8ca>
 80086f6:	2300      	movs	r3, #0
 80086f8:	930e      	str	r3, [sp, #56]	; 0x38
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10e      	bne.n	800871e <_dtoa_r+0x8ca>
 8008700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008702:	031b      	lsls	r3, r3, #12
 8008704:	d10b      	bne.n	800871e <_dtoa_r+0x8ca>
 8008706:	4b5d      	ldr	r3, [pc, #372]	; (800887c <_dtoa_r+0xa28>)
 8008708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800870a:	4213      	tst	r3, r2
 800870c:	d007      	beq.n	800871e <_dtoa_r+0x8ca>
 800870e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008710:	3301      	adds	r3, #1
 8008712:	930a      	str	r3, [sp, #40]	; 0x28
 8008714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008716:	3301      	adds	r3, #1
 8008718:	930d      	str	r3, [sp, #52]	; 0x34
 800871a:	2301      	movs	r3, #1
 800871c:	930e      	str	r3, [sp, #56]	; 0x38
 800871e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008720:	2001      	movs	r0, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1bb      	bne.n	800869e <_dtoa_r+0x84a>
 8008726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008728:	221f      	movs	r2, #31
 800872a:	1818      	adds	r0, r3, r0
 800872c:	0003      	movs	r3, r0
 800872e:	4013      	ands	r3, r2
 8008730:	4210      	tst	r0, r2
 8008732:	d046      	beq.n	80087c2 <_dtoa_r+0x96e>
 8008734:	3201      	adds	r2, #1
 8008736:	1ad2      	subs	r2, r2, r3
 8008738:	2a04      	cmp	r2, #4
 800873a:	dd3f      	ble.n	80087bc <_dtoa_r+0x968>
 800873c:	221c      	movs	r2, #28
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008742:	18e4      	adds	r4, r4, r3
 8008744:	18d2      	adds	r2, r2, r3
 8008746:	920a      	str	r2, [sp, #40]	; 0x28
 8008748:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800874a:	18d3      	adds	r3, r2, r3
 800874c:	930d      	str	r3, [sp, #52]	; 0x34
 800874e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008750:	2b00      	cmp	r3, #0
 8008752:	dd05      	ble.n	8008760 <_dtoa_r+0x90c>
 8008754:	001a      	movs	r2, r3
 8008756:	0038      	movs	r0, r7
 8008758:	9905      	ldr	r1, [sp, #20]
 800875a:	f000 fe0b 	bl	8009374 <__lshift>
 800875e:	9005      	str	r0, [sp, #20]
 8008760:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008762:	2b00      	cmp	r3, #0
 8008764:	dd05      	ble.n	8008772 <_dtoa_r+0x91e>
 8008766:	0031      	movs	r1, r6
 8008768:	001a      	movs	r2, r3
 800876a:	0038      	movs	r0, r7
 800876c:	f000 fe02 	bl	8009374 <__lshift>
 8008770:	0006      	movs	r6, r0
 8008772:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008774:	2b00      	cmp	r3, #0
 8008776:	d026      	beq.n	80087c6 <_dtoa_r+0x972>
 8008778:	0031      	movs	r1, r6
 800877a:	9805      	ldr	r0, [sp, #20]
 800877c:	f000 fe68 	bl	8009450 <__mcmp>
 8008780:	2800      	cmp	r0, #0
 8008782:	da20      	bge.n	80087c6 <_dtoa_r+0x972>
 8008784:	9b02      	ldr	r3, [sp, #8]
 8008786:	220a      	movs	r2, #10
 8008788:	3b01      	subs	r3, #1
 800878a:	9302      	str	r3, [sp, #8]
 800878c:	0038      	movs	r0, r7
 800878e:	2300      	movs	r3, #0
 8008790:	9905      	ldr	r1, [sp, #20]
 8008792:	f000 fc41 	bl	8009018 <__multadd>
 8008796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008798:	9005      	str	r0, [sp, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d100      	bne.n	80087a0 <_dtoa_r+0x94c>
 800879e:	e166      	b.n	8008a6e <_dtoa_r+0xc1a>
 80087a0:	2300      	movs	r3, #0
 80087a2:	0029      	movs	r1, r5
 80087a4:	220a      	movs	r2, #10
 80087a6:	0038      	movs	r0, r7
 80087a8:	f000 fc36 	bl	8009018 <__multadd>
 80087ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ae:	0005      	movs	r5, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc47      	bgt.n	8008844 <_dtoa_r+0x9f0>
 80087b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	dc0d      	bgt.n	80087d6 <_dtoa_r+0x982>
 80087ba:	e043      	b.n	8008844 <_dtoa_r+0x9f0>
 80087bc:	2a04      	cmp	r2, #4
 80087be:	d0c6      	beq.n	800874e <_dtoa_r+0x8fa>
 80087c0:	0013      	movs	r3, r2
 80087c2:	331c      	adds	r3, #28
 80087c4:	e7bc      	b.n	8008740 <_dtoa_r+0x8ec>
 80087c6:	9b07      	ldr	r3, [sp, #28]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dc35      	bgt.n	8008838 <_dtoa_r+0x9e4>
 80087cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	dd32      	ble.n	8008838 <_dtoa_r+0x9e4>
 80087d2:	9b07      	ldr	r3, [sp, #28]
 80087d4:	930c      	str	r3, [sp, #48]	; 0x30
 80087d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10c      	bne.n	80087f6 <_dtoa_r+0x9a2>
 80087dc:	0031      	movs	r1, r6
 80087de:	2205      	movs	r2, #5
 80087e0:	0038      	movs	r0, r7
 80087e2:	f000 fc19 	bl	8009018 <__multadd>
 80087e6:	0006      	movs	r6, r0
 80087e8:	0001      	movs	r1, r0
 80087ea:	9805      	ldr	r0, [sp, #20]
 80087ec:	f000 fe30 	bl	8009450 <__mcmp>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	dd00      	ble.n	80087f6 <_dtoa_r+0x9a2>
 80087f4:	e5a5      	b.n	8008342 <_dtoa_r+0x4ee>
 80087f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087f8:	43db      	mvns	r3, r3
 80087fa:	9302      	str	r3, [sp, #8]
 80087fc:	9b06      	ldr	r3, [sp, #24]
 80087fe:	9308      	str	r3, [sp, #32]
 8008800:	2400      	movs	r4, #0
 8008802:	0031      	movs	r1, r6
 8008804:	0038      	movs	r0, r7
 8008806:	f000 fbe3 	bl	8008fd0 <_Bfree>
 800880a:	2d00      	cmp	r5, #0
 800880c:	d100      	bne.n	8008810 <_dtoa_r+0x9bc>
 800880e:	e6b7      	b.n	8008580 <_dtoa_r+0x72c>
 8008810:	2c00      	cmp	r4, #0
 8008812:	d005      	beq.n	8008820 <_dtoa_r+0x9cc>
 8008814:	42ac      	cmp	r4, r5
 8008816:	d003      	beq.n	8008820 <_dtoa_r+0x9cc>
 8008818:	0021      	movs	r1, r4
 800881a:	0038      	movs	r0, r7
 800881c:	f000 fbd8 	bl	8008fd0 <_Bfree>
 8008820:	0029      	movs	r1, r5
 8008822:	0038      	movs	r0, r7
 8008824:	f000 fbd4 	bl	8008fd0 <_Bfree>
 8008828:	e6aa      	b.n	8008580 <_dtoa_r+0x72c>
 800882a:	2600      	movs	r6, #0
 800882c:	0035      	movs	r5, r6
 800882e:	e7e2      	b.n	80087f6 <_dtoa_r+0x9a2>
 8008830:	9602      	str	r6, [sp, #8]
 8008832:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008834:	0035      	movs	r5, r6
 8008836:	e584      	b.n	8008342 <_dtoa_r+0x4ee>
 8008838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d100      	bne.n	8008840 <_dtoa_r+0x9ec>
 800883e:	e0ce      	b.n	80089de <_dtoa_r+0xb8a>
 8008840:	9b07      	ldr	r3, [sp, #28]
 8008842:	930c      	str	r3, [sp, #48]	; 0x30
 8008844:	2c00      	cmp	r4, #0
 8008846:	dd05      	ble.n	8008854 <_dtoa_r+0xa00>
 8008848:	0029      	movs	r1, r5
 800884a:	0022      	movs	r2, r4
 800884c:	0038      	movs	r0, r7
 800884e:	f000 fd91 	bl	8009374 <__lshift>
 8008852:	0005      	movs	r5, r0
 8008854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008856:	0028      	movs	r0, r5
 8008858:	2b00      	cmp	r3, #0
 800885a:	d022      	beq.n	80088a2 <_dtoa_r+0xa4e>
 800885c:	0038      	movs	r0, r7
 800885e:	6869      	ldr	r1, [r5, #4]
 8008860:	f000 fb72 	bl	8008f48 <_Balloc>
 8008864:	1e04      	subs	r4, r0, #0
 8008866:	d10f      	bne.n	8008888 <_dtoa_r+0xa34>
 8008868:	0002      	movs	r2, r0
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <_dtoa_r+0xa2c>)
 800886c:	4905      	ldr	r1, [pc, #20]	; (8008884 <_dtoa_r+0xa30>)
 800886e:	f7ff fb06 	bl	8007e7e <_dtoa_r+0x2a>
 8008872:	46c0      	nop			; (mov r8, r8)
 8008874:	40240000 	.word	0x40240000
 8008878:	00000433 	.word	0x00000433
 800887c:	7ff00000 	.word	0x7ff00000
 8008880:	0800a08f 	.word	0x0800a08f
 8008884:	000002ea 	.word	0x000002ea
 8008888:	0029      	movs	r1, r5
 800888a:	692b      	ldr	r3, [r5, #16]
 800888c:	310c      	adds	r1, #12
 800888e:	1c9a      	adds	r2, r3, #2
 8008890:	0092      	lsls	r2, r2, #2
 8008892:	300c      	adds	r0, #12
 8008894:	f000 fb4f 	bl	8008f36 <memcpy>
 8008898:	2201      	movs	r2, #1
 800889a:	0021      	movs	r1, r4
 800889c:	0038      	movs	r0, r7
 800889e:	f000 fd69 	bl	8009374 <__lshift>
 80088a2:	9b06      	ldr	r3, [sp, #24]
 80088a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088a6:	930a      	str	r3, [sp, #40]	; 0x28
 80088a8:	3b01      	subs	r3, #1
 80088aa:	189b      	adds	r3, r3, r2
 80088ac:	2201      	movs	r2, #1
 80088ae:	002c      	movs	r4, r5
 80088b0:	0005      	movs	r5, r0
 80088b2:	9314      	str	r3, [sp, #80]	; 0x50
 80088b4:	9b08      	ldr	r3, [sp, #32]
 80088b6:	4013      	ands	r3, r2
 80088b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80088ba:	0031      	movs	r1, r6
 80088bc:	9805      	ldr	r0, [sp, #20]
 80088be:	f7ff fa3d 	bl	8007d3c <quorem>
 80088c2:	0003      	movs	r3, r0
 80088c4:	0021      	movs	r1, r4
 80088c6:	3330      	adds	r3, #48	; 0x30
 80088c8:	900d      	str	r0, [sp, #52]	; 0x34
 80088ca:	9805      	ldr	r0, [sp, #20]
 80088cc:	9307      	str	r3, [sp, #28]
 80088ce:	f000 fdbf 	bl	8009450 <__mcmp>
 80088d2:	002a      	movs	r2, r5
 80088d4:	900e      	str	r0, [sp, #56]	; 0x38
 80088d6:	0031      	movs	r1, r6
 80088d8:	0038      	movs	r0, r7
 80088da:	f000 fdd5 	bl	8009488 <__mdiff>
 80088de:	68c3      	ldr	r3, [r0, #12]
 80088e0:	9008      	str	r0, [sp, #32]
 80088e2:	9310      	str	r3, [sp, #64]	; 0x40
 80088e4:	2301      	movs	r3, #1
 80088e6:	930c      	str	r3, [sp, #48]	; 0x30
 80088e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d104      	bne.n	80088f8 <_dtoa_r+0xaa4>
 80088ee:	0001      	movs	r1, r0
 80088f0:	9805      	ldr	r0, [sp, #20]
 80088f2:	f000 fdad 	bl	8009450 <__mcmp>
 80088f6:	900c      	str	r0, [sp, #48]	; 0x30
 80088f8:	0038      	movs	r0, r7
 80088fa:	9908      	ldr	r1, [sp, #32]
 80088fc:	f000 fb68 	bl	8008fd0 <_Bfree>
 8008900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008902:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008904:	3301      	adds	r3, #1
 8008906:	9308      	str	r3, [sp, #32]
 8008908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800890a:	4313      	orrs	r3, r2
 800890c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800890e:	4313      	orrs	r3, r2
 8008910:	d10c      	bne.n	800892c <_dtoa_r+0xad8>
 8008912:	9b07      	ldr	r3, [sp, #28]
 8008914:	2b39      	cmp	r3, #57	; 0x39
 8008916:	d026      	beq.n	8008966 <_dtoa_r+0xb12>
 8008918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800891a:	2b00      	cmp	r3, #0
 800891c:	dd02      	ble.n	8008924 <_dtoa_r+0xad0>
 800891e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008920:	3331      	adds	r3, #49	; 0x31
 8008922:	9307      	str	r3, [sp, #28]
 8008924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008926:	9a07      	ldr	r2, [sp, #28]
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	e76a      	b.n	8008802 <_dtoa_r+0x9ae>
 800892c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800892e:	2b00      	cmp	r3, #0
 8008930:	db04      	blt.n	800893c <_dtoa_r+0xae8>
 8008932:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008934:	4313      	orrs	r3, r2
 8008936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008938:	4313      	orrs	r3, r2
 800893a:	d11f      	bne.n	800897c <_dtoa_r+0xb28>
 800893c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800893e:	2b00      	cmp	r3, #0
 8008940:	ddf0      	ble.n	8008924 <_dtoa_r+0xad0>
 8008942:	9905      	ldr	r1, [sp, #20]
 8008944:	2201      	movs	r2, #1
 8008946:	0038      	movs	r0, r7
 8008948:	f000 fd14 	bl	8009374 <__lshift>
 800894c:	0031      	movs	r1, r6
 800894e:	9005      	str	r0, [sp, #20]
 8008950:	f000 fd7e 	bl	8009450 <__mcmp>
 8008954:	2800      	cmp	r0, #0
 8008956:	dc03      	bgt.n	8008960 <_dtoa_r+0xb0c>
 8008958:	d1e4      	bne.n	8008924 <_dtoa_r+0xad0>
 800895a:	9b07      	ldr	r3, [sp, #28]
 800895c:	07db      	lsls	r3, r3, #31
 800895e:	d5e1      	bpl.n	8008924 <_dtoa_r+0xad0>
 8008960:	9b07      	ldr	r3, [sp, #28]
 8008962:	2b39      	cmp	r3, #57	; 0x39
 8008964:	d1db      	bne.n	800891e <_dtoa_r+0xaca>
 8008966:	2339      	movs	r3, #57	; 0x39
 8008968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800896a:	7013      	strb	r3, [r2, #0]
 800896c:	9b08      	ldr	r3, [sp, #32]
 800896e:	9308      	str	r3, [sp, #32]
 8008970:	3b01      	subs	r3, #1
 8008972:	781a      	ldrb	r2, [r3, #0]
 8008974:	2a39      	cmp	r2, #57	; 0x39
 8008976:	d068      	beq.n	8008a4a <_dtoa_r+0xbf6>
 8008978:	3201      	adds	r2, #1
 800897a:	e7d5      	b.n	8008928 <_dtoa_r+0xad4>
 800897c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800897e:	2b00      	cmp	r3, #0
 8008980:	dd07      	ble.n	8008992 <_dtoa_r+0xb3e>
 8008982:	9b07      	ldr	r3, [sp, #28]
 8008984:	2b39      	cmp	r3, #57	; 0x39
 8008986:	d0ee      	beq.n	8008966 <_dtoa_r+0xb12>
 8008988:	9b07      	ldr	r3, [sp, #28]
 800898a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800898c:	3301      	adds	r3, #1
 800898e:	7013      	strb	r3, [r2, #0]
 8008990:	e737      	b.n	8008802 <_dtoa_r+0x9ae>
 8008992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008994:	9a07      	ldr	r2, [sp, #28]
 8008996:	701a      	strb	r2, [r3, #0]
 8008998:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800899a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800899c:	4293      	cmp	r3, r2
 800899e:	d03e      	beq.n	8008a1e <_dtoa_r+0xbca>
 80089a0:	2300      	movs	r3, #0
 80089a2:	220a      	movs	r2, #10
 80089a4:	9905      	ldr	r1, [sp, #20]
 80089a6:	0038      	movs	r0, r7
 80089a8:	f000 fb36 	bl	8009018 <__multadd>
 80089ac:	2300      	movs	r3, #0
 80089ae:	9005      	str	r0, [sp, #20]
 80089b0:	220a      	movs	r2, #10
 80089b2:	0021      	movs	r1, r4
 80089b4:	0038      	movs	r0, r7
 80089b6:	42ac      	cmp	r4, r5
 80089b8:	d106      	bne.n	80089c8 <_dtoa_r+0xb74>
 80089ba:	f000 fb2d 	bl	8009018 <__multadd>
 80089be:	0004      	movs	r4, r0
 80089c0:	0005      	movs	r5, r0
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	930a      	str	r3, [sp, #40]	; 0x28
 80089c6:	e778      	b.n	80088ba <_dtoa_r+0xa66>
 80089c8:	f000 fb26 	bl	8009018 <__multadd>
 80089cc:	0029      	movs	r1, r5
 80089ce:	0004      	movs	r4, r0
 80089d0:	2300      	movs	r3, #0
 80089d2:	220a      	movs	r2, #10
 80089d4:	0038      	movs	r0, r7
 80089d6:	f000 fb1f 	bl	8009018 <__multadd>
 80089da:	0005      	movs	r5, r0
 80089dc:	e7f1      	b.n	80089c2 <_dtoa_r+0xb6e>
 80089de:	9b07      	ldr	r3, [sp, #28]
 80089e0:	930c      	str	r3, [sp, #48]	; 0x30
 80089e2:	2400      	movs	r4, #0
 80089e4:	0031      	movs	r1, r6
 80089e6:	9805      	ldr	r0, [sp, #20]
 80089e8:	f7ff f9a8 	bl	8007d3c <quorem>
 80089ec:	9b06      	ldr	r3, [sp, #24]
 80089ee:	3030      	adds	r0, #48	; 0x30
 80089f0:	5518      	strb	r0, [r3, r4]
 80089f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089f4:	3401      	adds	r4, #1
 80089f6:	9007      	str	r0, [sp, #28]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	dd07      	ble.n	8008a0c <_dtoa_r+0xbb8>
 80089fc:	2300      	movs	r3, #0
 80089fe:	220a      	movs	r2, #10
 8008a00:	0038      	movs	r0, r7
 8008a02:	9905      	ldr	r1, [sp, #20]
 8008a04:	f000 fb08 	bl	8009018 <__multadd>
 8008a08:	9005      	str	r0, [sp, #20]
 8008a0a:	e7eb      	b.n	80089e4 <_dtoa_r+0xb90>
 8008a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a0e:	2001      	movs	r0, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dd00      	ble.n	8008a16 <_dtoa_r+0xbc2>
 8008a14:	0018      	movs	r0, r3
 8008a16:	2400      	movs	r4, #0
 8008a18:	9b06      	ldr	r3, [sp, #24]
 8008a1a:	181b      	adds	r3, r3, r0
 8008a1c:	9308      	str	r3, [sp, #32]
 8008a1e:	9905      	ldr	r1, [sp, #20]
 8008a20:	2201      	movs	r2, #1
 8008a22:	0038      	movs	r0, r7
 8008a24:	f000 fca6 	bl	8009374 <__lshift>
 8008a28:	0031      	movs	r1, r6
 8008a2a:	9005      	str	r0, [sp, #20]
 8008a2c:	f000 fd10 	bl	8009450 <__mcmp>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	dc9b      	bgt.n	800896c <_dtoa_r+0xb18>
 8008a34:	d102      	bne.n	8008a3c <_dtoa_r+0xbe8>
 8008a36:	9b07      	ldr	r3, [sp, #28]
 8008a38:	07db      	lsls	r3, r3, #31
 8008a3a:	d497      	bmi.n	800896c <_dtoa_r+0xb18>
 8008a3c:	9b08      	ldr	r3, [sp, #32]
 8008a3e:	9308      	str	r3, [sp, #32]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	2a30      	cmp	r2, #48	; 0x30
 8008a46:	d0fa      	beq.n	8008a3e <_dtoa_r+0xbea>
 8008a48:	e6db      	b.n	8008802 <_dtoa_r+0x9ae>
 8008a4a:	9a06      	ldr	r2, [sp, #24]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d18e      	bne.n	800896e <_dtoa_r+0xb1a>
 8008a50:	9b02      	ldr	r3, [sp, #8]
 8008a52:	3301      	adds	r3, #1
 8008a54:	9302      	str	r3, [sp, #8]
 8008a56:	2331      	movs	r3, #49	; 0x31
 8008a58:	e799      	b.n	800898e <_dtoa_r+0xb3a>
 8008a5a:	4b09      	ldr	r3, [pc, #36]	; (8008a80 <_dtoa_r+0xc2c>)
 8008a5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a5e:	9306      	str	r3, [sp, #24]
 8008a60:	4b08      	ldr	r3, [pc, #32]	; (8008a84 <_dtoa_r+0xc30>)
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	d001      	beq.n	8008a6a <_dtoa_r+0xc16>
 8008a66:	f7ff fa3f 	bl	8007ee8 <_dtoa_r+0x94>
 8008a6a:	f7ff fa3f 	bl	8007eec <_dtoa_r+0x98>
 8008a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dcb6      	bgt.n	80089e2 <_dtoa_r+0xb8e>
 8008a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	dd00      	ble.n	8008a7c <_dtoa_r+0xc28>
 8008a7a:	e6ac      	b.n	80087d6 <_dtoa_r+0x982>
 8008a7c:	e7b1      	b.n	80089e2 <_dtoa_r+0xb8e>
 8008a7e:	46c0      	nop			; (mov r8, r8)
 8008a80:	0800a010 	.word	0x0800a010
 8008a84:	0800a018 	.word	0x0800a018

08008a88 <__sflush_r>:
 8008a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a8a:	898b      	ldrh	r3, [r1, #12]
 8008a8c:	0005      	movs	r5, r0
 8008a8e:	000c      	movs	r4, r1
 8008a90:	071a      	lsls	r2, r3, #28
 8008a92:	d45f      	bmi.n	8008b54 <__sflush_r+0xcc>
 8008a94:	684a      	ldr	r2, [r1, #4]
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	dc04      	bgt.n	8008aa4 <__sflush_r+0x1c>
 8008a9a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	dc01      	bgt.n	8008aa4 <__sflush_r+0x1c>
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008aa4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008aa6:	2f00      	cmp	r7, #0
 8008aa8:	d0fa      	beq.n	8008aa0 <__sflush_r+0x18>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2180      	movs	r1, #128	; 0x80
 8008aae:	682e      	ldr	r6, [r5, #0]
 8008ab0:	602a      	str	r2, [r5, #0]
 8008ab2:	001a      	movs	r2, r3
 8008ab4:	0149      	lsls	r1, r1, #5
 8008ab6:	400a      	ands	r2, r1
 8008ab8:	420b      	tst	r3, r1
 8008aba:	d034      	beq.n	8008b26 <__sflush_r+0x9e>
 8008abc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	075b      	lsls	r3, r3, #29
 8008ac2:	d506      	bpl.n	8008ad2 <__sflush_r+0x4a>
 8008ac4:	6863      	ldr	r3, [r4, #4]
 8008ac6:	1ac0      	subs	r0, r0, r3
 8008ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <__sflush_r+0x4a>
 8008ace:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ad0:	1ac0      	subs	r0, r0, r3
 8008ad2:	0002      	movs	r2, r0
 8008ad4:	6a21      	ldr	r1, [r4, #32]
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	0028      	movs	r0, r5
 8008ada:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008adc:	47b8      	blx	r7
 8008ade:	89a1      	ldrh	r1, [r4, #12]
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d106      	bne.n	8008af2 <__sflush_r+0x6a>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	2b1d      	cmp	r3, #29
 8008ae8:	d831      	bhi.n	8008b4e <__sflush_r+0xc6>
 8008aea:	4a2c      	ldr	r2, [pc, #176]	; (8008b9c <__sflush_r+0x114>)
 8008aec:	40da      	lsrs	r2, r3
 8008aee:	07d3      	lsls	r3, r2, #31
 8008af0:	d52d      	bpl.n	8008b4e <__sflush_r+0xc6>
 8008af2:	2300      	movs	r3, #0
 8008af4:	6063      	str	r3, [r4, #4]
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	04cb      	lsls	r3, r1, #19
 8008afc:	d505      	bpl.n	8008b0a <__sflush_r+0x82>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	d102      	bne.n	8008b08 <__sflush_r+0x80>
 8008b02:	682b      	ldr	r3, [r5, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d100      	bne.n	8008b0a <__sflush_r+0x82>
 8008b08:	6560      	str	r0, [r4, #84]	; 0x54
 8008b0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0c:	602e      	str	r6, [r5, #0]
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d0c6      	beq.n	8008aa0 <__sflush_r+0x18>
 8008b12:	0023      	movs	r3, r4
 8008b14:	3344      	adds	r3, #68	; 0x44
 8008b16:	4299      	cmp	r1, r3
 8008b18:	d002      	beq.n	8008b20 <__sflush_r+0x98>
 8008b1a:	0028      	movs	r0, r5
 8008b1c:	f000 fddc 	bl	80096d8 <_free_r>
 8008b20:	2000      	movs	r0, #0
 8008b22:	6360      	str	r0, [r4, #52]	; 0x34
 8008b24:	e7bd      	b.n	8008aa2 <__sflush_r+0x1a>
 8008b26:	2301      	movs	r3, #1
 8008b28:	0028      	movs	r0, r5
 8008b2a:	6a21      	ldr	r1, [r4, #32]
 8008b2c:	47b8      	blx	r7
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d1c5      	bne.n	8008abe <__sflush_r+0x36>
 8008b32:	682b      	ldr	r3, [r5, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0c2      	beq.n	8008abe <__sflush_r+0x36>
 8008b38:	2b1d      	cmp	r3, #29
 8008b3a:	d001      	beq.n	8008b40 <__sflush_r+0xb8>
 8008b3c:	2b16      	cmp	r3, #22
 8008b3e:	d101      	bne.n	8008b44 <__sflush_r+0xbc>
 8008b40:	602e      	str	r6, [r5, #0]
 8008b42:	e7ad      	b.n	8008aa0 <__sflush_r+0x18>
 8008b44:	2340      	movs	r3, #64	; 0x40
 8008b46:	89a2      	ldrh	r2, [r4, #12]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	e7a9      	b.n	8008aa2 <__sflush_r+0x1a>
 8008b4e:	2340      	movs	r3, #64	; 0x40
 8008b50:	430b      	orrs	r3, r1
 8008b52:	e7fa      	b.n	8008b4a <__sflush_r+0xc2>
 8008b54:	690f      	ldr	r7, [r1, #16]
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	d0a2      	beq.n	8008aa0 <__sflush_r+0x18>
 8008b5a:	680a      	ldr	r2, [r1, #0]
 8008b5c:	600f      	str	r7, [r1, #0]
 8008b5e:	1bd2      	subs	r2, r2, r7
 8008b60:	9201      	str	r2, [sp, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	079b      	lsls	r3, r3, #30
 8008b66:	d100      	bne.n	8008b6a <__sflush_r+0xe2>
 8008b68:	694a      	ldr	r2, [r1, #20]
 8008b6a:	60a2      	str	r2, [r4, #8]
 8008b6c:	9b01      	ldr	r3, [sp, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dc00      	bgt.n	8008b74 <__sflush_r+0xec>
 8008b72:	e795      	b.n	8008aa0 <__sflush_r+0x18>
 8008b74:	003a      	movs	r2, r7
 8008b76:	0028      	movs	r0, r5
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	6a21      	ldr	r1, [r4, #32]
 8008b7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b7e:	47b0      	blx	r6
 8008b80:	2800      	cmp	r0, #0
 8008b82:	dc06      	bgt.n	8008b92 <__sflush_r+0x10a>
 8008b84:	2340      	movs	r3, #64	; 0x40
 8008b86:	2001      	movs	r0, #1
 8008b88:	89a2      	ldrh	r2, [r4, #12]
 8008b8a:	4240      	negs	r0, r0
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	e787      	b.n	8008aa2 <__sflush_r+0x1a>
 8008b92:	9b01      	ldr	r3, [sp, #4]
 8008b94:	183f      	adds	r7, r7, r0
 8008b96:	1a1b      	subs	r3, r3, r0
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	e7e7      	b.n	8008b6c <__sflush_r+0xe4>
 8008b9c:	20400001 	.word	0x20400001

08008ba0 <_fflush_r>:
 8008ba0:	690b      	ldr	r3, [r1, #16]
 8008ba2:	b570      	push	{r4, r5, r6, lr}
 8008ba4:	0005      	movs	r5, r0
 8008ba6:	000c      	movs	r4, r1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <_fflush_r+0x12>
 8008bac:	2500      	movs	r5, #0
 8008bae:	0028      	movs	r0, r5
 8008bb0:	bd70      	pop	{r4, r5, r6, pc}
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d004      	beq.n	8008bc0 <_fflush_r+0x20>
 8008bb6:	6983      	ldr	r3, [r0, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <_fflush_r+0x20>
 8008bbc:	f000 f892 	bl	8008ce4 <__sinit>
 8008bc0:	4b14      	ldr	r3, [pc, #80]	; (8008c14 <_fflush_r+0x74>)
 8008bc2:	429c      	cmp	r4, r3
 8008bc4:	d11b      	bne.n	8008bfe <_fflush_r+0x5e>
 8008bc6:	686c      	ldr	r4, [r5, #4]
 8008bc8:	220c      	movs	r2, #12
 8008bca:	5ea3      	ldrsh	r3, [r4, r2]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d0ed      	beq.n	8008bac <_fflush_r+0xc>
 8008bd0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bd2:	07d2      	lsls	r2, r2, #31
 8008bd4:	d404      	bmi.n	8008be0 <_fflush_r+0x40>
 8008bd6:	059b      	lsls	r3, r3, #22
 8008bd8:	d402      	bmi.n	8008be0 <_fflush_r+0x40>
 8008bda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bdc:	f000 f927 	bl	8008e2e <__retarget_lock_acquire_recursive>
 8008be0:	0028      	movs	r0, r5
 8008be2:	0021      	movs	r1, r4
 8008be4:	f7ff ff50 	bl	8008a88 <__sflush_r>
 8008be8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bea:	0005      	movs	r5, r0
 8008bec:	07db      	lsls	r3, r3, #31
 8008bee:	d4de      	bmi.n	8008bae <_fflush_r+0xe>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	059b      	lsls	r3, r3, #22
 8008bf4:	d4db      	bmi.n	8008bae <_fflush_r+0xe>
 8008bf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bf8:	f000 f91a 	bl	8008e30 <__retarget_lock_release_recursive>
 8008bfc:	e7d7      	b.n	8008bae <_fflush_r+0xe>
 8008bfe:	4b06      	ldr	r3, [pc, #24]	; (8008c18 <_fflush_r+0x78>)
 8008c00:	429c      	cmp	r4, r3
 8008c02:	d101      	bne.n	8008c08 <_fflush_r+0x68>
 8008c04:	68ac      	ldr	r4, [r5, #8]
 8008c06:	e7df      	b.n	8008bc8 <_fflush_r+0x28>
 8008c08:	4b04      	ldr	r3, [pc, #16]	; (8008c1c <_fflush_r+0x7c>)
 8008c0a:	429c      	cmp	r4, r3
 8008c0c:	d1dc      	bne.n	8008bc8 <_fflush_r+0x28>
 8008c0e:	68ec      	ldr	r4, [r5, #12]
 8008c10:	e7da      	b.n	8008bc8 <_fflush_r+0x28>
 8008c12:	46c0      	nop			; (mov r8, r8)
 8008c14:	0800a0c0 	.word	0x0800a0c0
 8008c18:	0800a0e0 	.word	0x0800a0e0
 8008c1c:	0800a0a0 	.word	0x0800a0a0

08008c20 <std>:
 8008c20:	2300      	movs	r3, #0
 8008c22:	b510      	push	{r4, lr}
 8008c24:	0004      	movs	r4, r0
 8008c26:	6003      	str	r3, [r0, #0]
 8008c28:	6043      	str	r3, [r0, #4]
 8008c2a:	6083      	str	r3, [r0, #8]
 8008c2c:	8181      	strh	r1, [r0, #12]
 8008c2e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c30:	0019      	movs	r1, r3
 8008c32:	81c2      	strh	r2, [r0, #14]
 8008c34:	6103      	str	r3, [r0, #16]
 8008c36:	6143      	str	r3, [r0, #20]
 8008c38:	6183      	str	r3, [r0, #24]
 8008c3a:	2208      	movs	r2, #8
 8008c3c:	305c      	adds	r0, #92	; 0x5c
 8008c3e:	f7fe faa3 	bl	8007188 <memset>
 8008c42:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <std+0x38>)
 8008c44:	6224      	str	r4, [r4, #32]
 8008c46:	6263      	str	r3, [r4, #36]	; 0x24
 8008c48:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <std+0x3c>)
 8008c4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c4c:	4b04      	ldr	r3, [pc, #16]	; (8008c60 <std+0x40>)
 8008c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c50:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <std+0x44>)
 8008c52:	6323      	str	r3, [r4, #48]	; 0x30
 8008c54:	bd10      	pop	{r4, pc}
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	08009b85 	.word	0x08009b85
 8008c5c:	08009bad 	.word	0x08009bad
 8008c60:	08009be5 	.word	0x08009be5
 8008c64:	08009c11 	.word	0x08009c11

08008c68 <_cleanup_r>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	4902      	ldr	r1, [pc, #8]	; (8008c74 <_cleanup_r+0xc>)
 8008c6c:	f000 f8ba 	bl	8008de4 <_fwalk_reent>
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	46c0      	nop			; (mov r8, r8)
 8008c74:	08008ba1 	.word	0x08008ba1

08008c78 <__sfmoreglue>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	2568      	movs	r5, #104	; 0x68
 8008c7c:	1e4a      	subs	r2, r1, #1
 8008c7e:	4355      	muls	r5, r2
 8008c80:	000e      	movs	r6, r1
 8008c82:	0029      	movs	r1, r5
 8008c84:	3174      	adds	r1, #116	; 0x74
 8008c86:	f000 fd93 	bl	80097b0 <_malloc_r>
 8008c8a:	1e04      	subs	r4, r0, #0
 8008c8c:	d008      	beq.n	8008ca0 <__sfmoreglue+0x28>
 8008c8e:	2100      	movs	r1, #0
 8008c90:	002a      	movs	r2, r5
 8008c92:	6001      	str	r1, [r0, #0]
 8008c94:	6046      	str	r6, [r0, #4]
 8008c96:	300c      	adds	r0, #12
 8008c98:	60a0      	str	r0, [r4, #8]
 8008c9a:	3268      	adds	r2, #104	; 0x68
 8008c9c:	f7fe fa74 	bl	8007188 <memset>
 8008ca0:	0020      	movs	r0, r4
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}

08008ca4 <__sfp_lock_acquire>:
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	4802      	ldr	r0, [pc, #8]	; (8008cb0 <__sfp_lock_acquire+0xc>)
 8008ca8:	f000 f8c1 	bl	8008e2e <__retarget_lock_acquire_recursive>
 8008cac:	bd10      	pop	{r4, pc}
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	20000379 	.word	0x20000379

08008cb4 <__sfp_lock_release>:
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	4802      	ldr	r0, [pc, #8]	; (8008cc0 <__sfp_lock_release+0xc>)
 8008cb8:	f000 f8ba 	bl	8008e30 <__retarget_lock_release_recursive>
 8008cbc:	bd10      	pop	{r4, pc}
 8008cbe:	46c0      	nop			; (mov r8, r8)
 8008cc0:	20000379 	.word	0x20000379

08008cc4 <__sinit_lock_acquire>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	4802      	ldr	r0, [pc, #8]	; (8008cd0 <__sinit_lock_acquire+0xc>)
 8008cc8:	f000 f8b1 	bl	8008e2e <__retarget_lock_acquire_recursive>
 8008ccc:	bd10      	pop	{r4, pc}
 8008cce:	46c0      	nop			; (mov r8, r8)
 8008cd0:	2000037a 	.word	0x2000037a

08008cd4 <__sinit_lock_release>:
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	4802      	ldr	r0, [pc, #8]	; (8008ce0 <__sinit_lock_release+0xc>)
 8008cd8:	f000 f8aa 	bl	8008e30 <__retarget_lock_release_recursive>
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	2000037a 	.word	0x2000037a

08008ce4 <__sinit>:
 8008ce4:	b513      	push	{r0, r1, r4, lr}
 8008ce6:	0004      	movs	r4, r0
 8008ce8:	f7ff ffec 	bl	8008cc4 <__sinit_lock_acquire>
 8008cec:	69a3      	ldr	r3, [r4, #24]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <__sinit+0x14>
 8008cf2:	f7ff ffef 	bl	8008cd4 <__sinit_lock_release>
 8008cf6:	bd13      	pop	{r0, r1, r4, pc}
 8008cf8:	64a3      	str	r3, [r4, #72]	; 0x48
 8008cfa:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008cfc:	6523      	str	r3, [r4, #80]	; 0x50
 8008cfe:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <__sinit+0x68>)
 8008d00:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <__sinit+0x6c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d06:	9301      	str	r3, [sp, #4]
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	d101      	bne.n	8008d10 <__sinit+0x2c>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	61a3      	str	r3, [r4, #24]
 8008d10:	0020      	movs	r0, r4
 8008d12:	f000 f81f 	bl	8008d54 <__sfp>
 8008d16:	6060      	str	r0, [r4, #4]
 8008d18:	0020      	movs	r0, r4
 8008d1a:	f000 f81b 	bl	8008d54 <__sfp>
 8008d1e:	60a0      	str	r0, [r4, #8]
 8008d20:	0020      	movs	r0, r4
 8008d22:	f000 f817 	bl	8008d54 <__sfp>
 8008d26:	2200      	movs	r2, #0
 8008d28:	2104      	movs	r1, #4
 8008d2a:	60e0      	str	r0, [r4, #12]
 8008d2c:	6860      	ldr	r0, [r4, #4]
 8008d2e:	f7ff ff77 	bl	8008c20 <std>
 8008d32:	2201      	movs	r2, #1
 8008d34:	2109      	movs	r1, #9
 8008d36:	68a0      	ldr	r0, [r4, #8]
 8008d38:	f7ff ff72 	bl	8008c20 <std>
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	2112      	movs	r1, #18
 8008d40:	68e0      	ldr	r0, [r4, #12]
 8008d42:	f7ff ff6d 	bl	8008c20 <std>
 8008d46:	2301      	movs	r3, #1
 8008d48:	61a3      	str	r3, [r4, #24]
 8008d4a:	e7d2      	b.n	8008cf2 <__sinit+0xe>
 8008d4c:	08009fd8 	.word	0x08009fd8
 8008d50:	08008c69 	.word	0x08008c69

08008d54 <__sfp>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	0007      	movs	r7, r0
 8008d58:	f7ff ffa4 	bl	8008ca4 <__sfp_lock_acquire>
 8008d5c:	4b1f      	ldr	r3, [pc, #124]	; (8008ddc <__sfp+0x88>)
 8008d5e:	681e      	ldr	r6, [r3, #0]
 8008d60:	69b3      	ldr	r3, [r6, #24]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d102      	bne.n	8008d6c <__sfp+0x18>
 8008d66:	0030      	movs	r0, r6
 8008d68:	f7ff ffbc 	bl	8008ce4 <__sinit>
 8008d6c:	3648      	adds	r6, #72	; 0x48
 8008d6e:	68b4      	ldr	r4, [r6, #8]
 8008d70:	6873      	ldr	r3, [r6, #4]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	d504      	bpl.n	8008d80 <__sfp+0x2c>
 8008d76:	6833      	ldr	r3, [r6, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d022      	beq.n	8008dc2 <__sfp+0x6e>
 8008d7c:	6836      	ldr	r6, [r6, #0]
 8008d7e:	e7f6      	b.n	8008d6e <__sfp+0x1a>
 8008d80:	220c      	movs	r2, #12
 8008d82:	5ea5      	ldrsh	r5, [r4, r2]
 8008d84:	2d00      	cmp	r5, #0
 8008d86:	d11a      	bne.n	8008dbe <__sfp+0x6a>
 8008d88:	0020      	movs	r0, r4
 8008d8a:	4b15      	ldr	r3, [pc, #84]	; (8008de0 <__sfp+0x8c>)
 8008d8c:	3058      	adds	r0, #88	; 0x58
 8008d8e:	60e3      	str	r3, [r4, #12]
 8008d90:	6665      	str	r5, [r4, #100]	; 0x64
 8008d92:	f000 f84b 	bl	8008e2c <__retarget_lock_init_recursive>
 8008d96:	f7ff ff8d 	bl	8008cb4 <__sfp_lock_release>
 8008d9a:	0020      	movs	r0, r4
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	0029      	movs	r1, r5
 8008da0:	6025      	str	r5, [r4, #0]
 8008da2:	60a5      	str	r5, [r4, #8]
 8008da4:	6065      	str	r5, [r4, #4]
 8008da6:	6125      	str	r5, [r4, #16]
 8008da8:	6165      	str	r5, [r4, #20]
 8008daa:	61a5      	str	r5, [r4, #24]
 8008dac:	305c      	adds	r0, #92	; 0x5c
 8008dae:	f7fe f9eb 	bl	8007188 <memset>
 8008db2:	6365      	str	r5, [r4, #52]	; 0x34
 8008db4:	63a5      	str	r5, [r4, #56]	; 0x38
 8008db6:	64a5      	str	r5, [r4, #72]	; 0x48
 8008db8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008dba:	0020      	movs	r0, r4
 8008dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbe:	3468      	adds	r4, #104	; 0x68
 8008dc0:	e7d7      	b.n	8008d72 <__sfp+0x1e>
 8008dc2:	2104      	movs	r1, #4
 8008dc4:	0038      	movs	r0, r7
 8008dc6:	f7ff ff57 	bl	8008c78 <__sfmoreglue>
 8008dca:	1e04      	subs	r4, r0, #0
 8008dcc:	6030      	str	r0, [r6, #0]
 8008dce:	d1d5      	bne.n	8008d7c <__sfp+0x28>
 8008dd0:	f7ff ff70 	bl	8008cb4 <__sfp_lock_release>
 8008dd4:	230c      	movs	r3, #12
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	e7ef      	b.n	8008dba <__sfp+0x66>
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	08009fd8 	.word	0x08009fd8
 8008de0:	ffff0001 	.word	0xffff0001

08008de4 <_fwalk_reent>:
 8008de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008de6:	0004      	movs	r4, r0
 8008de8:	0006      	movs	r6, r0
 8008dea:	2700      	movs	r7, #0
 8008dec:	9101      	str	r1, [sp, #4]
 8008dee:	3448      	adds	r4, #72	; 0x48
 8008df0:	6863      	ldr	r3, [r4, #4]
 8008df2:	68a5      	ldr	r5, [r4, #8]
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	9b00      	ldr	r3, [sp, #0]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	d504      	bpl.n	8008e08 <_fwalk_reent+0x24>
 8008dfe:	6824      	ldr	r4, [r4, #0]
 8008e00:	2c00      	cmp	r4, #0
 8008e02:	d1f5      	bne.n	8008df0 <_fwalk_reent+0xc>
 8008e04:	0038      	movs	r0, r7
 8008e06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e08:	89ab      	ldrh	r3, [r5, #12]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d908      	bls.n	8008e20 <_fwalk_reent+0x3c>
 8008e0e:	220e      	movs	r2, #14
 8008e10:	5eab      	ldrsh	r3, [r5, r2]
 8008e12:	3301      	adds	r3, #1
 8008e14:	d004      	beq.n	8008e20 <_fwalk_reent+0x3c>
 8008e16:	0029      	movs	r1, r5
 8008e18:	0030      	movs	r0, r6
 8008e1a:	9b01      	ldr	r3, [sp, #4]
 8008e1c:	4798      	blx	r3
 8008e1e:	4307      	orrs	r7, r0
 8008e20:	3568      	adds	r5, #104	; 0x68
 8008e22:	e7e8      	b.n	8008df6 <_fwalk_reent+0x12>

08008e24 <_localeconv_r>:
 8008e24:	4800      	ldr	r0, [pc, #0]	; (8008e28 <_localeconv_r+0x4>)
 8008e26:	4770      	bx	lr
 8008e28:	20000160 	.word	0x20000160

08008e2c <__retarget_lock_init_recursive>:
 8008e2c:	4770      	bx	lr

08008e2e <__retarget_lock_acquire_recursive>:
 8008e2e:	4770      	bx	lr

08008e30 <__retarget_lock_release_recursive>:
 8008e30:	4770      	bx	lr
	...

08008e34 <__swhatbuf_r>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	000e      	movs	r6, r1
 8008e38:	001d      	movs	r5, r3
 8008e3a:	230e      	movs	r3, #14
 8008e3c:	5ec9      	ldrsh	r1, [r1, r3]
 8008e3e:	0014      	movs	r4, r2
 8008e40:	b096      	sub	sp, #88	; 0x58
 8008e42:	2900      	cmp	r1, #0
 8008e44:	da08      	bge.n	8008e58 <__swhatbuf_r+0x24>
 8008e46:	220c      	movs	r2, #12
 8008e48:	5eb3      	ldrsh	r3, [r6, r2]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	602a      	str	r2, [r5, #0]
 8008e4e:	061b      	lsls	r3, r3, #24
 8008e50:	d411      	bmi.n	8008e76 <__swhatbuf_r+0x42>
 8008e52:	2380      	movs	r3, #128	; 0x80
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	e00f      	b.n	8008e78 <__swhatbuf_r+0x44>
 8008e58:	466a      	mov	r2, sp
 8008e5a:	f000 ff33 	bl	8009cc4 <_fstat_r>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	dbf1      	blt.n	8008e46 <__swhatbuf_r+0x12>
 8008e62:	23f0      	movs	r3, #240	; 0xf0
 8008e64:	9901      	ldr	r1, [sp, #4]
 8008e66:	021b      	lsls	r3, r3, #8
 8008e68:	4019      	ands	r1, r3
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <__swhatbuf_r+0x4c>)
 8008e6c:	18c9      	adds	r1, r1, r3
 8008e6e:	424b      	negs	r3, r1
 8008e70:	4159      	adcs	r1, r3
 8008e72:	6029      	str	r1, [r5, #0]
 8008e74:	e7ed      	b.n	8008e52 <__swhatbuf_r+0x1e>
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	2000      	movs	r0, #0
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	b016      	add	sp, #88	; 0x58
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	ffffe000 	.word	0xffffe000

08008e84 <__smakebuf_r>:
 8008e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e86:	2602      	movs	r6, #2
 8008e88:	898b      	ldrh	r3, [r1, #12]
 8008e8a:	0005      	movs	r5, r0
 8008e8c:	000c      	movs	r4, r1
 8008e8e:	4233      	tst	r3, r6
 8008e90:	d006      	beq.n	8008ea0 <__smakebuf_r+0x1c>
 8008e92:	0023      	movs	r3, r4
 8008e94:	3347      	adds	r3, #71	; 0x47
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	6163      	str	r3, [r4, #20]
 8008e9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008ea0:	466a      	mov	r2, sp
 8008ea2:	ab01      	add	r3, sp, #4
 8008ea4:	f7ff ffc6 	bl	8008e34 <__swhatbuf_r>
 8008ea8:	9900      	ldr	r1, [sp, #0]
 8008eaa:	0007      	movs	r7, r0
 8008eac:	0028      	movs	r0, r5
 8008eae:	f000 fc7f 	bl	80097b0 <_malloc_r>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d108      	bne.n	8008ec8 <__smakebuf_r+0x44>
 8008eb6:	220c      	movs	r2, #12
 8008eb8:	5ea3      	ldrsh	r3, [r4, r2]
 8008eba:	059a      	lsls	r2, r3, #22
 8008ebc:	d4ef      	bmi.n	8008e9e <__smakebuf_r+0x1a>
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	4393      	bics	r3, r2
 8008ec2:	431e      	orrs	r6, r3
 8008ec4:	81a6      	strh	r6, [r4, #12]
 8008ec6:	e7e4      	b.n	8008e92 <__smakebuf_r+0xe>
 8008ec8:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <__smakebuf_r+0x84>)
 8008eca:	62ab      	str	r3, [r5, #40]	; 0x28
 8008ecc:	2380      	movs	r3, #128	; 0x80
 8008ece:	89a2      	ldrh	r2, [r4, #12]
 8008ed0:	6020      	str	r0, [r4, #0]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	81a3      	strh	r3, [r4, #12]
 8008ed6:	9b00      	ldr	r3, [sp, #0]
 8008ed8:	6120      	str	r0, [r4, #16]
 8008eda:	6163      	str	r3, [r4, #20]
 8008edc:	9b01      	ldr	r3, [sp, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00d      	beq.n	8008efe <__smakebuf_r+0x7a>
 8008ee2:	0028      	movs	r0, r5
 8008ee4:	230e      	movs	r3, #14
 8008ee6:	5ee1      	ldrsh	r1, [r4, r3]
 8008ee8:	f000 fefe 	bl	8009ce8 <_isatty_r>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d006      	beq.n	8008efe <__smakebuf_r+0x7a>
 8008ef0:	2203      	movs	r2, #3
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	4393      	bics	r3, r2
 8008ef6:	001a      	movs	r2, r3
 8008ef8:	2301      	movs	r3, #1
 8008efa:	4313      	orrs	r3, r2
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	89a0      	ldrh	r0, [r4, #12]
 8008f00:	4307      	orrs	r7, r0
 8008f02:	81a7      	strh	r7, [r4, #12]
 8008f04:	e7cb      	b.n	8008e9e <__smakebuf_r+0x1a>
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	08008c69 	.word	0x08008c69

08008f0c <malloc>:
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	4b03      	ldr	r3, [pc, #12]	; (8008f1c <malloc+0x10>)
 8008f10:	0001      	movs	r1, r0
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	f000 fc4c 	bl	80097b0 <_malloc_r>
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	2000000c 	.word	0x2000000c

08008f20 <memchr>:
 8008f20:	b2c9      	uxtb	r1, r1
 8008f22:	1882      	adds	r2, r0, r2
 8008f24:	4290      	cmp	r0, r2
 8008f26:	d101      	bne.n	8008f2c <memchr+0xc>
 8008f28:	2000      	movs	r0, #0
 8008f2a:	4770      	bx	lr
 8008f2c:	7803      	ldrb	r3, [r0, #0]
 8008f2e:	428b      	cmp	r3, r1
 8008f30:	d0fb      	beq.n	8008f2a <memchr+0xa>
 8008f32:	3001      	adds	r0, #1
 8008f34:	e7f6      	b.n	8008f24 <memchr+0x4>

08008f36 <memcpy>:
 8008f36:	2300      	movs	r3, #0
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d100      	bne.n	8008f40 <memcpy+0xa>
 8008f3e:	bd10      	pop	{r4, pc}
 8008f40:	5ccc      	ldrb	r4, [r1, r3]
 8008f42:	54c4      	strb	r4, [r0, r3]
 8008f44:	3301      	adds	r3, #1
 8008f46:	e7f8      	b.n	8008f3a <memcpy+0x4>

08008f48 <_Balloc>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f4c:	0006      	movs	r6, r0
 8008f4e:	000c      	movs	r4, r1
 8008f50:	2d00      	cmp	r5, #0
 8008f52:	d10e      	bne.n	8008f72 <_Balloc+0x2a>
 8008f54:	2010      	movs	r0, #16
 8008f56:	f7ff ffd9 	bl	8008f0c <malloc>
 8008f5a:	1e02      	subs	r2, r0, #0
 8008f5c:	6270      	str	r0, [r6, #36]	; 0x24
 8008f5e:	d104      	bne.n	8008f6a <_Balloc+0x22>
 8008f60:	2166      	movs	r1, #102	; 0x66
 8008f62:	4b19      	ldr	r3, [pc, #100]	; (8008fc8 <_Balloc+0x80>)
 8008f64:	4819      	ldr	r0, [pc, #100]	; (8008fcc <_Balloc+0x84>)
 8008f66:	f000 fe6d 	bl	8009c44 <__assert_func>
 8008f6a:	6045      	str	r5, [r0, #4]
 8008f6c:	6085      	str	r5, [r0, #8]
 8008f6e:	6005      	str	r5, [r0, #0]
 8008f70:	60c5      	str	r5, [r0, #12]
 8008f72:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008f74:	68eb      	ldr	r3, [r5, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d013      	beq.n	8008fa2 <_Balloc+0x5a>
 8008f7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f7c:	00a2      	lsls	r2, r4, #2
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	189b      	adds	r3, r3, r2
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d118      	bne.n	8008fba <_Balloc+0x72>
 8008f88:	2101      	movs	r1, #1
 8008f8a:	000d      	movs	r5, r1
 8008f8c:	40a5      	lsls	r5, r4
 8008f8e:	1d6a      	adds	r2, r5, #5
 8008f90:	0030      	movs	r0, r6
 8008f92:	0092      	lsls	r2, r2, #2
 8008f94:	f000 fb74 	bl	8009680 <_calloc_r>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d00c      	beq.n	8008fb6 <_Balloc+0x6e>
 8008f9c:	6044      	str	r4, [r0, #4]
 8008f9e:	6085      	str	r5, [r0, #8]
 8008fa0:	e00d      	b.n	8008fbe <_Balloc+0x76>
 8008fa2:	2221      	movs	r2, #33	; 0x21
 8008fa4:	2104      	movs	r1, #4
 8008fa6:	0030      	movs	r0, r6
 8008fa8:	f000 fb6a 	bl	8009680 <_calloc_r>
 8008fac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008fae:	60e8      	str	r0, [r5, #12]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e1      	bne.n	8008f7a <_Balloc+0x32>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	bd70      	pop	{r4, r5, r6, pc}
 8008fba:	6802      	ldr	r2, [r0, #0]
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6103      	str	r3, [r0, #16]
 8008fc2:	60c3      	str	r3, [r0, #12]
 8008fc4:	e7f8      	b.n	8008fb8 <_Balloc+0x70>
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	0800a01d 	.word	0x0800a01d
 8008fcc:	0800a100 	.word	0x0800a100

08008fd0 <_Bfree>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fd4:	0005      	movs	r5, r0
 8008fd6:	000c      	movs	r4, r1
 8008fd8:	2e00      	cmp	r6, #0
 8008fda:	d10e      	bne.n	8008ffa <_Bfree+0x2a>
 8008fdc:	2010      	movs	r0, #16
 8008fde:	f7ff ff95 	bl	8008f0c <malloc>
 8008fe2:	1e02      	subs	r2, r0, #0
 8008fe4:	6268      	str	r0, [r5, #36]	; 0x24
 8008fe6:	d104      	bne.n	8008ff2 <_Bfree+0x22>
 8008fe8:	218a      	movs	r1, #138	; 0x8a
 8008fea:	4b09      	ldr	r3, [pc, #36]	; (8009010 <_Bfree+0x40>)
 8008fec:	4809      	ldr	r0, [pc, #36]	; (8009014 <_Bfree+0x44>)
 8008fee:	f000 fe29 	bl	8009c44 <__assert_func>
 8008ff2:	6046      	str	r6, [r0, #4]
 8008ff4:	6086      	str	r6, [r0, #8]
 8008ff6:	6006      	str	r6, [r0, #0]
 8008ff8:	60c6      	str	r6, [r0, #12]
 8008ffa:	2c00      	cmp	r4, #0
 8008ffc:	d007      	beq.n	800900e <_Bfree+0x3e>
 8008ffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009000:	6862      	ldr	r2, [r4, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	0092      	lsls	r2, r2, #2
 8009006:	189b      	adds	r3, r3, r2
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	6022      	str	r2, [r4, #0]
 800900c:	601c      	str	r4, [r3, #0]
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	0800a01d 	.word	0x0800a01d
 8009014:	0800a100 	.word	0x0800a100

08009018 <__multadd>:
 8009018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800901a:	000e      	movs	r6, r1
 800901c:	9001      	str	r0, [sp, #4]
 800901e:	000c      	movs	r4, r1
 8009020:	001d      	movs	r5, r3
 8009022:	2000      	movs	r0, #0
 8009024:	690f      	ldr	r7, [r1, #16]
 8009026:	3614      	adds	r6, #20
 8009028:	6833      	ldr	r3, [r6, #0]
 800902a:	3001      	adds	r0, #1
 800902c:	b299      	uxth	r1, r3
 800902e:	4351      	muls	r1, r2
 8009030:	0c1b      	lsrs	r3, r3, #16
 8009032:	4353      	muls	r3, r2
 8009034:	1949      	adds	r1, r1, r5
 8009036:	0c0d      	lsrs	r5, r1, #16
 8009038:	195b      	adds	r3, r3, r5
 800903a:	0c1d      	lsrs	r5, r3, #16
 800903c:	b289      	uxth	r1, r1
 800903e:	041b      	lsls	r3, r3, #16
 8009040:	185b      	adds	r3, r3, r1
 8009042:	c608      	stmia	r6!, {r3}
 8009044:	4287      	cmp	r7, r0
 8009046:	dcef      	bgt.n	8009028 <__multadd+0x10>
 8009048:	2d00      	cmp	r5, #0
 800904a:	d022      	beq.n	8009092 <__multadd+0x7a>
 800904c:	68a3      	ldr	r3, [r4, #8]
 800904e:	42bb      	cmp	r3, r7
 8009050:	dc19      	bgt.n	8009086 <__multadd+0x6e>
 8009052:	6863      	ldr	r3, [r4, #4]
 8009054:	9801      	ldr	r0, [sp, #4]
 8009056:	1c59      	adds	r1, r3, #1
 8009058:	f7ff ff76 	bl	8008f48 <_Balloc>
 800905c:	1e06      	subs	r6, r0, #0
 800905e:	d105      	bne.n	800906c <__multadd+0x54>
 8009060:	0002      	movs	r2, r0
 8009062:	21b5      	movs	r1, #181	; 0xb5
 8009064:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <__multadd+0x80>)
 8009066:	480d      	ldr	r0, [pc, #52]	; (800909c <__multadd+0x84>)
 8009068:	f000 fdec 	bl	8009c44 <__assert_func>
 800906c:	0021      	movs	r1, r4
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	310c      	adds	r1, #12
 8009072:	1c9a      	adds	r2, r3, #2
 8009074:	0092      	lsls	r2, r2, #2
 8009076:	300c      	adds	r0, #12
 8009078:	f7ff ff5d 	bl	8008f36 <memcpy>
 800907c:	0021      	movs	r1, r4
 800907e:	9801      	ldr	r0, [sp, #4]
 8009080:	f7ff ffa6 	bl	8008fd0 <_Bfree>
 8009084:	0034      	movs	r4, r6
 8009086:	1d3b      	adds	r3, r7, #4
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	18e3      	adds	r3, r4, r3
 800908c:	605d      	str	r5, [r3, #4]
 800908e:	1c7b      	adds	r3, r7, #1
 8009090:	6123      	str	r3, [r4, #16]
 8009092:	0020      	movs	r0, r4
 8009094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009096:	46c0      	nop			; (mov r8, r8)
 8009098:	0800a08f 	.word	0x0800a08f
 800909c:	0800a100 	.word	0x0800a100

080090a0 <__hi0bits>:
 80090a0:	0003      	movs	r3, r0
 80090a2:	0c02      	lsrs	r2, r0, #16
 80090a4:	2000      	movs	r0, #0
 80090a6:	4282      	cmp	r2, r0
 80090a8:	d101      	bne.n	80090ae <__hi0bits+0xe>
 80090aa:	041b      	lsls	r3, r3, #16
 80090ac:	3010      	adds	r0, #16
 80090ae:	0e1a      	lsrs	r2, r3, #24
 80090b0:	d101      	bne.n	80090b6 <__hi0bits+0x16>
 80090b2:	3008      	adds	r0, #8
 80090b4:	021b      	lsls	r3, r3, #8
 80090b6:	0f1a      	lsrs	r2, r3, #28
 80090b8:	d101      	bne.n	80090be <__hi0bits+0x1e>
 80090ba:	3004      	adds	r0, #4
 80090bc:	011b      	lsls	r3, r3, #4
 80090be:	0f9a      	lsrs	r2, r3, #30
 80090c0:	d101      	bne.n	80090c6 <__hi0bits+0x26>
 80090c2:	3002      	adds	r0, #2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	db03      	blt.n	80090d2 <__hi0bits+0x32>
 80090ca:	3001      	adds	r0, #1
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	d400      	bmi.n	80090d2 <__hi0bits+0x32>
 80090d0:	2020      	movs	r0, #32
 80090d2:	4770      	bx	lr

080090d4 <__lo0bits>:
 80090d4:	6803      	ldr	r3, [r0, #0]
 80090d6:	0002      	movs	r2, r0
 80090d8:	2107      	movs	r1, #7
 80090da:	0018      	movs	r0, r3
 80090dc:	4008      	ands	r0, r1
 80090de:	420b      	tst	r3, r1
 80090e0:	d00d      	beq.n	80090fe <__lo0bits+0x2a>
 80090e2:	3906      	subs	r1, #6
 80090e4:	2000      	movs	r0, #0
 80090e6:	420b      	tst	r3, r1
 80090e8:	d105      	bne.n	80090f6 <__lo0bits+0x22>
 80090ea:	3002      	adds	r0, #2
 80090ec:	4203      	tst	r3, r0
 80090ee:	d003      	beq.n	80090f8 <__lo0bits+0x24>
 80090f0:	40cb      	lsrs	r3, r1
 80090f2:	0008      	movs	r0, r1
 80090f4:	6013      	str	r3, [r2, #0]
 80090f6:	4770      	bx	lr
 80090f8:	089b      	lsrs	r3, r3, #2
 80090fa:	6013      	str	r3, [r2, #0]
 80090fc:	e7fb      	b.n	80090f6 <__lo0bits+0x22>
 80090fe:	b299      	uxth	r1, r3
 8009100:	2900      	cmp	r1, #0
 8009102:	d101      	bne.n	8009108 <__lo0bits+0x34>
 8009104:	2010      	movs	r0, #16
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	b2d9      	uxtb	r1, r3
 800910a:	2900      	cmp	r1, #0
 800910c:	d101      	bne.n	8009112 <__lo0bits+0x3e>
 800910e:	3008      	adds	r0, #8
 8009110:	0a1b      	lsrs	r3, r3, #8
 8009112:	0719      	lsls	r1, r3, #28
 8009114:	d101      	bne.n	800911a <__lo0bits+0x46>
 8009116:	3004      	adds	r0, #4
 8009118:	091b      	lsrs	r3, r3, #4
 800911a:	0799      	lsls	r1, r3, #30
 800911c:	d101      	bne.n	8009122 <__lo0bits+0x4e>
 800911e:	3002      	adds	r0, #2
 8009120:	089b      	lsrs	r3, r3, #2
 8009122:	07d9      	lsls	r1, r3, #31
 8009124:	d4e9      	bmi.n	80090fa <__lo0bits+0x26>
 8009126:	3001      	adds	r0, #1
 8009128:	085b      	lsrs	r3, r3, #1
 800912a:	d1e6      	bne.n	80090fa <__lo0bits+0x26>
 800912c:	2020      	movs	r0, #32
 800912e:	e7e2      	b.n	80090f6 <__lo0bits+0x22>

08009130 <__i2b>:
 8009130:	b510      	push	{r4, lr}
 8009132:	000c      	movs	r4, r1
 8009134:	2101      	movs	r1, #1
 8009136:	f7ff ff07 	bl	8008f48 <_Balloc>
 800913a:	2800      	cmp	r0, #0
 800913c:	d106      	bne.n	800914c <__i2b+0x1c>
 800913e:	21a0      	movs	r1, #160	; 0xa0
 8009140:	0002      	movs	r2, r0
 8009142:	4b04      	ldr	r3, [pc, #16]	; (8009154 <__i2b+0x24>)
 8009144:	4804      	ldr	r0, [pc, #16]	; (8009158 <__i2b+0x28>)
 8009146:	0049      	lsls	r1, r1, #1
 8009148:	f000 fd7c 	bl	8009c44 <__assert_func>
 800914c:	2301      	movs	r3, #1
 800914e:	6144      	str	r4, [r0, #20]
 8009150:	6103      	str	r3, [r0, #16]
 8009152:	bd10      	pop	{r4, pc}
 8009154:	0800a08f 	.word	0x0800a08f
 8009158:	0800a100 	.word	0x0800a100

0800915c <__multiply>:
 800915c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800915e:	690b      	ldr	r3, [r1, #16]
 8009160:	0014      	movs	r4, r2
 8009162:	6912      	ldr	r2, [r2, #16]
 8009164:	000d      	movs	r5, r1
 8009166:	b089      	sub	sp, #36	; 0x24
 8009168:	4293      	cmp	r3, r2
 800916a:	da01      	bge.n	8009170 <__multiply+0x14>
 800916c:	0025      	movs	r5, r4
 800916e:	000c      	movs	r4, r1
 8009170:	692f      	ldr	r7, [r5, #16]
 8009172:	6926      	ldr	r6, [r4, #16]
 8009174:	6869      	ldr	r1, [r5, #4]
 8009176:	19bb      	adds	r3, r7, r6
 8009178:	9302      	str	r3, [sp, #8]
 800917a:	68ab      	ldr	r3, [r5, #8]
 800917c:	19ba      	adds	r2, r7, r6
 800917e:	4293      	cmp	r3, r2
 8009180:	da00      	bge.n	8009184 <__multiply+0x28>
 8009182:	3101      	adds	r1, #1
 8009184:	f7ff fee0 	bl	8008f48 <_Balloc>
 8009188:	9001      	str	r0, [sp, #4]
 800918a:	2800      	cmp	r0, #0
 800918c:	d106      	bne.n	800919c <__multiply+0x40>
 800918e:	215e      	movs	r1, #94	; 0x5e
 8009190:	0002      	movs	r2, r0
 8009192:	4b48      	ldr	r3, [pc, #288]	; (80092b4 <__multiply+0x158>)
 8009194:	4848      	ldr	r0, [pc, #288]	; (80092b8 <__multiply+0x15c>)
 8009196:	31ff      	adds	r1, #255	; 0xff
 8009198:	f000 fd54 	bl	8009c44 <__assert_func>
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	3314      	adds	r3, #20
 80091a2:	469c      	mov	ip, r3
 80091a4:	19bb      	adds	r3, r7, r6
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4463      	add	r3, ip
 80091aa:	9303      	str	r3, [sp, #12]
 80091ac:	4663      	mov	r3, ip
 80091ae:	9903      	ldr	r1, [sp, #12]
 80091b0:	428b      	cmp	r3, r1
 80091b2:	d32c      	bcc.n	800920e <__multiply+0xb2>
 80091b4:	002b      	movs	r3, r5
 80091b6:	0022      	movs	r2, r4
 80091b8:	3314      	adds	r3, #20
 80091ba:	00bf      	lsls	r7, r7, #2
 80091bc:	3214      	adds	r2, #20
 80091be:	9306      	str	r3, [sp, #24]
 80091c0:	00b6      	lsls	r6, r6, #2
 80091c2:	19db      	adds	r3, r3, r7
 80091c4:	9304      	str	r3, [sp, #16]
 80091c6:	1993      	adds	r3, r2, r6
 80091c8:	9307      	str	r3, [sp, #28]
 80091ca:	2304      	movs	r3, #4
 80091cc:	9305      	str	r3, [sp, #20]
 80091ce:	002b      	movs	r3, r5
 80091d0:	9904      	ldr	r1, [sp, #16]
 80091d2:	3315      	adds	r3, #21
 80091d4:	9200      	str	r2, [sp, #0]
 80091d6:	4299      	cmp	r1, r3
 80091d8:	d305      	bcc.n	80091e6 <__multiply+0x8a>
 80091da:	1b4b      	subs	r3, r1, r5
 80091dc:	3b15      	subs	r3, #21
 80091de:	089b      	lsrs	r3, r3, #2
 80091e0:	3301      	adds	r3, #1
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	9b07      	ldr	r3, [sp, #28]
 80091e8:	9a00      	ldr	r2, [sp, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d311      	bcc.n	8009212 <__multiply+0xb6>
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dd06      	ble.n	8009202 <__multiply+0xa6>
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	3b04      	subs	r3, #4
 80091f8:	9303      	str	r3, [sp, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d053      	beq.n	80092aa <__multiply+0x14e>
 8009202:	9b01      	ldr	r3, [sp, #4]
 8009204:	9a02      	ldr	r2, [sp, #8]
 8009206:	0018      	movs	r0, r3
 8009208:	611a      	str	r2, [r3, #16]
 800920a:	b009      	add	sp, #36	; 0x24
 800920c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800920e:	c304      	stmia	r3!, {r2}
 8009210:	e7cd      	b.n	80091ae <__multiply+0x52>
 8009212:	9b00      	ldr	r3, [sp, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	b298      	uxth	r0, r3
 8009218:	2800      	cmp	r0, #0
 800921a:	d01b      	beq.n	8009254 <__multiply+0xf8>
 800921c:	4667      	mov	r7, ip
 800921e:	2400      	movs	r4, #0
 8009220:	9e06      	ldr	r6, [sp, #24]
 8009222:	ce02      	ldmia	r6!, {r1}
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	b28b      	uxth	r3, r1
 8009228:	4343      	muls	r3, r0
 800922a:	b292      	uxth	r2, r2
 800922c:	189b      	adds	r3, r3, r2
 800922e:	191b      	adds	r3, r3, r4
 8009230:	0c0c      	lsrs	r4, r1, #16
 8009232:	4344      	muls	r4, r0
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	0c11      	lsrs	r1, r2, #16
 8009238:	1861      	adds	r1, r4, r1
 800923a:	0c1c      	lsrs	r4, r3, #16
 800923c:	1909      	adds	r1, r1, r4
 800923e:	0c0c      	lsrs	r4, r1, #16
 8009240:	b29b      	uxth	r3, r3
 8009242:	0409      	lsls	r1, r1, #16
 8009244:	430b      	orrs	r3, r1
 8009246:	c708      	stmia	r7!, {r3}
 8009248:	9b04      	ldr	r3, [sp, #16]
 800924a:	42b3      	cmp	r3, r6
 800924c:	d8e9      	bhi.n	8009222 <__multiply+0xc6>
 800924e:	4663      	mov	r3, ip
 8009250:	9a05      	ldr	r2, [sp, #20]
 8009252:	509c      	str	r4, [r3, r2]
 8009254:	9b00      	ldr	r3, [sp, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	0c1e      	lsrs	r6, r3, #16
 800925a:	d020      	beq.n	800929e <__multiply+0x142>
 800925c:	4663      	mov	r3, ip
 800925e:	002c      	movs	r4, r5
 8009260:	4660      	mov	r0, ip
 8009262:	2700      	movs	r7, #0
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3414      	adds	r4, #20
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	b29b      	uxth	r3, r3
 800926c:	b291      	uxth	r1, r2
 800926e:	4371      	muls	r1, r6
 8009270:	6802      	ldr	r2, [r0, #0]
 8009272:	0c12      	lsrs	r2, r2, #16
 8009274:	1889      	adds	r1, r1, r2
 8009276:	19cf      	adds	r7, r1, r7
 8009278:	0439      	lsls	r1, r7, #16
 800927a:	430b      	orrs	r3, r1
 800927c:	6003      	str	r3, [r0, #0]
 800927e:	cc02      	ldmia	r4!, {r1}
 8009280:	6843      	ldr	r3, [r0, #4]
 8009282:	0c09      	lsrs	r1, r1, #16
 8009284:	4371      	muls	r1, r6
 8009286:	b29b      	uxth	r3, r3
 8009288:	0c3f      	lsrs	r7, r7, #16
 800928a:	18cb      	adds	r3, r1, r3
 800928c:	9a04      	ldr	r2, [sp, #16]
 800928e:	19db      	adds	r3, r3, r7
 8009290:	0c1f      	lsrs	r7, r3, #16
 8009292:	3004      	adds	r0, #4
 8009294:	42a2      	cmp	r2, r4
 8009296:	d8e7      	bhi.n	8009268 <__multiply+0x10c>
 8009298:	4662      	mov	r2, ip
 800929a:	9905      	ldr	r1, [sp, #20]
 800929c:	5053      	str	r3, [r2, r1]
 800929e:	9b00      	ldr	r3, [sp, #0]
 80092a0:	3304      	adds	r3, #4
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	2304      	movs	r3, #4
 80092a6:	449c      	add	ip, r3
 80092a8:	e79d      	b.n	80091e6 <__multiply+0x8a>
 80092aa:	9b02      	ldr	r3, [sp, #8]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	9302      	str	r3, [sp, #8]
 80092b0:	e79d      	b.n	80091ee <__multiply+0x92>
 80092b2:	46c0      	nop			; (mov r8, r8)
 80092b4:	0800a08f 	.word	0x0800a08f
 80092b8:	0800a100 	.word	0x0800a100

080092bc <__pow5mult>:
 80092bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092be:	2303      	movs	r3, #3
 80092c0:	0015      	movs	r5, r2
 80092c2:	0007      	movs	r7, r0
 80092c4:	000e      	movs	r6, r1
 80092c6:	401a      	ands	r2, r3
 80092c8:	421d      	tst	r5, r3
 80092ca:	d008      	beq.n	80092de <__pow5mult+0x22>
 80092cc:	4925      	ldr	r1, [pc, #148]	; (8009364 <__pow5mult+0xa8>)
 80092ce:	3a01      	subs	r2, #1
 80092d0:	0092      	lsls	r2, r2, #2
 80092d2:	5852      	ldr	r2, [r2, r1]
 80092d4:	2300      	movs	r3, #0
 80092d6:	0031      	movs	r1, r6
 80092d8:	f7ff fe9e 	bl	8009018 <__multadd>
 80092dc:	0006      	movs	r6, r0
 80092de:	10ad      	asrs	r5, r5, #2
 80092e0:	d03d      	beq.n	800935e <__pow5mult+0xa2>
 80092e2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80092e4:	2c00      	cmp	r4, #0
 80092e6:	d10f      	bne.n	8009308 <__pow5mult+0x4c>
 80092e8:	2010      	movs	r0, #16
 80092ea:	f7ff fe0f 	bl	8008f0c <malloc>
 80092ee:	1e02      	subs	r2, r0, #0
 80092f0:	6278      	str	r0, [r7, #36]	; 0x24
 80092f2:	d105      	bne.n	8009300 <__pow5mult+0x44>
 80092f4:	21d7      	movs	r1, #215	; 0xd7
 80092f6:	4b1c      	ldr	r3, [pc, #112]	; (8009368 <__pow5mult+0xac>)
 80092f8:	481c      	ldr	r0, [pc, #112]	; (800936c <__pow5mult+0xb0>)
 80092fa:	0049      	lsls	r1, r1, #1
 80092fc:	f000 fca2 	bl	8009c44 <__assert_func>
 8009300:	6044      	str	r4, [r0, #4]
 8009302:	6084      	str	r4, [r0, #8]
 8009304:	6004      	str	r4, [r0, #0]
 8009306:	60c4      	str	r4, [r0, #12]
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	689c      	ldr	r4, [r3, #8]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	2c00      	cmp	r4, #0
 8009310:	d108      	bne.n	8009324 <__pow5mult+0x68>
 8009312:	0038      	movs	r0, r7
 8009314:	4916      	ldr	r1, [pc, #88]	; (8009370 <__pow5mult+0xb4>)
 8009316:	f7ff ff0b 	bl	8009130 <__i2b>
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	0004      	movs	r4, r0
 800931e:	6098      	str	r0, [r3, #8]
 8009320:	2300      	movs	r3, #0
 8009322:	6003      	str	r3, [r0, #0]
 8009324:	2301      	movs	r3, #1
 8009326:	421d      	tst	r5, r3
 8009328:	d00a      	beq.n	8009340 <__pow5mult+0x84>
 800932a:	0031      	movs	r1, r6
 800932c:	0022      	movs	r2, r4
 800932e:	0038      	movs	r0, r7
 8009330:	f7ff ff14 	bl	800915c <__multiply>
 8009334:	0031      	movs	r1, r6
 8009336:	9001      	str	r0, [sp, #4]
 8009338:	0038      	movs	r0, r7
 800933a:	f7ff fe49 	bl	8008fd0 <_Bfree>
 800933e:	9e01      	ldr	r6, [sp, #4]
 8009340:	106d      	asrs	r5, r5, #1
 8009342:	d00c      	beq.n	800935e <__pow5mult+0xa2>
 8009344:	6820      	ldr	r0, [r4, #0]
 8009346:	2800      	cmp	r0, #0
 8009348:	d107      	bne.n	800935a <__pow5mult+0x9e>
 800934a:	0022      	movs	r2, r4
 800934c:	0021      	movs	r1, r4
 800934e:	0038      	movs	r0, r7
 8009350:	f7ff ff04 	bl	800915c <__multiply>
 8009354:	2300      	movs	r3, #0
 8009356:	6020      	str	r0, [r4, #0]
 8009358:	6003      	str	r3, [r0, #0]
 800935a:	0004      	movs	r4, r0
 800935c:	e7e2      	b.n	8009324 <__pow5mult+0x68>
 800935e:	0030      	movs	r0, r6
 8009360:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009362:	46c0      	nop			; (mov r8, r8)
 8009364:	0800a250 	.word	0x0800a250
 8009368:	0800a01d 	.word	0x0800a01d
 800936c:	0800a100 	.word	0x0800a100
 8009370:	00000271 	.word	0x00000271

08009374 <__lshift>:
 8009374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009376:	000c      	movs	r4, r1
 8009378:	0017      	movs	r7, r2
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	1155      	asrs	r5, r2, #5
 800937e:	b087      	sub	sp, #28
 8009380:	18eb      	adds	r3, r5, r3
 8009382:	9302      	str	r3, [sp, #8]
 8009384:	3301      	adds	r3, #1
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	6849      	ldr	r1, [r1, #4]
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	9004      	str	r0, [sp, #16]
 800938e:	9a01      	ldr	r2, [sp, #4]
 8009390:	4293      	cmp	r3, r2
 8009392:	db10      	blt.n	80093b6 <__lshift+0x42>
 8009394:	9804      	ldr	r0, [sp, #16]
 8009396:	f7ff fdd7 	bl	8008f48 <_Balloc>
 800939a:	2300      	movs	r3, #0
 800939c:	0002      	movs	r2, r0
 800939e:	0006      	movs	r6, r0
 80093a0:	0019      	movs	r1, r3
 80093a2:	3214      	adds	r2, #20
 80093a4:	4298      	cmp	r0, r3
 80093a6:	d10c      	bne.n	80093c2 <__lshift+0x4e>
 80093a8:	21da      	movs	r1, #218	; 0xda
 80093aa:	0002      	movs	r2, r0
 80093ac:	4b26      	ldr	r3, [pc, #152]	; (8009448 <__lshift+0xd4>)
 80093ae:	4827      	ldr	r0, [pc, #156]	; (800944c <__lshift+0xd8>)
 80093b0:	31ff      	adds	r1, #255	; 0xff
 80093b2:	f000 fc47 	bl	8009c44 <__assert_func>
 80093b6:	3101      	adds	r1, #1
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	e7e8      	b.n	800938e <__lshift+0x1a>
 80093bc:	0098      	lsls	r0, r3, #2
 80093be:	5011      	str	r1, [r2, r0]
 80093c0:	3301      	adds	r3, #1
 80093c2:	42ab      	cmp	r3, r5
 80093c4:	dbfa      	blt.n	80093bc <__lshift+0x48>
 80093c6:	43eb      	mvns	r3, r5
 80093c8:	17db      	asrs	r3, r3, #31
 80093ca:	401d      	ands	r5, r3
 80093cc:	211f      	movs	r1, #31
 80093ce:	0023      	movs	r3, r4
 80093d0:	0038      	movs	r0, r7
 80093d2:	00ad      	lsls	r5, r5, #2
 80093d4:	1955      	adds	r5, r2, r5
 80093d6:	6922      	ldr	r2, [r4, #16]
 80093d8:	3314      	adds	r3, #20
 80093da:	0092      	lsls	r2, r2, #2
 80093dc:	4008      	ands	r0, r1
 80093de:	4684      	mov	ip, r0
 80093e0:	189a      	adds	r2, r3, r2
 80093e2:	420f      	tst	r7, r1
 80093e4:	d02a      	beq.n	800943c <__lshift+0xc8>
 80093e6:	3101      	adds	r1, #1
 80093e8:	1a09      	subs	r1, r1, r0
 80093ea:	9105      	str	r1, [sp, #20]
 80093ec:	2100      	movs	r1, #0
 80093ee:	9503      	str	r5, [sp, #12]
 80093f0:	4667      	mov	r7, ip
 80093f2:	6818      	ldr	r0, [r3, #0]
 80093f4:	40b8      	lsls	r0, r7
 80093f6:	4301      	orrs	r1, r0
 80093f8:	9803      	ldr	r0, [sp, #12]
 80093fa:	c002      	stmia	r0!, {r1}
 80093fc:	cb02      	ldmia	r3!, {r1}
 80093fe:	9003      	str	r0, [sp, #12]
 8009400:	9805      	ldr	r0, [sp, #20]
 8009402:	40c1      	lsrs	r1, r0
 8009404:	429a      	cmp	r2, r3
 8009406:	d8f3      	bhi.n	80093f0 <__lshift+0x7c>
 8009408:	0020      	movs	r0, r4
 800940a:	3015      	adds	r0, #21
 800940c:	2304      	movs	r3, #4
 800940e:	4282      	cmp	r2, r0
 8009410:	d304      	bcc.n	800941c <__lshift+0xa8>
 8009412:	1b13      	subs	r3, r2, r4
 8009414:	3b15      	subs	r3, #21
 8009416:	089b      	lsrs	r3, r3, #2
 8009418:	3301      	adds	r3, #1
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	50e9      	str	r1, [r5, r3]
 800941e:	2900      	cmp	r1, #0
 8009420:	d002      	beq.n	8009428 <__lshift+0xb4>
 8009422:	9b02      	ldr	r3, [sp, #8]
 8009424:	3302      	adds	r3, #2
 8009426:	9301      	str	r3, [sp, #4]
 8009428:	9b01      	ldr	r3, [sp, #4]
 800942a:	9804      	ldr	r0, [sp, #16]
 800942c:	3b01      	subs	r3, #1
 800942e:	0021      	movs	r1, r4
 8009430:	6133      	str	r3, [r6, #16]
 8009432:	f7ff fdcd 	bl	8008fd0 <_Bfree>
 8009436:	0030      	movs	r0, r6
 8009438:	b007      	add	sp, #28
 800943a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800943c:	cb02      	ldmia	r3!, {r1}
 800943e:	c502      	stmia	r5!, {r1}
 8009440:	429a      	cmp	r2, r3
 8009442:	d8fb      	bhi.n	800943c <__lshift+0xc8>
 8009444:	e7f0      	b.n	8009428 <__lshift+0xb4>
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	0800a08f 	.word	0x0800a08f
 800944c:	0800a100 	.word	0x0800a100

08009450 <__mcmp>:
 8009450:	6902      	ldr	r2, [r0, #16]
 8009452:	690b      	ldr	r3, [r1, #16]
 8009454:	b530      	push	{r4, r5, lr}
 8009456:	0004      	movs	r4, r0
 8009458:	1ad0      	subs	r0, r2, r3
 800945a:	429a      	cmp	r2, r3
 800945c:	d10d      	bne.n	800947a <__mcmp+0x2a>
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	3414      	adds	r4, #20
 8009462:	3114      	adds	r1, #20
 8009464:	18e2      	adds	r2, r4, r3
 8009466:	18c9      	adds	r1, r1, r3
 8009468:	3a04      	subs	r2, #4
 800946a:	3904      	subs	r1, #4
 800946c:	6815      	ldr	r5, [r2, #0]
 800946e:	680b      	ldr	r3, [r1, #0]
 8009470:	429d      	cmp	r5, r3
 8009472:	d003      	beq.n	800947c <__mcmp+0x2c>
 8009474:	2001      	movs	r0, #1
 8009476:	429d      	cmp	r5, r3
 8009478:	d303      	bcc.n	8009482 <__mcmp+0x32>
 800947a:	bd30      	pop	{r4, r5, pc}
 800947c:	4294      	cmp	r4, r2
 800947e:	d3f3      	bcc.n	8009468 <__mcmp+0x18>
 8009480:	e7fb      	b.n	800947a <__mcmp+0x2a>
 8009482:	4240      	negs	r0, r0
 8009484:	e7f9      	b.n	800947a <__mcmp+0x2a>
	...

08009488 <__mdiff>:
 8009488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800948a:	000e      	movs	r6, r1
 800948c:	0007      	movs	r7, r0
 800948e:	0011      	movs	r1, r2
 8009490:	0030      	movs	r0, r6
 8009492:	b087      	sub	sp, #28
 8009494:	0014      	movs	r4, r2
 8009496:	f7ff ffdb 	bl	8009450 <__mcmp>
 800949a:	1e05      	subs	r5, r0, #0
 800949c:	d110      	bne.n	80094c0 <__mdiff+0x38>
 800949e:	0001      	movs	r1, r0
 80094a0:	0038      	movs	r0, r7
 80094a2:	f7ff fd51 	bl	8008f48 <_Balloc>
 80094a6:	1e02      	subs	r2, r0, #0
 80094a8:	d104      	bne.n	80094b4 <__mdiff+0x2c>
 80094aa:	4b40      	ldr	r3, [pc, #256]	; (80095ac <__mdiff+0x124>)
 80094ac:	4940      	ldr	r1, [pc, #256]	; (80095b0 <__mdiff+0x128>)
 80094ae:	4841      	ldr	r0, [pc, #260]	; (80095b4 <__mdiff+0x12c>)
 80094b0:	f000 fbc8 	bl	8009c44 <__assert_func>
 80094b4:	2301      	movs	r3, #1
 80094b6:	6145      	str	r5, [r0, #20]
 80094b8:	6103      	str	r3, [r0, #16]
 80094ba:	0010      	movs	r0, r2
 80094bc:	b007      	add	sp, #28
 80094be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c0:	2301      	movs	r3, #1
 80094c2:	9301      	str	r3, [sp, #4]
 80094c4:	2800      	cmp	r0, #0
 80094c6:	db04      	blt.n	80094d2 <__mdiff+0x4a>
 80094c8:	0023      	movs	r3, r4
 80094ca:	0034      	movs	r4, r6
 80094cc:	001e      	movs	r6, r3
 80094ce:	2300      	movs	r3, #0
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	0038      	movs	r0, r7
 80094d4:	6861      	ldr	r1, [r4, #4]
 80094d6:	f7ff fd37 	bl	8008f48 <_Balloc>
 80094da:	1e02      	subs	r2, r0, #0
 80094dc:	d103      	bne.n	80094e6 <__mdiff+0x5e>
 80094de:	2190      	movs	r1, #144	; 0x90
 80094e0:	4b32      	ldr	r3, [pc, #200]	; (80095ac <__mdiff+0x124>)
 80094e2:	0089      	lsls	r1, r1, #2
 80094e4:	e7e3      	b.n	80094ae <__mdiff+0x26>
 80094e6:	9b01      	ldr	r3, [sp, #4]
 80094e8:	2700      	movs	r7, #0
 80094ea:	60c3      	str	r3, [r0, #12]
 80094ec:	6920      	ldr	r0, [r4, #16]
 80094ee:	3414      	adds	r4, #20
 80094f0:	9401      	str	r4, [sp, #4]
 80094f2:	9b01      	ldr	r3, [sp, #4]
 80094f4:	0084      	lsls	r4, r0, #2
 80094f6:	191b      	adds	r3, r3, r4
 80094f8:	0034      	movs	r4, r6
 80094fa:	9302      	str	r3, [sp, #8]
 80094fc:	6933      	ldr	r3, [r6, #16]
 80094fe:	3414      	adds	r4, #20
 8009500:	0099      	lsls	r1, r3, #2
 8009502:	1863      	adds	r3, r4, r1
 8009504:	9303      	str	r3, [sp, #12]
 8009506:	0013      	movs	r3, r2
 8009508:	3314      	adds	r3, #20
 800950a:	469c      	mov	ip, r3
 800950c:	9305      	str	r3, [sp, #20]
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	9304      	str	r3, [sp, #16]
 8009512:	9b04      	ldr	r3, [sp, #16]
 8009514:	cc02      	ldmia	r4!, {r1}
 8009516:	cb20      	ldmia	r3!, {r5}
 8009518:	9304      	str	r3, [sp, #16]
 800951a:	b2ab      	uxth	r3, r5
 800951c:	19df      	adds	r7, r3, r7
 800951e:	b28b      	uxth	r3, r1
 8009520:	1afb      	subs	r3, r7, r3
 8009522:	0c09      	lsrs	r1, r1, #16
 8009524:	0c2d      	lsrs	r5, r5, #16
 8009526:	1a6d      	subs	r5, r5, r1
 8009528:	1419      	asrs	r1, r3, #16
 800952a:	186d      	adds	r5, r5, r1
 800952c:	4661      	mov	r1, ip
 800952e:	142f      	asrs	r7, r5, #16
 8009530:	b29b      	uxth	r3, r3
 8009532:	042d      	lsls	r5, r5, #16
 8009534:	432b      	orrs	r3, r5
 8009536:	c108      	stmia	r1!, {r3}
 8009538:	9b03      	ldr	r3, [sp, #12]
 800953a:	468c      	mov	ip, r1
 800953c:	42a3      	cmp	r3, r4
 800953e:	d8e8      	bhi.n	8009512 <__mdiff+0x8a>
 8009540:	0031      	movs	r1, r6
 8009542:	9c03      	ldr	r4, [sp, #12]
 8009544:	3115      	adds	r1, #21
 8009546:	2304      	movs	r3, #4
 8009548:	428c      	cmp	r4, r1
 800954a:	d304      	bcc.n	8009556 <__mdiff+0xce>
 800954c:	1ba3      	subs	r3, r4, r6
 800954e:	3b15      	subs	r3, #21
 8009550:	089b      	lsrs	r3, r3, #2
 8009552:	3301      	adds	r3, #1
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	9901      	ldr	r1, [sp, #4]
 8009558:	18cc      	adds	r4, r1, r3
 800955a:	9905      	ldr	r1, [sp, #20]
 800955c:	0026      	movs	r6, r4
 800955e:	18cb      	adds	r3, r1, r3
 8009560:	469c      	mov	ip, r3
 8009562:	9902      	ldr	r1, [sp, #8]
 8009564:	428e      	cmp	r6, r1
 8009566:	d310      	bcc.n	800958a <__mdiff+0x102>
 8009568:	9e02      	ldr	r6, [sp, #8]
 800956a:	1ee1      	subs	r1, r4, #3
 800956c:	2500      	movs	r5, #0
 800956e:	428e      	cmp	r6, r1
 8009570:	d304      	bcc.n	800957c <__mdiff+0xf4>
 8009572:	0031      	movs	r1, r6
 8009574:	3103      	adds	r1, #3
 8009576:	1b0c      	subs	r4, r1, r4
 8009578:	08a4      	lsrs	r4, r4, #2
 800957a:	00a5      	lsls	r5, r4, #2
 800957c:	195b      	adds	r3, r3, r5
 800957e:	3b04      	subs	r3, #4
 8009580:	6819      	ldr	r1, [r3, #0]
 8009582:	2900      	cmp	r1, #0
 8009584:	d00f      	beq.n	80095a6 <__mdiff+0x11e>
 8009586:	6110      	str	r0, [r2, #16]
 8009588:	e797      	b.n	80094ba <__mdiff+0x32>
 800958a:	ce02      	ldmia	r6!, {r1}
 800958c:	b28d      	uxth	r5, r1
 800958e:	19ed      	adds	r5, r5, r7
 8009590:	0c0f      	lsrs	r7, r1, #16
 8009592:	1429      	asrs	r1, r5, #16
 8009594:	1879      	adds	r1, r7, r1
 8009596:	140f      	asrs	r7, r1, #16
 8009598:	b2ad      	uxth	r5, r5
 800959a:	0409      	lsls	r1, r1, #16
 800959c:	430d      	orrs	r5, r1
 800959e:	4661      	mov	r1, ip
 80095a0:	c120      	stmia	r1!, {r5}
 80095a2:	468c      	mov	ip, r1
 80095a4:	e7dd      	b.n	8009562 <__mdiff+0xda>
 80095a6:	3801      	subs	r0, #1
 80095a8:	e7e9      	b.n	800957e <__mdiff+0xf6>
 80095aa:	46c0      	nop			; (mov r8, r8)
 80095ac:	0800a08f 	.word	0x0800a08f
 80095b0:	00000232 	.word	0x00000232
 80095b4:	0800a100 	.word	0x0800a100

080095b8 <__d2b>:
 80095b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ba:	2101      	movs	r1, #1
 80095bc:	0014      	movs	r4, r2
 80095be:	001e      	movs	r6, r3
 80095c0:	9f08      	ldr	r7, [sp, #32]
 80095c2:	f7ff fcc1 	bl	8008f48 <_Balloc>
 80095c6:	1e05      	subs	r5, r0, #0
 80095c8:	d105      	bne.n	80095d6 <__d2b+0x1e>
 80095ca:	0002      	movs	r2, r0
 80095cc:	4b26      	ldr	r3, [pc, #152]	; (8009668 <__d2b+0xb0>)
 80095ce:	4927      	ldr	r1, [pc, #156]	; (800966c <__d2b+0xb4>)
 80095d0:	4827      	ldr	r0, [pc, #156]	; (8009670 <__d2b+0xb8>)
 80095d2:	f000 fb37 	bl	8009c44 <__assert_func>
 80095d6:	0333      	lsls	r3, r6, #12
 80095d8:	0076      	lsls	r6, r6, #1
 80095da:	0b1b      	lsrs	r3, r3, #12
 80095dc:	0d76      	lsrs	r6, r6, #21
 80095de:	d124      	bne.n	800962a <__d2b+0x72>
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	2c00      	cmp	r4, #0
 80095e4:	d027      	beq.n	8009636 <__d2b+0x7e>
 80095e6:	4668      	mov	r0, sp
 80095e8:	9400      	str	r4, [sp, #0]
 80095ea:	f7ff fd73 	bl	80090d4 <__lo0bits>
 80095ee:	9c00      	ldr	r4, [sp, #0]
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d01e      	beq.n	8009632 <__d2b+0x7a>
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	2120      	movs	r1, #32
 80095f8:	001a      	movs	r2, r3
 80095fa:	1a09      	subs	r1, r1, r0
 80095fc:	408a      	lsls	r2, r1
 80095fe:	40c3      	lsrs	r3, r0
 8009600:	4322      	orrs	r2, r4
 8009602:	616a      	str	r2, [r5, #20]
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	9c01      	ldr	r4, [sp, #4]
 8009608:	61ac      	str	r4, [r5, #24]
 800960a:	1e63      	subs	r3, r4, #1
 800960c:	419c      	sbcs	r4, r3
 800960e:	3401      	adds	r4, #1
 8009610:	612c      	str	r4, [r5, #16]
 8009612:	2e00      	cmp	r6, #0
 8009614:	d018      	beq.n	8009648 <__d2b+0x90>
 8009616:	4b17      	ldr	r3, [pc, #92]	; (8009674 <__d2b+0xbc>)
 8009618:	18f6      	adds	r6, r6, r3
 800961a:	2335      	movs	r3, #53	; 0x35
 800961c:	1836      	adds	r6, r6, r0
 800961e:	1a18      	subs	r0, r3, r0
 8009620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009622:	603e      	str	r6, [r7, #0]
 8009624:	6018      	str	r0, [r3, #0]
 8009626:	0028      	movs	r0, r5
 8009628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800962a:	2280      	movs	r2, #128	; 0x80
 800962c:	0352      	lsls	r2, r2, #13
 800962e:	4313      	orrs	r3, r2
 8009630:	e7d6      	b.n	80095e0 <__d2b+0x28>
 8009632:	616c      	str	r4, [r5, #20]
 8009634:	e7e7      	b.n	8009606 <__d2b+0x4e>
 8009636:	a801      	add	r0, sp, #4
 8009638:	f7ff fd4c 	bl	80090d4 <__lo0bits>
 800963c:	2401      	movs	r4, #1
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	612c      	str	r4, [r5, #16]
 8009642:	616b      	str	r3, [r5, #20]
 8009644:	3020      	adds	r0, #32
 8009646:	e7e4      	b.n	8009612 <__d2b+0x5a>
 8009648:	4b0b      	ldr	r3, [pc, #44]	; (8009678 <__d2b+0xc0>)
 800964a:	18c0      	adds	r0, r0, r3
 800964c:	4b0b      	ldr	r3, [pc, #44]	; (800967c <__d2b+0xc4>)
 800964e:	6038      	str	r0, [r7, #0]
 8009650:	18e3      	adds	r3, r4, r3
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	18eb      	adds	r3, r5, r3
 8009656:	6958      	ldr	r0, [r3, #20]
 8009658:	f7ff fd22 	bl	80090a0 <__hi0bits>
 800965c:	0164      	lsls	r4, r4, #5
 800965e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009660:	1a24      	subs	r4, r4, r0
 8009662:	601c      	str	r4, [r3, #0]
 8009664:	e7df      	b.n	8009626 <__d2b+0x6e>
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	0800a08f 	.word	0x0800a08f
 800966c:	0000030a 	.word	0x0000030a
 8009670:	0800a100 	.word	0x0800a100
 8009674:	fffffbcd 	.word	0xfffffbcd
 8009678:	fffffbce 	.word	0xfffffbce
 800967c:	3fffffff 	.word	0x3fffffff

08009680 <_calloc_r>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	0c13      	lsrs	r3, r2, #16
 8009684:	0c0d      	lsrs	r5, r1, #16
 8009686:	d11e      	bne.n	80096c6 <_calloc_r+0x46>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10c      	bne.n	80096a6 <_calloc_r+0x26>
 800968c:	b289      	uxth	r1, r1
 800968e:	b294      	uxth	r4, r2
 8009690:	434c      	muls	r4, r1
 8009692:	0021      	movs	r1, r4
 8009694:	f000 f88c 	bl	80097b0 <_malloc_r>
 8009698:	1e05      	subs	r5, r0, #0
 800969a:	d01b      	beq.n	80096d4 <_calloc_r+0x54>
 800969c:	0022      	movs	r2, r4
 800969e:	2100      	movs	r1, #0
 80096a0:	f7fd fd72 	bl	8007188 <memset>
 80096a4:	e016      	b.n	80096d4 <_calloc_r+0x54>
 80096a6:	1c1d      	adds	r5, r3, #0
 80096a8:	1c0b      	adds	r3, r1, #0
 80096aa:	b292      	uxth	r2, r2
 80096ac:	b289      	uxth	r1, r1
 80096ae:	b29c      	uxth	r4, r3
 80096b0:	4351      	muls	r1, r2
 80096b2:	b2ab      	uxth	r3, r5
 80096b4:	4363      	muls	r3, r4
 80096b6:	0c0c      	lsrs	r4, r1, #16
 80096b8:	191c      	adds	r4, r3, r4
 80096ba:	0c22      	lsrs	r2, r4, #16
 80096bc:	d107      	bne.n	80096ce <_calloc_r+0x4e>
 80096be:	0424      	lsls	r4, r4, #16
 80096c0:	b289      	uxth	r1, r1
 80096c2:	430c      	orrs	r4, r1
 80096c4:	e7e5      	b.n	8009692 <_calloc_r+0x12>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <_calloc_r+0x4e>
 80096ca:	1c13      	adds	r3, r2, #0
 80096cc:	e7ed      	b.n	80096aa <_calloc_r+0x2a>
 80096ce:	230c      	movs	r3, #12
 80096d0:	2500      	movs	r5, #0
 80096d2:	6003      	str	r3, [r0, #0]
 80096d4:	0028      	movs	r0, r5
 80096d6:	bd70      	pop	{r4, r5, r6, pc}

080096d8 <_free_r>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	0005      	movs	r5, r0
 80096dc:	2900      	cmp	r1, #0
 80096de:	d010      	beq.n	8009702 <_free_r+0x2a>
 80096e0:	1f0c      	subs	r4, r1, #4
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	da00      	bge.n	80096ea <_free_r+0x12>
 80096e8:	18e4      	adds	r4, r4, r3
 80096ea:	0028      	movs	r0, r5
 80096ec:	f000 fb34 	bl	8009d58 <__malloc_lock>
 80096f0:	4a1d      	ldr	r2, [pc, #116]	; (8009768 <_free_r+0x90>)
 80096f2:	6813      	ldr	r3, [r2, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d105      	bne.n	8009704 <_free_r+0x2c>
 80096f8:	6063      	str	r3, [r4, #4]
 80096fa:	6014      	str	r4, [r2, #0]
 80096fc:	0028      	movs	r0, r5
 80096fe:	f000 fb33 	bl	8009d68 <__malloc_unlock>
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	42a3      	cmp	r3, r4
 8009706:	d908      	bls.n	800971a <_free_r+0x42>
 8009708:	6821      	ldr	r1, [r4, #0]
 800970a:	1860      	adds	r0, r4, r1
 800970c:	4283      	cmp	r3, r0
 800970e:	d1f3      	bne.n	80096f8 <_free_r+0x20>
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	1841      	adds	r1, r0, r1
 8009716:	6021      	str	r1, [r4, #0]
 8009718:	e7ee      	b.n	80096f8 <_free_r+0x20>
 800971a:	001a      	movs	r2, r3
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <_free_r+0x4e>
 8009722:	42a3      	cmp	r3, r4
 8009724:	d9f9      	bls.n	800971a <_free_r+0x42>
 8009726:	6811      	ldr	r1, [r2, #0]
 8009728:	1850      	adds	r0, r2, r1
 800972a:	42a0      	cmp	r0, r4
 800972c:	d10b      	bne.n	8009746 <_free_r+0x6e>
 800972e:	6820      	ldr	r0, [r4, #0]
 8009730:	1809      	adds	r1, r1, r0
 8009732:	1850      	adds	r0, r2, r1
 8009734:	6011      	str	r1, [r2, #0]
 8009736:	4283      	cmp	r3, r0
 8009738:	d1e0      	bne.n	80096fc <_free_r+0x24>
 800973a:	6818      	ldr	r0, [r3, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	1841      	adds	r1, r0, r1
 8009740:	6011      	str	r1, [r2, #0]
 8009742:	6053      	str	r3, [r2, #4]
 8009744:	e7da      	b.n	80096fc <_free_r+0x24>
 8009746:	42a0      	cmp	r0, r4
 8009748:	d902      	bls.n	8009750 <_free_r+0x78>
 800974a:	230c      	movs	r3, #12
 800974c:	602b      	str	r3, [r5, #0]
 800974e:	e7d5      	b.n	80096fc <_free_r+0x24>
 8009750:	6821      	ldr	r1, [r4, #0]
 8009752:	1860      	adds	r0, r4, r1
 8009754:	4283      	cmp	r3, r0
 8009756:	d103      	bne.n	8009760 <_free_r+0x88>
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	1841      	adds	r1, r0, r1
 800975e:	6021      	str	r1, [r4, #0]
 8009760:	6063      	str	r3, [r4, #4]
 8009762:	6054      	str	r4, [r2, #4]
 8009764:	e7ca      	b.n	80096fc <_free_r+0x24>
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	2000037c 	.word	0x2000037c

0800976c <sbrk_aligned>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	4e0f      	ldr	r6, [pc, #60]	; (80097ac <sbrk_aligned+0x40>)
 8009770:	000d      	movs	r5, r1
 8009772:	6831      	ldr	r1, [r6, #0]
 8009774:	0004      	movs	r4, r0
 8009776:	2900      	cmp	r1, #0
 8009778:	d102      	bne.n	8009780 <sbrk_aligned+0x14>
 800977a:	f000 f9f1 	bl	8009b60 <_sbrk_r>
 800977e:	6030      	str	r0, [r6, #0]
 8009780:	0029      	movs	r1, r5
 8009782:	0020      	movs	r0, r4
 8009784:	f000 f9ec 	bl	8009b60 <_sbrk_r>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d00a      	beq.n	80097a2 <sbrk_aligned+0x36>
 800978c:	2303      	movs	r3, #3
 800978e:	1cc5      	adds	r5, r0, #3
 8009790:	439d      	bics	r5, r3
 8009792:	42a8      	cmp	r0, r5
 8009794:	d007      	beq.n	80097a6 <sbrk_aligned+0x3a>
 8009796:	1a29      	subs	r1, r5, r0
 8009798:	0020      	movs	r0, r4
 800979a:	f000 f9e1 	bl	8009b60 <_sbrk_r>
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	d101      	bne.n	80097a6 <sbrk_aligned+0x3a>
 80097a2:	2501      	movs	r5, #1
 80097a4:	426d      	negs	r5, r5
 80097a6:	0028      	movs	r0, r5
 80097a8:	bd70      	pop	{r4, r5, r6, pc}
 80097aa:	46c0      	nop			; (mov r8, r8)
 80097ac:	20000380 	.word	0x20000380

080097b0 <_malloc_r>:
 80097b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097b2:	2203      	movs	r2, #3
 80097b4:	1ccb      	adds	r3, r1, #3
 80097b6:	4393      	bics	r3, r2
 80097b8:	3308      	adds	r3, #8
 80097ba:	0006      	movs	r6, r0
 80097bc:	001f      	movs	r7, r3
 80097be:	2b0c      	cmp	r3, #12
 80097c0:	d232      	bcs.n	8009828 <_malloc_r+0x78>
 80097c2:	270c      	movs	r7, #12
 80097c4:	42b9      	cmp	r1, r7
 80097c6:	d831      	bhi.n	800982c <_malloc_r+0x7c>
 80097c8:	0030      	movs	r0, r6
 80097ca:	f000 fac5 	bl	8009d58 <__malloc_lock>
 80097ce:	4d32      	ldr	r5, [pc, #200]	; (8009898 <_malloc_r+0xe8>)
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	001c      	movs	r4, r3
 80097d4:	2c00      	cmp	r4, #0
 80097d6:	d12e      	bne.n	8009836 <_malloc_r+0x86>
 80097d8:	0039      	movs	r1, r7
 80097da:	0030      	movs	r0, r6
 80097dc:	f7ff ffc6 	bl	800976c <sbrk_aligned>
 80097e0:	0004      	movs	r4, r0
 80097e2:	1c43      	adds	r3, r0, #1
 80097e4:	d11e      	bne.n	8009824 <_malloc_r+0x74>
 80097e6:	682c      	ldr	r4, [r5, #0]
 80097e8:	0025      	movs	r5, r4
 80097ea:	2d00      	cmp	r5, #0
 80097ec:	d14a      	bne.n	8009884 <_malloc_r+0xd4>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	0029      	movs	r1, r5
 80097f2:	18e3      	adds	r3, r4, r3
 80097f4:	0030      	movs	r0, r6
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	f000 f9b2 	bl	8009b60 <_sbrk_r>
 80097fc:	9b01      	ldr	r3, [sp, #4]
 80097fe:	4283      	cmp	r3, r0
 8009800:	d143      	bne.n	800988a <_malloc_r+0xda>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	3703      	adds	r7, #3
 8009806:	1aff      	subs	r7, r7, r3
 8009808:	2303      	movs	r3, #3
 800980a:	439f      	bics	r7, r3
 800980c:	3708      	adds	r7, #8
 800980e:	2f0c      	cmp	r7, #12
 8009810:	d200      	bcs.n	8009814 <_malloc_r+0x64>
 8009812:	270c      	movs	r7, #12
 8009814:	0039      	movs	r1, r7
 8009816:	0030      	movs	r0, r6
 8009818:	f7ff ffa8 	bl	800976c <sbrk_aligned>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d034      	beq.n	800988a <_malloc_r+0xda>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	19df      	adds	r7, r3, r7
 8009824:	6027      	str	r7, [r4, #0]
 8009826:	e013      	b.n	8009850 <_malloc_r+0xa0>
 8009828:	2b00      	cmp	r3, #0
 800982a:	dacb      	bge.n	80097c4 <_malloc_r+0x14>
 800982c:	230c      	movs	r3, #12
 800982e:	2500      	movs	r5, #0
 8009830:	6033      	str	r3, [r6, #0]
 8009832:	0028      	movs	r0, r5
 8009834:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	1bd1      	subs	r1, r2, r7
 800983a:	d420      	bmi.n	800987e <_malloc_r+0xce>
 800983c:	290b      	cmp	r1, #11
 800983e:	d917      	bls.n	8009870 <_malloc_r+0xc0>
 8009840:	19e2      	adds	r2, r4, r7
 8009842:	6027      	str	r7, [r4, #0]
 8009844:	42a3      	cmp	r3, r4
 8009846:	d111      	bne.n	800986c <_malloc_r+0xbc>
 8009848:	602a      	str	r2, [r5, #0]
 800984a:	6863      	ldr	r3, [r4, #4]
 800984c:	6011      	str	r1, [r2, #0]
 800984e:	6053      	str	r3, [r2, #4]
 8009850:	0030      	movs	r0, r6
 8009852:	0025      	movs	r5, r4
 8009854:	f000 fa88 	bl	8009d68 <__malloc_unlock>
 8009858:	2207      	movs	r2, #7
 800985a:	350b      	adds	r5, #11
 800985c:	1d23      	adds	r3, r4, #4
 800985e:	4395      	bics	r5, r2
 8009860:	1aea      	subs	r2, r5, r3
 8009862:	429d      	cmp	r5, r3
 8009864:	d0e5      	beq.n	8009832 <_malloc_r+0x82>
 8009866:	1b5b      	subs	r3, r3, r5
 8009868:	50a3      	str	r3, [r4, r2]
 800986a:	e7e2      	b.n	8009832 <_malloc_r+0x82>
 800986c:	605a      	str	r2, [r3, #4]
 800986e:	e7ec      	b.n	800984a <_malloc_r+0x9a>
 8009870:	6862      	ldr	r2, [r4, #4]
 8009872:	42a3      	cmp	r3, r4
 8009874:	d101      	bne.n	800987a <_malloc_r+0xca>
 8009876:	602a      	str	r2, [r5, #0]
 8009878:	e7ea      	b.n	8009850 <_malloc_r+0xa0>
 800987a:	605a      	str	r2, [r3, #4]
 800987c:	e7e8      	b.n	8009850 <_malloc_r+0xa0>
 800987e:	0023      	movs	r3, r4
 8009880:	6864      	ldr	r4, [r4, #4]
 8009882:	e7a7      	b.n	80097d4 <_malloc_r+0x24>
 8009884:	002c      	movs	r4, r5
 8009886:	686d      	ldr	r5, [r5, #4]
 8009888:	e7af      	b.n	80097ea <_malloc_r+0x3a>
 800988a:	230c      	movs	r3, #12
 800988c:	0030      	movs	r0, r6
 800988e:	6033      	str	r3, [r6, #0]
 8009890:	f000 fa6a 	bl	8009d68 <__malloc_unlock>
 8009894:	e7cd      	b.n	8009832 <_malloc_r+0x82>
 8009896:	46c0      	nop			; (mov r8, r8)
 8009898:	2000037c 	.word	0x2000037c

0800989c <__sfputc_r>:
 800989c:	6893      	ldr	r3, [r2, #8]
 800989e:	b510      	push	{r4, lr}
 80098a0:	3b01      	subs	r3, #1
 80098a2:	6093      	str	r3, [r2, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	da04      	bge.n	80098b2 <__sfputc_r+0x16>
 80098a8:	6994      	ldr	r4, [r2, #24]
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	db07      	blt.n	80098be <__sfputc_r+0x22>
 80098ae:	290a      	cmp	r1, #10
 80098b0:	d005      	beq.n	80098be <__sfputc_r+0x22>
 80098b2:	6813      	ldr	r3, [r2, #0]
 80098b4:	1c58      	adds	r0, r3, #1
 80098b6:	6010      	str	r0, [r2, #0]
 80098b8:	7019      	strb	r1, [r3, #0]
 80098ba:	0008      	movs	r0, r1
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	f7fe f96f 	bl	8007ba0 <__swbuf_r>
 80098c2:	0001      	movs	r1, r0
 80098c4:	e7f9      	b.n	80098ba <__sfputc_r+0x1e>

080098c6 <__sfputs_r>:
 80098c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c8:	0006      	movs	r6, r0
 80098ca:	000f      	movs	r7, r1
 80098cc:	0014      	movs	r4, r2
 80098ce:	18d5      	adds	r5, r2, r3
 80098d0:	42ac      	cmp	r4, r5
 80098d2:	d101      	bne.n	80098d8 <__sfputs_r+0x12>
 80098d4:	2000      	movs	r0, #0
 80098d6:	e007      	b.n	80098e8 <__sfputs_r+0x22>
 80098d8:	7821      	ldrb	r1, [r4, #0]
 80098da:	003a      	movs	r2, r7
 80098dc:	0030      	movs	r0, r6
 80098de:	f7ff ffdd 	bl	800989c <__sfputc_r>
 80098e2:	3401      	adds	r4, #1
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d1f3      	bne.n	80098d0 <__sfputs_r+0xa>
 80098e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098ec <_vfiprintf_r>:
 80098ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ee:	b0a1      	sub	sp, #132	; 0x84
 80098f0:	0006      	movs	r6, r0
 80098f2:	000c      	movs	r4, r1
 80098f4:	001f      	movs	r7, r3
 80098f6:	9203      	str	r2, [sp, #12]
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d004      	beq.n	8009906 <_vfiprintf_r+0x1a>
 80098fc:	6983      	ldr	r3, [r0, #24]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <_vfiprintf_r+0x1a>
 8009902:	f7ff f9ef 	bl	8008ce4 <__sinit>
 8009906:	4b8e      	ldr	r3, [pc, #568]	; (8009b40 <_vfiprintf_r+0x254>)
 8009908:	429c      	cmp	r4, r3
 800990a:	d11c      	bne.n	8009946 <_vfiprintf_r+0x5a>
 800990c:	6874      	ldr	r4, [r6, #4]
 800990e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009910:	07db      	lsls	r3, r3, #31
 8009912:	d405      	bmi.n	8009920 <_vfiprintf_r+0x34>
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	059b      	lsls	r3, r3, #22
 8009918:	d402      	bmi.n	8009920 <_vfiprintf_r+0x34>
 800991a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800991c:	f7ff fa87 	bl	8008e2e <__retarget_lock_acquire_recursive>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	071b      	lsls	r3, r3, #28
 8009924:	d502      	bpl.n	800992c <_vfiprintf_r+0x40>
 8009926:	6923      	ldr	r3, [r4, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d11d      	bne.n	8009968 <_vfiprintf_r+0x7c>
 800992c:	0021      	movs	r1, r4
 800992e:	0030      	movs	r0, r6
 8009930:	f7fe f98c 	bl	8007c4c <__swsetup_r>
 8009934:	2800      	cmp	r0, #0
 8009936:	d017      	beq.n	8009968 <_vfiprintf_r+0x7c>
 8009938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800993a:	07db      	lsls	r3, r3, #31
 800993c:	d50d      	bpl.n	800995a <_vfiprintf_r+0x6e>
 800993e:	2001      	movs	r0, #1
 8009940:	4240      	negs	r0, r0
 8009942:	b021      	add	sp, #132	; 0x84
 8009944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009946:	4b7f      	ldr	r3, [pc, #508]	; (8009b44 <_vfiprintf_r+0x258>)
 8009948:	429c      	cmp	r4, r3
 800994a:	d101      	bne.n	8009950 <_vfiprintf_r+0x64>
 800994c:	68b4      	ldr	r4, [r6, #8]
 800994e:	e7de      	b.n	800990e <_vfiprintf_r+0x22>
 8009950:	4b7d      	ldr	r3, [pc, #500]	; (8009b48 <_vfiprintf_r+0x25c>)
 8009952:	429c      	cmp	r4, r3
 8009954:	d1db      	bne.n	800990e <_vfiprintf_r+0x22>
 8009956:	68f4      	ldr	r4, [r6, #12]
 8009958:	e7d9      	b.n	800990e <_vfiprintf_r+0x22>
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	059b      	lsls	r3, r3, #22
 800995e:	d4ee      	bmi.n	800993e <_vfiprintf_r+0x52>
 8009960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009962:	f7ff fa65 	bl	8008e30 <__retarget_lock_release_recursive>
 8009966:	e7ea      	b.n	800993e <_vfiprintf_r+0x52>
 8009968:	2300      	movs	r3, #0
 800996a:	ad08      	add	r5, sp, #32
 800996c:	616b      	str	r3, [r5, #20]
 800996e:	3320      	adds	r3, #32
 8009970:	766b      	strb	r3, [r5, #25]
 8009972:	3310      	adds	r3, #16
 8009974:	76ab      	strb	r3, [r5, #26]
 8009976:	9707      	str	r7, [sp, #28]
 8009978:	9f03      	ldr	r7, [sp, #12]
 800997a:	783b      	ldrb	r3, [r7, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <_vfiprintf_r+0x98>
 8009980:	2b25      	cmp	r3, #37	; 0x25
 8009982:	d14e      	bne.n	8009a22 <_vfiprintf_r+0x136>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	1afb      	subs	r3, r7, r3
 8009988:	9305      	str	r3, [sp, #20]
 800998a:	9b03      	ldr	r3, [sp, #12]
 800998c:	429f      	cmp	r7, r3
 800998e:	d00d      	beq.n	80099ac <_vfiprintf_r+0xc0>
 8009990:	9b05      	ldr	r3, [sp, #20]
 8009992:	0021      	movs	r1, r4
 8009994:	0030      	movs	r0, r6
 8009996:	9a03      	ldr	r2, [sp, #12]
 8009998:	f7ff ff95 	bl	80098c6 <__sfputs_r>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d100      	bne.n	80099a2 <_vfiprintf_r+0xb6>
 80099a0:	e0b5      	b.n	8009b0e <_vfiprintf_r+0x222>
 80099a2:	696a      	ldr	r2, [r5, #20]
 80099a4:	9b05      	ldr	r3, [sp, #20]
 80099a6:	4694      	mov	ip, r2
 80099a8:	4463      	add	r3, ip
 80099aa:	616b      	str	r3, [r5, #20]
 80099ac:	783b      	ldrb	r3, [r7, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d100      	bne.n	80099b4 <_vfiprintf_r+0xc8>
 80099b2:	e0ac      	b.n	8009b0e <_vfiprintf_r+0x222>
 80099b4:	2201      	movs	r2, #1
 80099b6:	1c7b      	adds	r3, r7, #1
 80099b8:	9303      	str	r3, [sp, #12]
 80099ba:	2300      	movs	r3, #0
 80099bc:	4252      	negs	r2, r2
 80099be:	606a      	str	r2, [r5, #4]
 80099c0:	a904      	add	r1, sp, #16
 80099c2:	3254      	adds	r2, #84	; 0x54
 80099c4:	1852      	adds	r2, r2, r1
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	60eb      	str	r3, [r5, #12]
 80099ca:	60ab      	str	r3, [r5, #8]
 80099cc:	7013      	strb	r3, [r2, #0]
 80099ce:	65ab      	str	r3, [r5, #88]	; 0x58
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	2205      	movs	r2, #5
 80099d4:	7819      	ldrb	r1, [r3, #0]
 80099d6:	485d      	ldr	r0, [pc, #372]	; (8009b4c <_vfiprintf_r+0x260>)
 80099d8:	f7ff faa2 	bl	8008f20 <memchr>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	1c5f      	adds	r7, r3, #1
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d120      	bne.n	8009a26 <_vfiprintf_r+0x13a>
 80099e4:	682a      	ldr	r2, [r5, #0]
 80099e6:	06d3      	lsls	r3, r2, #27
 80099e8:	d504      	bpl.n	80099f4 <_vfiprintf_r+0x108>
 80099ea:	2353      	movs	r3, #83	; 0x53
 80099ec:	a904      	add	r1, sp, #16
 80099ee:	185b      	adds	r3, r3, r1
 80099f0:	2120      	movs	r1, #32
 80099f2:	7019      	strb	r1, [r3, #0]
 80099f4:	0713      	lsls	r3, r2, #28
 80099f6:	d504      	bpl.n	8009a02 <_vfiprintf_r+0x116>
 80099f8:	2353      	movs	r3, #83	; 0x53
 80099fa:	a904      	add	r1, sp, #16
 80099fc:	185b      	adds	r3, r3, r1
 80099fe:	212b      	movs	r1, #43	; 0x2b
 8009a00:	7019      	strb	r1, [r3, #0]
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b2a      	cmp	r3, #42	; 0x2a
 8009a08:	d016      	beq.n	8009a38 <_vfiprintf_r+0x14c>
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	68eb      	ldr	r3, [r5, #12]
 8009a0e:	9f03      	ldr	r7, [sp, #12]
 8009a10:	783a      	ldrb	r2, [r7, #0]
 8009a12:	1c78      	adds	r0, r7, #1
 8009a14:	3a30      	subs	r2, #48	; 0x30
 8009a16:	4684      	mov	ip, r0
 8009a18:	2a09      	cmp	r2, #9
 8009a1a:	d94f      	bls.n	8009abc <_vfiprintf_r+0x1d0>
 8009a1c:	2900      	cmp	r1, #0
 8009a1e:	d111      	bne.n	8009a44 <_vfiprintf_r+0x158>
 8009a20:	e017      	b.n	8009a52 <_vfiprintf_r+0x166>
 8009a22:	3701      	adds	r7, #1
 8009a24:	e7a9      	b.n	800997a <_vfiprintf_r+0x8e>
 8009a26:	4b49      	ldr	r3, [pc, #292]	; (8009b4c <_vfiprintf_r+0x260>)
 8009a28:	682a      	ldr	r2, [r5, #0]
 8009a2a:	1ac0      	subs	r0, r0, r3
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4083      	lsls	r3, r0
 8009a30:	4313      	orrs	r3, r2
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	9703      	str	r7, [sp, #12]
 8009a36:	e7cb      	b.n	80099d0 <_vfiprintf_r+0xe4>
 8009a38:	9b07      	ldr	r3, [sp, #28]
 8009a3a:	1d19      	adds	r1, r3, #4
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	9107      	str	r1, [sp, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	db01      	blt.n	8009a48 <_vfiprintf_r+0x15c>
 8009a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a46:	e004      	b.n	8009a52 <_vfiprintf_r+0x166>
 8009a48:	425b      	negs	r3, r3
 8009a4a:	60eb      	str	r3, [r5, #12]
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	602b      	str	r3, [r5, #0]
 8009a52:	783b      	ldrb	r3, [r7, #0]
 8009a54:	2b2e      	cmp	r3, #46	; 0x2e
 8009a56:	d10a      	bne.n	8009a6e <_vfiprintf_r+0x182>
 8009a58:	787b      	ldrb	r3, [r7, #1]
 8009a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a5c:	d137      	bne.n	8009ace <_vfiprintf_r+0x1e2>
 8009a5e:	9b07      	ldr	r3, [sp, #28]
 8009a60:	3702      	adds	r7, #2
 8009a62:	1d1a      	adds	r2, r3, #4
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	9207      	str	r2, [sp, #28]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	db2d      	blt.n	8009ac8 <_vfiprintf_r+0x1dc>
 8009a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6e:	2203      	movs	r2, #3
 8009a70:	7839      	ldrb	r1, [r7, #0]
 8009a72:	4837      	ldr	r0, [pc, #220]	; (8009b50 <_vfiprintf_r+0x264>)
 8009a74:	f7ff fa54 	bl	8008f20 <memchr>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d007      	beq.n	8009a8c <_vfiprintf_r+0x1a0>
 8009a7c:	4b34      	ldr	r3, [pc, #208]	; (8009b50 <_vfiprintf_r+0x264>)
 8009a7e:	682a      	ldr	r2, [r5, #0]
 8009a80:	1ac0      	subs	r0, r0, r3
 8009a82:	2340      	movs	r3, #64	; 0x40
 8009a84:	4083      	lsls	r3, r0
 8009a86:	4313      	orrs	r3, r2
 8009a88:	3701      	adds	r7, #1
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	7839      	ldrb	r1, [r7, #0]
 8009a8e:	1c7b      	adds	r3, r7, #1
 8009a90:	2206      	movs	r2, #6
 8009a92:	4830      	ldr	r0, [pc, #192]	; (8009b54 <_vfiprintf_r+0x268>)
 8009a94:	9303      	str	r3, [sp, #12]
 8009a96:	7629      	strb	r1, [r5, #24]
 8009a98:	f7ff fa42 	bl	8008f20 <memchr>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d045      	beq.n	8009b2c <_vfiprintf_r+0x240>
 8009aa0:	4b2d      	ldr	r3, [pc, #180]	; (8009b58 <_vfiprintf_r+0x26c>)
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d127      	bne.n	8009af6 <_vfiprintf_r+0x20a>
 8009aa6:	2207      	movs	r2, #7
 8009aa8:	9b07      	ldr	r3, [sp, #28]
 8009aaa:	3307      	adds	r3, #7
 8009aac:	4393      	bics	r3, r2
 8009aae:	3308      	adds	r3, #8
 8009ab0:	9307      	str	r3, [sp, #28]
 8009ab2:	696b      	ldr	r3, [r5, #20]
 8009ab4:	9a04      	ldr	r2, [sp, #16]
 8009ab6:	189b      	adds	r3, r3, r2
 8009ab8:	616b      	str	r3, [r5, #20]
 8009aba:	e75d      	b.n	8009978 <_vfiprintf_r+0x8c>
 8009abc:	210a      	movs	r1, #10
 8009abe:	434b      	muls	r3, r1
 8009ac0:	4667      	mov	r7, ip
 8009ac2:	189b      	adds	r3, r3, r2
 8009ac4:	3909      	subs	r1, #9
 8009ac6:	e7a3      	b.n	8009a10 <_vfiprintf_r+0x124>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	425b      	negs	r3, r3
 8009acc:	e7ce      	b.n	8009a6c <_vfiprintf_r+0x180>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	001a      	movs	r2, r3
 8009ad2:	3701      	adds	r7, #1
 8009ad4:	606b      	str	r3, [r5, #4]
 8009ad6:	7839      	ldrb	r1, [r7, #0]
 8009ad8:	1c78      	adds	r0, r7, #1
 8009ada:	3930      	subs	r1, #48	; 0x30
 8009adc:	4684      	mov	ip, r0
 8009ade:	2909      	cmp	r1, #9
 8009ae0:	d903      	bls.n	8009aea <_vfiprintf_r+0x1fe>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0c3      	beq.n	8009a6e <_vfiprintf_r+0x182>
 8009ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae8:	e7c1      	b.n	8009a6e <_vfiprintf_r+0x182>
 8009aea:	230a      	movs	r3, #10
 8009aec:	435a      	muls	r2, r3
 8009aee:	4667      	mov	r7, ip
 8009af0:	1852      	adds	r2, r2, r1
 8009af2:	3b09      	subs	r3, #9
 8009af4:	e7ef      	b.n	8009ad6 <_vfiprintf_r+0x1ea>
 8009af6:	ab07      	add	r3, sp, #28
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	0022      	movs	r2, r4
 8009afc:	0029      	movs	r1, r5
 8009afe:	0030      	movs	r0, r6
 8009b00:	4b16      	ldr	r3, [pc, #88]	; (8009b5c <_vfiprintf_r+0x270>)
 8009b02:	f7fd fbf3 	bl	80072ec <_printf_float>
 8009b06:	9004      	str	r0, [sp, #16]
 8009b08:	9b04      	ldr	r3, [sp, #16]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	d1d1      	bne.n	8009ab2 <_vfiprintf_r+0x1c6>
 8009b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b10:	07db      	lsls	r3, r3, #31
 8009b12:	d405      	bmi.n	8009b20 <_vfiprintf_r+0x234>
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	059b      	lsls	r3, r3, #22
 8009b18:	d402      	bmi.n	8009b20 <_vfiprintf_r+0x234>
 8009b1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b1c:	f7ff f988 	bl	8008e30 <__retarget_lock_release_recursive>
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	065b      	lsls	r3, r3, #25
 8009b24:	d500      	bpl.n	8009b28 <_vfiprintf_r+0x23c>
 8009b26:	e70a      	b.n	800993e <_vfiprintf_r+0x52>
 8009b28:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b2a:	e70a      	b.n	8009942 <_vfiprintf_r+0x56>
 8009b2c:	ab07      	add	r3, sp, #28
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	0022      	movs	r2, r4
 8009b32:	0029      	movs	r1, r5
 8009b34:	0030      	movs	r0, r6
 8009b36:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <_vfiprintf_r+0x270>)
 8009b38:	f7fd fe8a 	bl	8007850 <_printf_i>
 8009b3c:	e7e3      	b.n	8009b06 <_vfiprintf_r+0x21a>
 8009b3e:	46c0      	nop			; (mov r8, r8)
 8009b40:	0800a0c0 	.word	0x0800a0c0
 8009b44:	0800a0e0 	.word	0x0800a0e0
 8009b48:	0800a0a0 	.word	0x0800a0a0
 8009b4c:	0800a25c 	.word	0x0800a25c
 8009b50:	0800a262 	.word	0x0800a262
 8009b54:	0800a266 	.word	0x0800a266
 8009b58:	080072ed 	.word	0x080072ed
 8009b5c:	080098c7 	.word	0x080098c7

08009b60 <_sbrk_r>:
 8009b60:	2300      	movs	r3, #0
 8009b62:	b570      	push	{r4, r5, r6, lr}
 8009b64:	4d06      	ldr	r5, [pc, #24]	; (8009b80 <_sbrk_r+0x20>)
 8009b66:	0004      	movs	r4, r0
 8009b68:	0008      	movs	r0, r1
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	f7fa f82e 	bl	8003bcc <_sbrk>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d103      	bne.n	8009b7c <_sbrk_r+0x1c>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d000      	beq.n	8009b7c <_sbrk_r+0x1c>
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	bd70      	pop	{r4, r5, r6, pc}
 8009b7e:	46c0      	nop			; (mov r8, r8)
 8009b80:	20000384 	.word	0x20000384

08009b84 <__sread>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	000c      	movs	r4, r1
 8009b88:	250e      	movs	r5, #14
 8009b8a:	5f49      	ldrsh	r1, [r1, r5]
 8009b8c:	f000 f8f4 	bl	8009d78 <_read_r>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	db03      	blt.n	8009b9c <__sread+0x18>
 8009b94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009b96:	181b      	adds	r3, r3, r0
 8009b98:	6563      	str	r3, [r4, #84]	; 0x54
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	4a02      	ldr	r2, [pc, #8]	; (8009ba8 <__sread+0x24>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	e7f9      	b.n	8009b9a <__sread+0x16>
 8009ba6:	46c0      	nop			; (mov r8, r8)
 8009ba8:	ffffefff 	.word	0xffffefff

08009bac <__swrite>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	001f      	movs	r7, r3
 8009bb0:	898b      	ldrh	r3, [r1, #12]
 8009bb2:	0005      	movs	r5, r0
 8009bb4:	000c      	movs	r4, r1
 8009bb6:	0016      	movs	r6, r2
 8009bb8:	05db      	lsls	r3, r3, #23
 8009bba:	d505      	bpl.n	8009bc8 <__swrite+0x1c>
 8009bbc:	230e      	movs	r3, #14
 8009bbe:	5ec9      	ldrsh	r1, [r1, r3]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	f000 f8a2 	bl	8009d0c <_lseek_r>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	4a05      	ldr	r2, [pc, #20]	; (8009be0 <__swrite+0x34>)
 8009bcc:	0028      	movs	r0, r5
 8009bce:	4013      	ands	r3, r2
 8009bd0:	81a3      	strh	r3, [r4, #12]
 8009bd2:	0032      	movs	r2, r6
 8009bd4:	230e      	movs	r3, #14
 8009bd6:	5ee1      	ldrsh	r1, [r4, r3]
 8009bd8:	003b      	movs	r3, r7
 8009bda:	f000 f81f 	bl	8009c1c <_write_r>
 8009bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be0:	ffffefff 	.word	0xffffefff

08009be4 <__sseek>:
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	000c      	movs	r4, r1
 8009be8:	250e      	movs	r5, #14
 8009bea:	5f49      	ldrsh	r1, [r1, r5]
 8009bec:	f000 f88e 	bl	8009d0c <_lseek_r>
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	1c42      	adds	r2, r0, #1
 8009bf4:	d103      	bne.n	8009bfe <__sseek+0x1a>
 8009bf6:	4a05      	ldr	r2, [pc, #20]	; (8009c0c <__sseek+0x28>)
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	81a3      	strh	r3, [r4, #12]
 8009bfc:	bd70      	pop	{r4, r5, r6, pc}
 8009bfe:	2280      	movs	r2, #128	; 0x80
 8009c00:	0152      	lsls	r2, r2, #5
 8009c02:	4313      	orrs	r3, r2
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	6560      	str	r0, [r4, #84]	; 0x54
 8009c08:	e7f8      	b.n	8009bfc <__sseek+0x18>
 8009c0a:	46c0      	nop			; (mov r8, r8)
 8009c0c:	ffffefff 	.word	0xffffefff

08009c10 <__sclose>:
 8009c10:	b510      	push	{r4, lr}
 8009c12:	230e      	movs	r3, #14
 8009c14:	5ec9      	ldrsh	r1, [r1, r3]
 8009c16:	f000 f833 	bl	8009c80 <_close_r>
 8009c1a:	bd10      	pop	{r4, pc}

08009c1c <_write_r>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	0004      	movs	r4, r0
 8009c20:	0008      	movs	r0, r1
 8009c22:	0011      	movs	r1, r2
 8009c24:	001a      	movs	r2, r3
 8009c26:	2300      	movs	r3, #0
 8009c28:	4d05      	ldr	r5, [pc, #20]	; (8009c40 <_write_r+0x24>)
 8009c2a:	602b      	str	r3, [r5, #0]
 8009c2c:	f7f9 ff8f 	bl	8003b4e <_write>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d103      	bne.n	8009c3c <_write_r+0x20>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d000      	beq.n	8009c3c <_write_r+0x20>
 8009c3a:	6023      	str	r3, [r4, #0]
 8009c3c:	bd70      	pop	{r4, r5, r6, pc}
 8009c3e:	46c0      	nop			; (mov r8, r8)
 8009c40:	20000384 	.word	0x20000384

08009c44 <__assert_func>:
 8009c44:	b530      	push	{r4, r5, lr}
 8009c46:	0014      	movs	r4, r2
 8009c48:	001a      	movs	r2, r3
 8009c4a:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <__assert_func+0x2c>)
 8009c4c:	0005      	movs	r5, r0
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	b085      	sub	sp, #20
 8009c52:	68d8      	ldr	r0, [r3, #12]
 8009c54:	4b07      	ldr	r3, [pc, #28]	; (8009c74 <__assert_func+0x30>)
 8009c56:	2c00      	cmp	r4, #0
 8009c58:	d101      	bne.n	8009c5e <__assert_func+0x1a>
 8009c5a:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <__assert_func+0x34>)
 8009c5c:	001c      	movs	r4, r3
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	9100      	str	r1, [sp, #0]
 8009c62:	002b      	movs	r3, r5
 8009c64:	4905      	ldr	r1, [pc, #20]	; (8009c7c <__assert_func+0x38>)
 8009c66:	9402      	str	r4, [sp, #8]
 8009c68:	f000 f81c 	bl	8009ca4 <fiprintf>
 8009c6c:	f000 f8a5 	bl	8009dba <abort>
 8009c70:	2000000c 	.word	0x2000000c
 8009c74:	0800a26d 	.word	0x0800a26d
 8009c78:	0800a2a8 	.word	0x0800a2a8
 8009c7c:	0800a27a 	.word	0x0800a27a

08009c80 <_close_r>:
 8009c80:	2300      	movs	r3, #0
 8009c82:	b570      	push	{r4, r5, r6, lr}
 8009c84:	4d06      	ldr	r5, [pc, #24]	; (8009ca0 <_close_r+0x20>)
 8009c86:	0004      	movs	r4, r0
 8009c88:	0008      	movs	r0, r1
 8009c8a:	602b      	str	r3, [r5, #0]
 8009c8c:	f000 f8e6 	bl	8009e5c <_close>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	d103      	bne.n	8009c9c <_close_r+0x1c>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d000      	beq.n	8009c9c <_close_r+0x1c>
 8009c9a:	6023      	str	r3, [r4, #0]
 8009c9c:	bd70      	pop	{r4, r5, r6, pc}
 8009c9e:	46c0      	nop			; (mov r8, r8)
 8009ca0:	20000384 	.word	0x20000384

08009ca4 <fiprintf>:
 8009ca4:	b40e      	push	{r1, r2, r3}
 8009ca6:	b503      	push	{r0, r1, lr}
 8009ca8:	0001      	movs	r1, r0
 8009caa:	ab03      	add	r3, sp, #12
 8009cac:	4804      	ldr	r0, [pc, #16]	; (8009cc0 <fiprintf+0x1c>)
 8009cae:	cb04      	ldmia	r3!, {r2}
 8009cb0:	6800      	ldr	r0, [r0, #0]
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	f7ff fe1a 	bl	80098ec <_vfiprintf_r>
 8009cb8:	b002      	add	sp, #8
 8009cba:	bc08      	pop	{r3}
 8009cbc:	b003      	add	sp, #12
 8009cbe:	4718      	bx	r3
 8009cc0:	2000000c 	.word	0x2000000c

08009cc4 <_fstat_r>:
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	b570      	push	{r4, r5, r6, lr}
 8009cc8:	4d06      	ldr	r5, [pc, #24]	; (8009ce4 <_fstat_r+0x20>)
 8009cca:	0004      	movs	r4, r0
 8009ccc:	0008      	movs	r0, r1
 8009cce:	0011      	movs	r1, r2
 8009cd0:	602b      	str	r3, [r5, #0]
 8009cd2:	f7f9 ff58 	bl	8003b86 <_fstat>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	d103      	bne.n	8009ce2 <_fstat_r+0x1e>
 8009cda:	682b      	ldr	r3, [r5, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d000      	beq.n	8009ce2 <_fstat_r+0x1e>
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}
 8009ce4:	20000384 	.word	0x20000384

08009ce8 <_isatty_r>:
 8009ce8:	2300      	movs	r3, #0
 8009cea:	b570      	push	{r4, r5, r6, lr}
 8009cec:	4d06      	ldr	r5, [pc, #24]	; (8009d08 <_isatty_r+0x20>)
 8009cee:	0004      	movs	r4, r0
 8009cf0:	0008      	movs	r0, r1
 8009cf2:	602b      	str	r3, [r5, #0]
 8009cf4:	f7f9 ff55 	bl	8003ba2 <_isatty>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d103      	bne.n	8009d04 <_isatty_r+0x1c>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d000      	beq.n	8009d04 <_isatty_r+0x1c>
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	bd70      	pop	{r4, r5, r6, pc}
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	20000384 	.word	0x20000384

08009d0c <_lseek_r>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	0004      	movs	r4, r0
 8009d10:	0008      	movs	r0, r1
 8009d12:	0011      	movs	r1, r2
 8009d14:	001a      	movs	r2, r3
 8009d16:	2300      	movs	r3, #0
 8009d18:	4d05      	ldr	r5, [pc, #20]	; (8009d30 <_lseek_r+0x24>)
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	f7f9 ff4a 	bl	8003bb4 <_lseek>
 8009d20:	1c43      	adds	r3, r0, #1
 8009d22:	d103      	bne.n	8009d2c <_lseek_r+0x20>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d000      	beq.n	8009d2c <_lseek_r+0x20>
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	bd70      	pop	{r4, r5, r6, pc}
 8009d2e:	46c0      	nop			; (mov r8, r8)
 8009d30:	20000384 	.word	0x20000384

08009d34 <__ascii_mbtowc>:
 8009d34:	b082      	sub	sp, #8
 8009d36:	2900      	cmp	r1, #0
 8009d38:	d100      	bne.n	8009d3c <__ascii_mbtowc+0x8>
 8009d3a:	a901      	add	r1, sp, #4
 8009d3c:	1e10      	subs	r0, r2, #0
 8009d3e:	d006      	beq.n	8009d4e <__ascii_mbtowc+0x1a>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d006      	beq.n	8009d52 <__ascii_mbtowc+0x1e>
 8009d44:	7813      	ldrb	r3, [r2, #0]
 8009d46:	600b      	str	r3, [r1, #0]
 8009d48:	7810      	ldrb	r0, [r2, #0]
 8009d4a:	1e43      	subs	r3, r0, #1
 8009d4c:	4198      	sbcs	r0, r3
 8009d4e:	b002      	add	sp, #8
 8009d50:	4770      	bx	lr
 8009d52:	2002      	movs	r0, #2
 8009d54:	4240      	negs	r0, r0
 8009d56:	e7fa      	b.n	8009d4e <__ascii_mbtowc+0x1a>

08009d58 <__malloc_lock>:
 8009d58:	b510      	push	{r4, lr}
 8009d5a:	4802      	ldr	r0, [pc, #8]	; (8009d64 <__malloc_lock+0xc>)
 8009d5c:	f7ff f867 	bl	8008e2e <__retarget_lock_acquire_recursive>
 8009d60:	bd10      	pop	{r4, pc}
 8009d62:	46c0      	nop			; (mov r8, r8)
 8009d64:	20000378 	.word	0x20000378

08009d68 <__malloc_unlock>:
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	4802      	ldr	r0, [pc, #8]	; (8009d74 <__malloc_unlock+0xc>)
 8009d6c:	f7ff f860 	bl	8008e30 <__retarget_lock_release_recursive>
 8009d70:	bd10      	pop	{r4, pc}
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	20000378 	.word	0x20000378

08009d78 <_read_r>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	0004      	movs	r4, r0
 8009d7c:	0008      	movs	r0, r1
 8009d7e:	0011      	movs	r1, r2
 8009d80:	001a      	movs	r2, r3
 8009d82:	2300      	movs	r3, #0
 8009d84:	4d05      	ldr	r5, [pc, #20]	; (8009d9c <_read_r+0x24>)
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	f7f9 fec4 	bl	8003b14 <_read>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d103      	bne.n	8009d98 <_read_r+0x20>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d000      	beq.n	8009d98 <_read_r+0x20>
 8009d96:	6023      	str	r3, [r4, #0]
 8009d98:	bd70      	pop	{r4, r5, r6, pc}
 8009d9a:	46c0      	nop			; (mov r8, r8)
 8009d9c:	20000384 	.word	0x20000384

08009da0 <__ascii_wctomb>:
 8009da0:	0003      	movs	r3, r0
 8009da2:	1e08      	subs	r0, r1, #0
 8009da4:	d005      	beq.n	8009db2 <__ascii_wctomb+0x12>
 8009da6:	2aff      	cmp	r2, #255	; 0xff
 8009da8:	d904      	bls.n	8009db4 <__ascii_wctomb+0x14>
 8009daa:	228a      	movs	r2, #138	; 0x8a
 8009dac:	2001      	movs	r0, #1
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	4240      	negs	r0, r0
 8009db2:	4770      	bx	lr
 8009db4:	2001      	movs	r0, #1
 8009db6:	700a      	strb	r2, [r1, #0]
 8009db8:	e7fb      	b.n	8009db2 <__ascii_wctomb+0x12>

08009dba <abort>:
 8009dba:	2006      	movs	r0, #6
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	f000 f82d 	bl	8009e1c <raise>
 8009dc2:	2001      	movs	r0, #1
 8009dc4:	f7f9 fe9a 	bl	8003afc <_exit>

08009dc8 <_raise_r>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	0004      	movs	r4, r0
 8009dcc:	000d      	movs	r5, r1
 8009dce:	291f      	cmp	r1, #31
 8009dd0:	d904      	bls.n	8009ddc <_raise_r+0x14>
 8009dd2:	2316      	movs	r3, #22
 8009dd4:	6003      	str	r3, [r0, #0]
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	4240      	negs	r0, r0
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d004      	beq.n	8009dec <_raise_r+0x24>
 8009de2:	008a      	lsls	r2, r1, #2
 8009de4:	189b      	adds	r3, r3, r2
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	2a00      	cmp	r2, #0
 8009dea:	d108      	bne.n	8009dfe <_raise_r+0x36>
 8009dec:	0020      	movs	r0, r4
 8009dee:	f000 f831 	bl	8009e54 <_getpid_r>
 8009df2:	002a      	movs	r2, r5
 8009df4:	0001      	movs	r1, r0
 8009df6:	0020      	movs	r0, r4
 8009df8:	f000 f81a 	bl	8009e30 <_kill_r>
 8009dfc:	e7ed      	b.n	8009dda <_raise_r+0x12>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	2a01      	cmp	r2, #1
 8009e02:	d0ea      	beq.n	8009dda <_raise_r+0x12>
 8009e04:	1c51      	adds	r1, r2, #1
 8009e06:	d103      	bne.n	8009e10 <_raise_r+0x48>
 8009e08:	2316      	movs	r3, #22
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	e7e4      	b.n	8009dda <_raise_r+0x12>
 8009e10:	2400      	movs	r4, #0
 8009e12:	0028      	movs	r0, r5
 8009e14:	601c      	str	r4, [r3, #0]
 8009e16:	4790      	blx	r2
 8009e18:	0020      	movs	r0, r4
 8009e1a:	e7de      	b.n	8009dda <_raise_r+0x12>

08009e1c <raise>:
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	4b03      	ldr	r3, [pc, #12]	; (8009e2c <raise+0x10>)
 8009e20:	0001      	movs	r1, r0
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	f7ff ffd0 	bl	8009dc8 <_raise_r>
 8009e28:	bd10      	pop	{r4, pc}
 8009e2a:	46c0      	nop			; (mov r8, r8)
 8009e2c:	2000000c 	.word	0x2000000c

08009e30 <_kill_r>:
 8009e30:	2300      	movs	r3, #0
 8009e32:	b570      	push	{r4, r5, r6, lr}
 8009e34:	4d06      	ldr	r5, [pc, #24]	; (8009e50 <_kill_r+0x20>)
 8009e36:	0004      	movs	r4, r0
 8009e38:	0008      	movs	r0, r1
 8009e3a:	0011      	movs	r1, r2
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	f7f9 fe4d 	bl	8003adc <_kill>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d103      	bne.n	8009e4e <_kill_r+0x1e>
 8009e46:	682b      	ldr	r3, [r5, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d000      	beq.n	8009e4e <_kill_r+0x1e>
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	20000384 	.word	0x20000384

08009e54 <_getpid_r>:
 8009e54:	b510      	push	{r4, lr}
 8009e56:	f7f9 fe3b 	bl	8003ad0 <_getpid>
 8009e5a:	bd10      	pop	{r4, pc}

08009e5c <_close>:
 8009e5c:	2258      	movs	r2, #88	; 0x58
 8009e5e:	2001      	movs	r0, #1
 8009e60:	4b01      	ldr	r3, [pc, #4]	; (8009e68 <_close+0xc>)
 8009e62:	4240      	negs	r0, r0
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	4770      	bx	lr
 8009e68:	20000384 	.word	0x20000384

08009e6c <_init>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	46c0      	nop			; (mov r8, r8)
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr

08009e78 <_fini>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr
